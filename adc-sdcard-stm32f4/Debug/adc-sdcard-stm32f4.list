
adc-sdcard-stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  08014888  08014888  00024888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801542c  0801542c  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  0801542c  0801542c  0002542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015434  08015434  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015434  08015434  00025434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801543c  0801543c  0002543c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08015444  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000060d8  20000360  080157a4  00030360  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006438  080157a4  00036438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037728  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000723d  00000000  00000000  00067ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002118  00000000  00000000  0006ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb8  00000000  00000000  00070e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f89c  00000000  00000000  00072cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cdbf  00000000  00000000  000a2564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f094e  00000000  00000000  000cf323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bfc71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3ac  00000000  00000000  001bfcc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801486c 	.word	0x0801486c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0801486c 	.word	0x0801486c

080001d0 <setjmp>:
 80001d0:	46ec      	mov	ip, sp
 80001d2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d6:	f04f 0000 	mov.w	r0, #0
 80001da:	4770      	bx	lr

080001dc <longjmp>:
 80001dc:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001e0:	46e5      	mov	sp, ip
 80001e2:	0008      	movs	r0, r1
 80001e4:	bf08      	it	eq
 80001e6:	2001      	moveq	r0, #1
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr
 80001fc:	0000      	movs	r0, r0
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm>:
 *      Author: daniel
 */

#include <ADC.h>

ADCManager::ADCManager(ADC_HandleTypeDef *hadc_, uint32_t flash_offset_) :
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
		adc_handle(hadc_), flash_offset(flash_offset_) {
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm+0x48>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001038:	829a      	strh	r2, [r3, #20]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm+0x4c>)
 800103e:	619a      	str	r2, [r3, #24]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm+0x50>)
 8001044:	61da      	str	r2, [r3, #28]
	// Recebe valores da flash
//	readFromMemory();
}
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	08014ae0 	.word	0x08014ae0
 8001058:	404e147b 	.word	0x404e147b
 800105c:	3e4ccccd 	.word	0x3e4ccccd

08001060 <_ZN10ADCManagerD1Ev>:

ADCManager::~ADCManager() {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <_ZN10ADCManagerD1Ev+0x1c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	08014ae0 	.word	0x08014ae0

08001080 <_ZN10ADCManagerD0Ev>:
ADCManager::~ADCManager() {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
}
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe9 	bl	8001060 <_ZN10ADCManagerD1Ev>
 800108e:	2124      	movs	r1, #36	; 0x24
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f00e fe67 	bl	800fd64 <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN10ADCManager7convertEv>:

/* Método para converter leitura e armazenar em variável da classe
 * Esse método deve ser chamado antes de qualquer outro que envolva o uso da leitura
 * i.e getVolts, getFiltered
 */
void ADCManager::convert() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc_handle);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 ff65 	bl	8002f7c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc_handle, 1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 f831 	bl	8003120 <HAL_ADC_PollForConversion>
	adc_last_raw_value = HAL_ADC_GetValue(adc_handle);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 f8b7 	bl	8003236 <HAL_ADC_GetValue>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	819a      	strh	r2, [r3, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN10ADCManager6filterEv>:

	HAL_ADC_ConfigChannel(adc_handle, &sConfig);
}

// Aplica filtro
void ADCManager::filter() {
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	static uint16_t last_conversion = 0;
	uint16_t current_conversion = adc_last_raw_value;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	899b      	ldrh	r3, [r3, #12]
 80010e4:	81fb      	strh	r3, [r7, #14]
	float filtered = alpha * (float) current_conversion
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	ed93 7a07 	vldr	s14, [r3, #28]
 80010ec:	89fb      	ldrh	r3, [r7, #14]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f6:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - alpha) * (float) last_conversion;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001104:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_ZN10ADCManager6filterEv+0x78>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001114:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float filtered = alpha * (float) current_conversion
 8001118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111c:	edc7 7a02 	vstr	s15, [r7, #8]
	adc_last_filtered_value = (uint16_t) filtered;
 8001120:	edd7 7a02 	vldr	s15, [r7, #8]
 8001124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001128:	ee17 3a90 	vmov	r3, s15
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	81da      	strh	r2, [r3, #14]
	last_conversion = (uint16_t) filtered;
 8001132:	edd7 7a02 	vldr	s15, [r7, #8]
 8001136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113a:	ee17 3a90 	vmov	r3, s15
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <_ZN10ADCManager6filterEv+0x78>)
 8001142:	801a      	strh	r2, [r3, #0]

}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	2000037c 	.word	0x2000037c

08001154 <_ZN10ADCManager8getVoltsEv>:

// recebe saida em volts
float ADCManager::getVolts() {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

//	return (adc_last_raw_value * factor);
	return (adc_last_filtered_value * factor);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	89db      	ldrh	r3, [r3, #14]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a04 	vldr	s15, [r3, #16]
 800116e:	ee67 7a27 	vmul.f32	s15, s14, s15
//		return (adc_last_filtered_value * VMAX) / RESOLUTION;
}
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_ZN10ADCManager11getFilteredEv>:

uint16_t ADCManager::getRaw() {
	return adc_last_raw_value;
}

uint16_t ADCManager::getFiltered() {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	return adc_last_filtered_value;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	89db      	ldrh	r3, [r3, #14]
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_ZN6SDCARDC1Ev>:
 *      Author: daniel
 */

#include <SDCARD.h>

SDCARD::SDCARD() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <_ZN6SDCARDC1Ev+0x34>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80011ac:	3338      	adds	r3, #56	; 0x38
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
	fs = { 0 };
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3308      	adds	r3, #8
 80011b6:	f241 0238 	movw	r2, #4152	; 0x1038
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f00e fe5b 	bl	800fe78 <memset>
}
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	08014af0 	.word	0x08014af0

080011d0 <_ZN6SDCARDD1Ev>:

SDCARD::~SDCARD() {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <_ZN6SDCARDD1Ev+0x1c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]

}
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	08014af0 	.word	0x08014af0

080011f0 <_ZN6SDCARDD0Ev>:
SDCARD::~SDCARD() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
}
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ffe9 	bl	80011d0 <_ZN6SDCARDD1Ev>
 80011fe:	f242 01b0 	movw	r1, #8368	; 0x20b0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f00e fdae 	bl	800fd64 <_ZdlPvj>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <_ZN6SDCARD11count_filesEPKcRi>:
FRESULT SDCARD::delete_file(const char *path) {
	fsres = f_unlink(path);
	return fsres;
}

FRESULT SDCARD::count_files(const char *path_dir, int &count) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b092      	sub	sp, #72	; 0x48
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	DIR dir;
	static FILINFO fno;
	numFiles = 0;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001226:	3338      	adds	r3, #56	; 0x38
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
	fsres = f_opendir(&dir, path_dir); /* Abre diretorio */
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	4618      	mov	r0, r3
 8001234:	f00d fd2e 	bl	800ec94 <f_opendir>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001242:	3330      	adds	r3, #48	; 0x30
 8001244:	701a      	strb	r2, [r3, #0]
	if (fsres == FR_OK) {
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800124c:	3330      	adds	r3, #48	; 0x30
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d12a      	bne.n	80012aa <_ZN6SDCARD11count_filesEPKcRi+0x96>
		for (;;) {
			fsres = f_readdir(&dir, &fno); /* Ler um item do diretorio */
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	491b      	ldr	r1, [pc, #108]	; (80012c8 <_ZN6SDCARD11count_filesEPKcRi+0xb4>)
 800125a:	4618      	mov	r0, r3
 800125c:	f00d fdb3 	bl	800edc6 <f_readdir>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800126a:	3330      	adds	r3, #48	; 0x30
 800126c:	701a      	strb	r2, [r3, #0]
			if (fsres != FR_OK || fno.fname[0] == 0) {
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001274:	3330      	adds	r3, #48	; 0x30
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10f      	bne.n	800129c <_ZN6SDCARD11count_filesEPKcRi+0x88>
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <_ZN6SDCARD11count_filesEPKcRi+0xb4>)
 800127e:	7d9b      	ldrb	r3, [r3, #22]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00b      	beq.n	800129c <_ZN6SDCARD11count_filesEPKcRi+0x88>
				break;
			} else {
				numFiles++;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800128a:	3338      	adds	r3, #56	; 0x38
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001296:	3338      	adds	r3, #56	; 0x38
 8001298:	601a      	str	r2, [r3, #0]
			fsres = f_readdir(&dir, &fno); /* Ler um item do diretorio */
 800129a:	e7db      	b.n	8001254 <_ZN6SDCARD11count_filesEPKcRi+0x40>
//				break;
			}
		}
		count = numFiles;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80012a2:	3338      	adds	r3, #56	; 0x38
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
	}
	f_closedir(&dir);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4618      	mov	r0, r3
 80012b0:	f00d fd63 	bl	800ed7a <f_closedir>
	return fsres; /* Retorna fsres */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80012ba:	3330      	adds	r3, #48	; 0x30
 80012bc:	781b      	ldrb	r3, [r3, #0]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3748      	adds	r7, #72	; 0x48
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000380 	.word	0x20000380

080012cc <_ZN6SDCARD10write_fileEPKcS1_j>:
	}
	f_closedir(&dir);
	return fsres; /* Retorna fsres */
}

FRESULT SDCARD::write_file(const char *file_name, const char *text,unsigned int str_len) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]

	fsres = f_open(&arquivo, file_name, FA_WRITE | FA_CREATE_ALWAYS);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80012e0:	220a      	movs	r2, #10
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00d f8cd 	bl	800e484 <f_open>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80012f4:	3330      	adds	r3, #48	; 0x30
 80012f6:	701a      	strb	r2, [r3, #0]

	if (fsres == FR_NO_PATH) { // Cria pasta
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80012fe:	3330      	adds	r3, #48	; 0x30
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b05      	cmp	r3, #5
 8001304:	d125      	bne.n	8001352 <_ZN6SDCARD10write_fileEPKcS1_j+0x86>
		fsres = f_mkdir("LOGS");
 8001306:	482b      	ldr	r0, [pc, #172]	; (80013b4 <_ZN6SDCARD10write_fileEPKcS1_j+0xe8>)
 8001308:	f00d fd9a 	bl	800ee40 <f_mkdir>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001316:	3330      	adds	r3, #48	; 0x30
 8001318:	701a      	strb	r2, [r3, #0]
		if (fsres != FR_OK)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001320:	3330      	adds	r3, #48	; 0x30
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <_ZN6SDCARD10write_fileEPKcS1_j+0x68>
			return fsres;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800132e:	3330      	adds	r3, #48	; 0x30
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	e03b      	b.n	80013ac <_ZN6SDCARD10write_fileEPKcS1_j+0xe0>
		else
			fsres = f_open(&arquivo, file_name, FA_WRITE | FA_CREATE_ALWAYS);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800133a:	220a      	movs	r2, #10
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	4618      	mov	r0, r3
 8001340:	f00d f8a0 	bl	800e484 <f_open>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800134e:	3330      	adds	r3, #48	; 0x30
 8001350:	701a      	strb	r2, [r3, #0]

	}

	fsres = f_write(&arquivo, text, str_len, &test_bytes);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f503 5082 	add.w	r0, r3, #4160	; 0x1040
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800135e:	3334      	adds	r3, #52	; 0x34
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f00d fa5a 	bl	800e81c <f_write>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001372:	3330      	adds	r3, #48	; 0x30
 8001374:	701a      	strb	r2, [r3, #0]

	if (fsres != FR_OK) { // avaliar isso aqui
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800137c:	3330      	adds	r3, #48	; 0x30
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00b      	beq.n	800139c <_ZN6SDCARD10write_fileEPKcS1_j+0xd0>
		f_close(&arquivo);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800138a:	4618      	mov	r0, r3
 800138c:	f00d fc58 	bl	800ec40 <f_close>
		return fsres;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001396:	3330      	adds	r3, #48	; 0x30
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	e007      	b.n	80013ac <_ZN6SDCARD10write_fileEPKcS1_j+0xe0>
	}

//	numFiles++;

	return f_close(&arquivo);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00d fc4c 	bl	800ec40 <f_close>
 80013a8:	4603      	mov	r3, r0
 80013aa:	bf00      	nop
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	08014890 	.word	0x08014890

080013b8 <_ZN6SDCARD10mount_diskEPKc>:

	f_close(&arquivo);
	return fsres;
}

FRESULT SDCARD::mount_disk(const char *path) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]

	return f_mount(&fs, path, 1);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3308      	adds	r3, #8
 80013c6:	2201      	movs	r2, #1
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00d f814 	bl	800e3f8 <f_mount>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f805 	bl	800140a <_ZNSt8__detail17_List_node_header7_M_initEv>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
#endif
      }
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f928 	bl	8001690 <_ZNSaISt10_List_nodeIN5MDDOs4TaskEEED1Ev>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f90b 	bl	8001670 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE10_List_implC1Ev>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ffeb 	bl	800144a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EEC1Ev>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f90d 	bl	80016a8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EED1Ev>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <_ZN5MDDOsC1Ev>:

extern IWDG_HandleTypeDef hiwdg;

int state;

MDDOs::MDDOs() {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <_ZN5MDDOsC1Ev+0x28>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ffda 	bl	8001464 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EEC1Ev>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	751a      	strb	r2, [r3, #20]
	// TODO Auto-generated constructor stub

}
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	08014b00 	.word	0x08014b00

080014c4 <_ZN5MDDOsD1Ev>:

MDDOs::~MDDOs() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <_ZN5MDDOsD1Ev+0x24>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3304      	adds	r3, #4
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffd1 	bl	800147e <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EED1Ev>
	// TODO Auto-generated destructor stub
}
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	08014b00 	.word	0x08014b00

080014ec <_ZN5MDDOsD0Ev>:
MDDOs::~MDDOs() {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
}
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ffe5 	bl	80014c4 <_ZN5MDDOsD1Ev>
 80014fa:	2174      	movs	r1, #116	; 0x74
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f00e fc31 	bl	800fd64 <_ZdlPvj>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_ZN5MDDOs12RegisterTaskEPFvvEPKci>:
// Registra tarefa com periodo de execução predefnido
MDDOs::OS_STATUS MDDOs::RegisterTask(MDDOs::FunPtr function, const char* function_name, int stack_size) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b0bc      	sub	sp, #240	; 0xf0
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
	Task t;
	t.funPtr = function;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	617b      	str	r3, [r7, #20]
	t.millis = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
	t.stack_size = stack_size; // align 32 ?
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	t.stack_bottom = malloc(t.stack_size); // para salvar contexto stack
 8001528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800152c:	4618      	mov	r0, r3
 800152e:	f00e fc85 	bl	800fe3c <malloc>
 8001532:	4603      	mov	r3, r0
 8001534:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (t.stack_top == nullptr){
 8001538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <_ZN5MDDOs12RegisterTaskEPFvvEPKci+0x38>
		return OS_STATUS::NO_MEMMORY;
 8001540:	2301      	movs	r3, #1
 8001542:	e01c      	b.n	800157e <_ZN5MDDOs12RegisterTaskEPFvvEPKci+0x72>
	}
	t.stack_top = t.stack_bottom + t.stack_size; // forma correta pois stack cresce para baixo
 8001544:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800154c:	4413      	add	r3, r2
 800154e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
//		t.stack_top = t.stack_bottom; // undefined behaviour
	t.ID = tarefas.size();
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3304      	adds	r3, #4
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f8b6 	bl	80016c8 <_ZNKSt7__cxx114listIN5MDDOs4TaskESaIS2_EE4sizeEv>
 800155c:	4603      	mov	r3, r0
 800155e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	t.function_name = function_name;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
	t.status = STATUS::RUNNING;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3020 	strb.w	r3, [r7, #32]

//	t.context = 0;
	tarefas.push_back(t);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3304      	adds	r3, #4
 8001570:	f107 0214 	add.w	r2, r7, #20
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f8b2 	bl	80016e0 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE9push_backERKS2_>
	return OS_STATUS::OK;
 800157c:	2300      	movs	r3, #0

}
 800157e:	4618      	mov	r0, r3
 8001580:	37f0      	adds	r7, #240	; 0xf0
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <_ZN5MDDOs4spinEv>:

void MDDOs::spin() {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	while (status == RUNNING) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7d1b      	ldrb	r3, [r3, #20]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <_ZN5MDDOs4spinEv+0x1e>
		HAL_IWDG_Refresh(&hiwdg);
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <_ZN5MDDOs4spinEv+0x28>)
 800159a:	f002 fd7b 	bl	8004094 <HAL_IWDG_Refresh>
		spinOnce();
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f808 	bl	80015b4 <_ZN5MDDOs8spinOnceEv>
	while (status == RUNNING) {
 80015a4:	e7f4      	b.n	8001590 <_ZN5MDDOs4spinEv+0x8>
	}
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20002920 	.word	0x20002920

080015b4 <_ZN5MDDOs8spinOnceEv>:



void MDDOs::spinOnce() {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

//	for (size_t i = 0; i < tarefas.size(); ++i) {
//		for ( std::list<Task>::i)

	for (task_iterator it = tarefas.begin(); it != tarefas.end(); ++ it)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3304      	adds	r3, #4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f89f 	bl	8001704 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE5beginEv>
 80015c6:	4603      	mov	r3, r0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3304      	adds	r3, #4
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f8a9 	bl	8001726 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE3endEv>
 80015d4:	4603      	mov	r3, r0
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	f107 020c 	add.w	r2, r7, #12
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f8af 	bl	8001746 <_ZStneRKSt14_List_iteratorIN5MDDOs4TaskEES4_>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d03a      	beq.n	8001664 <_ZN5MDDOs8spinOnceEv+0xb0>
	{

//		const Task &tarefa = (*it);
		current_task = &(*it);
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f8cb 	bl	800178e <_ZNKSt14_List_iteratorIN5MDDOs4TaskEEdeEv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	611a      	str	r2, [r3, #16]

		state = setjmp(scheduler);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3318      	adds	r3, #24
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fde4 	bl	80001d0 <setjmp>
 8001608:	4603      	mov	r3, r0
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <_ZN5MDDOs8spinOnceEv+0xb8>)
 800160c:	6013      	str	r3, [r2, #0]
//		state = setjmp(current_task->scheduler_);
		uint32_t currentTime = HAL_GetTick();
 800160e:	f001 fc41 	bl	8002e94 <HAL_GetTick>
 8001612:	4603      	mov	r3, r0
 8001614:	617b      	str	r3, [r7, #20]
		uint32_t delta = currentTime - current_task->lastTime;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	613b      	str	r3, [r7, #16]

		if(delta > current_task->millis){
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	429a      	cmp	r2, r3
 800162c:	d914      	bls.n	8001658 <_ZN5MDDOs8spinOnceEv+0xa4>

			if(current_task->status == STATUS::DELAYED){
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	7b1b      	ldrb	r3, [r3, #12]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d106      	bne.n	8001646 <_ZN5MDDOs8spinOnceEv+0x92>
				// restore context
				longjmp(current_task->context, 1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	3314      	adds	r3, #20
 800163e:	2101      	movs	r1, #1
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fdcb 	bl	80001dc <longjmp>
			} else {
				register void *sp asm ("sp");
				sp = current_task->stack_top; //para salvar o contexto
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800164e:	469d      	mov	sp, r3

				current_task->funPtr(); // executa normalmente
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4798      	blx	r3
	for (task_iterator it = tarefas.begin(); it != tarefas.end(); ++ it)
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f886 	bl	800176e <_ZNSt14_List_iteratorIN5MDDOs4TaskEEppEv>
 8001662:	e7b2      	b.n	80015ca <_ZN5MDDOs8spinOnceEv+0x16>



	}

}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200003cc 	.word	0x200003cc

08001670 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f896 	bl	80017aa <_ZNSaISt10_List_nodeIN5MDDOs4TaskEEEC1Ev>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff feb6 	bl	80013f2 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZNSaISt10_List_nodeIN5MDDOs4TaskEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f892 	bl	80017c2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEED1Ev>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f891 	bl	80017d8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE8_M_clearEv>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff feba 	bl	8001432 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE10_List_implD1Ev>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZNKSt7__cxx114listIN5MDDOs4TaskESaIS2_EE4sizeEv>:
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }

      /**  Returns the number of elements in the %list.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f8a6 	bl	8001822 <_ZNKSt7__cxx114listIN5MDDOs4TaskESaIS2_EE13_M_node_countEv>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE9push_backERKS2_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f81b 	bl	8001726 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE3endEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f8a0 	bl	800183c <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f8ae 	bl	8001878 <_ZNSt14_List_iteratorIN5MDDOs4TaskEEC1EPNSt8__detail15_List_node_baseE>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f89e 	bl	8001878 <_ZNSt14_List_iteratorIN5MDDOs4TaskEEC1EPNSt8__detail15_List_node_baseE>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZStneRKSt14_List_iteratorIN5MDDOs4TaskEES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_ZNSt14_List_iteratorIN5MDDOs4TaskEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]
	return *this;
 8001780:	687b      	ldr	r3, [r7, #4]
      }
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_ZNKSt14_List_iteratorIN5MDDOs4TaskEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f87b 	bl	8001896 <_ZNSt10_List_nodeIN5MDDOs4TaskEE9_M_valptrEv>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_ZNSaISt10_List_nodeIN5MDDOs4TaskEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f87d 	bl	80018b2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEEC1Ev>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d015      	beq.n	800181a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE8_M_clearEv+0x42>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 80017f8:	6938      	ldr	r0, [r7, #16]
 80017fa:	f000 f84c 	bl	8001896 <_ZNSt10_List_nodeIN5MDDOs4TaskEE9_M_valptrEv>
 80017fe:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f861 	bl	80018c8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE21_M_get_Node_allocatorEv>
 8001806:	4603      	mov	r3, r0
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f867 	bl	80018de <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE7destroyIS2_EEvRS4_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 8001810:	6939      	ldr	r1, [r7, #16]
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f870 	bl	80018f8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 8001818:	e7e5      	b.n	80017e6 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE8_M_clearEv+0xe>
	}
    }
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_ZNKSt7__cxx114listIN5MDDOs4TaskESaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f872 	bl	8001916 <_ZNKSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_get_sizeEv>
 8001832:	4603      	mov	r3, r0
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f870 	bl	800192e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 800184e:	4603      	mov	r3, r0
 8001850:	4619      	mov	r1, r3
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f876 	bl	8001944 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8001858:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f00e faa1 	bl	800fda8 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2101      	movs	r1, #1
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f89e 	bl	80019ac <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_inc_sizeEj>
       }
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZNSt14_List_iteratorIN5MDDOs4TaskEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_ZNSt10_List_nodeIN5MDDOs4TaskEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3308      	adds	r3, #8
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f893 	bl	80019ce <_ZN9__gnu_cxx16__aligned_membufIN5MDDOs4TaskEE6_M_ptrEv>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80018e8:	6839      	ldr	r1, [r7, #0]
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f87b 	bl	80019e6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE7destroyIS3_EEvPT_>
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f877 	bl	80019fc <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE10deallocateERS4_PS3_j>
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZNKSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f862 	bl	8001a1a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_get_nodeEv>
 8001956:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ffb4 	bl	80018c8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE21_M_get_Node_allocatorEv>
 8001960:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	6939      	ldr	r1, [r7, #16]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f863 	bl	8001a36 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8001970:	6978      	ldr	r0, [r7, #20]
 8001972:	f7ff ff90 	bl	8001896 <_ZNSt10_List_nodeIN5MDDOs4TaskEE9_M_valptrEv>
 8001976:	4604      	mov	r4, r0
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f7ff ffd8 	bl	800192e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4621      	mov	r1, r4
 8001984:	6938      	ldr	r0, [r7, #16]
 8001986:	f000 f87f 	bl	8001a88 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f88c 	bl	8001aae <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEEaSEDn>
	  return __p;
 8001996:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f85e 	bl	8001a5e <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEED1Ev>
	  return __p;
 80019a2:	4623      	mov	r3, r4
	}
 80019a4:	4618      	mov	r0, r3
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}

080019ac <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	441a      	add	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_ZN9__gnu_cxx16__aligned_membufIN5MDDOs4TaskEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f878 	bl	8001acc <_ZN9__gnu_cxx16__aligned_membufIN5MDDOs4TaskEE7_M_addrEv>
 80019dc:	4603      	mov	r3, r0
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE7destroyIS3_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f868 	bl	8001ae2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE10deallocateEPS4_j>
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2101      	movs	r1, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f868 	bl	8001afc <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE8allocateERS4_j>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8001a42:	68b8      	ldr	r0, [r7, #8]
 8001a44:	f000 f869 	bl	8001b1a <_ZSt11__addressofISaISt10_List_nodeIN5MDDOs4TaskEEEEPT_RS5_>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	605a      	str	r2, [r3, #4]
      { }
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff ffbf 	bl	80019fc <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE10deallocateERS4_PS3_j>
      }
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff4a 	bl	800192e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f845 	bl	8001b30 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
	return *this;
 8001abe:	687b      	ldr	r3, [r7, #4]
      }
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_ZN9__gnu_cxx16__aligned_membufIN5MDDOs4TaskEE7_M_addrEv>:
      _M_addr() noexcept
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	f00e f936 	bl	800fd60 <_ZdlPv>
      }
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001b06:	2200      	movs	r2, #0
 8001b08:	6839      	ldr	r1, [r7, #0]
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f82a 	bl	8001b64 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8allocateEjPKv>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_ZSt11__addressofISaISt10_List_nodeIN5MDDOs4TaskEEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fef6 	bl	800192e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001b42:	4604      	mov	r4, r0
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4619      	mov	r1, r3
 8001b48:	20dc      	movs	r0, #220	; 0xdc
 8001b4a:	f7ff fc46 	bl	80013da <_ZnwjPv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4618      	mov	r0, r3
 8001b52:	4621      	mov	r1, r4
 8001b54:	23dc      	movs	r3, #220	; 0xdc
 8001b56:	461a      	mov	r2, r3
 8001b58:	f00e f980 	bl	800fe5c <memcpy>
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}

08001b64 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f817 	bl	8001ba4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8max_sizeEv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	bf8c      	ite	hi
 8001b7e:	2301      	movhi	r3, #1
 8001b80:	2300      	movls	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001b88:	f00e f915 	bl	800fdb6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	22e4      	movs	r2, #228	; 0xe4
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00e f8f6 	bl	800fd86 <_Znwj>
 8001b9a:	4603      	mov	r3, r0
      }
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8max_sizeEv+0x18>)
      }
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	008fb823 	.word	0x008fb823

08001bc0 <Run>:


};

// Wrapper para ser chamado via C
extern "C" void Run(Application* App){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
App->Run();
 8001bc8:	f000 f9a0 	bl	8001f0c <_ZN11Application3RunEv>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_ZN5MDDOs5startEv>:
		current_task->lastTime = HAL_GetTick();
		current_task->millis = milis;
	}

	// start OS
	inline void start() {
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
		status = STATUS::RUNNING;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	751a      	strb	r2, [r3, #20]
	}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_ZN5MDDOs5sleepEm>:
	// Stop OS
	inline void stop() {
		status = STATUS::STOPPED;
	}

	inline void sleep(uint32_t milis) {
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]

		// salva contexto
		int i = setjmp(current_task->context);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	3314      	adds	r3, #20
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fae6 	bl	80001d0 <setjmp>
 8001c04:	4603      	mov	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]
		if (i == 1) {
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d104      	bne.n	8001c18 <_ZN5MDDOs5sleepEm+0x2a>
			current_task->status = STATUS::RUNNING;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2201      	movs	r2, #1
 8001c14:	731a      	strb	r2, [r3, #12]

			//vem do scheduler após o delay
			return;
 8001c16:	e016      	b.n	8001c46 <_ZN5MDDOs5sleepEm+0x58>



		} else if (i == 0) { // estabelece delay
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d113      	bne.n	8001c46 <_ZN5MDDOs5sleepEm+0x58>
			// salva contexto
			current_task->status = STATUS::DELAYED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2203      	movs	r2, #3
 8001c24:	731a      	strb	r2, [r3, #12]
			current_task->millis = milis;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
			current_task->lastTime = HAL_GetTick();
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691c      	ldr	r4, [r3, #16]
 8001c32:	f001 f92f 	bl	8002e94 <HAL_GetTick>
 8001c36:	4603      	mov	r3, r0
 8001c38:	60a3      	str	r3, [r4, #8]
//			longjmp(current_task->scheduler_, STATUS::DELAYED);
			longjmp(scheduler, STATUS::DELAYED);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3318      	adds	r3, #24
 8001c3e:	2103      	movs	r1, #3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe facb 	bl	80001dc <longjmp>
		} else {
			// ??

		}
//		tarefas
	}
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}

08001c4c <_ZN10ADCManager9setFactorEf>:
public:
	ADCManager(ADC_HandleTypeDef *hadc_, uint32_t flash_offset_);
	virtual ~ADCManager();

	// Fator de conversão
	inline void setFactor(float factor_val) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	ed87 0a00 	vstr	s0, [r7]
		factor = factor_val;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	611a      	str	r2, [r3, #16]
	}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <_Z8PiscaLEDv>:
bool g_saveSD = false; // armazenar dados no SD CARD
float g_vbat;
bool unlink_result = false; // gerencia unmount do sd card

// OS rodando.. Testa Malloc
void PiscaLED() {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
//	static int count = 0;
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <_Z8PiscaLEDv+0x34>)
 8001c78:	f002 f848 	bl	8003d0c <HAL_GPIO_WritePin>
	OS.sleep(100);
 8001c7c:	2164      	movs	r1, #100	; 0x64
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <_Z8PiscaLEDv+0x38>)
 8001c80:	f7ff ffb5 	bl	8001bee <_ZN5MDDOs5sleepEm>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <_Z8PiscaLEDv+0x34>)
 8001c8c:	f002 f83e 	bl	8003d0c <HAL_GPIO_WritePin>
	OS.sleep(1000);
 8001c90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <_Z8PiscaLEDv+0x38>)
 8001c96:	f7ff ffaa 	bl	8001bee <_ZN5MDDOs5sleepEm>
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40021400 	.word	0x40021400
 8001ca4:	200003d0 	.word	0x200003d0

08001ca8 <_Z10SDCARDLoopv>:
//void PiscaLED2() {
//	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	OS.sleep(50);
//}

void SDCARDLoop() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0b4      	sub	sp, #208	; 0xd0
 8001cac:	af00      	add	r7, sp, #0
	static FRESULT fres, fres_mount = FR_INVALID_DRIVE;
	char file_name[50] = "";
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001cb4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cb8:	222e      	movs	r2, #46	; 0x2e
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00e f8db 	bl	800fe78 <memset>
	char write_text[150] = "";
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	2292      	movs	r2, #146	; 0x92
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f00e f8d2 	bl	800fe78 <memset>
	static bool initSDCard = false;

	if (initSDCard == false) {
 8001cd4:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <_Z10SDCARDLoopv+0x134>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d141      	bne.n	8001d60 <_Z10SDCARDLoopv+0xb8>
		if (unlink_result) {
 8001cdc:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <_Z10SDCARDLoopv+0x138>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <_Z10SDCARDLoopv+0x46>
			MX_FATFS_Init();
 8001ce4:	f008 f9b4 	bl	800a050 <MX_FATFS_Init>
			unlink_result = false;
 8001ce8:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <_Z10SDCARDLoopv+0x138>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
		}

		fres_mount = sdcard.mount_disk("0:/"); // TODO bloqueia se nao der certo
 8001cee:	493d      	ldr	r1, [pc, #244]	; (8001de4 <_Z10SDCARDLoopv+0x13c>)
 8001cf0:	483d      	ldr	r0, [pc, #244]	; (8001de8 <_Z10SDCARDLoopv+0x140>)
 8001cf2:	f7ff fb61 	bl	80013b8 <_ZN6SDCARD10mount_diskEPKc>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <_Z10SDCARDLoopv+0x144>)
 8001cfc:	701a      	strb	r2, [r3, #0]

		if (fres_mount == FR_OK) {
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <_Z10SDCARDLoopv+0x144>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d110      	bne.n	8001d28 <_Z10SDCARDLoopv+0x80>
			int count_files = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
			sdcard.count_files("LOGS", count_files);
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4938      	ldr	r1, [pc, #224]	; (8001df0 <_Z10SDCARDLoopv+0x148>)
 8001d10:	4835      	ldr	r0, [pc, #212]	; (8001de8 <_Z10SDCARDLoopv+0x140>)
 8001d12:	f7ff fa7f 	bl	8001214 <_ZN6SDCARD11count_filesEPKcRi>
			printf("Montagem OK. # de arquivos: %d\r\n", count_files);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4836      	ldr	r0, [pc, #216]	; (8001df4 <_Z10SDCARDLoopv+0x14c>)
 8001d1c:	f00e ffd8 	bl	8010cd0 <iprintf>
			initSDCard = true;
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <_Z10SDCARDLoopv+0x134>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e050      	b.n	8001dca <_Z10SDCARDLoopv+0x122>
		} else {
			if (!unlink_result) {
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <_Z10SDCARDLoopv+0x138>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <_Z10SDCARDLoopv+0x9a>
				FATFS_UnLinkDriver("0:/");
 8001d36:	482b      	ldr	r0, [pc, #172]	; (8001de4 <_Z10SDCARDLoopv+0x13c>)
 8001d38:	f00d fa24 	bl	800f184 <FATFS_UnLinkDriver>
				unlink_result = true;
 8001d3c:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <_Z10SDCARDLoopv+0x138>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
			}

			printf("Problema ao montar SDCard. INFO: %d\r\n", fres_mount);
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <_Z10SDCARDLoopv+0x144>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	482b      	ldr	r0, [pc, #172]	; (8001df8 <_Z10SDCARDLoopv+0x150>)
 8001d4a:	f00e ffc1 	bl	8010cd0 <iprintf>
			initSDCard = false;
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <_Z10SDCARDLoopv+0x134>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
			OS.sleep(5000);
 8001d54:	f241 3188 	movw	r1, #5000	; 0x1388
 8001d58:	4828      	ldr	r0, [pc, #160]	; (8001dfc <_Z10SDCARDLoopv+0x154>)
 8001d5a:	f7ff ff48 	bl	8001bee <_ZN5MDDOs5sleepEm>
 8001d5e:	e039      	b.n	8001dd4 <_Z10SDCARDLoopv+0x12c>
			return;
		}
	} else { // cartão OK aqui
		getNameFile(&hrtc, file_name);
 8001d60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d64:	4619      	mov	r1, r3
 8001d66:	4826      	ldr	r0, [pc, #152]	; (8001e00 <_Z10SDCARDLoopv+0x158>)
 8001d68:	f000 f902 	bl	8001f70 <_Z11getNameFileP17RTC_HandleTypeDefPc>
		sprintf(write_text, "%f", g_vbat);
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <_Z10SDCARDLoopv+0x15c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbf9 	bl	8000568 <__aeabi_f2d>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	1d38      	adds	r0, r7, #4
 8001d7c:	4922      	ldr	r1, [pc, #136]	; (8001e08 <_Z10SDCARDLoopv+0x160>)
 8001d7e:	f00f f88f 	bl	8010ea0 <siprintf>
		fres = sdcard.write_file(file_name, write_text,sizeof(write_text));
 8001d82:	1d3a      	adds	r2, r7, #4
 8001d84:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001d88:	2396      	movs	r3, #150	; 0x96
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <_Z10SDCARDLoopv+0x140>)
 8001d8c:	f7ff fa9e 	bl	80012cc <_ZN6SDCARD10write_fileEPKcS1_j>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <_Z10SDCARDLoopv+0x164>)
 8001d96:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK) {
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <_Z10SDCARDLoopv+0x164>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00e      	beq.n	8001dbe <_Z10SDCARDLoopv+0x116>
			f_mount(0, "", 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	491b      	ldr	r1, [pc, #108]	; (8001e10 <_Z10SDCARDLoopv+0x168>)
 8001da4:	2000      	movs	r0, #0
 8001da6:	f00c fb27 	bl	800e3f8 <f_mount>
			initSDCard = false;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <_Z10SDCARDLoopv+0x134>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
			printf("Erro ao escrever arquivo: %s\r\n", file_name);
 8001db0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001db4:	4619      	mov	r1, r3
 8001db6:	4817      	ldr	r0, [pc, #92]	; (8001e14 <_Z10SDCARDLoopv+0x16c>)
 8001db8:	f00e ff8a 	bl	8010cd0 <iprintf>
 8001dbc:	e005      	b.n	8001dca <_Z10SDCARDLoopv+0x122>
		} else {
			printf("Escrito com sucesso no arquivo: %s\r\n", file_name);
 8001dbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4814      	ldr	r0, [pc, #80]	; (8001e18 <_Z10SDCARDLoopv+0x170>)
 8001dc6:	f00e ff83 	bl	8010cd0 <iprintf>
		}
	}

	OS.sleep(5000);
 8001dca:	f241 3188 	movw	r1, #5000	; 0x1388
 8001dce:	480b      	ldr	r0, [pc, #44]	; (8001dfc <_Z10SDCARDLoopv+0x154>)
 8001dd0:	f7ff ff0d 	bl	8001bee <_ZN5MDDOs5sleepEm>
}
 8001dd4:	37d0      	adds	r7, #208	; 0xd0
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200024fa 	.word	0x200024fa
 8001de0:	200024f8 	.word	0x200024f8
 8001de4:	0801489c 	.word	0x0801489c
 8001de8:	20000444 	.word	0x20000444
 8001dec:	20000000 	.word	0x20000000
 8001df0:	080148a0 	.word	0x080148a0
 8001df4:	080148a8 	.word	0x080148a8
 8001df8:	080148cc 	.word	0x080148cc
 8001dfc:	200003d0 	.word	0x200003d0
 8001e00:	200029b8 	.word	0x200029b8
 8001e04:	200024f4 	.word	0x200024f4
 8001e08:	080148f4 	.word	0x080148f4
 8001e0c:	200024f9 	.word	0x200024f9
 8001e10:	080148f8 	.word	0x080148f8
 8001e14:	080148fc 	.word	0x080148fc
 8001e18:	0801491c 	.word	0x0801491c

08001e1c <__tcf_0>:

void ADCLoop() {
	static ADCManager adc(&hadc1, 0); // memoria flash é lida aqui
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4801      	ldr	r0, [pc, #4]	; (8001e28 <__tcf_0+0xc>)
 8001e22:	f7ff f91d 	bl	8001060 <_ZN10ADCManagerD1Ev>
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200024fc 	.word	0x200024fc

08001e2c <_Z7ADCLoopv>:
void ADCLoop() {
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
	static ADCManager adc(&hadc1, 0); // memoria flash é lida aqui
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <_Z7ADCLoopv+0xbc>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	f3bf 8f5b 	dmb	ish
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d015      	beq.n	8001e7a <_Z7ADCLoopv+0x4e>
 8001e4e:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <_Z7ADCLoopv+0xbc>)
 8001e50:	f00d ff8a 	bl	800fd68 <__cxa_guard_acquire>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	2301      	movne	r3, #1
 8001e5c:	2300      	moveq	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <_Z7ADCLoopv+0x4e>
 8001e64:	2200      	movs	r2, #0
 8001e66:	4921      	ldr	r1, [pc, #132]	; (8001eec <_Z7ADCLoopv+0xc0>)
 8001e68:	4821      	ldr	r0, [pc, #132]	; (8001ef0 <_Z7ADCLoopv+0xc4>)
 8001e6a:	f7ff f8cf 	bl	800100c <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm>
 8001e6e:	481e      	ldr	r0, [pc, #120]	; (8001ee8 <_Z7ADCLoopv+0xbc>)
 8001e70:	f00d ff86 	bl	800fd80 <__cxa_guard_release>
 8001e74:	481f      	ldr	r0, [pc, #124]	; (8001ef4 <_Z7ADCLoopv+0xc8>)
 8001e76:	f00d ffb0 	bl	800fdda <atexit>
	static bool init = false;
	uint16_t adc_value;

	if(!init){
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <_Z7ADCLoopv+0xcc>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	f083 0301 	eor.w	r3, r3, #1
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <_Z7ADCLoopv+0x62>
		init = true;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <_Z7ADCLoopv+0xcc>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
	}

//	adc.setChannel(ADC_CHANNEL_1, 1);
	adc.convert();
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <_Z7ADCLoopv+0xc4>)
 8001e90:	f7ff f906 	bl	80010a0 <_ZN10ADCManager7convertEv>
	adc.filter();
 8001e94:	4816      	ldr	r0, [pc, #88]	; (8001ef0 <_Z7ADCLoopv+0xc4>)
 8001e96:	f7ff f91f 	bl	80010d8 <_ZN10ADCManager6filterEv>
	adc.setFactor((float) (13.425/4096));	// ADC_resolucao / (Vmax - Vmin)
 8001e9a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001efc <_Z7ADCLoopv+0xd0>
 8001e9e:	4814      	ldr	r0, [pc, #80]	; (8001ef0 <_Z7ADCLoopv+0xc4>)
 8001ea0:	f7ff fed4 	bl	8001c4c <_ZN10ADCManager9setFactorEf>
	adc_value = adc.getFiltered();
 8001ea4:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <_Z7ADCLoopv+0xc4>)
 8001ea6:	f7ff f96b 	bl	8001180 <_ZN10ADCManager11getFilteredEv>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
	g_vbat = adc.getVolts();
 8001eae:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <_Z7ADCLoopv+0xc4>)
 8001eb0:	f7ff f950 	bl	8001154 <_ZN10ADCManager8getVoltsEv>
 8001eb4:	eef0 7a40 	vmov.f32	s15, s0
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <_Z7ADCLoopv+0xd4>)
 8001eba:	edc3 7a00 	vstr	s15, [r3]
	printf("[ADC] value: %d, vbat: %f\r\n",adc_value, g_vbat);
 8001ebe:	88fc      	ldrh	r4, [r7, #6]
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <_Z7ADCLoopv+0xd4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb4f 	bl	8000568 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4621      	mov	r1, r4
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <_Z7ADCLoopv+0xd8>)
 8001ed2:	f00e fefd 	bl	8010cd0 <iprintf>

	OS.sleep(1000);
 8001ed6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eda:	480b      	ldr	r0, [pc, #44]	; (8001f08 <_Z7ADCLoopv+0xdc>)
 8001edc:	f7ff fe87 	bl	8001bee <_ZN5MDDOs5sleepEm>

}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}
 8001ee8:	20002520 	.word	0x20002520
 8001eec:	2000292c 	.word	0x2000292c
 8001ef0:	200024fc 	.word	0x200024fc
 8001ef4:	08001e1d 	.word	0x08001e1d
 8001ef8:	20002524 	.word	0x20002524
 8001efc:	3b56cccd 	.word	0x3b56cccd
 8001f00:	200024f4 	.word	0x200024f4
 8001f04:	08014944 	.word	0x08014944
 8001f08:	200003d0 	.word	0x200003d0

08001f0c <_ZN11Application3RunEv>:

void Application::Run() {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0

	printf("Definindo tarefas\r\n");
 8001f10:	480f      	ldr	r0, [pc, #60]	; (8001f50 <_ZN11Application3RunEv+0x44>)
 8001f12:	f00e ff63 	bl	8010ddc <puts>
	OS.RegisterTask(PiscaLED, "led", 4096);
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <_ZN11Application3RunEv+0x48>)
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <_ZN11Application3RunEv+0x4c>)
 8001f1e:	480f      	ldr	r0, [pc, #60]	; (8001f5c <_ZN11Application3RunEv+0x50>)
 8001f20:	f7ff faf4 	bl	800150c <_ZN5MDDOs12RegisterTaskEPFvvEPKci>
//	OS.RegisterTask(PiscaLED2, "led2", 1024); // DEBUG
	OS.RegisterTask(SDCARDLoop, "sdcard", 8192);
 8001f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <_ZN11Application3RunEv+0x54>)
 8001f2a:	490e      	ldr	r1, [pc, #56]	; (8001f64 <_ZN11Application3RunEv+0x58>)
 8001f2c:	480b      	ldr	r0, [pc, #44]	; (8001f5c <_ZN11Application3RunEv+0x50>)
 8001f2e:	f7ff faed 	bl	800150c <_ZN5MDDOs12RegisterTaskEPFvvEPKci>
	OS.RegisterTask(ADCLoop, "adc", 1024);
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <_ZN11Application3RunEv+0x5c>)
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <_ZN11Application3RunEv+0x60>)
 8001f3a:	4808      	ldr	r0, [pc, #32]	; (8001f5c <_ZN11Application3RunEv+0x50>)
 8001f3c:	f7ff fae6 	bl	800150c <_ZN5MDDOs12RegisterTaskEPFvvEPKci>

	OS.start();
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <_ZN11Application3RunEv+0x50>)
 8001f42:	f7ff fe47 	bl	8001bd4 <_ZN5MDDOs5startEv>

	OS.spin();
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <_ZN11Application3RunEv+0x50>)
 8001f48:	f7ff fb1e 	bl	8001588 <_ZN5MDDOs4spinEv>

	while (1)
 8001f4c:	e7fe      	b.n	8001f4c <_ZN11Application3RunEv+0x40>
 8001f4e:	bf00      	nop
 8001f50:	08014960 	.word	0x08014960
 8001f54:	08014974 	.word	0x08014974
 8001f58:	08001c6d 	.word	0x08001c6d
 8001f5c:	200003d0 	.word	0x200003d0
 8001f60:	08014978 	.word	0x08014978
 8001f64:	08001ca9 	.word	0x08001ca9
 8001f68:	08014980 	.word	0x08014980
 8001f6c:	08001e2d 	.word	0x08001e2d

08001f70 <_Z11getNameFileP17RTC_HandleTypeDefPc>:
		;
}

void getNameFile(RTC_HandleTypeDef *hrtc, char *file_name) {
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af04      	add	r7, sp, #16
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

	HAL_RTC_GetTime(hrtc, &time, RTC_FORMAT_BIN);
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f004 f8be 	bl	8006104 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &date, RTC_FORMAT_BIN);
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f004 f9bc 	bl	800630e <HAL_RTC_GetDate>

	sprintf(file_name, "LOGS/%d_%d_%d_%d_%d_%d.txt", date.Date, date.Month,
 8001f96:	7fbb      	ldrb	r3, [r7, #30]
 8001f98:	461c      	mov	r4, r3
 8001f9a:	7f7b      	ldrb	r3, [r7, #29]
 8001f9c:	461d      	mov	r5, r3
			date.Year, time.Hours, time.Minutes, time.Seconds);
 8001f9e:	7ffb      	ldrb	r3, [r7, #31]
 8001fa0:	7a3a      	ldrb	r2, [r7, #8]
 8001fa2:	7a79      	ldrb	r1, [r7, #9]
 8001fa4:	7ab8      	ldrb	r0, [r7, #10]
	sprintf(file_name, "LOGS/%d_%d_%d_%d_%d_%d.txt", date.Date, date.Month,
 8001fa6:	9003      	str	r0, [sp, #12]
 8001fa8:	9102      	str	r1, [sp, #8]
 8001faa:	9201      	str	r2, [sp, #4]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	462b      	mov	r3, r5
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	4904      	ldr	r1, [pc, #16]	; (8001fc4 <_Z11getNameFileP17RTC_HandleTypeDefPc+0x54>)
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f00e ff73 	bl	8010ea0 <siprintf>
}
 8001fba:	bf00      	nop
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	08014984 	.word	0x08014984

08001fc8 <_Z41__static_initialization_and_destruction_0ii>:
void error_handle(int time) {
	while (1) {
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
		HAL_Delay(time);
	}
}
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d10a      	bne.n	8001fee <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d105      	bne.n	8001fee <_Z41__static_initialization_and_destruction_0ii+0x26>
MDDOs OS;
 8001fe2:	480c      	ldr	r0, [pc, #48]	; (8002014 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001fe4:	f7ff fa58 	bl	8001498 <_ZN5MDDOsC1Ev>
SDCARD sdcard;
 8001fe8:	480b      	ldr	r0, [pc, #44]	; (8002018 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001fea:	f7ff f8d5 	bl	8001198 <_ZN6SDCARDC1Ev>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d105      	bne.n	800200a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002000:	f7ff f8e6 	bl	80011d0 <_ZN6SDCARDD1Ev>
MDDOs OS;
 8002004:	4803      	ldr	r0, [pc, #12]	; (8002014 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002006:	f7ff fa5d 	bl	80014c4 <_ZN5MDDOsD1Ev>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200003d0 	.word	0x200003d0
 8002018:	20000444 	.word	0x20000444

0800201c <_GLOBAL__sub_I_Run>:
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
 8002020:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002024:	2001      	movs	r0, #1
 8002026:	f7ff ffcf 	bl	8001fc8 <_Z41__static_initialization_and_destruction_0ii>
 800202a:	bd80      	pop	{r7, pc}

0800202c <_GLOBAL__sub_D_Run>:
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
 8002030:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff ffc7 	bl	8001fc8 <_Z41__static_initialization_and_destruction_0ii>
 800203a:	bd80      	pop	{r7, pc}

0800203c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char *ptr, int len) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
//	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
	CDC_Transmit_FS((uint8_t*) ptr, len);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4619      	mov	r1, r3
 800204e:	68b8      	ldr	r0, [r7, #8]
 8002050:	f00d fa2a 	bl	800f4a8 <CDC_Transmit_FS>
	return len;
 8002054:	687b      	ldr	r3, [r7, #4]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002066:	f000 feaf 	bl	8002dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206a:	f000 f88b 	bl	8002184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800206e:	f000 fa77 	bl	8002560 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002072:	f000 f90b 	bl	800228c <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8002076:	f000 f9c9 	bl	800240c <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800207a:	f000 f959 	bl	8002330 <MX_I2C1_Init>
  MX_SPI1_Init();
 800207e:	f000 f9e5 	bl	800244c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002082:	f000 fa19 	bl	80024b8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002086:	f000 fa41 	bl	800250c <MX_USART3_UART_Init>
  MX_RTC_Init();
 800208a:	f000 f999 	bl	80023c0 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 800208e:	f00d f94d 	bl	800f32c <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8002092:	f007 ffdd 	bl	800a050 <MX_FATFS_Init>
  MX_IWDG_Init();
 8002096:	f000 f979 	bl	800238c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2500);
 800209a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800209e:	f000 ff05 	bl	8002eac <HAL_Delay>

  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != RTC_KEY){
 80020a2:	2100      	movs	r1, #0
 80020a4:	482a      	ldr	r0, [pc, #168]	; (8002150 <main+0xf0>)
 80020a6:	f004 fa2b 	bl	8006500 <HAL_RTCEx_BKUPRead>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f64d 52d5 	movw	r2, #56789	; 0xddd5
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d03b      	beq.n	800212c <main+0xcc>
  	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_KEY);
 80020b4:	f64d 52d5 	movw	r2, #56789	; 0xddd5
 80020b8:	2100      	movs	r1, #0
 80020ba:	4825      	ldr	r0, [pc, #148]	; (8002150 <main+0xf0>)
 80020bc:	f004 fa06 	bl	80064cc <HAL_RTCEx_BKUPWrite>
  	  time.Hours = hours;
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <main+0xf4>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	703b      	strb	r3, [r7, #0]
  	  time.Minutes = minutes;
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <main+0xf8>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	707b      	strb	r3, [r7, #1]
  	  time.Seconds = seconds;
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <main+0xfc>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	70bb      	strb	r3, [r7, #2]
  	  time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  	  time.StoreOperation = RTC_STOREOPERATION_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  	  if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK)
 80020da:	463b      	mov	r3, r7
 80020dc:	2200      	movs	r2, #0
 80020de:	4619      	mov	r1, r3
 80020e0:	481b      	ldr	r0, [pc, #108]	; (8002150 <main+0xf0>)
 80020e2:	f003 ff52 	bl	8005f8a <HAL_RTC_SetTime>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <main+0x92>
  	  {
  		  printf("Definicao da hora falhou.\r\n");
 80020ec:	481c      	ldr	r0, [pc, #112]	; (8002160 <main+0x100>)
 80020ee:	f00e fe75 	bl	8010ddc <puts>
  	  }
  	  date.WeekDay = weekday;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <main+0x104>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	753b      	strb	r3, [r7, #20]
  	  date.Month = month;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <main+0x108>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	757b      	strb	r3, [r7, #21]
  	  date.Date = day;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <main+0x10c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	75bb      	strb	r3, [r7, #22]
  	  date.Year = year;
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <main+0x110>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	75fb      	strb	r3, [r7, #23]

  	  if (HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK)
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	2200      	movs	r2, #0
 8002110:	4619      	mov	r1, r3
 8002112:	480f      	ldr	r0, [pc, #60]	; (8002150 <main+0xf0>)
 8002114:	f004 f854 	bl	80061c0 <HAL_RTC_SetDate>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <main+0xc4>
  	  {
  		  printf("Definicao da data falhou.\r\n");
 800211e:	4815      	ldr	r0, [pc, #84]	; (8002174 <main+0x114>)
 8002120:	f00e fe5c 	bl	8010ddc <puts>
  	  }
  	  printf("Memoria RTC definida com sucesso\r\n");
 8002124:	4814      	ldr	r0, [pc, #80]	; (8002178 <main+0x118>)
 8002126:	f00e fe59 	bl	8010ddc <puts>
 800212a:	e002      	b.n	8002132 <main+0xd2>
    } else {
  	  printf("RTC lido com sucesso\r\n");
 800212c:	4813      	ldr	r0, [pc, #76]	; (800217c <main+0x11c>)
 800212e:	f00e fe55 	bl	8010ddc <puts>
    }
    printf("Firmware adc-abdi. Ultima atualizacao: %d-%d-%d\r\n", day, month,
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <main+0x10c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <main+0x108>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <main+0x110>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	480f      	ldr	r0, [pc, #60]	; (8002180 <main+0x120>)
 8002144:	f00e fdc4 	bl	8010cd0 <iprintf>
    		  year);
    Run();
 8002148:	f7ff fd3a 	bl	8001bc0 <Run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800214c:	e7fe      	b.n	800214c <main+0xec>
 800214e:	bf00      	nop
 8002150:	200029b8 	.word	0x200029b8
 8002154:	20000005 	.word	0x20000005
 8002158:	20000006 	.word	0x20000006
 800215c:	20000007 	.word	0x20000007
 8002160:	080149a0 	.word	0x080149a0
 8002164:	20000004 	.word	0x20000004
 8002168:	20000002 	.word	0x20000002
 800216c:	20000001 	.word	0x20000001
 8002170:	20000003 	.word	0x20000003
 8002174:	080149bc 	.word	0x080149bc
 8002178:	080149d8 	.word	0x080149d8
 800217c:	080149fc 	.word	0x080149fc
 8002180:	08014a14 	.word	0x08014a14

08002184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b098      	sub	sp, #96	; 0x60
 8002188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800218e:	2230      	movs	r2, #48	; 0x30
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f00d fe70 	bl	800fe78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	4b32      	ldr	r3, [pc, #200]	; (8002284 <SystemClock_Config+0x100>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a31      	ldr	r2, [pc, #196]	; (8002284 <SystemClock_Config+0x100>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <SystemClock_Config+0x100>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <SystemClock_Config+0x104>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <SystemClock_Config+0x104>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <SystemClock_Config+0x104>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80021ee:	230d      	movs	r3, #13
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021f8:	2301      	movs	r3, #1
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021fc:	2301      	movs	r3, #1
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002200:	2302      	movs	r3, #2
 8002202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002204:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002208:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800220a:	2304      	movs	r3, #4
 800220c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800220e:	23a8      	movs	r3, #168	; 0xa8
 8002210:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002212:	2302      	movs	r3, #2
 8002214:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002216:	2307      	movs	r3, #7
 8002218:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800221e:	4618      	mov	r0, r3
 8002220:	f003 f8cc 	bl	80053bc <HAL_RCC_OscConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800222a:	f000 fa71 	bl	8002710 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222e:	230f      	movs	r3, #15
 8002230:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002232:	2302      	movs	r3, #2
 8002234:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800223a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	2105      	movs	r1, #5
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fb2d 	bl	80058ac <HAL_RCC_ClockConfig>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002258:	f000 fa5a 	bl	8002710 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800225c:	2302      	movs	r3, #2
 800225e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fd1a 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002276:	f000 fa4b 	bl	8002710 <Error_Handler>
  }
}
 800227a:	bf00      	nop
 800227c:	3760      	adds	r7, #96	; 0x60
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000

0800228c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002292:	463b      	mov	r3, r7
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <MX_ADC1_Init+0x98>)
 80022a0:	4a21      	ldr	r2, [pc, #132]	; (8002328 <MX_ADC1_Init+0x9c>)
 80022a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022a4:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <MX_ADC1_Init+0x98>)
 80022a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_ADC1_Init+0x98>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <MX_ADC1_Init+0x98>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_ADC1_Init+0x98>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <MX_ADC1_Init+0x98>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <MX_ADC1_Init+0x98>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <MX_ADC1_Init+0x98>)
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <MX_ADC1_Init+0xa0>)
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_ADC1_Init+0x98>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <MX_ADC1_Init+0x98>)
 80022da:	2201      	movs	r2, #1
 80022dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_ADC1_Init+0x98>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_ADC1_Init+0x98>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <MX_ADC1_Init+0x98>)
 80022ee:	f000 fe01 	bl	8002ef4 <HAL_ADC_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022f8:	f000 fa0a 	bl	8002710 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022fc:	2309      	movs	r3, #9
 80022fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002300:	2301      	movs	r3, #1
 8002302:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002308:	463b      	mov	r3, r7
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_ADC1_Init+0x98>)
 800230e:	f000 ff9f 	bl	8003250 <HAL_ADC_ConfigChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002318:	f000 f9fa 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000292c 	.word	0x2000292c
 8002328:	40012000 	.word	0x40012000
 800232c:	0f000001 	.word	0x0f000001

08002330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_I2C1_Init+0x50>)
 8002336:	4a13      	ldr	r2, [pc, #76]	; (8002384 <MX_I2C1_Init+0x54>)
 8002338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_I2C1_Init+0x50>)
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_I2C1_Init+0x58>)
 800233e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MX_I2C1_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_I2C1_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_I2C1_Init+0x50>)
 800234e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <MX_I2C1_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MX_I2C1_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <MX_I2C1_Init+0x50>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <MX_I2C1_Init+0x50>)
 8002368:	2200      	movs	r2, #0
 800236a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800236c:	4804      	ldr	r0, [pc, #16]	; (8002380 <MX_I2C1_Init+0x50>)
 800236e:	f001 fd0b 	bl	8003d88 <HAL_I2C_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002378:	f000 f9ca 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200028cc 	.word	0x200028cc
 8002384:	40005400 	.word	0x40005400
 8002388:	000186a0 	.word	0x000186a0

0800238c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_IWDG_Init+0x2c>)
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <MX_IWDG_Init+0x30>)
 8002394:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_IWDG_Init+0x2c>)
 8002398:	2205      	movs	r2, #5
 800239a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2999;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_IWDG_Init+0x2c>)
 800239e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80023a2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_IWDG_Init+0x2c>)
 80023a6:	f001 fe33 	bl	8004010 <HAL_IWDG_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80023b0:	f000 f9ae 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20002920 	.word	0x20002920
 80023bc:	40003000 	.word	0x40003000

080023c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_RTC_Init+0x44>)
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <MX_RTC_Init+0x48>)
 80023c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_RTC_Init+0x44>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_RTC_Init+0x44>)
 80023d2:	227f      	movs	r2, #127	; 0x7f
 80023d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_RTC_Init+0x44>)
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_RTC_Init+0x44>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_RTC_Init+0x44>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_RTC_Init+0x44>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_RTC_Init+0x44>)
 80023f0:	f003 fd3a 	bl	8005e68 <HAL_RTC_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80023fa:	f000 f989 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200029b8 	.word	0x200029b8
 8002408:	40002800 	.word	0x40002800

0800240c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_SDIO_SD_Init+0x38>)
 8002412:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <MX_SDIO_SD_Init+0x3c>)
 8002414:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_SDIO_SD_Init+0x38>)
 8002418:	2200      	movs	r2, #0
 800241a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_SDIO_SD_Init+0x38>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <MX_SDIO_SD_Init+0x38>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_SDIO_SD_Init+0x38>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <MX_SDIO_SD_Init+0x38>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <MX_SDIO_SD_Init+0x38>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	200029d8 	.word	0x200029d8
 8002448:	40012c00 	.word	0x40012c00

0800244c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <MX_SPI1_Init+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800245c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_SPI1_Init+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002480:	2228      	movs	r2, #40	; 0x28
 8002482:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_SPI1_Init+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_SPI1_Init+0x64>)
 8002498:	220a      	movs	r2, #10
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_SPI1_Init+0x64>)
 800249e:	f004 ffcb 	bl	8007438 <HAL_SPI_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024a8:	f000 f932 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20002a5c 	.word	0x20002a5c
 80024b4:	40013000 	.word	0x40013000

080024b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <MX_USART1_UART_Init+0x4c>)
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <MX_USART1_UART_Init+0x50>)
 80024c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <MX_USART1_UART_Init+0x4c>)
 80024c4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80024c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <MX_USART1_UART_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <MX_USART1_UART_Init+0x4c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <MX_USART1_UART_Init+0x4c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <MX_USART1_UART_Init+0x4c>)
 80024de:	220c      	movs	r2, #12
 80024e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <MX_USART1_UART_Init+0x4c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <MX_USART1_UART_Init+0x4c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ee:	4805      	ldr	r0, [pc, #20]	; (8002504 <MX_USART1_UART_Init+0x4c>)
 80024f0:	f005 f82b 	bl	800754a <HAL_UART_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024fa:	f000 f909 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20002974 	.word	0x20002974
 8002508:	40011000 	.word	0x40011000

0800250c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_USART3_UART_Init+0x4c>)
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <MX_USART3_UART_Init+0x50>)
 8002514:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <MX_USART3_UART_Init+0x4c>)
 8002518:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800251c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <MX_USART3_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_USART3_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <MX_USART3_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_USART3_UART_Init+0x4c>)
 8002532:	220c      	movs	r2, #12
 8002534:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <MX_USART3_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <MX_USART3_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002542:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_USART3_UART_Init+0x4c>)
 8002544:	f005 f801 	bl	800754a <HAL_UART_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800254e:	f000 f8df 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20002888 	.word	0x20002888
 800255c:	40004800 	.word	0x40004800

08002560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08c      	sub	sp, #48	; 0x30
 8002564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <MX_GPIO_Init+0x198>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a5e      	ldr	r2, [pc, #376]	; (80026f8 <MX_GPIO_Init+0x198>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <MX_GPIO_Init+0x198>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <MX_GPIO_Init+0x198>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a57      	ldr	r2, [pc, #348]	; (80026f8 <MX_GPIO_Init+0x198>)
 800259c:	f043 0320 	orr.w	r3, r3, #32
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	4b51      	ldr	r3, [pc, #324]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b4e      	ldr	r3, [pc, #312]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a49      	ldr	r2, [pc, #292]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a42      	ldr	r2, [pc, #264]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <MX_GPIO_Init+0x198>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <MX_GPIO_Init+0x198>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a3b      	ldr	r2, [pc, #236]	; (80026f8 <MX_GPIO_Init+0x198>)
 800260c:	f043 0308 	orr.w	r3, r3, #8
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <MX_GPIO_Init+0x198>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 800261e:	2200      	movs	r2, #0
 8002620:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002624:	4835      	ldr	r0, [pc, #212]	; (80026fc <MX_GPIO_Init+0x19c>)
 8002626:	f001 fb71 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_RESET);
 800262a:	2200      	movs	r2, #0
 800262c:	2118      	movs	r1, #24
 800262e:	4834      	ldr	r0, [pc, #208]	; (8002700 <MX_GPIO_Init+0x1a0>)
 8002630:	f001 fb6c 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8002634:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	4619      	mov	r1, r3
 800264c:	482b      	ldr	r0, [pc, #172]	; (80026fc <MX_GPIO_Init+0x19c>)
 800264e:	f001 f9c1 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin;
 8002652:	2318      	movs	r3, #24
 8002654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4825      	ldr	r0, [pc, #148]	; (8002700 <MX_GPIO_Init+0x1a0>)
 800266a:	f001 f9b3 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 800266e:	2301      	movs	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <MX_GPIO_Init+0x1a4>)
 8002674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	4821      	ldr	r0, [pc, #132]	; (8002708 <MX_GPIO_Init+0x1a8>)
 8002682:	f001 f9a7 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_INDUT_Pin */
  GPIO_InitStruct.Pin = SENSOR_INDUT_Pin;
 8002686:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800268a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002690:	2302      	movs	r3, #2
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SENSOR_INDUT_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4818      	ldr	r0, [pc, #96]	; (80026fc <MX_GPIO_Init+0x19c>)
 800269c:	f001 f99a 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOFT_RESET_Pin */
  GPIO_InitStruct.Pin = SOFT_RESET_Pin;
 80026a0:	2308      	movs	r3, #8
 80026a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026a4:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_GPIO_Init+0x1a4>)
 80026a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026a8:	2301      	movs	r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SOFT_RESET_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	4816      	ldr	r0, [pc, #88]	; (800270c <MX_GPIO_Init+0x1ac>)
 80026b4:	f001 f98e 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_AUTOCALIB_Pin */
  GPIO_InitStruct.Pin = BUTTON_AUTOCALIB_Pin;
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c0:	2301      	movs	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_AUTOCALIB_GPIO_Port, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4810      	ldr	r0, [pc, #64]	; (800270c <MX_GPIO_Init+0x1ac>)
 80026cc:	f001 f982 	bl	80039d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	2006      	movs	r0, #6
 80026d6:	f001 f8b4 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80026da:	2006      	movs	r0, #6
 80026dc:	f001 f8cd 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2100      	movs	r1, #0
 80026e4:	2009      	movs	r0, #9
 80026e6:	f001 f8ac 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80026ea:	2009      	movs	r0, #9
 80026ec:	f001 f8c5 	bl	800387a <HAL_NVIC_EnableIRQ>

}
 80026f0:	bf00      	nop
 80026f2:	3730      	adds	r7, #48	; 0x30
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40021400 	.word	0x40021400
 8002700:	40020000 	.word	0x40020000
 8002704:	10110000 	.word	0x10110000
 8002708:	40020400 	.word	0x40020400
 800270c:	40020c00 	.word	0x40020c00

08002710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002714:	b672      	cpsid	i
}
 8002716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002718:	e7fe      	b.n	8002718 <Error_Handler+0x8>
	...

0800271c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_MspInit+0x4c>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_MspInit+0x4c>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_MspInit+0x4c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_MspInit+0x4c>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_MspInit+0x4c>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_MspInit+0x4c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800

0800276c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_ADC_MspInit+0x7c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d127      	bne.n	80027de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_ADC_MspInit+0x80>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a15      	ldr	r2, [pc, #84]	; (80027ec <HAL_ADC_MspInit+0x80>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_ADC_MspInit+0x80>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_ADC_MspInit+0x80>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <HAL_ADC_MspInit+0x80>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_ADC_MspInit+0x80>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027c6:	2302      	movs	r3, #2
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ca:	2303      	movs	r3, #3
 80027cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <HAL_ADC_MspInit+0x84>)
 80027da:	f001 f8fb 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027de:	bf00      	nop
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40012000 	.word	0x40012000
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020400 	.word	0x40020400

080027f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a19      	ldr	r2, [pc, #100]	; (8002878 <HAL_I2C_MspInit+0x84>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d12b      	bne.n	800286e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_I2C_MspInit+0x88>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002832:	23c0      	movs	r3, #192	; 0xc0
 8002834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002836:	2312      	movs	r3, #18
 8002838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283a:	2301      	movs	r3, #1
 800283c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002842:	2304      	movs	r3, #4
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	480c      	ldr	r0, [pc, #48]	; (8002880 <HAL_I2C_MspInit+0x8c>)
 800284e:	f001 f8c1 	bl	80039d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_I2C_MspInit+0x88>)
 800285c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40005400 	.word	0x40005400
 800287c:	40023800 	.word	0x40023800
 8002880:	40020400 	.word	0x40020400

08002884 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <HAL_RTC_MspInit+0x24>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d102      	bne.n	800289c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RTC_MspInit+0x28>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40002800 	.word	0x40002800
 80028ac:	42470e3c 	.word	0x42470e3c

080028b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a28      	ldr	r2, [pc, #160]	; (8002970 <HAL_SD_MspInit+0xc0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d14a      	bne.n	8002968 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_SD_MspInit+0xc4>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <HAL_SD_MspInit+0xc4>)
 80028dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_SD_MspInit+0xc4>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_SD_MspInit+0xc4>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a1f      	ldr	r2, [pc, #124]	; (8002974 <HAL_SD_MspInit+0xc4>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_SD_MspInit+0xc4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_SD_MspInit+0xc4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_SD_MspInit+0xc4>)
 8002914:	f043 0308 	orr.w	r3, r3, #8
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_SD_MspInit+0xc4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002926:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800292a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002930:	2301      	movs	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002938:	230c      	movs	r3, #12
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <HAL_SD_MspInit+0xc8>)
 8002944:	f001 f846 	bl	80039d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002948:	2304      	movs	r3, #4
 800294a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002950:	2301      	movs	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002954:	2302      	movs	r3, #2
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002958:	230c      	movs	r3, #12
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <HAL_SD_MspInit+0xcc>)
 8002964:	f001 f836 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40023800 	.word	0x40023800
 8002978:	40020800 	.word	0x40020800
 800297c:	40020c00 	.word	0x40020c00

08002980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <HAL_SPI_MspInit+0xa4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d13b      	bne.n	8002a1a <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_SPI_MspInit+0xa8>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_SPI_MspInit+0xa8>)
 80029ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_SPI_MspInit+0xa8>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_SPI_MspInit+0xa8>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <HAL_SPI_MspInit+0xa8>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_SPI_MspInit+0xa8>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 80029da:	2320      	movs	r3, #32
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e6:	2302      	movs	r3, #2
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ea:	2305      	movs	r3, #5
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	480d      	ldr	r0, [pc, #52]	; (8002a2c <HAL_SPI_MspInit+0xac>)
 80029f6:	f000 ffed 	bl	80039d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
 80029fa:	23c0      	movs	r3, #192	; 0xc0
 80029fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a06:	2303      	movs	r3, #3
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	; (8002a2c <HAL_SPI_MspInit+0xac>)
 8002a16:	f000 ffdd 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	; 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40013000 	.word	0x40013000
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020000 	.word	0x40020000

08002a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a3b      	ldr	r2, [pc, #236]	; (8002b3c <HAL_UART_MspInit+0x10c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d135      	bne.n	8002abe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a39      	ldr	r2, [pc, #228]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002a5c:	f043 0310 	orr.w	r3, r3, #16
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a32      	ldr	r2, [pc, #200]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MAX232_TX_Pin|MAX232_RX_Pin;
 8002a8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4827      	ldr	r0, [pc, #156]	; (8002b44 <HAL_UART_MspInit+0x114>)
 8002aa8:	f000 ff94 	bl	80039d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002aac:	2200      	movs	r2, #0
 8002aae:	2100      	movs	r1, #0
 8002ab0:	2025      	movs	r0, #37	; 0x25
 8002ab2:	f000 fec6 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ab6:	2025      	movs	r0, #37	; 0x25
 8002ab8:	f000 fedf 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002abc:	e039      	b.n	8002b32 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <HAL_UART_MspInit+0x118>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d134      	bne.n	8002b32 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	6313      	str	r3, [r2, #48]	; 0x30
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_UART_MspInit+0x110>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002b00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b12:	2307      	movs	r3, #7
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	480b      	ldr	r0, [pc, #44]	; (8002b4c <HAL_UART_MspInit+0x11c>)
 8002b1e:	f000 ff59 	bl	80039d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	2027      	movs	r0, #39	; 0x27
 8002b28:	f000 fe8b 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b2c:	2027      	movs	r0, #39	; 0x27
 8002b2e:	f000 fea4 	bl	800387a <HAL_NVIC_EnableIRQ>
}
 8002b32:	bf00      	nop
 8002b34:	3730      	adds	r7, #48	; 0x30
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40011000 	.word	0x40011000
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40004800 	.word	0x40004800
 8002b4c:	40020400 	.word	0x40020400

08002b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <NMI_Handler+0x4>

08002b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5a:	e7fe      	b.n	8002b5a <HardFault_Handler+0x4>

08002b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <MemManage_Handler+0x4>

08002b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <BusFault_Handler+0x4>

08002b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <UsageFault_Handler+0x4>

08002b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b9c:	f000 f966 	bl	8002e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f001 f8c9 	bl	8003d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002bb6:	2008      	movs	r0, #8
 8002bb8:	f001 f8c2 	bl	8003d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <USART1_IRQHandler+0x10>)
 8002bc6:	f004 fd0d 	bl	80075e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20002974 	.word	0x20002974

08002bd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <USART3_IRQHandler+0x10>)
 8002bda:	f004 fd03 	bl	80075e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20002888 	.word	0x20002888

08002be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <OTG_FS_IRQHandler+0x10>)
 8002bee:	f001 fbb1 	bl	8004354 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20006020 	.word	0x20006020

08002bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
	return 1;
 8002c00:	2301      	movs	r3, #1
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_kill>:

int _kill(int pid, int sig)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c16:	f00d f8e7 	bl	800fde8 <__errno>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2216      	movs	r2, #22
 8002c1e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_exit>:

void _exit (int status)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ffe7 	bl	8002c0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c3e:	e7fe      	b.n	8002c3e <_exit+0x12>

08002c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e00a      	b.n	8002c68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c52:	f3af 8000 	nop.w
 8002c56:	4601      	mov	r1, r0
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	60ba      	str	r2, [r7, #8]
 8002c5e:	b2ca      	uxtb	r2, r1
 8002c60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3301      	adds	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	dbf0      	blt.n	8002c52 <_read+0x12>
	}

return len;
 8002c70:	687b      	ldr	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
	return -1;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_isatty>:

int _isatty(int file)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cba:	2301      	movs	r3, #1
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <_sbrk+0x5c>)
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <_sbrk+0x60>)
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <_sbrk+0x64>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <_sbrk+0x64>)
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <_sbrk+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d207      	bcs.n	8002d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d14:	f00d f868 	bl	800fde8 <__errno>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d22:	e009      	b.n	8002d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <_sbrk+0x64>)
 8002d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d36:	68fb      	ldr	r3, [r7, #12]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20020000 	.word	0x20020000
 8002d44:	00004000 	.word	0x00004000
 8002d48:	20002528 	.word	0x20002528
 8002d4c:	20006438 	.word	0x20006438

08002d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <SystemInit+0x20>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <SystemInit+0x20>)
 8002d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d78:	480d      	ldr	r0, [pc, #52]	; (8002db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d7a:	490e      	ldr	r1, [pc, #56]	; (8002db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d7c:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d80:	e002      	b.n	8002d88 <LoopCopyDataInit>

08002d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d86:	3304      	adds	r3, #4

08002d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d8c:	d3f9      	bcc.n	8002d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d90:	4c0b      	ldr	r4, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d94:	e001      	b.n	8002d9a <LoopFillZerobss>

08002d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d98:	3204      	adds	r2, #4

08002d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d9c:	d3fb      	bcc.n	8002d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d9e:	f7ff ffd7 	bl	8002d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002da2:	f00d f827 	bl	800fdf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da6:	f7ff f95b 	bl	8002060 <main>
  bx  lr    
 8002daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db4:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8002db8:	08015444 	.word	0x08015444
  ldr r2, =_sbss
 8002dbc:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8002dc0:	20006438 	.word	0x20006438

08002dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc4:	e7fe      	b.n	8002dc4 <ADC_IRQHandler>
	...

08002dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <HAL_Init+0x40>)
 8002dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_Init+0x40>)
 8002dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_Init+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <HAL_Init+0x40>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df0:	2003      	movs	r0, #3
 8002df2:	f000 fd1b 	bl	800382c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f000 f808 	bl	8002e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dfc:	f7ff fc8e 	bl	800271c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023c00 	.word	0x40023c00

08002e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_InitTick+0x54>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_InitTick+0x58>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fd33 	bl	8003896 <HAL_SYSTICK_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00e      	b.n	8002e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b0f      	cmp	r3, #15
 8002e3e:	d80a      	bhi.n	8002e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e40:	2200      	movs	r2, #0
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e48:	f000 fcfb 	bl	8003842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e4c:	4a06      	ldr	r2, [pc, #24]	; (8002e68 <HAL_InitTick+0x5c>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000008 	.word	0x20000008
 8002e64:	20000010 	.word	0x20000010
 8002e68:	2000000c 	.word	0x2000000c

08002e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_IncTick+0x20>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x24>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_IncTick+0x24>)
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000010 	.word	0x20000010
 8002e90:	20002adc 	.word	0x20002adc

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_GetTick+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20002adc 	.word	0x20002adc

08002eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff ffee 	bl	8002e94 <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec4:	d005      	beq.n	8002ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_Delay+0x44>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ed2:	bf00      	nop
 8002ed4:	f7ff ffde 	bl	8002e94 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f7      	bhi.n	8002ed4 <HAL_Delay+0x28>
  {
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000010 	.word	0x20000010

08002ef4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e033      	b.n	8002f72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fc2a 	bl	800276c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d118      	bne.n	8002f64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f3a:	f023 0302 	bic.w	r3, r3, #2
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 faa4 	bl	8003494 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
 8002f62:	e001      	b.n	8002f68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_Start+0x1a>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e0b2      	b.n	80030fc <HAL_ADC_Start+0x180>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d018      	beq.n	8002fde <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <HAL_ADC_Start+0x18c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_ADC_Start+0x190>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0c9a      	lsrs	r2, r3, #18
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fd0:	e002      	b.n	8002fd8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f9      	bne.n	8002fd2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d17a      	bne.n	80030e2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003016:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d106      	bne.n	800303a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f023 0206 	bic.w	r2, r3, #6
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
 8003038:	e002      	b.n	8003040 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003048:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_ADC_Start+0x194>)
 800304a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003054:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2b00      	cmp	r3, #0
 8003060:	d12a      	bne.n	80030b8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <HAL_ADC_Start+0x198>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d015      	beq.n	8003098 <HAL_ADC_Start+0x11c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a29      	ldr	r2, [pc, #164]	; (8003118 <HAL_ADC_Start+0x19c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d105      	bne.n	8003082 <HAL_ADC_Start+0x106>
 8003076:	4b26      	ldr	r3, [pc, #152]	; (8003110 <HAL_ADC_Start+0x194>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a25      	ldr	r2, [pc, #148]	; (800311c <HAL_ADC_Start+0x1a0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d136      	bne.n	80030fa <HAL_ADC_Start+0x17e>
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_ADC_Start+0x194>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	d130      	bne.n	80030fa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d129      	bne.n	80030fa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	e020      	b.n	80030fa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a15      	ldr	r2, [pc, #84]	; (8003114 <HAL_ADC_Start+0x198>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d11b      	bne.n	80030fa <HAL_ADC_Start+0x17e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d114      	bne.n	80030fa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e00b      	b.n	80030fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	20000008 	.word	0x20000008
 800310c:	431bde83 	.word	0x431bde83
 8003110:	40012300 	.word	0x40012300
 8003114:	40012000 	.word	0x40012000
 8003118:	40012100 	.word	0x40012100
 800311c:	40012200 	.word	0x40012200

08003120 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313c:	d113      	bne.n	8003166 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314c:	d10b      	bne.n	8003166 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f043 0220 	orr.w	r2, r3, #32
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e063      	b.n	800322e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003166:	f7ff fe95 	bl	8002e94 <HAL_GetTick>
 800316a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800316c:	e021      	b.n	80031b2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003174:	d01d      	beq.n	80031b2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <HAL_ADC_PollForConversion+0x6c>
 800317c:	f7ff fe8a 	bl	8002e94 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d212      	bcs.n	80031b2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b02      	cmp	r3, #2
 8003198:	d00b      	beq.n	80031b2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0204 	orr.w	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e03d      	b.n	800322e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d1d6      	bne.n	800316e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0212 	mvn.w	r2, #18
 80031c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d123      	bne.n	800322c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11f      	bne.n	800322c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003204:	2b00      	cmp	r3, #0
 8003206:	d111      	bne.n	800322c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1c>
 8003268:	2302      	movs	r3, #2
 800326a:	e105      	b.n	8003478 <HAL_ADC_ConfigChannel+0x228>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b09      	cmp	r3, #9
 800327a:	d925      	bls.n	80032c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	3b1e      	subs	r3, #30
 8003292:	2207      	movs	r2, #7
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43da      	mvns	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	400a      	ands	r2, r1
 80032a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68d9      	ldr	r1, [r3, #12]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	4618      	mov	r0, r3
 80032b4:	4603      	mov	r3, r0
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4403      	add	r3, r0
 80032ba:	3b1e      	subs	r3, #30
 80032bc:	409a      	lsls	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	e022      	b.n	800330e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6919      	ldr	r1, [r3, #16]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	2207      	movs	r2, #7
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	400a      	ands	r2, r1
 80032ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4618      	mov	r0, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4403      	add	r3, r0
 8003304:	409a      	lsls	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d824      	bhi.n	8003360 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	3b05      	subs	r3, #5
 8003328:	221f      	movs	r2, #31
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	400a      	ands	r2, r1
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	4618      	mov	r0, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	3b05      	subs	r3, #5
 8003352:	fa00 f203 	lsl.w	r2, r0, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	635a      	str	r2, [r3, #52]	; 0x34
 800335e:	e04c      	b.n	80033fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b0c      	cmp	r3, #12
 8003366:	d824      	bhi.n	80033b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	3b23      	subs	r3, #35	; 0x23
 800337a:	221f      	movs	r2, #31
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43da      	mvns	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	400a      	ands	r2, r1
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	4618      	mov	r0, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	3b23      	subs	r3, #35	; 0x23
 80033a4:	fa00 f203 	lsl.w	r2, r0, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
 80033b0:	e023      	b.n	80033fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3b41      	subs	r3, #65	; 0x41
 80033c4:	221f      	movs	r2, #31
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	400a      	ands	r2, r1
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4618      	mov	r0, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	3b41      	subs	r3, #65	; 0x41
 80033ee:	fa00 f203 	lsl.w	r2, r0, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_ADC_ConfigChannel+0x234>)
 80033fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	; (8003488 <HAL_ADC_ConfigChannel+0x238>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d109      	bne.n	800341c <HAL_ADC_ConfigChannel+0x1cc>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b12      	cmp	r3, #18
 800340e:	d105      	bne.n	800341c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_ADC_ConfigChannel+0x238>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d123      	bne.n	800346e <HAL_ADC_ConfigChannel+0x21e>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b10      	cmp	r3, #16
 800342c:	d003      	beq.n	8003436 <HAL_ADC_ConfigChannel+0x1e6>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b11      	cmp	r3, #17
 8003434:	d11b      	bne.n	800346e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b10      	cmp	r3, #16
 8003448:	d111      	bne.n	800346e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_ADC_ConfigChannel+0x23c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <HAL_ADC_ConfigChannel+0x240>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	0c9a      	lsrs	r2, r3, #18
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003460:	e002      	b.n	8003468 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3b01      	subs	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f9      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40012300 	.word	0x40012300
 8003488:	40012000 	.word	0x40012000
 800348c:	20000008 	.word	0x20000008
 8003490:	431bde83 	.word	0x431bde83

08003494 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800349c:	4b79      	ldr	r3, [pc, #484]	; (8003684 <ADC_Init+0x1f0>)
 800349e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	021a      	lsls	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6899      	ldr	r1, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	4a58      	ldr	r2, [pc, #352]	; (8003688 <ADC_Init+0x1f4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d022      	beq.n	8003572 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800353a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6899      	ldr	r1, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800355c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	e00f      	b.n	8003592 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003590:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0202 	bic.w	r2, r2, #2
 80035a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6899      	ldr	r1, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7e1b      	ldrb	r3, [r3, #24]
 80035ac:	005a      	lsls	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	3b01      	subs	r3, #1
 80035ec:	035a      	lsls	r2, r3, #13
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	e007      	b.n	8003608 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003606:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	3b01      	subs	r3, #1
 8003624:	051a      	lsls	r2, r3, #20
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800363c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800364a:	025a      	lsls	r2, r3, #9
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	029a      	lsls	r2, r3, #10
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40012300 	.word	0x40012300
 8003688:	0f000001 	.word	0x0f000001

0800368c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a8:	4013      	ands	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036be:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	60d3      	str	r3, [r2, #12]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <__NVIC_GetPriorityGrouping+0x18>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	f003 0307 	and.w	r3, r3, #7
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	db0b      	blt.n	800371a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	4907      	ldr	r1, [pc, #28]	; (8003728 <__NVIC_EnableIRQ+0x38>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2001      	movs	r0, #1
 8003712:	fa00 f202 	lsl.w	r2, r0, r2
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f8:	d301      	bcc.n	80037fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00f      	b.n	800381e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <SysTick_Config+0x40>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3b01      	subs	r3, #1
 8003804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003806:	210f      	movs	r1, #15
 8003808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800380c:	f7ff ff8e 	bl	800372c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SysTick_Config+0x40>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <SysTick_Config+0x40>)
 8003818:	2207      	movs	r2, #7
 800381a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	e000e010 	.word	0xe000e010

0800382c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff29 	bl	800368c <__NVIC_SetPriorityGrouping>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003854:	f7ff ff3e 	bl	80036d4 <__NVIC_GetPriorityGrouping>
 8003858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7ff ff8e 	bl	8003780 <NVIC_EncodePriority>
 8003864:	4602      	mov	r2, r0
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff5d 	bl	800372c <__NVIC_SetPriority>
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff31 	bl	80036f0 <__NVIC_EnableIRQ>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ffa2 	bl	80037e8 <SysTick_Config>
 80038a4:	4603      	mov	r3, r0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff faea 	bl	8002e94 <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d008      	beq.n	80038e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2280      	movs	r2, #128	; 0x80
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e052      	b.n	8003986 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0216 	bic.w	r2, r2, #22
 80038ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <HAL_DMA_Abort+0x62>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0208 	bic.w	r2, r2, #8
 800391e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003930:	e013      	b.n	800395a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003932:	f7ff faaf 	bl	8002e94 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b05      	cmp	r3, #5
 800393e:	d90c      	bls.n	800395a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2203      	movs	r2, #3
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e015      	b.n	8003986 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e4      	bne.n	8003932 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	223f      	movs	r2, #63	; 0x3f
 800396e:	409a      	lsls	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d004      	beq.n	80039ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e00c      	b.n	80039c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2205      	movs	r2, #5
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	e16b      	b.n	8003cc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039f0:	2201      	movs	r2, #1
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	f040 815a 	bne.w	8003cc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d005      	beq.n	8003a26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d130      	bne.n	8003a88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	2203      	movs	r2, #3
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 0201 	and.w	r2, r3, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d017      	beq.n	8003ac4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d123      	bne.n	8003b18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	08da      	lsrs	r2, r3, #3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3208      	adds	r2, #8
 8003ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	220f      	movs	r2, #15
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	08da      	lsrs	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3208      	adds	r2, #8
 8003b12:	69b9      	ldr	r1, [r7, #24]
 8003b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2203      	movs	r2, #3
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0203 	and.w	r2, r3, #3
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80b4 	beq.w	8003cc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	4b60      	ldr	r3, [pc, #384]	; (8003ce0 <HAL_GPIO_Init+0x30c>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	4a5f      	ldr	r2, [pc, #380]	; (8003ce0 <HAL_GPIO_Init+0x30c>)
 8003b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b68:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6a:	4b5d      	ldr	r3, [pc, #372]	; (8003ce0 <HAL_GPIO_Init+0x30c>)
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b76:	4a5b      	ldr	r2, [pc, #364]	; (8003ce4 <HAL_GPIO_Init+0x310>)
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	089b      	lsrs	r3, r3, #2
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a52      	ldr	r2, [pc, #328]	; (8003ce8 <HAL_GPIO_Init+0x314>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d02b      	beq.n	8003bfa <HAL_GPIO_Init+0x226>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a51      	ldr	r2, [pc, #324]	; (8003cec <HAL_GPIO_Init+0x318>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d025      	beq.n	8003bf6 <HAL_GPIO_Init+0x222>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a50      	ldr	r2, [pc, #320]	; (8003cf0 <HAL_GPIO_Init+0x31c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01f      	beq.n	8003bf2 <HAL_GPIO_Init+0x21e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4f      	ldr	r2, [pc, #316]	; (8003cf4 <HAL_GPIO_Init+0x320>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d019      	beq.n	8003bee <HAL_GPIO_Init+0x21a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4e      	ldr	r2, [pc, #312]	; (8003cf8 <HAL_GPIO_Init+0x324>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_GPIO_Init+0x216>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4d      	ldr	r2, [pc, #308]	; (8003cfc <HAL_GPIO_Init+0x328>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00d      	beq.n	8003be6 <HAL_GPIO_Init+0x212>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a4c      	ldr	r2, [pc, #304]	; (8003d00 <HAL_GPIO_Init+0x32c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <HAL_GPIO_Init+0x20e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a4b      	ldr	r2, [pc, #300]	; (8003d04 <HAL_GPIO_Init+0x330>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_GPIO_Init+0x20a>
 8003bda:	2307      	movs	r3, #7
 8003bdc:	e00e      	b.n	8003bfc <HAL_GPIO_Init+0x228>
 8003bde:	2308      	movs	r3, #8
 8003be0:	e00c      	b.n	8003bfc <HAL_GPIO_Init+0x228>
 8003be2:	2306      	movs	r3, #6
 8003be4:	e00a      	b.n	8003bfc <HAL_GPIO_Init+0x228>
 8003be6:	2305      	movs	r3, #5
 8003be8:	e008      	b.n	8003bfc <HAL_GPIO_Init+0x228>
 8003bea:	2304      	movs	r3, #4
 8003bec:	e006      	b.n	8003bfc <HAL_GPIO_Init+0x228>
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e004      	b.n	8003bfc <HAL_GPIO_Init+0x228>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e002      	b.n	8003bfc <HAL_GPIO_Init+0x228>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_GPIO_Init+0x228>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	f002 0203 	and.w	r2, r2, #3
 8003c02:	0092      	lsls	r2, r2, #2
 8003c04:	4093      	lsls	r3, r2
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c0c:	4935      	ldr	r1, [pc, #212]	; (8003ce4 <HAL_GPIO_Init+0x310>)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	3302      	adds	r3, #2
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_GPIO_Init+0x334>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c3e:	4a32      	ldr	r2, [pc, #200]	; (8003d08 <HAL_GPIO_Init+0x334>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c44:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_GPIO_Init+0x334>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c68:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <HAL_GPIO_Init+0x334>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <HAL_GPIO_Init+0x334>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c92:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <HAL_GPIO_Init+0x334>)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <HAL_GPIO_Init+0x334>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cbc:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <HAL_GPIO_Init+0x334>)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b0f      	cmp	r3, #15
 8003ccc:	f67f ae90 	bls.w	80039f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	3724      	adds	r7, #36	; 0x24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	40020000 	.word	0x40020000
 8003cec:	40020400 	.word	0x40020400
 8003cf0:	40020800 	.word	0x40020800
 8003cf4:	40020c00 	.word	0x40020c00
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40021400 	.word	0x40021400
 8003d00:	40021800 	.word	0x40021800
 8003d04:	40021c00 	.word	0x40021c00
 8003d08:	40013c00 	.word	0x40013c00

08003d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d1c:	787b      	ldrb	r3, [r7, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d28:	e003      	b.n	8003d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	041a      	lsls	r2, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	619a      	str	r2, [r3, #24]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d56:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f806 	bl	8003d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40013c00 	.word	0x40013c00

08003d70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e12b      	b.n	8003ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fe fd20 	bl	80027f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dec:	f001 ff32 	bl	8005c54 <HAL_RCC_GetPCLK1Freq>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4a81      	ldr	r2, [pc, #516]	; (8003ffc <HAL_I2C_Init+0x274>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d807      	bhi.n	8003e0c <HAL_I2C_Init+0x84>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a80      	ldr	r2, [pc, #512]	; (8004000 <HAL_I2C_Init+0x278>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	bf94      	ite	ls
 8003e04:	2301      	movls	r3, #1
 8003e06:	2300      	movhi	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e006      	b.n	8003e1a <HAL_I2C_Init+0x92>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a7d      	ldr	r2, [pc, #500]	; (8004004 <HAL_I2C_Init+0x27c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	bf94      	ite	ls
 8003e14:	2301      	movls	r3, #1
 8003e16:	2300      	movhi	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0e7      	b.n	8003ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a78      	ldr	r2, [pc, #480]	; (8004008 <HAL_I2C_Init+0x280>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	0c9b      	lsrs	r3, r3, #18
 8003e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4a6a      	ldr	r2, [pc, #424]	; (8003ffc <HAL_I2C_Init+0x274>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d802      	bhi.n	8003e5c <HAL_I2C_Init+0xd4>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	e009      	b.n	8003e70 <HAL_I2C_Init+0xe8>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	4a69      	ldr	r2, [pc, #420]	; (800400c <HAL_I2C_Init+0x284>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	3301      	adds	r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	495c      	ldr	r1, [pc, #368]	; (8003ffc <HAL_I2C_Init+0x274>)
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	d819      	bhi.n	8003ec4 <HAL_I2C_Init+0x13c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1e59      	subs	r1, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e9e:	1c59      	adds	r1, r3, #1
 8003ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ea4:	400b      	ands	r3, r1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_I2C_Init+0x138>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1e59      	subs	r1, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebe:	e051      	b.n	8003f64 <HAL_I2C_Init+0x1dc>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	e04f      	b.n	8003f64 <HAL_I2C_Init+0x1dc>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d111      	bne.n	8003ef0 <HAL_I2C_Init+0x168>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1e58      	subs	r0, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	440b      	add	r3, r1
 8003eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e012      	b.n	8003f16 <HAL_I2C_Init+0x18e>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1e58      	subs	r0, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	0099      	lsls	r1, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Init+0x196>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e022      	b.n	8003f64 <HAL_I2C_Init+0x1dc>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10e      	bne.n	8003f44 <HAL_I2C_Init+0x1bc>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1e58      	subs	r0, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	440b      	add	r3, r1
 8003f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f42:	e00f      	b.n	8003f64 <HAL_I2C_Init+0x1dc>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e58      	subs	r0, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	0099      	lsls	r1, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	6809      	ldr	r1, [r1, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6911      	ldr	r1, [r2, #16]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	4311      	orrs	r1, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	000186a0 	.word	0x000186a0
 8004000:	001e847f 	.word	0x001e847f
 8004004:	003d08ff 	.word	0x003d08ff
 8004008:	431bde83 	.word	0x431bde83
 800400c:	10624dd3 	.word	0x10624dd3

08004010 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e034      	b.n	800408c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800402a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f245 5255 	movw	r2, #21845	; 0x5555
 8004034:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6852      	ldr	r2, [r2, #4]
 800403e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6892      	ldr	r2, [r2, #8]
 8004048:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800404a:	f7fe ff23 	bl	8002e94 <HAL_GetTick>
 800404e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004050:	e00f      	b.n	8004072 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004052:	f7fe ff1f 	bl	8002e94 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b30      	cmp	r3, #48	; 0x30
 800405e:	d908      	bls.n	8004072 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e00c      	b.n	800408c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e8      	bne.n	8004052 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004088:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80040a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b6:	b08f      	sub	sp, #60	; 0x3c
 80040b8:	af0a      	add	r7, sp, #40	; 0x28
 80040ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e10f      	b.n	80042e6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f00b fb29 	bl	800f738 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2203      	movs	r2, #3
 80040ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f004 fd92 	bl	8008c2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	687e      	ldr	r6, [r7, #4]
 8004112:	466d      	mov	r5, sp
 8004114:	f106 0410 	add.w	r4, r6, #16
 8004118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800411a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800411c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800411e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004120:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004124:	e885 0003 	stmia.w	r5, {r0, r1}
 8004128:	1d33      	adds	r3, r6, #4
 800412a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	f004 fc69 	bl	8008a04 <USB_CoreInit>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0d0      	b.n	80042e6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f004 fd80 	bl	8008c50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	e04a      	b.n	80041ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	333d      	adds	r3, #61	; 0x3d
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	333c      	adds	r3, #60	; 0x3c
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	b298      	uxth	r0, r3
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	3342      	adds	r3, #66	; 0x42
 8004192:	4602      	mov	r2, r0
 8004194:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004196:	7bfa      	ldrb	r2, [r7, #15]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	333f      	adds	r3, #63	; 0x3f
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	3344      	adds	r3, #68	; 0x44
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	3348      	adds	r3, #72	; 0x48
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	3350      	adds	r3, #80	; 0x50
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	3301      	adds	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3af      	bcc.n	8004156 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
 80041fa:	e044      	b.n	8004286 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800423e:	7bfa      	ldrb	r2, [r7, #15]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	3301      	adds	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
 8004286:	7bfa      	ldrb	r2, [r7, #15]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d3b5      	bcc.n	80041fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	687e      	ldr	r6, [r7, #4]
 8004298:	466d      	mov	r5, sp
 800429a:	f106 0410 	add.w	r4, r6, #16
 800429e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ae:	1d33      	adds	r3, r6, #4
 80042b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042b2:	6838      	ldr	r0, [r7, #0]
 80042b4:	f004 fcf6 	bl	8008ca4 <USB_DevInit>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e00d      	b.n	80042e6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f005 fd3e 	bl	8009d60 <USB_DevDisconnect>

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_PCD_Start+0x1c>
 8004306:	2302      	movs	r3, #2
 8004308:	e020      	b.n	800434c <HAL_PCD_Start+0x5e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	2b01      	cmp	r3, #1
 8004318:	d109      	bne.n	800432e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800431e:	2b01      	cmp	r3, #1
 8004320:	d005      	beq.n	800432e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f004 fc6a 	bl	8008c0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f005 fcee 	bl	8009d1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004354:	b590      	push	{r4, r7, lr}
 8004356:	b08d      	sub	sp, #52	; 0x34
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f005 fdac 	bl	8009ec8 <USB_GetMode>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 839d 	bne.w	8004ab2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f005 fd10 	bl	8009da2 <USB_ReadInterrupts>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8393 	beq.w	8004ab0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f005 fd07 	bl	8009da2 <USB_ReadInterrupts>
 8004394:	4603      	mov	r3, r0
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b02      	cmp	r3, #2
 800439c:	d107      	bne.n	80043ae <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f002 0202 	and.w	r2, r2, #2
 80043ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f005 fcf5 	bl	8009da2 <USB_ReadInterrupts>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d161      	bne.n	8004486 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0210 	bic.w	r2, r2, #16
 80043d0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	f003 020f 	and.w	r2, r3, #15
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	3304      	adds	r3, #4
 80043f0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	0c5b      	lsrs	r3, r3, #17
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d124      	bne.n	8004448 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d035      	beq.n	8004476 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004418:	b29b      	uxth	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	6a38      	ldr	r0, [r7, #32]
 800441e:	f005 fb5b 	bl	8009ad8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800442e:	441a      	add	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004440:	441a      	add	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	619a      	str	r2, [r3, #24]
 8004446:	e016      	b.n	8004476 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	0c5b      	lsrs	r3, r3, #17
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2b06      	cmp	r3, #6
 8004452:	d110      	bne.n	8004476 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800445a:	2208      	movs	r2, #8
 800445c:	4619      	mov	r1, r3
 800445e:	6a38      	ldr	r0, [r7, #32]
 8004460:	f005 fb3a 	bl	8009ad8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004470:	441a      	add	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0210 	orr.w	r2, r2, #16
 8004484:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f005 fc89 	bl	8009da2 <USB_ReadInterrupts>
 8004490:	4603      	mov	r3, r0
 8004492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004496:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800449a:	d16e      	bne.n	800457a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f005 fc8f 	bl	8009dc8 <USB_ReadDevAllOutEpInterrupt>
 80044aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80044ac:	e062      	b.n	8004574 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d057      	beq.n	8004568 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	4611      	mov	r1, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f005 fcb4 	bl	8009e30 <USB_ReadDevOutEPInterrupt>
 80044c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00c      	beq.n	80044ee <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	2301      	movs	r3, #1
 80044e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80044e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fdb1 	bl	8005050 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00c      	beq.n	8004512 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	2308      	movs	r3, #8
 8004508:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800450a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 feab 	bl	8005268 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	461a      	mov	r2, r3
 800452a:	2310      	movs	r3, #16
 800452c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	2320      	movs	r3, #32
 8004548:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004560:	461a      	mov	r2, r3
 8004562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004566:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	3301      	adds	r3, #1
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d199      	bne.n	80044ae <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f005 fc0f 	bl	8009da2 <USB_ReadInterrupts>
 8004584:	4603      	mov	r3, r0
 8004586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800458e:	f040 80c0 	bne.w	8004712 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f005 fc30 	bl	8009dfc <USB_ReadDevAllInEpInterrupt>
 800459c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045a2:	e0b2      	b.n	800470a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80a7 	beq.w	80046fe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f005 fc56 	bl	8009e6c <USB_ReadDevInEPInterrupt>
 80045c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d057      	beq.n	800467c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	2201      	movs	r2, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69f9      	ldr	r1, [r7, #28]
 80045e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ec:	4013      	ands	r3, r2
 80045ee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	461a      	mov	r2, r3
 80045fe:	2301      	movs	r3, #1
 8004600:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d132      	bne.n	8004670 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	3348      	adds	r3, #72	; 0x48
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4403      	add	r3, r0
 800462a:	3344      	adds	r3, #68	; 0x44
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4419      	add	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4403      	add	r3, r0
 800463e:	3348      	adds	r3, #72	; 0x48
 8004640:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d113      	bne.n	8004670 <HAL_PCD_IRQHandler+0x31c>
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	3350      	adds	r3, #80	; 0x50
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004668:	461a      	mov	r2, r3
 800466a:	2101      	movs	r1, #1
 800466c:	f005 fc5e 	bl	8009f2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f00b f8df 	bl	800f83a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004692:	461a      	mov	r2, r3
 8004694:	2308      	movs	r3, #8
 8004696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	461a      	mov	r2, r3
 80046b0:	2310      	movs	r3, #16
 80046b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	461a      	mov	r2, r3
 80046cc:	2340      	movs	r3, #64	; 0x40
 80046ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	461a      	mov	r2, r3
 80046e8:	2302      	movs	r3, #2
 80046ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80046f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fc1b 	bl	8004f34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	3301      	adds	r3, #1
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f af49 	bne.w	80045a4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f005 fb43 	bl	8009da2 <USB_ReadInterrupts>
 800471c:	4603      	mov	r3, r0
 800471e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004726:	d122      	bne.n	800476e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004742:	2b01      	cmp	r3, #1
 8004744:	d108      	bne.n	8004758 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800474e:	2100      	movs	r1, #0
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fe27 	bl	80053a4 <HAL_PCDEx_LPM_Callback>
 8004756:	e002      	b.n	800475e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f00b f8e5 	bl	800f928 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800476c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f005 fb15 	bl	8009da2 <USB_ReadInterrupts>
 8004778:	4603      	mov	r3, r0
 800477a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004782:	d112      	bne.n	80047aa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d102      	bne.n	800479a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f00b f8a1 	bl	800f8dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047a8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f005 faf7 	bl	8009da2 <USB_ReadInterrupts>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047be:	f040 80c7 	bne.w	8004950 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2110      	movs	r1, #16
 80047dc:	4618      	mov	r0, r3
 80047de:	f004 fbc5 	bl	8008f6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e6:	e056      	b.n	8004896 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	461a      	mov	r2, r3
 80047f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800481a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004836:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800483a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	461a      	mov	r2, r3
 800484a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800484e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800486e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800488e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	3301      	adds	r3, #1
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489c:	429a      	cmp	r2, r3
 800489e:	d3a3      	bcc.n	80047e8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80048b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d016      	beq.n	80048ea <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048cc:	f043 030b 	orr.w	r3, r3, #11
 80048d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048e2:	f043 030b 	orr.w	r3, r3, #11
 80048e6:	6453      	str	r3, [r2, #68]	; 0x44
 80048e8:	e015      	b.n	8004916 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048fc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004900:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004910:	f043 030b 	orr.w	r3, r3, #11
 8004914:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004924:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004928:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800493a:	461a      	mov	r2, r3
 800493c:	f005 faf6 	bl	8009f2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695a      	ldr	r2, [r3, #20]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800494e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f005 fa24 	bl	8009da2 <USB_ReadInterrupts>
 800495a:	4603      	mov	r3, r0
 800495c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004964:	d124      	bne.n	80049b0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f005 faba 	bl	8009ee4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f004 fb5a 	bl	800902e <USB_GetDevSpeed>
 800497a:	4603      	mov	r3, r0
 800497c:	461a      	mov	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681c      	ldr	r4, [r3, #0]
 8004986:	f001 f959 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 800498a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	4620      	mov	r0, r4
 8004996:	f004 f897 	bl	8008ac8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f00a ff75 	bl	800f88a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80049ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f005 f9f4 	bl	8009da2 <USB_ReadInterrupts>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d10a      	bne.n	80049da <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f00a ff52 	bl	800f86e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f002 0208 	and.w	r2, r2, #8
 80049d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f005 f9df 	bl	8009da2 <USB_ReadInterrupts>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ee:	d10f      	bne.n	8004a10 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f00a ffb4 	bl	800f968 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f005 f9c4 	bl	8009da2 <USB_ReadInterrupts>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a24:	d10f      	bne.n	8004a46 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f00a ff87 	bl	800f944 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f005 f9a9 	bl	8009da2 <USB_ReadInterrupts>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5a:	d10a      	bne.n	8004a72 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f00a ff95 	bl	800f98c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f005 f993 	bl	8009da2 <USB_ReadInterrupts>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d115      	bne.n	8004ab2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f00a ff85 	bl	800f9a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	e000      	b.n	8004ab2 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004ab0:	bf00      	nop
    }
  }
}
 8004ab2:	3734      	adds	r7, #52	; 0x34
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd90      	pop	{r4, r7, pc}

08004ab8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_PCD_SetAddress+0x1a>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e013      	b.n	8004afa <HAL_PCD_SetAddress+0x42>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	78fa      	ldrb	r2, [r7, #3]
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f005 f8f1 	bl	8009cd2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	4608      	mov	r0, r1
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4603      	mov	r3, r0
 8004b12:	70fb      	strb	r3, [r7, #3]
 8004b14:	460b      	mov	r3, r1
 8004b16:	803b      	strh	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	da0f      	bge.n	8004b48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	f003 020f 	and.w	r2, r3, #15
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	3338      	adds	r3, #56	; 0x38
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	705a      	strb	r2, [r3, #1]
 8004b46:	e00f      	b.n	8004b68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3304      	adds	r3, #4
 8004b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b74:	883a      	ldrh	r2, [r7, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	78ba      	ldrb	r2, [r7, #2]
 8004b7e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b92:	78bb      	ldrb	r3, [r7, #2]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d102      	bne.n	8004b9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_PCD_EP_Open+0xaa>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e00e      	b.n	8004bca <HAL_PCD_EP_Open+0xc8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68f9      	ldr	r1, [r7, #12]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f004 fa5c 	bl	8009078 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da0f      	bge.n	8004c06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	3338      	adds	r3, #56	; 0x38
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	705a      	strb	r2, [r3, #1]
 8004c04:	e00f      	b.n	8004c26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	f003 020f 	and.w	r2, r3, #15
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_PCD_EP_Close+0x6e>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e00e      	b.n	8004c5e <HAL_PCD_EP_Close+0x8c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f004 fa9a 	bl	8009188 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b086      	sub	sp, #24
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	460b      	mov	r3, r1
 8004c74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c76:	7afb      	ldrb	r3, [r7, #11]
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca8:	7afb      	ldrb	r3, [r7, #11]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d102      	bne.n	8004cc2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cc2:	7afb      	ldrb	r3, [r7, #11]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	f004 fd75 	bl	80097c8 <USB_EP0StartXfer>
 8004cde:	e008      	b.n	8004cf2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	6979      	ldr	r1, [r7, #20]
 8004cee:	f004 fb27 	bl	8009340 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	f003 020f 	and.w	r2, r3, #15
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d1e:	681b      	ldr	r3, [r3, #0]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d3c:	7afb      	ldrb	r3, [r7, #11]
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	4613      	mov	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	3338      	adds	r3, #56	; 0x38
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	3304      	adds	r3, #4
 8004d52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d6c:	7afb      	ldrb	r3, [r7, #11]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d102      	bne.n	8004d86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d86:	7afb      	ldrb	r3, [r7, #11]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6979      	ldr	r1, [r7, #20]
 8004d9e:	f004 fd13 	bl	80097c8 <USB_EP0StartXfer>
 8004da2:	e008      	b.n	8004db6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	f004 fac5 	bl	8009340 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	f003 020f 	and.w	r2, r3, #15
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d901      	bls.n	8004dde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e050      	b.n	8004e80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	da0f      	bge.n	8004e06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	f003 020f 	and.w	r2, r3, #15
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	3338      	adds	r3, #56	; 0x38
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	705a      	strb	r2, [r3, #1]
 8004e04:	e00d      	b.n	8004e22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4413      	add	r3, r2
 8004e18:	3304      	adds	r3, #4
 8004e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_PCD_EP_SetStall+0x82>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e01e      	b.n	8004e80 <HAL_PCD_EP_SetStall+0xc0>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68f9      	ldr	r1, [r7, #12]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f004 fe6a 	bl	8009b2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	b2d9      	uxtb	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e70:	461a      	mov	r2, r3
 8004e72:	f005 f85b 	bl	8009f2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	f003 020f 	and.w	r2, r3, #15
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d901      	bls.n	8004ea6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e042      	b.n	8004f2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	da0f      	bge.n	8004ece <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	f003 020f 	and.w	r2, r3, #15
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	3338      	adds	r3, #56	; 0x38
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	705a      	strb	r2, [r3, #1]
 8004ecc:	e00f      	b.n	8004eee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_PCD_EP_ClrStall+0x86>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e00e      	b.n	8004f2c <HAL_PCD_EP_ClrStall+0xa4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f004 fe72 	bl	8009c06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	3338      	adds	r3, #56	; 0x38
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	3304      	adds	r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d901      	bls.n	8004f6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e06c      	b.n	8005046 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d902      	bls.n	8004f88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3303      	adds	r3, #3
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f90:	e02b      	b.n	8004fea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d902      	bls.n	8004fae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	3303      	adds	r3, #3
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	68d9      	ldr	r1, [r3, #12]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	4603      	mov	r3, r0
 8004fcc:	6978      	ldr	r0, [r7, #20]
 8004fce:	f004 fd4e 	bl	8009a6e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	441a      	add	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d809      	bhi.n	8005014 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005008:	429a      	cmp	r2, r3
 800500a:	d203      	bcs.n	8005014 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1be      	bne.n	8004f92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	429a      	cmp	r2, r3
 800501e:	d811      	bhi.n	8005044 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	2201      	movs	r2, #1
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	43db      	mvns	r3, r3
 800503a:	6939      	ldr	r1, [r7, #16]
 800503c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005040:	4013      	ands	r3, r2
 8005042:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	333c      	adds	r3, #60	; 0x3c
 8005068:	3304      	adds	r3, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b01      	cmp	r3, #1
 8005084:	f040 80a0 	bne.w	80051c8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d015      	beq.n	80050be <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a72      	ldr	r2, [pc, #456]	; (8005260 <PCD_EP_OutXfrComplete_int+0x210>)
 8005096:	4293      	cmp	r3, r2
 8005098:	f240 80dd 	bls.w	8005256 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 80d7 	beq.w	8005256 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b4:	461a      	mov	r2, r3
 80050b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ba:	6093      	str	r3, [r2, #8]
 80050bc:	e0cb      	b.n	8005256 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	461a      	mov	r2, r3
 80050d6:	2320      	movs	r3, #32
 80050d8:	6093      	str	r3, [r2, #8]
 80050da:	e0bc      	b.n	8005256 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f040 80b7 	bne.w	8005256 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4a5d      	ldr	r2, [pc, #372]	; (8005260 <PCD_EP_OutXfrComplete_int+0x210>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d90f      	bls.n	8005110 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	461a      	mov	r2, r3
 8005108:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510c:	6093      	str	r3, [r2, #8]
 800510e:	e0a2      	b.n	8005256 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005122:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	0159      	lsls	r1, r3, #5
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	440b      	add	r3, r1
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005136:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4403      	add	r3, r0
 8005146:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800514a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	1a9b      	subs	r3, r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4403      	add	r3, r0
 800516e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4419      	add	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4403      	add	r3, r0
 8005184:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005188:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d114      	bne.n	80051ba <PCD_EP_OutXfrComplete_int+0x16a>
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d108      	bne.n	80051ba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051b2:	461a      	mov	r2, r3
 80051b4:	2101      	movs	r1, #1
 80051b6:	f004 feb9 	bl	8009f2c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f00a fb1f 	bl	800f804 <HAL_PCD_DataOutStageCallback>
 80051c6:	e046      	b.n	8005256 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a26      	ldr	r2, [pc, #152]	; (8005264 <PCD_EP_OutXfrComplete_int+0x214>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d124      	bne.n	800521a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	461a      	mov	r2, r3
 80051e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ec:	6093      	str	r3, [r2, #8]
 80051ee:	e032      	b.n	8005256 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	461a      	mov	r2, r3
 8005208:	2320      	movs	r3, #32
 800520a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f00a faf6 	bl	800f804 <HAL_PCD_DataOutStageCallback>
 8005218:	e01d      	b.n	8005256 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d114      	bne.n	800524a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005242:	461a      	mov	r2, r3
 8005244:	2100      	movs	r1, #0
 8005246:	f004 fe71 	bl	8009f2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f00a fad7 	bl	800f804 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	4f54300a 	.word	0x4f54300a
 8005264:	4f54310a 	.word	0x4f54310a

08005268 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	333c      	adds	r3, #60	; 0x3c
 8005280:	3304      	adds	r3, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d90e      	bls.n	80052bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	461a      	mov	r2, r3
 80052b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f00a fa8f 	bl	800f7e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d90c      	bls.n	80052e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d108      	bne.n	80052e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052dc:	461a      	mov	r2, r3
 80052de:	2101      	movs	r1, #1
 80052e0:	f004 fe24 	bl	8009f2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	4f54300a 	.word	0x4f54300a

080052f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
 8005300:	4613      	mov	r3, r2
 8005302:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d107      	bne.n	8005322 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005312:	883b      	ldrh	r3, [r7, #0]
 8005314:	0419      	lsls	r1, r3, #16
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	430a      	orrs	r2, r1
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
 8005320:	e028      	b.n	8005374 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	4413      	add	r3, r2
 800532e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005330:	2300      	movs	r3, #0
 8005332:	73fb      	strb	r3, [r7, #15]
 8005334:	e00d      	b.n	8005352 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	3340      	adds	r3, #64	; 0x40
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	4413      	add	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	3301      	adds	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
 8005352:	7bfa      	ldrb	r2, [r7, #15]
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	3b01      	subs	r3, #1
 8005358:	429a      	cmp	r2, r3
 800535a:	d3ec      	bcc.n	8005336 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800535c:	883b      	ldrh	r3, [r7, #0]
 800535e:	0418      	lsls	r0, r3, #16
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6819      	ldr	r1, [r3, #0]
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	3b01      	subs	r3, #1
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	4302      	orrs	r2, r0
 800536c:	3340      	adds	r3, #64	; 0x40
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	887a      	ldrh	r2, [r7, #2]
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e264      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d075      	beq.n	80054c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053da:	4ba3      	ldr	r3, [pc, #652]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d00c      	beq.n	8005400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e6:	4ba0      	ldr	r3, [pc, #640]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d112      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f2:	4b9d      	ldr	r3, [pc, #628]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fe:	d10b      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	4b99      	ldr	r3, [pc, #612]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d05b      	beq.n	80054c4 <HAL_RCC_OscConfig+0x108>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d157      	bne.n	80054c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e23f      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d106      	bne.n	8005430 <HAL_RCC_OscConfig+0x74>
 8005422:	4b91      	ldr	r3, [pc, #580]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a90      	ldr	r2, [pc, #576]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e01d      	b.n	800546c <HAL_RCC_OscConfig+0xb0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x98>
 800543a:	4b8b      	ldr	r3, [pc, #556]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a8a      	ldr	r2, [pc, #552]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b88      	ldr	r3, [pc, #544]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a87      	ldr	r2, [pc, #540]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e00b      	b.n	800546c <HAL_RCC_OscConfig+0xb0>
 8005454:	4b84      	ldr	r3, [pc, #528]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a83      	ldr	r2, [pc, #524]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 800545a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b81      	ldr	r3, [pc, #516]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a80      	ldr	r2, [pc, #512]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fd fd0e 	bl	8002e94 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547c:	f7fd fd0a 	bl	8002e94 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e204      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	4b76      	ldr	r3, [pc, #472]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0xc0>
 800549a:	e014      	b.n	80054c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fd fcfa 	bl	8002e94 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fd fcf6 	bl	8002e94 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e1f0      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b6:	4b6c      	ldr	r3, [pc, #432]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0xe8>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d063      	beq.n	800559a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054d2:	4b65      	ldr	r3, [pc, #404]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054de:	4b62      	ldr	r3, [pc, #392]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d11c      	bne.n	8005524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ea:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d116      	bne.n	8005524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f6:	4b5c      	ldr	r3, [pc, #368]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_RCC_OscConfig+0x152>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d001      	beq.n	800550e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e1c4      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	4b56      	ldr	r3, [pc, #344]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4952      	ldr	r1, [pc, #328]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005522:	e03a      	b.n	800559a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d020      	beq.n	800556e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800552c:	4b4f      	ldr	r3, [pc, #316]	; (800566c <HAL_RCC_OscConfig+0x2b0>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fd fcaf 	bl	8002e94 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800553a:	f7fd fcab 	bl	8002e94 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e1a5      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554c:	4b46      	ldr	r3, [pc, #280]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	4b43      	ldr	r3, [pc, #268]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4940      	ldr	r1, [pc, #256]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	4313      	orrs	r3, r2
 800556a:	600b      	str	r3, [r1, #0]
 800556c:	e015      	b.n	800559a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556e:	4b3f      	ldr	r3, [pc, #252]	; (800566c <HAL_RCC_OscConfig+0x2b0>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005574:	f7fd fc8e 	bl	8002e94 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557c:	f7fd fc8a 	bl	8002e94 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e184      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558e:	4b36      	ldr	r3, [pc, #216]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d030      	beq.n	8005608 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ae:	4b30      	ldr	r3, [pc, #192]	; (8005670 <HAL_RCC_OscConfig+0x2b4>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fd fc6e 	bl	8002e94 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055bc:	f7fd fc6a 	bl	8002e94 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e164      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ce:	4b26      	ldr	r3, [pc, #152]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x200>
 80055da:	e015      	b.n	8005608 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055dc:	4b24      	ldr	r3, [pc, #144]	; (8005670 <HAL_RCC_OscConfig+0x2b4>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e2:	f7fd fc57 	bl	8002e94 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ea:	f7fd fc53 	bl	8002e94 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e14d      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055fc:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 80055fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f0      	bne.n	80055ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80a0 	beq.w	8005756 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005616:	2300      	movs	r3, #0
 8005618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800561a:	4b13      	ldr	r3, [pc, #76]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10f      	bne.n	8005646 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	4a0e      	ldr	r2, [pc, #56]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005634:	6413      	str	r3, [r2, #64]	; 0x40
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <HAL_RCC_OscConfig+0x2ac>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCC_OscConfig+0x2b8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d121      	bne.n	8005696 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005652:	4b08      	ldr	r3, [pc, #32]	; (8005674 <HAL_RCC_OscConfig+0x2b8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a07      	ldr	r2, [pc, #28]	; (8005674 <HAL_RCC_OscConfig+0x2b8>)
 8005658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800565e:	f7fd fc19 	bl	8002e94 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005664:	e011      	b.n	800568a <HAL_RCC_OscConfig+0x2ce>
 8005666:	bf00      	nop
 8005668:	40023800 	.word	0x40023800
 800566c:	42470000 	.word	0x42470000
 8005670:	42470e80 	.word	0x42470e80
 8005674:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005678:	f7fd fc0c 	bl	8002e94 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e106      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568a:	4b85      	ldr	r3, [pc, #532]	; (80058a0 <HAL_RCC_OscConfig+0x4e4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d106      	bne.n	80056ac <HAL_RCC_OscConfig+0x2f0>
 800569e:	4b81      	ldr	r3, [pc, #516]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	4a80      	ldr	r2, [pc, #512]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	6713      	str	r3, [r2, #112]	; 0x70
 80056aa:	e01c      	b.n	80056e6 <HAL_RCC_OscConfig+0x32a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b05      	cmp	r3, #5
 80056b2:	d10c      	bne.n	80056ce <HAL_RCC_OscConfig+0x312>
 80056b4:	4b7b      	ldr	r3, [pc, #492]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b8:	4a7a      	ldr	r2, [pc, #488]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	6713      	str	r3, [r2, #112]	; 0x70
 80056c0:	4b78      	ldr	r3, [pc, #480]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	4a77      	ldr	r2, [pc, #476]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	6713      	str	r3, [r2, #112]	; 0x70
 80056cc:	e00b      	b.n	80056e6 <HAL_RCC_OscConfig+0x32a>
 80056ce:	4b75      	ldr	r3, [pc, #468]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	4a74      	ldr	r2, [pc, #464]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	6713      	str	r3, [r2, #112]	; 0x70
 80056da:	4b72      	ldr	r3, [pc, #456]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	4a71      	ldr	r2, [pc, #452]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80056e0:	f023 0304 	bic.w	r3, r3, #4
 80056e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d015      	beq.n	800571a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7fd fbd1 	bl	8002e94 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f4:	e00a      	b.n	800570c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f6:	f7fd fbcd 	bl	8002e94 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f241 3288 	movw	r2, #5000	; 0x1388
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e0c5      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570c:	4b65      	ldr	r3, [pc, #404]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ee      	beq.n	80056f6 <HAL_RCC_OscConfig+0x33a>
 8005718:	e014      	b.n	8005744 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571a:	f7fd fbbb 	bl	8002e94 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fd fbb7 	bl	8002e94 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e0af      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005738:	4b5a      	ldr	r3, [pc, #360]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ee      	bne.n	8005722 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005744:	7dfb      	ldrb	r3, [r7, #23]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d105      	bne.n	8005756 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800574a:	4b56      	ldr	r3, [pc, #344]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	4a55      	ldr	r2, [pc, #340]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 8005750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005754:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 809b 	beq.w	8005896 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005760:	4b50      	ldr	r3, [pc, #320]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 030c 	and.w	r3, r3, #12
 8005768:	2b08      	cmp	r3, #8
 800576a:	d05c      	beq.n	8005826 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d141      	bne.n	80057f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005774:	4b4c      	ldr	r3, [pc, #304]	; (80058a8 <HAL_RCC_OscConfig+0x4ec>)
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577a:	f7fd fb8b 	bl	8002e94 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005782:	f7fd fb87 	bl	8002e94 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e081      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005794:	4b43      	ldr	r3, [pc, #268]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f0      	bne.n	8005782 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	019b      	lsls	r3, r3, #6
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	3b01      	subs	r3, #1
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	061b      	lsls	r3, r3, #24
 80057c4:	4937      	ldr	r1, [pc, #220]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ca:	4b37      	ldr	r3, [pc, #220]	; (80058a8 <HAL_RCC_OscConfig+0x4ec>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d0:	f7fd fb60 	bl	8002e94 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d8:	f7fd fb5c 	bl	8002e94 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e056      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ea:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0f0      	beq.n	80057d8 <HAL_RCC_OscConfig+0x41c>
 80057f6:	e04e      	b.n	8005896 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <HAL_RCC_OscConfig+0x4ec>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fe:	f7fd fb49 	bl	8002e94 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005806:	f7fd fb45 	bl	8002e94 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e03f      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005818:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f0      	bne.n	8005806 <HAL_RCC_OscConfig+0x44a>
 8005824:	e037      	b.n	8005896 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e032      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005832:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <HAL_RCC_OscConfig+0x4e8>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d028      	beq.n	8005892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800584a:	429a      	cmp	r2, r3
 800584c:	d121      	bne.n	8005892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d11a      	bne.n	8005892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005862:	4013      	ands	r3, r2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005868:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800586a:	4293      	cmp	r3, r2
 800586c:	d111      	bne.n	8005892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	3b01      	subs	r3, #1
 800587c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d107      	bne.n	8005892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800588e:	429a      	cmp	r2, r3
 8005890:	d001      	beq.n	8005896 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40007000 	.word	0x40007000
 80058a4:	40023800 	.word	0x40023800
 80058a8:	42470060 	.word	0x42470060

080058ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0cc      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d90c      	bls.n	80058e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ce:	4b65      	ldr	r3, [pc, #404]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d6:	4b63      	ldr	r3, [pc, #396]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0b8      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d020      	beq.n	8005936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005900:	4b59      	ldr	r3, [pc, #356]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a58      	ldr	r2, [pc, #352]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800590a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005918:	4b53      	ldr	r3, [pc, #332]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4a52      	ldr	r2, [pc, #328]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005924:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	494d      	ldr	r1, [pc, #308]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d044      	beq.n	80059cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594a:	4b47      	ldr	r3, [pc, #284]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d119      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e07f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d003      	beq.n	800596a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005966:	2b03      	cmp	r3, #3
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596a:	4b3f      	ldr	r3, [pc, #252]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e06f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597a:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e067      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800598a:	4b37      	ldr	r3, [pc, #220]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f023 0203 	bic.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4934      	ldr	r1, [pc, #208]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	4313      	orrs	r3, r2
 800599a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800599c:	f7fd fa7a 	bl	8002e94 <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	e00a      	b.n	80059ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a4:	f7fd fa76 	bl	8002e94 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e04f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ba:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 020c 	and.w	r2, r3, #12
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d1eb      	bne.n	80059a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d20c      	bcs.n	80059f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e032      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4916      	ldr	r1, [pc, #88]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	490e      	ldr	r1, [pc, #56]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a32:	f000 f821 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8005a36:	4602      	mov	r2, r0
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	490a      	ldr	r1, [pc, #40]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 8005a44:	5ccb      	ldrb	r3, [r1, r3]
 8005a46:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fd f9da 	bl	8002e0c <HAL_InitTick>

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40023c00 	.word	0x40023c00
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	08014b08 	.word	0x08014b08
 8005a70:	20000008 	.word	0x20000008
 8005a74:	2000000c 	.word	0x2000000c

08005a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a90:	4b67      	ldr	r3, [pc, #412]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 030c 	and.w	r3, r3, #12
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d00d      	beq.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	f200 80bd 	bhi.w	8005c1c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x34>
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aaa:	e0b7      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aac:	4b61      	ldr	r3, [pc, #388]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005aae:	60bb      	str	r3, [r7, #8]
       break;
 8005ab0:	e0b7      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ab2:	4b61      	ldr	r3, [pc, #388]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ab4:	60bb      	str	r3, [r7, #8]
      break;
 8005ab6:	e0b4      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ab8:	4b5d      	ldr	r3, [pc, #372]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ac2:	4b5b      	ldr	r3, [pc, #364]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d04d      	beq.n	8005b6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ace:	4b58      	ldr	r3, [pc, #352]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	099b      	lsrs	r3, r3, #6
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	ea02 0800 	and.w	r8, r2, r0
 8005ae6:	ea03 0901 	and.w	r9, r3, r1
 8005aea:	4640      	mov	r0, r8
 8005aec:	4649      	mov	r1, r9
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	014b      	lsls	r3, r1, #5
 8005af8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005afc:	0142      	lsls	r2, r0, #5
 8005afe:	4610      	mov	r0, r2
 8005b00:	4619      	mov	r1, r3
 8005b02:	ebb0 0008 	subs.w	r0, r0, r8
 8005b06:	eb61 0109 	sbc.w	r1, r1, r9
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	018b      	lsls	r3, r1, #6
 8005b14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b18:	0182      	lsls	r2, r0, #6
 8005b1a:	1a12      	subs	r2, r2, r0
 8005b1c:	eb63 0301 	sbc.w	r3, r3, r1
 8005b20:	f04f 0000 	mov.w	r0, #0
 8005b24:	f04f 0100 	mov.w	r1, #0
 8005b28:	00d9      	lsls	r1, r3, #3
 8005b2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b2e:	00d0      	lsls	r0, r2, #3
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	eb12 0208 	adds.w	r2, r2, r8
 8005b38:	eb43 0309 	adc.w	r3, r3, r9
 8005b3c:	f04f 0000 	mov.w	r0, #0
 8005b40:	f04f 0100 	mov.w	r1, #0
 8005b44:	0259      	lsls	r1, r3, #9
 8005b46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b4a:	0250      	lsls	r0, r2, #9
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	f7fb f8a4 	bl	8000ca8 <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4613      	mov	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e04a      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6a:	4b31      	ldr	r3, [pc, #196]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	099b      	lsrs	r3, r3, #6
 8005b70:	461a      	mov	r2, r3
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b7a:	f04f 0100 	mov.w	r1, #0
 8005b7e:	ea02 0400 	and.w	r4, r2, r0
 8005b82:	ea03 0501 	and.w	r5, r3, r1
 8005b86:	4620      	mov	r0, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	014b      	lsls	r3, r1, #5
 8005b94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b98:	0142      	lsls	r2, r0, #5
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	1b00      	subs	r0, r0, r4
 8005ba0:	eb61 0105 	sbc.w	r1, r1, r5
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	018b      	lsls	r3, r1, #6
 8005bae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bb2:	0182      	lsls	r2, r0, #6
 8005bb4:	1a12      	subs	r2, r2, r0
 8005bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8005bba:	f04f 0000 	mov.w	r0, #0
 8005bbe:	f04f 0100 	mov.w	r1, #0
 8005bc2:	00d9      	lsls	r1, r3, #3
 8005bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bc8:	00d0      	lsls	r0, r2, #3
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	1912      	adds	r2, r2, r4
 8005bd0:	eb45 0303 	adc.w	r3, r5, r3
 8005bd4:	f04f 0000 	mov.w	r0, #0
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	0299      	lsls	r1, r3, #10
 8005bde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005be2:	0290      	lsls	r0, r2, #10
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4610      	mov	r0, r2
 8005bea:	4619      	mov	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	f7fb f858 	bl	8000ca8 <__aeabi_uldivmod>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c00:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c18:	60bb      	str	r3, [r7, #8]
      break;
 8005c1a:	e002      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c1e:	60bb      	str	r3, [r7, #8]
      break;
 8005c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c22:	68bb      	ldr	r3, [r7, #8]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800
 8005c34:	00f42400 	.word	0x00f42400
 8005c38:	007a1200 	.word	0x007a1200

08005c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c40:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c42:	681b      	ldr	r3, [r3, #0]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000008 	.word	0x20000008

08005c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c58:	f7ff fff0 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	0a9b      	lsrs	r3, r3, #10
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	4903      	ldr	r1, [pc, #12]	; (8005c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c6a:	5ccb      	ldrb	r3, [r1, r3]
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40023800 	.word	0x40023800
 8005c78:	08014b18 	.word	0x08014b18

08005c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c80:	f7ff ffdc 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	0b5b      	lsrs	r3, r3, #13
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	4903      	ldr	r1, [pc, #12]	; (8005ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	08014b18 	.word	0x08014b18

08005ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d035      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ccc:	4b62      	ldr	r3, [pc, #392]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd2:	f7fd f8df 	bl	8002e94 <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cda:	f7fd f8db 	bl	8002e94 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0b0      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cec:	4b5b      	ldr	r3, [pc, #364]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	019a      	lsls	r2, r3, #6
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	071b      	lsls	r3, r3, #28
 8005d04:	4955      	ldr	r1, [pc, #340]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d0c:	4b52      	ldr	r3, [pc, #328]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d12:	f7fd f8bf 	bl	8002e94 <HAL_GetTick>
 8005d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d1a:	f7fd f8bb 	bl	8002e94 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e090      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d2c:	4b4b      	ldr	r3, [pc, #300]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8083 	beq.w	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b44      	ldr	r3, [pc, #272]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	4a43      	ldr	r2, [pc, #268]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d54:	6413      	str	r3, [r2, #64]	; 0x40
 8005d56:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d62:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3e      	ldr	r2, [pc, #248]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d6e:	f7fd f891 	bl	8002e94 <HAL_GetTick>
 8005d72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d74:	e008      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d76:	f7fd f88d 	bl	8002e94 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e062      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d88:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d94:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d02f      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d028      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db2:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dbc:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc2:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dc8:	4a24      	ldr	r2, [pc, #144]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dce:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d114      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dda:	f7fd f85b 	bl	8002e94 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de0:	e00a      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de2:	f7fd f857 	bl	8002e94 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e02a      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ee      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e10:	d10d      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e26:	490d      	ldr	r1, [pc, #52]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]
 8005e2c:	e005      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e38:	6093      	str	r3, [r2, #8]
 8005e3a:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e46:	4905      	ldr	r1, [pc, #20]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	42470068 	.word	0x42470068
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	40007000 	.word	0x40007000
 8005e64:	42470e40 	.word	0x42470e40

08005e68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e083      	b.n	8005f82 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	7f5b      	ldrb	r3, [r3, #29]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d105      	bne.n	8005e90 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fc fcfa 	bl	8002884 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	22ca      	movs	r2, #202	; 0xca
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2253      	movs	r2, #83	; 0x53
 8005ea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 faa8 	bl	80063fc <RTC_EnterInitMode>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	22ff      	movs	r2, #255	; 0xff
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e05e      	b.n	8005f82 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6899      	ldr	r1, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68d2      	ldr	r2, [r2, #12]
 8005efe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6919      	ldr	r1, [r3, #16]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	041a      	lsls	r2, r3, #16
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f22:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10e      	bne.n	8005f50 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa3a 	bl	80063ac <HAL_RTC_WaitForSynchro>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	22ff      	movs	r2, #255	; 0xff
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e018      	b.n	8005f82 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	22ff      	movs	r2, #255	; 0xff
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005f80:	2300      	movs	r3, #0
  }
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f8a:	b590      	push	{r4, r7, lr}
 8005f8c:	b087      	sub	sp, #28
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	7f1b      	ldrb	r3, [r3, #28]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_RTC_SetTime+0x1c>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e0aa      	b.n	80060fc <HAL_RTC_SetTime+0x172>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d126      	bne.n	8006006 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d102      	bne.n	8005fcc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fa3f 	bl	8006454 <RTC_ByteToBcd2>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fa38 	bl	8006454 <RTC_ByteToBcd2>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005fe8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	789b      	ldrb	r3, [r3, #2]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fa30 	bl	8006454 <RTC_ByteToBcd2>
 8005ff4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ff6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	78db      	ldrb	r3, [r3, #3]
 8005ffe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e018      	b.n	8006038 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006026:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800602c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	78db      	ldrb	r3, [r3, #3]
 8006032:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	22ca      	movs	r2, #202	; 0xca
 800603e:	625a      	str	r2, [r3, #36]	; 0x24
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2253      	movs	r2, #83	; 0x53
 8006046:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f9d7 	bl	80063fc <RTC_EnterInitMode>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	22ff      	movs	r2, #255	; 0xff
 800605a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2204      	movs	r2, #4
 8006060:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e047      	b.n	80060fc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006076:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800607a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800608a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6899      	ldr	r1, [r3, #8]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	431a      	orrs	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d111      	bne.n	80060e6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f972 	bl	80063ac <HAL_RTC_WaitForSynchro>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	22ff      	movs	r2, #255	; 0xff
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2204      	movs	r2, #4
 80060da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e00a      	b.n	80060fc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	22ff      	movs	r2, #255	; 0xff
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80060fa:	2300      	movs	r3, #0
  }
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	bd90      	pop	{r4, r7, pc}

08006104 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006136:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800613a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	0c1b      	lsrs	r3, r3, #16
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006146:	b2da      	uxtb	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	b2db      	uxtb	r3, r3
 8006152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006156:	b2da      	uxtb	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006164:	b2da      	uxtb	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	b2da      	uxtb	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d11a      	bne.n	80061b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	4618      	mov	r0, r3
 8006186:	f000 f983 	bl	8006490 <RTC_Bcd2ToByte>
 800618a:	4603      	mov	r3, r0
 800618c:	461a      	mov	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f97a 	bl	8006490 <RTC_Bcd2ToByte>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	789b      	ldrb	r3, [r3, #2]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f971 	bl	8006490 <RTC_Bcd2ToByte>
 80061ae:	4603      	mov	r3, r0
 80061b0:	461a      	mov	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061c0:	b590      	push	{r4, r7, lr}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	7f1b      	ldrb	r3, [r3, #28]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_RTC_SetDate+0x1c>
 80061d8:	2302      	movs	r3, #2
 80061da:	e094      	b.n	8006306 <HAL_RTC_SetDate+0x146>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2202      	movs	r2, #2
 80061e6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10e      	bne.n	800620c <HAL_RTC_SetDate+0x4c>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	f023 0310 	bic.w	r3, r3, #16
 8006202:	b2db      	uxtb	r3, r3
 8006204:	330a      	adds	r3, #10
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d11c      	bne.n	800624c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	78db      	ldrb	r3, [r3, #3]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f91c 	bl	8006454 <RTC_ByteToBcd2>
 800621c:	4603      	mov	r3, r0
 800621e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f915 	bl	8006454 <RTC_ByteToBcd2>
 800622a:	4603      	mov	r3, r0
 800622c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800622e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	789b      	ldrb	r3, [r3, #2]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 f90d 	bl	8006454 <RTC_ByteToBcd2>
 800623a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800623c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	e00e      	b.n	800626a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	78db      	ldrb	r3, [r3, #3]
 8006250:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006258:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800625e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	22ca      	movs	r2, #202	; 0xca
 8006270:	625a      	str	r2, [r3, #36]	; 0x24
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2253      	movs	r2, #83	; 0x53
 8006278:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f8be 	bl	80063fc <RTC_EnterInitMode>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	22ff      	movs	r2, #255	; 0xff
 800628c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2204      	movs	r2, #4
 8006292:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e033      	b.n	8006306 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d111      	bne.n	80062f0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f86d 	bl	80063ac <HAL_RTC_WaitForSynchro>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	22ff      	movs	r2, #255	; 0xff
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2204      	movs	r2, #4
 80062e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e00a      	b.n	8006306 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	22ff      	movs	r2, #255	; 0xff
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006304:	2300      	movs	r3, #0
  }
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd90      	pop	{r4, r7, pc}

0800630e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800632c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	0c1b      	lsrs	r3, r3, #16
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	0b5b      	lsrs	r3, r3, #13
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	b2da      	uxtb	r2, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d11a      	bne.n	80063a2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	78db      	ldrb	r3, [r3, #3]
 8006370:	4618      	mov	r0, r3
 8006372:	f000 f88d 	bl	8006490 <RTC_Bcd2ToByte>
 8006376:	4603      	mov	r3, r0
 8006378:	461a      	mov	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f884 	bl	8006490 <RTC_Bcd2ToByte>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	789b      	ldrb	r3, [r3, #2]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 f87b 	bl	8006490 <RTC_Bcd2ToByte>
 800639a:	4603      	mov	r3, r0
 800639c:	461a      	mov	r2, r3
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063c8:	f7fc fd64 	bl	8002e94 <HAL_GetTick>
 80063cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80063ce:	e009      	b.n	80063e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063d0:	f7fc fd60 	bl	8002e94 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063de:	d901      	bls.n	80063e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e007      	b.n	80063f4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0ee      	beq.n	80063d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d119      	bne.n	800644a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800641e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006420:	f7fc fd38 	bl	8002e94 <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006426:	e009      	b.n	800643c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006428:	f7fc fd34 	bl	8002e94 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006436:	d901      	bls.n	800643c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e007      	b.n	800644c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0ee      	beq.n	8006428 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006462:	e005      	b.n	8006470 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	3b0a      	subs	r3, #10
 800646e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	2b09      	cmp	r3, #9
 8006474:	d8f6      	bhi.n	8006464 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	b2da      	uxtb	r2, r3
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	4313      	orrs	r3, r2
 8006482:	b2db      	uxtb	r3, r3
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	091b      	lsrs	r3, r3, #4
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	4413      	add	r3, r2
 80064be:	b2db      	uxtb	r3, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3350      	adds	r3, #80	; 0x50
 80064e2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4413      	add	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	601a      	str	r2, [r3, #0]
}
 80064f4:	bf00      	nop
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3350      	adds	r3, #80	; 0x50
 8006514:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e022      	b.n	8006588 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d105      	bne.n	800655a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fc f9ab 	bl	80028b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2203      	movs	r2, #3
 800655e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f814 	bl	8006590 <HAL_SD_InitCard>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e00a      	b.n	8006588 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006590:	b5b0      	push	{r4, r5, r7, lr}
 8006592:	b08e      	sub	sp, #56	; 0x38
 8006594:	af04      	add	r7, sp, #16
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006598:	2300      	movs	r3, #0
 800659a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80065ac:	2376      	movs	r3, #118	; 0x76
 80065ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681d      	ldr	r5, [r3, #0]
 80065b4:	466c      	mov	r4, sp
 80065b6:	f107 0314 	add.w	r3, r7, #20
 80065ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80065c2:	f107 0308 	add.w	r3, r7, #8
 80065c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065c8:	4628      	mov	r0, r5
 80065ca:	f001 fce9 	bl	8007fa0 <SDIO_Init>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80065d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e04c      	b.n	800667a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80065e0:	4b28      	ldr	r3, [pc, #160]	; (8006684 <HAL_SD_InitCard+0xf4>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 fd21 	bl	8008032 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80065f0:	4b24      	ldr	r3, [pc, #144]	; (8006684 <HAL_SD_InitCard+0xf4>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fe68 	bl	80072cc <SD_PowerON>
 80065fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e02e      	b.n	800667a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fd89 	bl	8007134 <SD_InitCard>
 8006622:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e01b      	b.n	800667a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800664a:	4618      	mov	r0, r3
 800664c:	f001 fd84 	bl	8008158 <SDMMC_CmdBlockLength>
 8006650:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00f      	beq.n	8006678 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <HAL_SD_InitCard+0xf8>)
 800665e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e000      	b.n	800667a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3728      	adds	r7, #40	; 0x28
 800667e:	46bd      	mov	sp, r7
 8006680:	bdb0      	pop	{r4, r5, r7, pc}
 8006682:	bf00      	nop
 8006684:	422580a0 	.word	0x422580a0
 8006688:	004005ff 	.word	0x004005ff

0800668c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b092      	sub	sp, #72	; 0x48
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800669a:	f7fc fbfb 	bl	8002e94 <HAL_GetTick>
 800669e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d107      	bne.n	80066be <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e1bd      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	f040 81b0 	bne.w	8006a2c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80066d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	441a      	add	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d907      	bls.n	80066f0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e1a4      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2203      	movs	r2, #3
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2200      	movs	r2, #0
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006704:	2b01      	cmp	r3, #1
 8006706:	d002      	beq.n	800670e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	025b      	lsls	r3, r3, #9
 800670c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800670e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006712:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	025b      	lsls	r3, r3, #9
 8006718:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800671a:	2390      	movs	r3, #144	; 0x90
 800671c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800671e:	2302      	movs	r3, #2
 8006720:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006722:	2300      	movs	r3, #0
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006726:	2301      	movs	r3, #1
 8006728:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f107 0214 	add.w	r2, r7, #20
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f001 fce3 	bl	8008100 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d90a      	bls.n	8006756 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2202      	movs	r2, #2
 8006744:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800674c:	4618      	mov	r0, r3
 800674e:	f001 fd47 	bl	80081e0 <SDMMC_CmdReadMultiBlock>
 8006752:	6478      	str	r0, [r7, #68]	; 0x44
 8006754:	e009      	b.n	800676a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006762:	4618      	mov	r0, r3
 8006764:	f001 fd1a 	bl	800819c <SDMMC_CmdReadSingleBlock>
 8006768:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800676a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676c:	2b00      	cmp	r3, #0
 800676e:	d012      	beq.n	8006796 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a7a      	ldr	r2, [pc, #488]	; (8006960 <HAL_SD_ReadBlocks+0x2d4>)
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800677e:	431a      	orrs	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e151      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800679a:	e061      	b.n	8006860 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d03c      	beq.n	8006824 <HAL_SD_ReadBlocks+0x198>
 80067aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d039      	beq.n	8006824 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80067b0:	2300      	movs	r3, #0
 80067b2:	643b      	str	r3, [r7, #64]	; 0x40
 80067b4:	e033      	b.n	800681e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 fc1b 	bl	8007ff6 <SDIO_ReadFIFO>
 80067c0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80067ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067cc:	3301      	adds	r3, #1
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80067d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d2:	3b01      	subs	r3, #1
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	0a1b      	lsrs	r3, r3, #8
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80067e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e2:	3301      	adds	r3, #1
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80067e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e8:	3b01      	subs	r3, #1
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	0c1b      	lsrs	r3, r3, #16
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	3301      	adds	r3, #1
 80067fa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80067fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fe:	3b01      	subs	r3, #1
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	0e1b      	lsrs	r3, r3, #24
 8006806:	b2da      	uxtb	r2, r3
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800680c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680e:	3301      	adds	r3, #1
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	3b01      	subs	r3, #1
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681a:	3301      	adds	r3, #1
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
 800681e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006820:	2b07      	cmp	r3, #7
 8006822:	d9c8      	bls.n	80067b6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006824:	f7fc fb36 	bl	8002e94 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006830:	429a      	cmp	r2, r3
 8006832:	d902      	bls.n	800683a <HAL_SD_ReadBlocks+0x1ae>
 8006834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006836:	2b00      	cmp	r3, #0
 8006838:	d112      	bne.n	8006860 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a48      	ldr	r2, [pc, #288]	; (8006960 <HAL_SD_ReadBlocks+0x2d4>)
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e0ec      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006866:	f240 332a 	movw	r3, #810	; 0x32a
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d095      	beq.n	800679c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d022      	beq.n	80068c4 <HAL_SD_ReadBlocks+0x238>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d91f      	bls.n	80068c4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006888:	2b03      	cmp	r3, #3
 800688a:	d01b      	beq.n	80068c4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f001 fd0b 	bl	80082ac <SDMMC_CmdStopTransfer>
 8006896:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800689a:	2b00      	cmp	r3, #0
 800689c:	d012      	beq.n	80068c4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a2f      	ldr	r2, [pc, #188]	; (8006960 <HAL_SD_ReadBlocks+0x2d4>)
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0ba      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d012      	beq.n	80068f8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a22      	ldr	r2, [pc, #136]	; (8006960 <HAL_SD_ReadBlocks+0x2d4>)
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	f043 0208 	orr.w	r2, r3, #8
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0a0      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d012      	beq.n	800692c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a15      	ldr	r2, [pc, #84]	; (8006960 <HAL_SD_ReadBlocks+0x2d4>)
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	f043 0202 	orr.w	r2, r3, #2
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e086      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d063      	beq.n	8006a02 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a08      	ldr	r2, [pc, #32]	; (8006960 <HAL_SD_ReadBlocks+0x2d4>)
 8006940:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	f043 0220 	orr.w	r2, r3, #32
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e06c      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
 8006960:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f001 fb44 	bl	8007ff6 <SDIO_ReadFIFO>
 800696e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	b2da      	uxtb	r2, r3
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697a:	3301      	adds	r3, #1
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800697e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006980:	3b01      	subs	r3, #1
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	b2da      	uxtb	r2, r3
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	3301      	adds	r3, #1
 8006992:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006996:	3b01      	subs	r3, #1
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80069a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a6:	3301      	adds	r3, #1
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80069aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ac:	3b01      	subs	r3, #1
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	0e1b      	lsrs	r3, r3, #24
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	3301      	adds	r3, #1
 80069be:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	3b01      	subs	r3, #1
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80069c6:	f7fc fa65 	bl	8002e94 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d902      	bls.n	80069dc <HAL_SD_ReadBlocks+0x350>
 80069d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d112      	bne.n	8006a02 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a18      	ldr	r2, [pc, #96]	; (8006a44 <HAL_SD_ReadBlocks+0x3b8>)
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e01b      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <HAL_SD_ReadBlocks+0x38a>
 8006a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1a6      	bne.n	8006964 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e006      	b.n	8006a3a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
  }
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3748      	adds	r7, #72	; 0x48
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	004005ff 	.word	0x004005ff

08006a48 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b092      	sub	sp, #72	; 0x48
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006a56:	f7fc fa1d 	bl	8002e94 <HAL_GetTick>
 8006a5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d107      	bne.n	8006a7a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e166      	b.n	8006d48 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	f040 8159 	bne.w	8006d3a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	441a      	add	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d907      	bls.n	8006aac <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e14d      	b.n	8006d48 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2203      	movs	r2, #3
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d002      	beq.n	8006aca <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	025b      	lsls	r3, r3, #9
 8006ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ace:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	025b      	lsls	r3, r3, #9
 8006ad4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006ad6:	2390      	movs	r3, #144	; 0x90
 8006ad8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006ada:	2300      	movs	r3, #0
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f107 0218 	add.w	r2, r7, #24
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 fb05 	bl	8008100 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d90a      	bls.n	8006b12 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 fbad 	bl	8008268 <SDMMC_CmdWriteMultiBlock>
 8006b0e:	6478      	str	r0, [r7, #68]	; 0x44
 8006b10:	e009      	b.n	8006b26 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2210      	movs	r2, #16
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 fb80 	bl	8008224 <SDMMC_CmdWriteSingleBlock>
 8006b24:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d012      	beq.n	8006b52 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a87      	ldr	r2, [pc, #540]	; (8006d50 <HAL_SD_WriteBlocks+0x308>)
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e0fa      	b.n	8006d48 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006b56:	e065      	b.n	8006c24 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d040      	beq.n	8006be8 <HAL_SD_WriteBlocks+0x1a0>
 8006b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d03d      	beq.n	8006be8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b70:	e037      	b.n	8006be2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b80:	3b01      	subs	r3, #1
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	021a      	lsls	r2, r3, #8
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	3301      	adds	r3, #1
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	041a      	lsls	r2, r3, #16
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	3301      	adds	r3, #1
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	061a      	lsls	r2, r3, #24
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f107 0214 	add.w	r2, r7, #20
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 fa1a 	bl	8008010 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bde:	3301      	adds	r3, #1
 8006be0:	643b      	str	r3, [r7, #64]	; 0x40
 8006be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be4:	2b07      	cmp	r3, #7
 8006be6:	d9c4      	bls.n	8006b72 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006be8:	f7fc f954 	bl	8002e94 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d902      	bls.n	8006bfe <HAL_SD_WriteBlocks+0x1b6>
 8006bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d112      	bne.n	8006c24 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a53      	ldr	r2, [pc, #332]	; (8006d50 <HAL_SD_WriteBlocks+0x308>)
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e091      	b.n	8006d48 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2a:	f240 331a 	movw	r3, #794	; 0x31a
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d091      	beq.n	8006b58 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d022      	beq.n	8006c88 <HAL_SD_WriteBlocks+0x240>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d91f      	bls.n	8006c88 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d01b      	beq.n	8006c88 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f001 fb29 	bl	80082ac <SDMMC_CmdStopTransfer>
 8006c5a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d012      	beq.n	8006c88 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a3a      	ldr	r2, [pc, #232]	; (8006d50 <HAL_SD_WriteBlocks+0x308>)
 8006c68:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c70:	431a      	orrs	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e05f      	b.n	8006d48 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d012      	beq.n	8006cbc <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a2d      	ldr	r2, [pc, #180]	; (8006d50 <HAL_SD_WriteBlocks+0x308>)
 8006c9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	f043 0208 	orr.w	r2, r3, #8
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e045      	b.n	8006d48 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d012      	beq.n	8006cf0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <HAL_SD_WriteBlocks+0x308>)
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	f043 0202 	orr.w	r2, r3, #2
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e02b      	b.n	8006d48 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf6:	f003 0310 	and.w	r3, r3, #16
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d012      	beq.n	8006d24 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a13      	ldr	r2, [pc, #76]	; (8006d50 <HAL_SD_WriteBlocks+0x308>)
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	f043 0210 	orr.w	r2, r3, #16
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e011      	b.n	8006d48 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e006      	b.n	8006d48 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
  }
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3748      	adds	r7, #72	; 0x48
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	004005ff 	.word	0x004005ff

08006d54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d62:	0f9b      	lsrs	r3, r3, #30
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d6e:	0e9b      	lsrs	r3, r3, #26
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d80:	0e1b      	lsrs	r3, r3, #24
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d92:	0c1b      	lsrs	r3, r3, #16
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db4:	0d1b      	lsrs	r3, r3, #20
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dc0:	0c1b      	lsrs	r3, r3, #16
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd2:	0bdb      	lsrs	r3, r3, #15
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de4:	0b9b      	lsrs	r3, r3, #14
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006df6:	0b5b      	lsrs	r3, r3, #13
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e08:	0b1b      	lsrs	r3, r3, #12
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d163      	bne.n	8006eec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e28:	009a      	lsls	r2, r3, #2
 8006e2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e2e:	4013      	ands	r3, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006e34:	0f92      	lsrs	r2, r2, #30
 8006e36:	431a      	orrs	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e40:	0edb      	lsrs	r3, r3, #27
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e52:	0e1b      	lsrs	r3, r3, #24
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e64:	0d5b      	lsrs	r3, r3, #21
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e76:	0c9b      	lsrs	r3, r3, #18
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e88:	0bdb      	lsrs	r3, r3, #15
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	7e1b      	ldrb	r3, [r3, #24]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	3302      	adds	r3, #2
 8006eac:	2201      	movs	r2, #1
 8006eae:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006eb6:	fb02 f203 	mul.w	r2, r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	7a1b      	ldrb	r3, [r3, #8]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	2201      	movs	r2, #1
 8006eca:	409a      	lsls	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006ed8:	0a52      	lsrs	r2, r2, #9
 8006eda:	fb02 f203 	mul.w	r2, r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee8:	661a      	str	r2, [r3, #96]	; 0x60
 8006eea:	e031      	b.n	8006f50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d11d      	bne.n	8006f30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f02:	0c1b      	lsrs	r3, r3, #16
 8006f04:	431a      	orrs	r2, r3
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	029a      	lsls	r2, r3, #10
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	661a      	str	r2, [r3, #96]	; 0x60
 8006f2e:	e00f      	b.n	8006f50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a58      	ldr	r2, [pc, #352]	; (8007098 <HAL_SD_GetCardCSD+0x344>)
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e09d      	b.n	800708c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f54:	0b9b      	lsrs	r3, r3, #14
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f66:	09db      	lsrs	r3, r3, #7
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f88:	0fdb      	lsrs	r3, r3, #31
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f94:	0f5b      	lsrs	r3, r3, #29
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	f003 0303 	and.w	r3, r3, #3
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa6:	0e9b      	lsrs	r3, r3, #26
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb8:	0d9b      	lsrs	r3, r3, #22
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fca:	0d5b      	lsrs	r3, r3, #21
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	0c1b      	lsrs	r3, r3, #16
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffa:	0bdb      	lsrs	r3, r3, #15
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	b2da      	uxtb	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	0b9b      	lsrs	r3, r3, #14
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	b2da      	uxtb	r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	0b5b      	lsrs	r3, r3, #13
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	0b1b      	lsrs	r3, r3, #12
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	0a9b      	lsrs	r3, r3, #10
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	b2da      	uxtb	r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	b2da      	uxtb	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	b2db      	uxtb	r3, r3
 8007076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707a:	b2da      	uxtb	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	004005ff 	.word	0x004005ff

0800709c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007100:	f107 030c 	add.w	r3, r7, #12
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f96e 	bl	80073e8 <SD_SendStatus>
 800710c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	0a5b      	lsrs	r3, r3, #9
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800712a:	693b      	ldr	r3, [r7, #16]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007134:	b5b0      	push	{r4, r5, r7, lr}
 8007136:	b094      	sub	sp, #80	; 0x50
 8007138:	af04      	add	r7, sp, #16
 800713a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800713c:	2301      	movs	r3, #1
 800713e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4618      	mov	r0, r3
 8007146:	f000 ff83 	bl	8008050 <SDIO_GetPowerState>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d102      	bne.n	8007156 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007150:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007154:	e0b6      	b.n	80072c4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	2b03      	cmp	r3, #3
 800715c:	d02f      	beq.n	80071be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f001 f969 	bl	800843a <SDMMC_CmdSendCID>
 8007168:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800716a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <SD_InitCard+0x40>
    {
      return errorstate;
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	e0a7      	b.n	80072c4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2100      	movs	r1, #0
 800717a:	4618      	mov	r0, r3
 800717c:	f000 ffad 	bl	80080da <SDIO_GetResponse>
 8007180:	4602      	mov	r2, r0
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2104      	movs	r1, #4
 800718c:	4618      	mov	r0, r3
 800718e:	f000 ffa4 	bl	80080da <SDIO_GetResponse>
 8007192:	4602      	mov	r2, r0
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2108      	movs	r1, #8
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 ff9b 	bl	80080da <SDIO_GetResponse>
 80071a4:	4602      	mov	r2, r0
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	210c      	movs	r1, #12
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 ff92 	bl	80080da <SDIO_GetResponse>
 80071b6:	4602      	mov	r2, r0
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d00d      	beq.n	80071e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f107 020e 	add.w	r2, r7, #14
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 f96f 	bl	80084b4 <SDMMC_CmdSetRelAdd>
 80071d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <SD_InitCard+0xae>
    {
      return errorstate;
 80071de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e0:	e070      	b.n	80072c4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d036      	beq.n	8007258 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80071ea:	89fb      	ldrh	r3, [r7, #14]
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f001 f939 	bl	8008476 <SDMMC_CmdSendCSD>
 8007204:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <SD_InitCard+0xdc>
    {
      return errorstate;
 800720c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720e:	e059      	b.n	80072c4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f000 ff5f 	bl	80080da <SDIO_GetResponse>
 800721c:	4602      	mov	r2, r0
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2104      	movs	r1, #4
 8007228:	4618      	mov	r0, r3
 800722a:	f000 ff56 	bl	80080da <SDIO_GetResponse>
 800722e:	4602      	mov	r2, r0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2108      	movs	r1, #8
 800723a:	4618      	mov	r0, r3
 800723c:	f000 ff4d 	bl	80080da <SDIO_GetResponse>
 8007240:	4602      	mov	r2, r0
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	210c      	movs	r1, #12
 800724c:	4618      	mov	r0, r3
 800724e:	f000 ff44 	bl	80080da <SDIO_GetResponse>
 8007252:	4602      	mov	r2, r0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2104      	movs	r1, #4
 800725e:	4618      	mov	r0, r3
 8007260:	f000 ff3b 	bl	80080da <SDIO_GetResponse>
 8007264:	4603      	mov	r3, r0
 8007266:	0d1a      	lsrs	r2, r3, #20
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800726c:	f107 0310 	add.w	r3, r7, #16
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff fd6e 	bl	8006d54 <HAL_SD_GetCardCSD>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800727e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007282:	e01f      	b.n	80072c4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6819      	ldr	r1, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728c:	041b      	lsls	r3, r3, #16
 800728e:	461a      	mov	r2, r3
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	4608      	mov	r0, r1
 8007296:	f001 f82b 	bl	80082f0 <SDMMC_CmdSelDesel>
 800729a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800729c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <SD_InitCard+0x172>
  {
    return errorstate;
 80072a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a4:	e00e      	b.n	80072c4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681d      	ldr	r5, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	466c      	mov	r4, sp
 80072ae:	f103 0210 	add.w	r2, r3, #16
 80072b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80072b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072b8:	3304      	adds	r3, #4
 80072ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072bc:	4628      	mov	r0, r5
 80072be:	f000 fe6f 	bl	8007fa0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3740      	adds	r7, #64	; 0x40
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bdb0      	pop	{r4, r5, r7, pc}

080072cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f001 f826 	bl	8008336 <SDMMC_CmdGoIdleState>
 80072ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	e072      	b.n	80073dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 f839 	bl	8008372 <SDMMC_CmdOperCond>
 8007300:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00d      	beq.n	8007324 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f80f 	bl	8008336 <SDMMC_CmdGoIdleState>
 8007318:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	e05b      	b.n	80073dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800732e:	2b01      	cmp	r3, #1
 8007330:	d137      	bne.n	80073a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f001 f839 	bl	80083b0 <SDMMC_CmdAppCommand>
 800733e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d02d      	beq.n	80073a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007346:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800734a:	e047      	b.n	80073dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2100      	movs	r1, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f001 f82c 	bl	80083b0 <SDMMC_CmdAppCommand>
 8007358:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <SD_PowerON+0x98>
    {
      return errorstate;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	e03b      	b.n	80073dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	491e      	ldr	r1, [pc, #120]	; (80073e4 <SD_PowerON+0x118>)
 800736a:	4618      	mov	r0, r3
 800736c:	f001 f842 	bl	80083f4 <SDMMC_CmdAppOperCommand>
 8007370:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007378:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800737c:	e02e      	b.n	80073dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fea8 	bl	80080da <SDIO_GetResponse>
 800738a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	0fdb      	lsrs	r3, r3, #31
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <SD_PowerON+0xcc>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <SD_PowerON+0xce>
 8007398:	2300      	movs	r3, #0
 800739a:	613b      	str	r3, [r7, #16]

    count++;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	3301      	adds	r3, #1
 80073a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d802      	bhi.n	80073b2 <SD_PowerON+0xe6>
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0cc      	beq.n	800734c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d902      	bls.n	80073c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80073bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073c0:	e00c      	b.n	80073dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
 80073d2:	e002      	b.n	80073da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	c1100000 	.word	0xc1100000

080073e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80073f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073fc:	e018      	b.n	8007430 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f001 f873 	bl	80084f6 <SDMMC_CmdSendStatus>
 8007410:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	e009      	b.n	8007430 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2100      	movs	r1, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fe59 	bl	80080da <SDIO_GetResponse>
 8007428:	4602      	mov	r2, r0
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e07b      	b.n	8007542 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d108      	bne.n	8007464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745a:	d009      	beq.n	8007470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	61da      	str	r2, [r3, #28]
 8007462:	e005      	b.n	8007470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fb fa78 	bl	8002980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f4:	ea42 0103 	orr.w	r1, r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	0c1b      	lsrs	r3, r3, #16
 800750e:	f003 0104 	and.w	r1, r3, #4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	f003 0210 	and.w	r2, r3, #16
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007530:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e03f      	b.n	80075dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7fb fa5d 	bl	8002a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2224      	movs	r2, #36	; 0x24
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800758c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fb3e 	bl	8007c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691a      	ldr	r2, [r3, #16]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695a      	ldr	r2, [r3, #20]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08a      	sub	sp, #40	; 0x28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007604:	2300      	movs	r3, #0
 8007606:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10d      	bne.n	8007636 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_UART_IRQHandler+0x52>
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa57 	bl	8007ae2 <UART_Receive_IT>
      return;
 8007634:	e17c      	b.n	8007930 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 80b1 	beq.w	80077a0 <HAL_UART_IRQHandler+0x1bc>
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d105      	bne.n	8007654 <HAL_UART_IRQHandler+0x70>
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 80a6 	beq.w	80077a0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_UART_IRQHandler+0x90>
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	f043 0201 	orr.w	r2, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <HAL_UART_IRQHandler+0xb0>
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	f043 0202 	orr.w	r2, r3, #2
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <HAL_UART_IRQHandler+0xd0>
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	f043 0204 	orr.w	r2, r3, #4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00f      	beq.n	80076de <HAL_UART_IRQHandler+0xfa>
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <HAL_UART_IRQHandler+0xee>
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f043 0208 	orr.w	r2, r3, #8
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 811f 	beq.w	8007926 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d007      	beq.n	8007702 <HAL_UART_IRQHandler+0x11e>
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f9f0 	bl	8007ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	bf0c      	ite	eq
 8007710:	2301      	moveq	r3, #1
 8007712:	2300      	movne	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d102      	bne.n	800772a <HAL_UART_IRQHandler+0x146>
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d031      	beq.n	800778e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f930 	bl	8007990 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773a:	2b40      	cmp	r3, #64	; 0x40
 800773c:	d123      	bne.n	8007786 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695a      	ldr	r2, [r3, #20]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800774c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	2b00      	cmp	r3, #0
 8007754:	d013      	beq.n	800777e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775a:	4a77      	ldr	r2, [pc, #476]	; (8007938 <HAL_UART_IRQHandler+0x354>)
 800775c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	4618      	mov	r0, r3
 8007764:	f7fc f913 	bl	800398e <HAL_DMA_Abort_IT>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d016      	beq.n	800779c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777c:	e00e      	b.n	800779c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f8f0 	bl	8007964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007784:	e00a      	b.n	800779c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f8ec 	bl	8007964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800778c:	e006      	b.n	800779c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f8e8 	bl	8007964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800779a:	e0c4      	b.n	8007926 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779c:	bf00      	nop
    return;
 800779e:	e0c2      	b.n	8007926 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	f040 80a2 	bne.w	80078ee <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 809c 	beq.w	80078ee <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	f003 0310 	and.w	r3, r3, #16
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8096 	beq.w	80078ee <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e2:	2b40      	cmp	r3, #64	; 0x40
 80077e4:	d14f      	bne.n	8007886 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80077f0:	8a3b      	ldrh	r3, [r7, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8099 	beq.w	800792a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077fc:	8a3a      	ldrh	r2, [r7, #16]
 80077fe:	429a      	cmp	r2, r3
 8007800:	f080 8093 	bcs.w	800792a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8a3a      	ldrh	r2, [r7, #16]
 8007808:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007814:	d02b      	beq.n	800786e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007824:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695a      	ldr	r2, [r3, #20]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 0201 	bic.w	r2, r2, #1
 8007834:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695a      	ldr	r2, [r3, #20]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007844:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0210 	bic.w	r2, r2, #16
 8007862:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	4618      	mov	r0, r3
 800786a:	f7fc f820 	bl	80038ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007876:	b29b      	uxth	r3, r3
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	b29b      	uxth	r3, r3
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f87a 	bl	8007978 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007884:	e051      	b.n	800792a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800788e:	b29b      	uxth	r3, r3
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d047      	beq.n	800792e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800789e:	8a7b      	ldrh	r3, [r7, #18]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d044      	beq.n	800792e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078b2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695a      	ldr	r2, [r3, #20]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0210 	bic.w	r2, r2, #16
 80078e0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078e2:	8a7b      	ldrh	r3, [r7, #18]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f846 	bl	8007978 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80078ec:	e01f      	b.n	800792e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <HAL_UART_IRQHandler+0x326>
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f885 	bl	8007a12 <UART_Transmit_IT>
    return;
 8007908:	e012      	b.n	8007930 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00d      	beq.n	8007930 <HAL_UART_IRQHandler+0x34c>
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d008      	beq.n	8007930 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f8c7 	bl	8007ab2 <UART_EndTransmit_IT>
    return;
 8007924:	e004      	b.n	8007930 <HAL_UART_IRQHandler+0x34c>
    return;
 8007926:	bf00      	nop
 8007928:	e002      	b.n	8007930 <HAL_UART_IRQHandler+0x34c>
      return;
 800792a:	bf00      	nop
 800792c:	e000      	b.n	8007930 <HAL_UART_IRQHandler+0x34c>
      return;
 800792e:	bf00      	nop
  }
}
 8007930:	3728      	adds	r7, #40	; 0x28
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	080079eb 	.word	0x080079eb

0800793c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695a      	ldr	r2, [r3, #20]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d107      	bne.n	80079d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0210 	bic.w	r2, r2, #16
 80079ce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f7ff ffad 	bl	8007964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b085      	sub	sp, #20
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b21      	cmp	r3, #33	; 0x21
 8007a24:	d13e      	bne.n	8007aa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2e:	d114      	bne.n	8007a5a <UART_Transmit_IT+0x48>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d110      	bne.n	8007a5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	1c9a      	adds	r2, r3, #2
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	621a      	str	r2, [r3, #32]
 8007a58:	e008      	b.n	8007a6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	1c59      	adds	r1, r3, #1
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6211      	str	r1, [r2, #32]
 8007a64:	781a      	ldrb	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10f      	bne.n	8007aa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	e000      	b.n	8007aa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007aa4:	2302      	movs	r3, #2
  }
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff ff32 	bl	800793c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b22      	cmp	r3, #34	; 0x22
 8007af4:	f040 8087 	bne.w	8007c06 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b00:	d117      	bne.n	8007b32 <UART_Receive_IT+0x50>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d113      	bne.n	8007b32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b12:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	1c9a      	adds	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8007b30:	e026      	b.n	8007b80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b44:	d007      	beq.n	8007b56 <UART_Receive_IT+0x74>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <UART_Receive_IT+0x82>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	e008      	b.n	8007b76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d136      	bne.n	8007c02 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0220 	bic.w	r2, r2, #32
 8007ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695a      	ldr	r2, [r3, #20]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0201 	bic.w	r2, r2, #1
 8007bc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d10e      	bne.n	8007bf2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0210 	bic.w	r2, r2, #16
 8007be2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff fec4 	bl	8007978 <HAL_UARTEx_RxEventCallback>
 8007bf0:	e002      	b.n	8007bf8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff feac 	bl	8007950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e002      	b.n	8007c08 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	e000      	b.n	8007c08 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007c06:	2302      	movs	r3, #2
  }
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	b09f      	sub	sp, #124	; 0x7c
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c26:	68d9      	ldr	r1, [r3, #12]
 8007c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	ea40 0301 	orr.w	r3, r0, r1
 8007c30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c54:	f021 010c 	bic.w	r1, r1, #12
 8007c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6e:	6999      	ldr	r1, [r3, #24]
 8007c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	ea40 0301 	orr.w	r3, r0, r1
 8007c78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4bc5      	ldr	r3, [pc, #788]	; (8007f94 <UART_SetConfig+0x384>)
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d004      	beq.n	8007c8e <UART_SetConfig+0x7e>
 8007c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4bc3      	ldr	r3, [pc, #780]	; (8007f98 <UART_SetConfig+0x388>)
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d103      	bne.n	8007c96 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c8e:	f7fd fff5 	bl	8005c7c <HAL_RCC_GetPCLK2Freq>
 8007c92:	6778      	str	r0, [r7, #116]	; 0x74
 8007c94:	e002      	b.n	8007c9c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c96:	f7fd ffdd 	bl	8005c54 <HAL_RCC_GetPCLK1Freq>
 8007c9a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ca4:	f040 80b6 	bne.w	8007e14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007caa:	461c      	mov	r4, r3
 8007cac:	f04f 0500 	mov.w	r5, #0
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	462b      	mov	r3, r5
 8007cb4:	1891      	adds	r1, r2, r2
 8007cb6:	6439      	str	r1, [r7, #64]	; 0x40
 8007cb8:	415b      	adcs	r3, r3
 8007cba:	647b      	str	r3, [r7, #68]	; 0x44
 8007cbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cc0:	1912      	adds	r2, r2, r4
 8007cc2:	eb45 0303 	adc.w	r3, r5, r3
 8007cc6:	f04f 0000 	mov.w	r0, #0
 8007cca:	f04f 0100 	mov.w	r1, #0
 8007cce:	00d9      	lsls	r1, r3, #3
 8007cd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cd4:	00d0      	lsls	r0, r2, #3
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	1911      	adds	r1, r2, r4
 8007cdc:	6639      	str	r1, [r7, #96]	; 0x60
 8007cde:	416b      	adcs	r3, r5
 8007ce0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	1891      	adds	r1, r2, r2
 8007cee:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cf0:	415b      	adcs	r3, r3
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007cf8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007cfc:	f7f8 ffd4 	bl	8000ca8 <__aeabi_uldivmod>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4ba5      	ldr	r3, [pc, #660]	; (8007f9c <UART_SetConfig+0x38c>)
 8007d06:	fba3 2302 	umull	r2, r3, r3, r2
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	011e      	lsls	r6, r3, #4
 8007d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d10:	461c      	mov	r4, r3
 8007d12:	f04f 0500 	mov.w	r5, #0
 8007d16:	4622      	mov	r2, r4
 8007d18:	462b      	mov	r3, r5
 8007d1a:	1891      	adds	r1, r2, r2
 8007d1c:	6339      	str	r1, [r7, #48]	; 0x30
 8007d1e:	415b      	adcs	r3, r3
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
 8007d22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d26:	1912      	adds	r2, r2, r4
 8007d28:	eb45 0303 	adc.w	r3, r5, r3
 8007d2c:	f04f 0000 	mov.w	r0, #0
 8007d30:	f04f 0100 	mov.w	r1, #0
 8007d34:	00d9      	lsls	r1, r3, #3
 8007d36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d3a:	00d0      	lsls	r0, r2, #3
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	1911      	adds	r1, r2, r4
 8007d42:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d44:	416b      	adcs	r3, r5
 8007d46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	1891      	adds	r1, r2, r2
 8007d54:	62b9      	str	r1, [r7, #40]	; 0x28
 8007d56:	415b      	adcs	r3, r3
 8007d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007d62:	f7f8 ffa1 	bl	8000ca8 <__aeabi_uldivmod>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4b8c      	ldr	r3, [pc, #560]	; (8007f9c <UART_SetConfig+0x38c>)
 8007d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	2164      	movs	r1, #100	; 0x64
 8007d74:	fb01 f303 	mul.w	r3, r1, r3
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	3332      	adds	r3, #50	; 0x32
 8007d7e:	4a87      	ldr	r2, [pc, #540]	; (8007f9c <UART_SetConfig+0x38c>)
 8007d80:	fba2 2303 	umull	r2, r3, r2, r3
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d8c:	441e      	add	r6, r3
 8007d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d90:	4618      	mov	r0, r3
 8007d92:	f04f 0100 	mov.w	r1, #0
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	1894      	adds	r4, r2, r2
 8007d9c:	623c      	str	r4, [r7, #32]
 8007d9e:	415b      	adcs	r3, r3
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
 8007da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007da6:	1812      	adds	r2, r2, r0
 8007da8:	eb41 0303 	adc.w	r3, r1, r3
 8007dac:	f04f 0400 	mov.w	r4, #0
 8007db0:	f04f 0500 	mov.w	r5, #0
 8007db4:	00dd      	lsls	r5, r3, #3
 8007db6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dba:	00d4      	lsls	r4, r2, #3
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	1814      	adds	r4, r2, r0
 8007dc2:	653c      	str	r4, [r7, #80]	; 0x50
 8007dc4:	414b      	adcs	r3, r1
 8007dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8007dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	f04f 0300 	mov.w	r3, #0
 8007dd2:	1891      	adds	r1, r2, r2
 8007dd4:	61b9      	str	r1, [r7, #24]
 8007dd6:	415b      	adcs	r3, r3
 8007dd8:	61fb      	str	r3, [r7, #28]
 8007dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007de2:	f7f8 ff61 	bl	8000ca8 <__aeabi_uldivmod>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4b6c      	ldr	r3, [pc, #432]	; (8007f9c <UART_SetConfig+0x38c>)
 8007dec:	fba3 1302 	umull	r1, r3, r3, r2
 8007df0:	095b      	lsrs	r3, r3, #5
 8007df2:	2164      	movs	r1, #100	; 0x64
 8007df4:	fb01 f303 	mul.w	r3, r1, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	3332      	adds	r3, #50	; 0x32
 8007dfe:	4a67      	ldr	r2, [pc, #412]	; (8007f9c <UART_SetConfig+0x38c>)
 8007e00:	fba2 2303 	umull	r2, r3, r2, r3
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	f003 0207 	and.w	r2, r3, #7
 8007e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4432      	add	r2, r6
 8007e10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e12:	e0b9      	b.n	8007f88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e16:	461c      	mov	r4, r3
 8007e18:	f04f 0500 	mov.w	r5, #0
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	462b      	mov	r3, r5
 8007e20:	1891      	adds	r1, r2, r2
 8007e22:	6139      	str	r1, [r7, #16]
 8007e24:	415b      	adcs	r3, r3
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007e2c:	1912      	adds	r2, r2, r4
 8007e2e:	eb45 0303 	adc.w	r3, r5, r3
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f04f 0100 	mov.w	r1, #0
 8007e3a:	00d9      	lsls	r1, r3, #3
 8007e3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e40:	00d0      	lsls	r0, r2, #3
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	eb12 0804 	adds.w	r8, r2, r4
 8007e4a:	eb43 0905 	adc.w	r9, r3, r5
 8007e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f04f 0100 	mov.w	r1, #0
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	008b      	lsls	r3, r1, #2
 8007e62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e66:	0082      	lsls	r2, r0, #2
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	f7f8 ff1c 	bl	8000ca8 <__aeabi_uldivmod>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4b49      	ldr	r3, [pc, #292]	; (8007f9c <UART_SetConfig+0x38c>)
 8007e76:	fba3 2302 	umull	r2, r3, r3, r2
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	011e      	lsls	r6, r3, #4
 8007e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e80:	4618      	mov	r0, r3
 8007e82:	f04f 0100 	mov.w	r1, #0
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	1894      	adds	r4, r2, r2
 8007e8c:	60bc      	str	r4, [r7, #8]
 8007e8e:	415b      	adcs	r3, r3
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e96:	1812      	adds	r2, r2, r0
 8007e98:	eb41 0303 	adc.w	r3, r1, r3
 8007e9c:	f04f 0400 	mov.w	r4, #0
 8007ea0:	f04f 0500 	mov.w	r5, #0
 8007ea4:	00dd      	lsls	r5, r3, #3
 8007ea6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007eaa:	00d4      	lsls	r4, r2, #3
 8007eac:	4622      	mov	r2, r4
 8007eae:	462b      	mov	r3, r5
 8007eb0:	1814      	adds	r4, r2, r0
 8007eb2:	64bc      	str	r4, [r7, #72]	; 0x48
 8007eb4:	414b      	adcs	r3, r1
 8007eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f04f 0100 	mov.w	r1, #0
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	008b      	lsls	r3, r1, #2
 8007ecc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ed0:	0082      	lsls	r2, r0, #2
 8007ed2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007ed6:	f7f8 fee7 	bl	8000ca8 <__aeabi_uldivmod>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4b2f      	ldr	r3, [pc, #188]	; (8007f9c <UART_SetConfig+0x38c>)
 8007ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ee4:	095b      	lsrs	r3, r3, #5
 8007ee6:	2164      	movs	r1, #100	; 0x64
 8007ee8:	fb01 f303 	mul.w	r3, r1, r3
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	3332      	adds	r3, #50	; 0x32
 8007ef2:	4a2a      	ldr	r2, [pc, #168]	; (8007f9c <UART_SetConfig+0x38c>)
 8007ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef8:	095b      	lsrs	r3, r3, #5
 8007efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007efe:	441e      	add	r6, r3
 8007f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f02:	4618      	mov	r0, r3
 8007f04:	f04f 0100 	mov.w	r1, #0
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	1894      	adds	r4, r2, r2
 8007f0e:	603c      	str	r4, [r7, #0]
 8007f10:	415b      	adcs	r3, r3
 8007f12:	607b      	str	r3, [r7, #4]
 8007f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f18:	1812      	adds	r2, r2, r0
 8007f1a:	eb41 0303 	adc.w	r3, r1, r3
 8007f1e:	f04f 0400 	mov.w	r4, #0
 8007f22:	f04f 0500 	mov.w	r5, #0
 8007f26:	00dd      	lsls	r5, r3, #3
 8007f28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f2c:	00d4      	lsls	r4, r2, #3
 8007f2e:	4622      	mov	r2, r4
 8007f30:	462b      	mov	r3, r5
 8007f32:	eb12 0a00 	adds.w	sl, r2, r0
 8007f36:	eb43 0b01 	adc.w	fp, r3, r1
 8007f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f04f 0100 	mov.w	r1, #0
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	008b      	lsls	r3, r1, #2
 8007f4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f52:	0082      	lsls	r2, r0, #2
 8007f54:	4650      	mov	r0, sl
 8007f56:	4659      	mov	r1, fp
 8007f58:	f7f8 fea6 	bl	8000ca8 <__aeabi_uldivmod>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4b0e      	ldr	r3, [pc, #56]	; (8007f9c <UART_SetConfig+0x38c>)
 8007f62:	fba3 1302 	umull	r1, r3, r3, r2
 8007f66:	095b      	lsrs	r3, r3, #5
 8007f68:	2164      	movs	r1, #100	; 0x64
 8007f6a:	fb01 f303 	mul.w	r3, r1, r3
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	3332      	adds	r3, #50	; 0x32
 8007f74:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <UART_SetConfig+0x38c>)
 8007f76:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	f003 020f 	and.w	r2, r3, #15
 8007f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4432      	add	r2, r6
 8007f86:	609a      	str	r2, [r3, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	377c      	adds	r7, #124	; 0x7c
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f92:	bf00      	nop
 8007f94:	40011000 	.word	0x40011000
 8007f98:	40011400 	.word	0x40011400
 8007f9c:	51eb851f 	.word	0x51eb851f

08007fa0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	b480      	push	{r7}
 8007fa4:	b085      	sub	sp, #20
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	f107 001c 	add.w	r0, r7, #28
 8007fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007fb6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007fba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007fbe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007fc2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007fc6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007fca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007fda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	b004      	add	sp, #16
 8007ff4:	4770      	bx	lr

08007ff6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2203      	movs	r2, #3
 800803e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008040:	2002      	movs	r0, #2
 8008042:	f7fa ff33 	bl	8002eac <HAL_Delay>
  
  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0303 	and.w	r3, r3, #3
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800808a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008090:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008096:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80080a6:	f023 030f 	bic.w	r3, r3, #15
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	431a      	orrs	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	b2db      	uxtb	r3, r3
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80080da:	b480      	push	{r7}
 80080dc:	b085      	sub	sp, #20
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3314      	adds	r3, #20
 80080e8:	461a      	mov	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	4413      	add	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
}  
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008126:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800812c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008132:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	431a      	orrs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800814a:	2300      	movs	r3, #0

}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008166:	2310      	movs	r3, #16
 8008168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800816a:	2340      	movs	r3, #64	; 0x40
 800816c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008176:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008178:	f107 0308 	add.w	r3, r7, #8
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff ff74 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008184:	f241 3288 	movw	r2, #5000	; 0x1388
 8008188:	2110      	movs	r1, #16
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fa02 	bl	8008594 <SDMMC_GetCmdResp1>
 8008190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008192:	69fb      	ldr	r3, [r7, #28]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80081aa:	2311      	movs	r3, #17
 80081ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081ae:	2340      	movs	r3, #64	; 0x40
 80081b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081bc:	f107 0308 	add.w	r3, r7, #8
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff ff52 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80081c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081cc:	2111      	movs	r1, #17
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f9e0 	bl	8008594 <SDMMC_GetCmdResp1>
 80081d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081d6:	69fb      	ldr	r3, [r7, #28]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80081ee:	2312      	movs	r3, #18
 80081f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081f2:	2340      	movs	r3, #64	; 0x40
 80081f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008200:	f107 0308 	add.w	r3, r7, #8
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff ff30 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800820c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008210:	2112      	movs	r1, #18
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f9be 	bl	8008594 <SDMMC_GetCmdResp1>
 8008218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800821a:	69fb      	ldr	r3, [r7, #28]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008232:	2318      	movs	r3, #24
 8008234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008236:	2340      	movs	r3, #64	; 0x40
 8008238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800823e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008242:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008244:	f107 0308 	add.w	r3, r7, #8
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff ff0e 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008250:	f241 3288 	movw	r2, #5000	; 0x1388
 8008254:	2118      	movs	r1, #24
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f99c 	bl	8008594 <SDMMC_GetCmdResp1>
 800825c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800825e:	69fb      	ldr	r3, [r7, #28]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008276:	2319      	movs	r3, #25
 8008278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800827a:	2340      	movs	r3, #64	; 0x40
 800827c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008286:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008288:	f107 0308 	add.w	r3, r7, #8
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff feec 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008294:	f241 3288 	movw	r2, #5000	; 0x1388
 8008298:	2119      	movs	r1, #25
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f97a 	bl	8008594 <SDMMC_GetCmdResp1>
 80082a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082a2:	69fb      	ldr	r3, [r7, #28]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3720      	adds	r7, #32
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80082b8:	230c      	movs	r3, #12
 80082ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082ca:	f107 0308 	add.w	r3, r7, #8
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff fecb 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80082d6:	4a05      	ldr	r2, [pc, #20]	; (80082ec <SDMMC_CmdStopTransfer+0x40>)
 80082d8:	210c      	movs	r1, #12
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f95a 	bl	8008594 <SDMMC_GetCmdResp1>
 80082e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082e2:	69fb      	ldr	r3, [r7, #28]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	05f5e100 	.word	0x05f5e100

080082f0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008300:	2307      	movs	r3, #7
 8008302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008304:	2340      	movs	r3, #64	; 0x40
 8008306:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008308:	2300      	movs	r3, #0
 800830a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800830c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008310:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008312:	f107 0310 	add.w	r3, r7, #16
 8008316:	4619      	mov	r1, r3
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff fea7 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800831e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008322:	2107      	movs	r1, #7
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f935 	bl	8008594 <SDMMC_GetCmdResp1>
 800832a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800832e:	4618      	mov	r0, r3
 8008330:	3728      	adds	r7, #40	; 0x28
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b088      	sub	sp, #32
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008346:	2300      	movs	r3, #0
 8008348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800834a:	2300      	movs	r3, #0
 800834c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800834e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008352:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008354:	f107 0308 	add.w	r3, r7, #8
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff fe86 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f8eb 	bl	800853c <SDMMC_GetCmdError>
 8008366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008368:	69fb      	ldr	r3, [r7, #28]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3720      	adds	r7, #32
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b088      	sub	sp, #32
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800837a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800837e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008380:	2308      	movs	r3, #8
 8008382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008384:	2340      	movs	r3, #64	; 0x40
 8008386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800838c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008390:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008392:	f107 0308 	add.w	r3, r7, #8
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7ff fe67 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fae2 	bl	8008968 <SDMMC_GetCmdResp7>
 80083a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083a6:	69fb      	ldr	r3, [r7, #28]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80083be:	2337      	movs	r3, #55	; 0x37
 80083c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083c2:	2340      	movs	r3, #64	; 0x40
 80083c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083c6:	2300      	movs	r3, #0
 80083c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083d0:	f107 0308 	add.w	r3, r7, #8
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff fe48 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80083dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e0:	2137      	movs	r1, #55	; 0x37
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f8d6 	bl	8008594 <SDMMC_GetCmdResp1>
 80083e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ea:	69fb      	ldr	r3, [r7, #28]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3720      	adds	r7, #32
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800840a:	2329      	movs	r3, #41	; 0x29
 800840c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800840e:	2340      	movs	r3, #64	; 0x40
 8008410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800841a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800841c:	f107 0308 	add.w	r3, r7, #8
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff fe22 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f9e9 	bl	8008800 <SDMMC_GetCmdResp3>
 800842e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008430:	69fb      	ldr	r3, [r7, #28]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b088      	sub	sp, #32
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008446:	2302      	movs	r3, #2
 8008448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800844a:	23c0      	movs	r3, #192	; 0xc0
 800844c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008456:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008458:	f107 0308 	add.w	r3, r7, #8
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff fe04 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f983 	bl	8008770 <SDMMC_GetCmdResp2>
 800846a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800846c:	69fb      	ldr	r3, [r7, #28]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3720      	adds	r7, #32
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b088      	sub	sp, #32
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008484:	2309      	movs	r3, #9
 8008486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008488:	23c0      	movs	r3, #192	; 0xc0
 800848a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800848c:	2300      	movs	r3, #0
 800848e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008494:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008496:	f107 0308 	add.w	r3, r7, #8
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff fde5 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f964 	bl	8008770 <SDMMC_GetCmdResp2>
 80084a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084aa:	69fb      	ldr	r3, [r7, #28]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3720      	adds	r7, #32
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80084c2:	2303      	movs	r3, #3
 80084c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084c6:	2340      	movs	r3, #64	; 0x40
 80084c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084d4:	f107 0308 	add.w	r3, r7, #8
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff fdc6 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	2103      	movs	r1, #3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f9c9 	bl	800887c <SDMMC_GetCmdResp6>
 80084ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084ec:	69fb      	ldr	r3, [r7, #28]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3720      	adds	r7, #32
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b088      	sub	sp, #32
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008504:	230d      	movs	r3, #13
 8008506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008514:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008516:	f107 0308 	add.w	r3, r7, #8
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff fda5 	bl	800806c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008522:	f241 3288 	movw	r2, #5000	; 0x1388
 8008526:	210d      	movs	r1, #13
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f833 	bl	8008594 <SDMMC_GetCmdResp1>
 800852e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008530:	69fb      	ldr	r3, [r7, #28]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008544:	4b11      	ldr	r3, [pc, #68]	; (800858c <SDMMC_GetCmdError+0x50>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a11      	ldr	r2, [pc, #68]	; (8008590 <SDMMC_GetCmdError+0x54>)
 800854a:	fba2 2303 	umull	r2, r3, r2, r3
 800854e:	0a5b      	lsrs	r3, r3, #9
 8008550:	f241 3288 	movw	r2, #5000	; 0x1388
 8008554:	fb02 f303 	mul.w	r3, r2, r3
 8008558:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1e5a      	subs	r2, r3, #1
 800855e:	60fa      	str	r2, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008568:	e009      	b.n	800857e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0f1      	beq.n	800855a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	22c5      	movs	r2, #197	; 0xc5
 800857a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	20000008 	.word	0x20000008
 8008590:	10624dd3 	.word	0x10624dd3

08008594 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	460b      	mov	r3, r1
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80085a2:	4b70      	ldr	r3, [pc, #448]	; (8008764 <SDMMC_GetCmdResp1+0x1d0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a70      	ldr	r2, [pc, #448]	; (8008768 <SDMMC_GetCmdResp1+0x1d4>)
 80085a8:	fba2 2303 	umull	r2, r3, r2, r3
 80085ac:	0a5a      	lsrs	r2, r3, #9
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	fb02 f303 	mul.w	r3, r2, r3
 80085b4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	1e5a      	subs	r2, r3, #1
 80085ba:	61fa      	str	r2, [r7, #28]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d102      	bne.n	80085c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085c4:	e0c9      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0ef      	beq.n	80085b6 <SDMMC_GetCmdResp1+0x22>
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1ea      	bne.n	80085b6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2204      	movs	r2, #4
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085f2:	2304      	movs	r3, #4
 80085f4:	e0b1      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008608:	2301      	movs	r3, #1
 800860a:	e0a6      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	22c5      	movs	r2, #197	; 0xc5
 8008610:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff fd54 	bl	80080c0 <SDIO_GetCommandResponse>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	7afb      	ldrb	r3, [r7, #11]
 800861e:	4293      	cmp	r3, r2
 8008620:	d001      	beq.n	8008626 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008622:	2301      	movs	r3, #1
 8008624:	e099      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008626:	2100      	movs	r1, #0
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f7ff fd56 	bl	80080da <SDIO_GetResponse>
 800862e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4b4e      	ldr	r3, [pc, #312]	; (800876c <SDMMC_GetCmdResp1+0x1d8>)
 8008634:	4013      	ands	r3, r2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800863a:	2300      	movs	r3, #0
 800863c:	e08d      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	da02      	bge.n	800864a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008644:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008648:	e087      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008654:	2340      	movs	r3, #64	; 0x40
 8008656:	e080      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008662:	2380      	movs	r3, #128	; 0x80
 8008664:	e079      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008674:	e071      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008684:	e069      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008694:	e061      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80086a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086a4:	e059      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80086b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086b4:	e051      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80086c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086c4:	e049      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80086d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086d4:	e041      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80086e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086e4:	e039      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80086f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086f4:	e031      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008700:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008704:	e029      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008710:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008714:	e021      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008720:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008724:	e019      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008734:	e011      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008740:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008744:	e009      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008750:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008754:	e001      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000008 	.word	0x20000008
 8008768:	10624dd3 	.word	0x10624dd3
 800876c:	fdffe008 	.word	0xfdffe008

08008770 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008778:	4b1f      	ldr	r3, [pc, #124]	; (80087f8 <SDMMC_GetCmdResp2+0x88>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1f      	ldr	r2, [pc, #124]	; (80087fc <SDMMC_GetCmdResp2+0x8c>)
 800877e:	fba2 2303 	umull	r2, r3, r2, r3
 8008782:	0a5b      	lsrs	r3, r3, #9
 8008784:	f241 3288 	movw	r2, #5000	; 0x1388
 8008788:	fb02 f303 	mul.w	r3, r2, r3
 800878c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1e5a      	subs	r2, r3, #1
 8008792:	60fa      	str	r2, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800879c:	e026      	b.n	80087ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0ef      	beq.n	800878e <SDMMC_GetCmdResp2+0x1e>
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1ea      	bne.n	800878e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2204      	movs	r2, #4
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087ca:	2304      	movs	r3, #4
 80087cc:	e00e      	b.n	80087ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d004      	beq.n	80087e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e003      	b.n	80087ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	22c5      	movs	r2, #197	; 0xc5
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	20000008 	.word	0x20000008
 80087fc:	10624dd3 	.word	0x10624dd3

08008800 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008808:	4b1a      	ldr	r3, [pc, #104]	; (8008874 <SDMMC_GetCmdResp3+0x74>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1a      	ldr	r2, [pc, #104]	; (8008878 <SDMMC_GetCmdResp3+0x78>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	0a5b      	lsrs	r3, r3, #9
 8008814:	f241 3288 	movw	r2, #5000	; 0x1388
 8008818:	fb02 f303 	mul.w	r3, r2, r3
 800881c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1e5a      	subs	r2, r3, #1
 8008822:	60fa      	str	r2, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d102      	bne.n	800882e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800882c:	e01b      	b.n	8008866 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0ef      	beq.n	800881e <SDMMC_GetCmdResp3+0x1e>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1ea      	bne.n	800881e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2204      	movs	r2, #4
 8008858:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800885a:	2304      	movs	r3, #4
 800885c:	e003      	b.n	8008866 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	22c5      	movs	r2, #197	; 0xc5
 8008862:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20000008 	.word	0x20000008
 8008878:	10624dd3 	.word	0x10624dd3

0800887c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	460b      	mov	r3, r1
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800888a:	4b35      	ldr	r3, [pc, #212]	; (8008960 <SDMMC_GetCmdResp6+0xe4>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a35      	ldr	r2, [pc, #212]	; (8008964 <SDMMC_GetCmdResp6+0xe8>)
 8008890:	fba2 2303 	umull	r2, r3, r2, r3
 8008894:	0a5b      	lsrs	r3, r3, #9
 8008896:	f241 3288 	movw	r2, #5000	; 0x1388
 800889a:	fb02 f303 	mul.w	r3, r2, r3
 800889e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	1e5a      	subs	r2, r3, #1
 80088a4:	61fa      	str	r2, [r7, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d102      	bne.n	80088b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ae:	e052      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0ef      	beq.n	80088a0 <SDMMC_GetCmdResp6+0x24>
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1ea      	bne.n	80088a0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d004      	beq.n	80088e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2204      	movs	r2, #4
 80088da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088dc:	2304      	movs	r3, #4
 80088de:	e03a      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d004      	beq.n	80088f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e02f      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7ff fbe2 	bl	80080c0 <SDIO_GetCommandResponse>
 80088fc:	4603      	mov	r3, r0
 80088fe:	461a      	mov	r2, r3
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	4293      	cmp	r3, r2
 8008904:	d001      	beq.n	800890a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008906:	2301      	movs	r3, #1
 8008908:	e025      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	22c5      	movs	r2, #197	; 0xc5
 800890e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008910:	2100      	movs	r1, #0
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff fbe1 	bl	80080da <SDIO_GetResponse>
 8008918:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	0c1b      	lsrs	r3, r3, #16
 8008928:	b29a      	uxth	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800892e:	2300      	movs	r3, #0
 8008930:	e011      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800893c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008940:	e009      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800894c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008950:	e001      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20000008 	.word	0x20000008
 8008964:	10624dd3 	.word	0x10624dd3

08008968 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008970:	4b22      	ldr	r3, [pc, #136]	; (80089fc <SDMMC_GetCmdResp7+0x94>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a22      	ldr	r2, [pc, #136]	; (8008a00 <SDMMC_GetCmdResp7+0x98>)
 8008976:	fba2 2303 	umull	r2, r3, r2, r3
 800897a:	0a5b      	lsrs	r3, r3, #9
 800897c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008980:	fb02 f303 	mul.w	r3, r2, r3
 8008984:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	1e5a      	subs	r2, r3, #1
 800898a:	60fa      	str	r2, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d102      	bne.n	8008996 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008994:	e02c      	b.n	80089f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0ef      	beq.n	8008986 <SDMMC_GetCmdResp7+0x1e>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1ea      	bne.n	8008986 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2204      	movs	r2, #4
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089c2:	2304      	movs	r3, #4
 80089c4:	e014      	b.n	80089f0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089d8:	2301      	movs	r3, #1
 80089da:	e009      	b.n	80089f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2240      	movs	r2, #64	; 0x40
 80089ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089ee:	2300      	movs	r3, #0
  
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	20000008 	.word	0x20000008
 8008a00:	10624dd3 	.word	0x10624dd3

08008a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a04:	b084      	sub	sp, #16
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	f107 001c 	add.w	r0, r7, #28
 8008a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d122      	bne.n	8008a62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d105      	bne.n	8008a56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 fac6 	bl	8009fe8 <USB_CoreReset>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	e01a      	b.n	8008a98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 faba 	bl	8009fe8 <USB_CoreReset>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38
 8008a8a:	e005      	b.n	8008a98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d10b      	bne.n	8008ab6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f043 0206 	orr.w	r2, r3, #6
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f043 0220 	orr.w	r2, r3, #32
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ac2:	b004      	add	sp, #16
 8008ac4:	4770      	bx	lr
	...

08008ac8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d165      	bne.n	8008ba8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4a41      	ldr	r2, [pc, #260]	; (8008be4 <USB_SetTurnaroundTime+0x11c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d906      	bls.n	8008af2 <USB_SetTurnaroundTime+0x2a>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4a40      	ldr	r2, [pc, #256]	; (8008be8 <USB_SetTurnaroundTime+0x120>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d202      	bcs.n	8008af2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008aec:	230f      	movs	r3, #15
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e062      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	4a3c      	ldr	r2, [pc, #240]	; (8008be8 <USB_SetTurnaroundTime+0x120>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d306      	bcc.n	8008b08 <USB_SetTurnaroundTime+0x40>
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4a3b      	ldr	r2, [pc, #236]	; (8008bec <USB_SetTurnaroundTime+0x124>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d202      	bcs.n	8008b08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b02:	230e      	movs	r3, #14
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	e057      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	4a38      	ldr	r2, [pc, #224]	; (8008bec <USB_SetTurnaroundTime+0x124>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d306      	bcc.n	8008b1e <USB_SetTurnaroundTime+0x56>
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	4a37      	ldr	r2, [pc, #220]	; (8008bf0 <USB_SetTurnaroundTime+0x128>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d202      	bcs.n	8008b1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b18:	230d      	movs	r3, #13
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	e04c      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4a33      	ldr	r2, [pc, #204]	; (8008bf0 <USB_SetTurnaroundTime+0x128>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d306      	bcc.n	8008b34 <USB_SetTurnaroundTime+0x6c>
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	4a32      	ldr	r2, [pc, #200]	; (8008bf4 <USB_SetTurnaroundTime+0x12c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d802      	bhi.n	8008b34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b2e:	230c      	movs	r3, #12
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	e041      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	4a2f      	ldr	r2, [pc, #188]	; (8008bf4 <USB_SetTurnaroundTime+0x12c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d906      	bls.n	8008b4a <USB_SetTurnaroundTime+0x82>
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4a2e      	ldr	r2, [pc, #184]	; (8008bf8 <USB_SetTurnaroundTime+0x130>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d802      	bhi.n	8008b4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b44:	230b      	movs	r3, #11
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	e036      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	4a2a      	ldr	r2, [pc, #168]	; (8008bf8 <USB_SetTurnaroundTime+0x130>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d906      	bls.n	8008b60 <USB_SetTurnaroundTime+0x98>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4a29      	ldr	r2, [pc, #164]	; (8008bfc <USB_SetTurnaroundTime+0x134>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d802      	bhi.n	8008b60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b5a:	230a      	movs	r3, #10
 8008b5c:	617b      	str	r3, [r7, #20]
 8008b5e:	e02b      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4a26      	ldr	r2, [pc, #152]	; (8008bfc <USB_SetTurnaroundTime+0x134>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d906      	bls.n	8008b76 <USB_SetTurnaroundTime+0xae>
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	4a25      	ldr	r2, [pc, #148]	; (8008c00 <USB_SetTurnaroundTime+0x138>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d202      	bcs.n	8008b76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b70:	2309      	movs	r3, #9
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e020      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	4a21      	ldr	r2, [pc, #132]	; (8008c00 <USB_SetTurnaroundTime+0x138>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d306      	bcc.n	8008b8c <USB_SetTurnaroundTime+0xc4>
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	4a20      	ldr	r2, [pc, #128]	; (8008c04 <USB_SetTurnaroundTime+0x13c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d802      	bhi.n	8008b8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b86:	2308      	movs	r3, #8
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	e015      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <USB_SetTurnaroundTime+0x13c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d906      	bls.n	8008ba2 <USB_SetTurnaroundTime+0xda>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4a1c      	ldr	r2, [pc, #112]	; (8008c08 <USB_SetTurnaroundTime+0x140>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d202      	bcs.n	8008ba2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b9c:	2307      	movs	r3, #7
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	e00a      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008ba2:	2306      	movs	r3, #6
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e007      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bae:	2309      	movs	r3, #9
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e001      	b.n	8008bb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bb4:	2309      	movs	r3, #9
 8008bb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	029b      	lsls	r3, r3, #10
 8008bcc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	371c      	adds	r7, #28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	00d8acbf 	.word	0x00d8acbf
 8008be8:	00e4e1c0 	.word	0x00e4e1c0
 8008bec:	00f42400 	.word	0x00f42400
 8008bf0:	01067380 	.word	0x01067380
 8008bf4:	011a499f 	.word	0x011a499f
 8008bf8:	01312cff 	.word	0x01312cff
 8008bfc:	014ca43f 	.word	0x014ca43f
 8008c00:	016e3600 	.word	0x016e3600
 8008c04:	01a6ab1f 	.word	0x01a6ab1f
 8008c08:	01e84800 	.word	0x01e84800

08008c0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f043 0201 	orr.w	r2, r3, #1
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f023 0201 	bic.w	r2, r3, #1
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d106      	bne.n	8008c7c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	e00b      	b.n	8008c94 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d106      	bne.n	8008c90 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60da      	str	r2, [r3, #12]
 8008c8e:	e001      	b.n	8008c94 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e003      	b.n	8008c9c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008c94:	2032      	movs	r0, #50	; 0x32
 8008c96:	f7fa f909 	bl	8002eac <HAL_Delay>

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b086      	sub	sp, #24
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	e009      	b.n	8008cd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	3340      	adds	r3, #64	; 0x40
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4413      	add	r3, r2
 8008cce:	2200      	movs	r2, #0
 8008cd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b0e      	cmp	r3, #14
 8008cdc:	d9f2      	bls.n	8008cc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d11c      	bne.n	8008d1e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cf2:	f043 0302 	orr.w	r3, r3, #2
 8008cf6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
 8008d1c:	e00b      	b.n	8008d36 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	2300      	movs	r3, #0
 8008d40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d48:	4619      	mov	r1, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d50:	461a      	mov	r2, r3
 8008d52:	680b      	ldr	r3, [r1, #0]
 8008d54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d10c      	bne.n	8008d76 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d104      	bne.n	8008d6c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d62:	2100      	movs	r1, #0
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f949 	bl	8008ffc <USB_SetDevSpeed>
 8008d6a:	e008      	b.n	8008d7e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f944 	bl	8008ffc <USB_SetDevSpeed>
 8008d74:	e003      	b.n	8008d7e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d76:	2103      	movs	r1, #3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f93f 	bl	8008ffc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d7e:	2110      	movs	r1, #16
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f8f3 	bl	8008f6c <USB_FlushTxFifo>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f911 	bl	8008fb8 <USB_FlushRxFifo>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da6:	461a      	mov	r2, r3
 8008da8:	2300      	movs	r3, #0
 8008daa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db2:	461a      	mov	r2, r3
 8008db4:	2300      	movs	r3, #0
 8008db6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	e043      	b.n	8008e52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008de0:	d118      	bne.n	8008e14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df4:	461a      	mov	r2, r3
 8008df6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	e013      	b.n	8008e26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	015a      	lsls	r2, r3, #5
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	e008      	b.n	8008e26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e20:	461a      	mov	r2, r3
 8008e22:	2300      	movs	r3, #0
 8008e24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e32:	461a      	mov	r2, r3
 8008e34:	2300      	movs	r3, #0
 8008e36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e44:	461a      	mov	r2, r3
 8008e46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	613b      	str	r3, [r7, #16]
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d3b7      	bcc.n	8008dca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	613b      	str	r3, [r7, #16]
 8008e5e:	e043      	b.n	8008ee8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e76:	d118      	bne.n	8008eaa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10a      	bne.n	8008e94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	e013      	b.n	8008ebc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	e008      	b.n	8008ebc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	2300      	movs	r3, #0
 8008eba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec8:	461a      	mov	r2, r3
 8008eca:	2300      	movs	r3, #0
 8008ecc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eda:	461a      	mov	r2, r3
 8008edc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ee0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	613b      	str	r3, [r7, #16]
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d3b7      	bcc.n	8008e60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d105      	bne.n	8008f24 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	f043 0210 	orr.w	r2, r3, #16
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699a      	ldr	r2, [r3, #24]
 8008f28:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <USB_DevInit+0x2c4>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	f043 0208 	orr.w	r2, r3, #8
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d107      	bne.n	8008f58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f50:	f043 0304 	orr.w	r3, r3, #4
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f64:	b004      	add	sp, #16
 8008f66:	4770      	bx	lr
 8008f68:	803c3800 	.word	0x803c3800

08008f6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	019b      	lsls	r3, r3, #6
 8008f7e:	f043 0220 	orr.w	r2, r3, #32
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4a09      	ldr	r2, [pc, #36]	; (8008fb4 <USB_FlushTxFifo+0x48>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d901      	bls.n	8008f98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e006      	b.n	8008fa6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	f003 0320 	and.w	r3, r3, #32
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d0f0      	beq.n	8008f86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	00030d40 	.word	0x00030d40

08008fb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2210      	movs	r2, #16
 8008fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <USB_FlushRxFifo+0x40>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d901      	bls.n	8008fdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e006      	b.n	8008fea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	2b10      	cmp	r3, #16
 8008fe6:	d0f0      	beq.n	8008fca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	00030d40 	.word	0x00030d40

08008ffc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800901c:	4313      	orrs	r3, r2
 800901e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800902e:	b480      	push	{r7}
 8009030:	b087      	sub	sp, #28
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f003 0306 	and.w	r3, r3, #6
 8009046:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800904e:	2300      	movs	r3, #0
 8009050:	75fb      	strb	r3, [r7, #23]
 8009052:	e00a      	b.n	800906a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d002      	beq.n	8009060 <USB_GetDevSpeed+0x32>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b06      	cmp	r3, #6
 800905e:	d102      	bne.n	8009066 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009060:	2302      	movs	r3, #2
 8009062:	75fb      	strb	r3, [r7, #23]
 8009064:	e001      	b.n	800906a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009066:	230f      	movs	r3, #15
 8009068:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
}
 800906c:	4618      	mov	r0, r3
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d13a      	bne.n	800910a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909a:	69da      	ldr	r2, [r3, #28]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	f003 030f 	and.w	r3, r3, #15
 80090a4:	2101      	movs	r1, #1
 80090a6:	fa01 f303 	lsl.w	r3, r1, r3
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	68f9      	ldr	r1, [r7, #12]
 80090ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b2:	4313      	orrs	r3, r2
 80090b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d155      	bne.n	8009178 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	78db      	ldrb	r3, [r3, #3]
 80090e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	059b      	lsls	r3, r3, #22
 80090ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090f0:	4313      	orrs	r3, r2
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	e036      	b.n	8009178 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009110:	69da      	ldr	r2, [r3, #28]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	f003 030f 	and.w	r3, r3, #15
 800911a:	2101      	movs	r1, #1
 800911c:	fa01 f303 	lsl.w	r3, r1, r3
 8009120:	041b      	lsls	r3, r3, #16
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009128:	4313      	orrs	r3, r2
 800912a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d11a      	bne.n	8009178 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	78db      	ldrb	r3, [r3, #3]
 800915c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800915e:	430b      	orrs	r3, r1
 8009160:	4313      	orrs	r3, r2
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	0151      	lsls	r1, r2, #5
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	440a      	add	r2, r1
 800916a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800916e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009176:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
	...

08009188 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	785b      	ldrb	r3, [r3, #1]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d161      	bne.n	8009268 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091ba:	d11f      	bne.n	80091fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	0151      	lsls	r1, r2, #5
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	440a      	add	r2, r1
 80091d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	0151      	lsls	r1, r2, #5
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	440a      	add	r2, r1
 80091f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	f003 030f 	and.w	r3, r3, #15
 800920c:	2101      	movs	r1, #1
 800920e:	fa01 f303 	lsl.w	r3, r1, r3
 8009212:	b29b      	uxth	r3, r3
 8009214:	43db      	mvns	r3, r3
 8009216:	68f9      	ldr	r1, [r7, #12]
 8009218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800921c:	4013      	ands	r3, r2
 800921e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009226:	69da      	ldr	r2, [r3, #28]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f003 030f 	and.w	r3, r3, #15
 8009230:	2101      	movs	r1, #1
 8009232:	fa01 f303 	lsl.w	r3, r1, r3
 8009236:	b29b      	uxth	r3, r3
 8009238:	43db      	mvns	r3, r3
 800923a:	68f9      	ldr	r1, [r7, #12]
 800923c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009240:	4013      	ands	r3, r2
 8009242:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	015a      	lsls	r2, r3, #5
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4413      	add	r3, r2
 800924c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	0159      	lsls	r1, r3, #5
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	440b      	add	r3, r1
 800925a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925e:	4619      	mov	r1, r3
 8009260:	4b35      	ldr	r3, [pc, #212]	; (8009338 <USB_DeactivateEndpoint+0x1b0>)
 8009262:	4013      	ands	r3, r2
 8009264:	600b      	str	r3, [r1, #0]
 8009266:	e060      	b.n	800932a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800927a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800927e:	d11f      	bne.n	80092c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	0151      	lsls	r1, r2, #5
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	440a      	add	r2, r1
 8009296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800929e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	0151      	lsls	r1, r2, #5
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	440a      	add	r2, r1
 80092b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f003 030f 	and.w	r3, r3, #15
 80092d0:	2101      	movs	r1, #1
 80092d2:	fa01 f303 	lsl.w	r3, r1, r3
 80092d6:	041b      	lsls	r3, r3, #16
 80092d8:	43db      	mvns	r3, r3
 80092da:	68f9      	ldr	r1, [r7, #12]
 80092dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092e0:	4013      	ands	r3, r2
 80092e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	2101      	movs	r1, #1
 80092f6:	fa01 f303 	lsl.w	r3, r1, r3
 80092fa:	041b      	lsls	r3, r3, #16
 80092fc:	43db      	mvns	r3, r3
 80092fe:	68f9      	ldr	r1, [r7, #12]
 8009300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009304:	4013      	ands	r3, r2
 8009306:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	0159      	lsls	r1, r3, #5
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	440b      	add	r3, r1
 800931e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009322:	4619      	mov	r1, r3
 8009324:	4b05      	ldr	r3, [pc, #20]	; (800933c <USB_DeactivateEndpoint+0x1b4>)
 8009326:	4013      	ands	r3, r2
 8009328:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	ec337800 	.word	0xec337800
 800933c:	eff37800 	.word	0xeff37800

08009340 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08a      	sub	sp, #40	; 0x28
 8009344:	af02      	add	r7, sp, #8
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4613      	mov	r3, r2
 800934c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	785b      	ldrb	r3, [r3, #1]
 800935c:	2b01      	cmp	r3, #1
 800935e:	f040 815c 	bne.w	800961a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d132      	bne.n	80093d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800938c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	0151      	lsls	r1, r2, #5
 80093a0:	69fa      	ldr	r2, [r7, #28]
 80093a2:	440a      	add	r2, r1
 80093a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	0151      	lsls	r1, r2, #5
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	440a      	add	r2, r1
 80093c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c8:	0cdb      	lsrs	r3, r3, #19
 80093ca:	04db      	lsls	r3, r3, #19
 80093cc:	6113      	str	r3, [r2, #16]
 80093ce:	e074      	b.n	80094ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	69fa      	ldr	r2, [r7, #28]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ea:	0cdb      	lsrs	r3, r3, #19
 80093ec:	04db      	lsls	r3, r3, #19
 80093ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	0151      	lsls	r1, r2, #5
 8009402:	69fa      	ldr	r2, [r7, #28]
 8009404:	440a      	add	r2, r1
 8009406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800940e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009412:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009420:	691a      	ldr	r2, [r3, #16]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6959      	ldr	r1, [r3, #20]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	440b      	add	r3, r1
 800942c:	1e59      	subs	r1, r3, #1
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	fbb1 f3f3 	udiv	r3, r1, r3
 8009436:	04d9      	lsls	r1, r3, #19
 8009438:	4b9d      	ldr	r3, [pc, #628]	; (80096b0 <USB_EPStartXfer+0x370>)
 800943a:	400b      	ands	r3, r1
 800943c:	69b9      	ldr	r1, [r7, #24]
 800943e:	0148      	lsls	r0, r1, #5
 8009440:	69f9      	ldr	r1, [r7, #28]
 8009442:	4401      	add	r1, r0
 8009444:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009448:	4313      	orrs	r3, r2
 800944a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	4413      	add	r3, r2
 8009454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009458:	691a      	ldr	r2, [r3, #16]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009462:	69b9      	ldr	r1, [r7, #24]
 8009464:	0148      	lsls	r0, r1, #5
 8009466:	69f9      	ldr	r1, [r7, #28]
 8009468:	4401      	add	r1, r0
 800946a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800946e:	4313      	orrs	r3, r2
 8009470:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	78db      	ldrb	r3, [r3, #3]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d11f      	bne.n	80094ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	440a      	add	r2, r1
 8009490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009494:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009498:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	0151      	lsls	r1, r2, #5
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	440a      	add	r2, r1
 80094b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d14b      	bne.n	8009558 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d009      	beq.n	80094dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	461a      	mov	r2, r3
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	78db      	ldrb	r3, [r3, #3]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d128      	bne.n	8009536 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d110      	bne.n	8009516 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	0151      	lsls	r1, r2, #5
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	440a      	add	r2, r1
 800950a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	e00f      	b.n	8009536 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	440a      	add	r2, r1
 800952c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009534:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	0151      	lsls	r1, r2, #5
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	440a      	add	r2, r1
 800954c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009550:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	e12f      	b.n	80097b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	0151      	lsls	r1, r2, #5
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	440a      	add	r2, r1
 800956e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009576:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	78db      	ldrb	r3, [r3, #3]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d015      	beq.n	80095ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 8117 	beq.w	80097b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	f003 030f 	and.w	r3, r3, #15
 800959a:	2101      	movs	r1, #1
 800959c:	fa01 f303 	lsl.w	r3, r1, r3
 80095a0:	69f9      	ldr	r1, [r7, #28]
 80095a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095a6:	4313      	orrs	r3, r2
 80095a8:	634b      	str	r3, [r1, #52]	; 0x34
 80095aa:	e105      	b.n	80097b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d110      	bne.n	80095de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	0151      	lsls	r1, r2, #5
 80095ce:	69fa      	ldr	r2, [r7, #28]
 80095d0:	440a      	add	r2, r1
 80095d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	e00f      	b.n	80095fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	0151      	lsls	r1, r2, #5
 80095f0:	69fa      	ldr	r2, [r7, #28]
 80095f2:	440a      	add	r2, r1
 80095f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	68d9      	ldr	r1, [r3, #12]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	781a      	ldrb	r2, [r3, #0]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	b298      	uxth	r0, r3
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	4603      	mov	r3, r0
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fa2b 	bl	8009a6e <USB_WritePacket>
 8009618:	e0ce      	b.n	80097b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	4413      	add	r3, r2
 8009622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	0151      	lsls	r1, r2, #5
 800962c:	69fa      	ldr	r2, [r7, #28]
 800962e:	440a      	add	r2, r1
 8009630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009634:	0cdb      	lsrs	r3, r3, #19
 8009636:	04db      	lsls	r3, r3, #19
 8009638:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	69fa      	ldr	r2, [r7, #28]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800965c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d126      	bne.n	80096b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009672:	691a      	ldr	r2, [r3, #16]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800967c:	69b9      	ldr	r1, [r7, #24]
 800967e:	0148      	lsls	r0, r1, #5
 8009680:	69f9      	ldr	r1, [r7, #28]
 8009682:	4401      	add	r1, r0
 8009684:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009688:	4313      	orrs	r3, r2
 800968a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096aa:	6113      	str	r3, [r2, #16]
 80096ac:	e036      	b.n	800971c <USB_EPStartXfer+0x3dc>
 80096ae:	bf00      	nop
 80096b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	695a      	ldr	r2, [r3, #20]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	4413      	add	r3, r2
 80096be:	1e5a      	subs	r2, r3, #1
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d6:	691a      	ldr	r2, [r3, #16]
 80096d8:	8afb      	ldrh	r3, [r7, #22]
 80096da:	04d9      	lsls	r1, r3, #19
 80096dc:	4b39      	ldr	r3, [pc, #228]	; (80097c4 <USB_EPStartXfer+0x484>)
 80096de:	400b      	ands	r3, r1
 80096e0:	69b9      	ldr	r1, [r7, #24]
 80096e2:	0148      	lsls	r0, r1, #5
 80096e4:	69f9      	ldr	r1, [r7, #28]
 80096e6:	4401      	add	r1, r0
 80096e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096ec:	4313      	orrs	r3, r2
 80096ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fc:	691a      	ldr	r2, [r3, #16]
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	8af9      	ldrh	r1, [r7, #22]
 8009704:	fb01 f303 	mul.w	r3, r1, r3
 8009708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800970c:	69b9      	ldr	r1, [r7, #24]
 800970e:	0148      	lsls	r0, r1, #5
 8009710:	69f9      	ldr	r1, [r7, #28]
 8009712:	4401      	add	r1, r0
 8009714:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009718:	4313      	orrs	r3, r2
 800971a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800971c:	79fb      	ldrb	r3, [r7, #7]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d10d      	bne.n	800973e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d009      	beq.n	800973e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	68d9      	ldr	r1, [r3, #12]
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973a:	460a      	mov	r2, r1
 800973c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	78db      	ldrb	r3, [r3, #3]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d128      	bne.n	8009798 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009752:	2b00      	cmp	r3, #0
 8009754:	d110      	bne.n	8009778 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	0151      	lsls	r1, r2, #5
 8009768:	69fa      	ldr	r2, [r7, #28]
 800976a:	440a      	add	r2, r1
 800976c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	e00f      	b.n	8009798 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	69ba      	ldr	r2, [r7, #24]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009796:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3720      	adds	r7, #32
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	1ff80000 	.word	0x1ff80000

080097c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	4613      	mov	r3, r2
 80097d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	f040 80cd 	bne.w	8009984 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d132      	bne.n	8009858 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	0151      	lsls	r1, r2, #5
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	440a      	add	r2, r1
 8009808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800980c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009810:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	440a      	add	r2, r1
 800982c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	440a      	add	r2, r1
 800984c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009850:	0cdb      	lsrs	r3, r3, #19
 8009852:	04db      	lsls	r3, r3, #19
 8009854:	6113      	str	r3, [r2, #16]
 8009856:	e04e      	b.n	80098f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	0151      	lsls	r1, r2, #5
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	440a      	add	r2, r1
 800986e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009872:	0cdb      	lsrs	r3, r3, #19
 8009874:	04db      	lsls	r3, r3, #19
 8009876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	0151      	lsls	r1, r2, #5
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	440a      	add	r2, r1
 800988e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009892:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009896:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800989a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	695a      	ldr	r2, [r3, #20]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d903      	bls.n	80098b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	0151      	lsls	r1, r2, #5
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	440a      	add	r2, r1
 80098c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098dc:	691a      	ldr	r2, [r3, #16]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098e6:	6939      	ldr	r1, [r7, #16]
 80098e8:	0148      	lsls	r0, r1, #5
 80098ea:	6979      	ldr	r1, [r7, #20]
 80098ec:	4401      	add	r1, r0
 80098ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098f2:	4313      	orrs	r3, r2
 80098f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d11e      	bne.n	800993a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d009      	beq.n	8009918 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009910:	461a      	mov	r2, r3
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	0151      	lsls	r1, r2, #5
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	440a      	add	r2, r1
 800992e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	e092      	b.n	8009a60 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	4413      	add	r3, r2
 8009942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	0151      	lsls	r1, r2, #5
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	440a      	add	r2, r1
 8009950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009954:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009958:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d07e      	beq.n	8009a60 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	2101      	movs	r1, #1
 8009974:	fa01 f303 	lsl.w	r3, r1, r3
 8009978:	6979      	ldr	r1, [r7, #20]
 800997a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800997e:	4313      	orrs	r3, r2
 8009980:	634b      	str	r3, [r1, #52]	; 0x34
 8009982:	e06d      	b.n	8009a60 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	0151      	lsls	r1, r2, #5
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	440a      	add	r2, r1
 800999a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800999e:	0cdb      	lsrs	r3, r3, #19
 80099a0:	04db      	lsls	r3, r3, #19
 80099a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	0151      	lsls	r1, r2, #5
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	440a      	add	r2, r1
 80099ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a04:	691a      	ldr	r2, [r3, #16]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a0e:	6939      	ldr	r1, [r7, #16]
 8009a10:	0148      	lsls	r0, r1, #5
 8009a12:	6979      	ldr	r1, [r7, #20]
 8009a14:	4401      	add	r1, r0
 8009a16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d10d      	bne.n	8009a40 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d009      	beq.n	8009a40 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	68d9      	ldr	r1, [r3, #12]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3c:	460a      	mov	r2, r1
 8009a3e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b089      	sub	sp, #36	; 0x24
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	4611      	mov	r1, r2
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	71fb      	strb	r3, [r7, #7]
 8009a80:	4613      	mov	r3, r2
 8009a82:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009a8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d11a      	bne.n	8009aca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a94:	88bb      	ldrh	r3, [r7, #4]
 8009a96:	3303      	adds	r3, #3
 8009a98:	089b      	lsrs	r3, r3, #2
 8009a9a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61bb      	str	r3, [r7, #24]
 8009aa0:	e00f      	b.n	8009ac2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	031a      	lsls	r2, r3, #12
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aae:	461a      	mov	r2, r3
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d3eb      	bcc.n	8009aa2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3724      	adds	r7, #36	; 0x24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b089      	sub	sp, #36	; 0x24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	3303      	adds	r3, #3
 8009af2:	089b      	lsrs	r3, r3, #2
 8009af4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009af6:	2300      	movs	r3, #0
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	e00b      	b.n	8009b14 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	3301      	adds	r3, #1
 8009b12:	61bb      	str	r3, [r7, #24]
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d3ef      	bcc.n	8009afc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009b1c:	69fb      	ldr	r3, [r7, #28]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3724      	adds	r7, #36	; 0x24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d12c      	bne.n	8009ba0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	db12      	blt.n	8009b7e <USB_EPSetStall+0x54>
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00f      	beq.n	8009b7e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	0151      	lsls	r1, r2, #5
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	440a      	add	r2, r1
 8009b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b7c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	015a      	lsls	r2, r3, #5
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	0151      	lsls	r1, r2, #5
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	440a      	add	r2, r1
 8009b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	e02b      	b.n	8009bf8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	db12      	blt.n	8009bd8 <USB_EPSetStall+0xae>
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00f      	beq.n	8009bd8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bd6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	0151      	lsls	r1, r2, #5
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	440a      	add	r2, r1
 8009bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	785b      	ldrb	r3, [r3, #1]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d128      	bne.n	8009c74 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	0151      	lsls	r1, r2, #5
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	440a      	add	r2, r1
 8009c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	78db      	ldrb	r3, [r3, #3]
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d003      	beq.n	8009c52 <USB_EPClearStall+0x4c>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	78db      	ldrb	r3, [r3, #3]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d138      	bne.n	8009cc4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	e027      	b.n	8009cc4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	78db      	ldrb	r3, [r3, #3]
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d003      	beq.n	8009ca4 <USB_EPClearStall+0x9e>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	78db      	ldrb	r3, [r3, #3]
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d10f      	bne.n	8009cc4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	0151      	lsls	r1, r2, #5
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	440a      	add	r2, r1
 8009cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cc2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b085      	sub	sp, #20
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009cf4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	78fb      	ldrb	r3, [r7, #3]
 8009d00:	011b      	lsls	r3, r3, #4
 8009d02:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d38:	f023 0303 	bic.w	r3, r3, #3
 8009d3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d4c:	f023 0302 	bic.w	r3, r3, #2
 8009d50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d8e:	f043 0302 	orr.w	r3, r3, #2
 8009d92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b085      	sub	sp, #20
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4013      	ands	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009dba:	68fb      	ldr	r3, [r7, #12]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	4013      	ands	r3, r2
 8009dea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	0c1b      	lsrs	r3, r3, #16
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	b29b      	uxth	r3, r3
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	fa22 f303 	lsr.w	r3, r2, r3
 8009e9c:	01db      	lsls	r3, r3, #7
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009eba:	68bb      	ldr	r3, [r7, #8]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	371c      	adds	r7, #28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	f003 0301 	and.w	r3, r3, #1
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f02:	f023 0307 	bic.w	r3, r3, #7
 8009f06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
	...

08009f2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	460b      	mov	r3, r1
 8009f36:	607a      	str	r2, [r7, #4]
 8009f38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	333c      	adds	r3, #60	; 0x3c
 8009f42:	3304      	adds	r3, #4
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	4a26      	ldr	r2, [pc, #152]	; (8009fe4 <USB_EP0_OutStart+0xb8>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d90a      	bls.n	8009f66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f60:	d101      	bne.n	8009f66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	e037      	b.n	8009fd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	2300      	movs	r3, #0
 8009f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f94:	f043 0318 	orr.w	r3, r3, #24
 8009f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d10f      	bne.n	8009fd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fba:	461a      	mov	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009fd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	4f54300a 	.word	0x4f54300a

08009fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4a13      	ldr	r2, [pc, #76]	; (800a04c <USB_CoreReset+0x64>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d901      	bls.n	800a006 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e01b      	b.n	800a03e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	daf2      	bge.n	8009ff4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	f043 0201 	orr.w	r2, r3, #1
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3301      	adds	r3, #1
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4a09      	ldr	r2, [pc, #36]	; (800a04c <USB_CoreReset+0x64>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d901      	bls.n	800a030 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e006      	b.n	800a03e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d0f0      	beq.n	800a01e <USB_CoreReset+0x36>

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	00030d40 	.word	0x00030d40

0800a050 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a054:	4904      	ldr	r1, [pc, #16]	; (800a068 <MX_FATFS_Init+0x18>)
 800a056:	4805      	ldr	r0, [pc, #20]	; (800a06c <MX_FATFS_Init+0x1c>)
 800a058:	f005 f84c 	bl	800f0f4 <FATFS_LinkDriver>
 800a05c:	4603      	mov	r3, r0
 800a05e:	461a      	mov	r2, r3
 800a060:	4b03      	ldr	r3, [pc, #12]	; (800a070 <MX_FATFS_Init+0x20>)
 800a062:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a064:	bf00      	nop
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20002ae4 	.word	0x20002ae4
 800a06c:	08014b20 	.word	0x08014b20
 800a070:	20002ae0 	.word	0x20002ae0

0800a074 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a074:	b480      	push	{r7}
 800a076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a078:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a08e:	f000 f86b 	bl	800a168 <BSP_SD_IsDetected>
 800a092:	4603      	mov	r3, r0
 800a094:	2b01      	cmp	r3, #1
 800a096:	d001      	beq.n	800a09c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e005      	b.n	800a0a8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a09c:	4804      	ldr	r0, [pc, #16]	; (800a0b0 <BSP_SD_Init+0x2c>)
 800a09e:	f7fc fa47 	bl	8006530 <HAL_SD_Init>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a0a6:	79fb      	ldrb	r3, [r7, #7]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	200029d8 	.word	0x200029d8

0800a0b4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	68f9      	ldr	r1, [r7, #12]
 800a0d0:	4806      	ldr	r0, [pc, #24]	; (800a0ec <BSP_SD_ReadBlocks+0x38>)
 800a0d2:	f7fc fadb 	bl	800668c <HAL_SD_ReadBlocks>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	200029d8 	.word	0x200029d8

0800a0f0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
 800a0fc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	68f9      	ldr	r1, [r7, #12]
 800a10c:	4806      	ldr	r0, [pc, #24]	; (800a128 <BSP_SD_WriteBlocks+0x38>)
 800a10e:	f7fc fc9b 	bl	8006a48 <HAL_SD_WriteBlocks>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	200029d8 	.word	0x200029d8

0800a12c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a130:	4805      	ldr	r0, [pc, #20]	; (800a148 <BSP_SD_GetCardState+0x1c>)
 800a132:	f7fc ffdf 	bl	80070f4 <HAL_SD_GetCardState>
 800a136:	4603      	mov	r3, r0
 800a138:	2b04      	cmp	r3, #4
 800a13a:	bf14      	ite	ne
 800a13c:	2301      	movne	r3, #1
 800a13e:	2300      	moveq	r3, #0
 800a140:	b2db      	uxtb	r3, r3
}
 800a142:	4618      	mov	r0, r3
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	200029d8 	.word	0x200029d8

0800a14c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	4803      	ldr	r0, [pc, #12]	; (800a164 <BSP_SD_GetCardInfo+0x18>)
 800a158:	f7fc ffa0 	bl	800709c <HAL_SD_GetCardInfo>
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	200029d8 	.word	0x200029d8

0800a168 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a16e:	2301      	movs	r3, #1
 800a170:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	b2db      	uxtb	r3, r3
}
 800a176:	4618      	mov	r0, r3
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
	...

0800a184 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a18e:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <SD_CheckStatus+0x38>)
 800a190:	2201      	movs	r2, #1
 800a192:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a194:	f7ff ffca 	bl	800a12c <BSP_SD_GetCardState>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d107      	bne.n	800a1ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a19e:	4b07      	ldr	r3, [pc, #28]	; (800a1bc <SD_CheckStatus+0x38>)
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	f023 0301 	bic.w	r3, r3, #1
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <SD_CheckStatus+0x38>)
 800a1ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a1ae:	4b03      	ldr	r3, [pc, #12]	; (800a1bc <SD_CheckStatus+0x38>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	b2db      	uxtb	r3, r3
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	20000011 	.word	0x20000011

0800a1c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <SD_initialize+0x38>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a1d0:	f7ff ff58 	bl	800a084 <BSP_SD_Init>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d107      	bne.n	800a1ea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff ffd1 	bl	800a184 <SD_CheckStatus>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	4b04      	ldr	r3, [pc, #16]	; (800a1f8 <SD_initialize+0x38>)
 800a1e8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a1ea:	4b03      	ldr	r3, [pc, #12]	; (800a1f8 <SD_initialize+0x38>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	b2db      	uxtb	r3, r3
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20000011 	.word	0x20000011

0800a1fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a206:	79fb      	ldrb	r3, [r7, #7]
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff ffbb 	bl	800a184 <SD_CheckStatus>
 800a20e:	4603      	mov	r3, r0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
 800a222:	603b      	str	r3, [r7, #0]
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a22c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	68b8      	ldr	r0, [r7, #8]
 800a236:	f7ff ff3d 	bl	800a0b4 <BSP_SD_ReadBlocks>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d107      	bne.n	800a250 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a240:	bf00      	nop
 800a242:	f7ff ff73 	bl	800a12c <BSP_SD_GetCardState>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1fa      	bne.n	800a242 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b086      	sub	sp, #24
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	603b      	str	r3, [r7, #0]
 800a266:	4603      	mov	r3, r0
 800a268:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a26e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	68b8      	ldr	r0, [r7, #8]
 800a278:	f7ff ff3a 	bl	800a0f0 <BSP_SD_WriteBlocks>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d107      	bne.n	800a292 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a282:	bf00      	nop
 800a284:	f7ff ff52 	bl	800a12c <BSP_SD_GetCardState>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1fa      	bne.n	800a284 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a292:	7dfb      	ldrb	r3, [r7, #23]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08c      	sub	sp, #48	; 0x30
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	603a      	str	r2, [r7, #0]
 800a2a6:	71fb      	strb	r3, [r7, #7]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a2b2:	4b25      	ldr	r3, [pc, #148]	; (800a348 <SD_ioctl+0xac>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <SD_ioctl+0x28>
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e03c      	b.n	800a33e <SD_ioctl+0xa2>

  switch (cmd)
 800a2c4:	79bb      	ldrb	r3, [r7, #6]
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d834      	bhi.n	800a334 <SD_ioctl+0x98>
 800a2ca:	a201      	add	r2, pc, #4	; (adr r2, 800a2d0 <SD_ioctl+0x34>)
 800a2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d0:	0800a2e1 	.word	0x0800a2e1
 800a2d4:	0800a2e9 	.word	0x0800a2e9
 800a2d8:	0800a301 	.word	0x0800a301
 800a2dc:	0800a31b 	.word	0x0800a31b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a2e6:	e028      	b.n	800a33a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a2e8:	f107 030c 	add.w	r3, r7, #12
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff ff2d 	bl	800a14c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a2f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a2fe:	e01c      	b.n	800a33a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a300:	f107 030c 	add.w	r3, r7, #12
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff ff21 	bl	800a14c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a318:	e00f      	b.n	800a33a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a31a:	f107 030c 	add.w	r3, r7, #12
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff ff14 	bl	800a14c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	0a5a      	lsrs	r2, r3, #9
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a332:	e002      	b.n	800a33a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a334:	2304      	movs	r3, #4
 800a336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a33a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3730      	adds	r7, #48	; 0x30
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000011 	.word	0x20000011

0800a34c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a358:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a35c:	f005 fcbc 	bl	800fcd8 <USBD_static_malloc>
 800a360:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d105      	bne.n	800a374 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a370:	2302      	movs	r3, #2
 800a372:	e066      	b.n	800a442 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	7c1b      	ldrb	r3, [r3, #16]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d119      	bne.n	800a3b8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a384:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a388:	2202      	movs	r2, #2
 800a38a:	2181      	movs	r1, #129	; 0x81
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f005 fb80 	bl	800fa92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a39c:	2202      	movs	r2, #2
 800a39e:	2101      	movs	r1, #1
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f005 fb76 	bl	800fa92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2210      	movs	r2, #16
 800a3b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a3b6:	e016      	b.n	800a3e6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3b8:	2340      	movs	r3, #64	; 0x40
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	2181      	movs	r1, #129	; 0x81
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f005 fb67 	bl	800fa92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3ca:	2340      	movs	r3, #64	; 0x40
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f005 fb5e 	bl	800fa92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2210      	movs	r2, #16
 800a3e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a3e6:	2308      	movs	r3, #8
 800a3e8:	2203      	movs	r2, #3
 800a3ea:	2182      	movs	r1, #130	; 0x82
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f005 fb50 	bl	800fa92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7c1b      	ldrb	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d109      	bne.n	800a430 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a422:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a426:	2101      	movs	r1, #1
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f005 fc21 	bl	800fc70 <USBD_LL_PrepareReceive>
 800a42e:	e007      	b.n	800a440 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a436:	2340      	movs	r3, #64	; 0x40
 800a438:	2101      	movs	r1, #1
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f005 fc18 	bl	800fc70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a456:	2181      	movs	r1, #129	; 0x81
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f005 fb40 	bl	800fade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a464:	2101      	movs	r1, #1
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f005 fb39 	bl	800fade <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a474:	2182      	movs	r1, #130	; 0x82
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f005 fb31 	bl	800fade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00e      	beq.n	800a4b4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f005 fc24 	bl	800fcf4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e0af      	b.n	800a648 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d03f      	beq.n	800a574 <USBD_CDC_Setup+0xb4>
 800a4f4:	2b20      	cmp	r3, #32
 800a4f6:	f040 809f 	bne.w	800a638 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	88db      	ldrh	r3, [r3, #6]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d02e      	beq.n	800a560 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	b25b      	sxtb	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	da16      	bge.n	800a53a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a518:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	88d2      	ldrh	r2, [r2, #6]
 800a51e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	88db      	ldrh	r3, [r3, #6]
 800a524:	2b07      	cmp	r3, #7
 800a526:	bf28      	it	cs
 800a528:	2307      	movcs	r3, #7
 800a52a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	89fa      	ldrh	r2, [r7, #14]
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fb19 	bl	800bb6a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a538:	e085      	b.n	800a646 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	785a      	ldrb	r2, [r3, #1]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	88db      	ldrh	r3, [r3, #6]
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a550:	6939      	ldr	r1, [r7, #16]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	88db      	ldrh	r3, [r3, #6]
 800a556:	461a      	mov	r2, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 fb32 	bl	800bbc2 <USBD_CtlPrepareRx>
      break;
 800a55e:	e072      	b.n	800a646 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	7850      	ldrb	r0, [r2, #1]
 800a56c:	2200      	movs	r2, #0
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	4798      	blx	r3
      break;
 800a572:	e068      	b.n	800a646 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	785b      	ldrb	r3, [r3, #1]
 800a578:	2b0b      	cmp	r3, #11
 800a57a:	d852      	bhi.n	800a622 <USBD_CDC_Setup+0x162>
 800a57c:	a201      	add	r2, pc, #4	; (adr r2, 800a584 <USBD_CDC_Setup+0xc4>)
 800a57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a582:	bf00      	nop
 800a584:	0800a5b5 	.word	0x0800a5b5
 800a588:	0800a631 	.word	0x0800a631
 800a58c:	0800a623 	.word	0x0800a623
 800a590:	0800a623 	.word	0x0800a623
 800a594:	0800a623 	.word	0x0800a623
 800a598:	0800a623 	.word	0x0800a623
 800a59c:	0800a623 	.word	0x0800a623
 800a5a0:	0800a623 	.word	0x0800a623
 800a5a4:	0800a623 	.word	0x0800a623
 800a5a8:	0800a623 	.word	0x0800a623
 800a5ac:	0800a5df 	.word	0x0800a5df
 800a5b0:	0800a609 	.word	0x0800a609
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d107      	bne.n	800a5d0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5c0:	f107 030a 	add.w	r3, r7, #10
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 face 	bl	800bb6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5ce:	e032      	b.n	800a636 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 fa58 	bl	800ba88 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	75fb      	strb	r3, [r7, #23]
          break;
 800a5dc:	e02b      	b.n	800a636 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d107      	bne.n	800a5fa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a5ea:	f107 030d 	add.w	r3, r7, #13
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 fab9 	bl	800bb6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5f8:	e01d      	b.n	800a636 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 fa43 	bl	800ba88 <USBD_CtlError>
            ret = USBD_FAIL;
 800a602:	2303      	movs	r3, #3
 800a604:	75fb      	strb	r3, [r7, #23]
          break;
 800a606:	e016      	b.n	800a636 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b03      	cmp	r3, #3
 800a612:	d00f      	beq.n	800a634 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 fa36 	bl	800ba88 <USBD_CtlError>
            ret = USBD_FAIL;
 800a61c:	2303      	movs	r3, #3
 800a61e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a620:	e008      	b.n	800a634 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f001 fa2f 	bl	800ba88 <USBD_CtlError>
          ret = USBD_FAIL;
 800a62a:	2303      	movs	r3, #3
 800a62c:	75fb      	strb	r3, [r7, #23]
          break;
 800a62e:	e002      	b.n	800a636 <USBD_CDC_Setup+0x176>
          break;
 800a630:	bf00      	nop
 800a632:	e008      	b.n	800a646 <USBD_CDC_Setup+0x186>
          break;
 800a634:	bf00      	nop
      }
      break;
 800a636:	e006      	b.n	800a646 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f001 fa24 	bl	800ba88 <USBD_CtlError>
      ret = USBD_FAIL;
 800a640:	2303      	movs	r3, #3
 800a642:	75fb      	strb	r3, [r7, #23]
      break;
 800a644:	bf00      	nop
  }

  return (uint8_t)ret;
 800a646:	7dfb      	ldrb	r3, [r7, #23]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a662:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a66e:	2303      	movs	r3, #3
 800a670:	e04f      	b.n	800a712 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a678:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a67a:	78fa      	ldrb	r2, [r7, #3]
 800a67c:	6879      	ldr	r1, [r7, #4]
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	440b      	add	r3, r1
 800a688:	3318      	adds	r3, #24
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d029      	beq.n	800a6e4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a690:	78fa      	ldrb	r2, [r7, #3]
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	4613      	mov	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	440b      	add	r3, r1
 800a69e:	3318      	adds	r3, #24
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	78f9      	ldrb	r1, [r7, #3]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	00db      	lsls	r3, r3, #3
 800a6aa:	1a5b      	subs	r3, r3, r1
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4403      	add	r3, r0
 800a6b0:	3344      	adds	r3, #68	; 0x44
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a6b8:	fb03 f301 	mul.w	r3, r3, r1
 800a6bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d110      	bne.n	800a6e4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a6c2:	78fa      	ldrb	r2, [r7, #3]
 800a6c4:	6879      	ldr	r1, [r7, #4]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	440b      	add	r3, r1
 800a6d0:	3318      	adds	r3, #24
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a6d6:	78f9      	ldrb	r1, [r7, #3]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	2200      	movs	r2, #0
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f005 faa6 	bl	800fc2e <USBD_LL_Transmit>
 800a6e2:	e015      	b.n	800a710 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a70c:	78fa      	ldrb	r2, [r7, #3]
 800a70e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a72c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a738:	2303      	movs	r3, #3
 800a73a:	e015      	b.n	800a768 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f005 fab6 	bl	800fcb2 <USBD_LL_GetRxDataSize>
 800a746:	4602      	mov	r2, r0
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a762:	4611      	mov	r1, r2
 800a764:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a77e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a786:	2303      	movs	r3, #3
 800a788:	e01b      	b.n	800a7c2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d015      	beq.n	800a7c0 <USBD_CDC_EP0_RxReady+0x50>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a79a:	2bff      	cmp	r3, #255	; 0xff
 800a79c:	d010      	beq.n	800a7c0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a7ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7b4:	b292      	uxth	r2, r2
 800a7b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	22ff      	movs	r2, #255	; 0xff
 800a7bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
	...

0800a7cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2243      	movs	r2, #67	; 0x43
 800a7d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a7da:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	2000009c 	.word	0x2000009c

0800a7ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2243      	movs	r2, #67	; 0x43
 800a7f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a7fa:	4b03      	ldr	r3, [pc, #12]	; (800a808 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	20000058 	.word	0x20000058

0800a80c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2243      	movs	r2, #67	; 0x43
 800a818:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a81a:	4b03      	ldr	r3, [pc, #12]	; (800a828 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	200000e0 	.word	0x200000e0

0800a82c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	220a      	movs	r2, #10
 800a838:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a83a:	4b03      	ldr	r3, [pc, #12]	; (800a848 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	20000014 	.word	0x20000014

0800a84c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e004      	b.n	800a86a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a876:	b480      	push	{r7}
 800a878:	b087      	sub	sp, #28
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	60b9      	str	r1, [r7, #8]
 800a880:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a888:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a890:	2303      	movs	r3, #3
 800a892:	e008      	b.n	800a8a6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	371c      	adds	r7, #28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b085      	sub	sp, #20
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e004      	b.n	800a8d8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8f2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a902:	2303      	movs	r3, #3
 800a904:	e01a      	b.n	800a93c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d114      	bne.n	800a93a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2201      	movs	r2, #1
 800a914:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a92e:	2181      	movs	r1, #129	; 0x81
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f005 f97c 	bl	800fc2e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a95e:	2303      	movs	r3, #3
 800a960:	e016      	b.n	800a990 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	7c1b      	ldrb	r3, [r3, #16]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d109      	bne.n	800a97e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a970:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a974:	2101      	movs	r1, #1
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f005 f97a 	bl	800fc70 <USBD_LL_PrepareReceive>
 800a97c:	e007      	b.n	800a98e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a984:	2340      	movs	r3, #64	; 0x40
 800a986:	2101      	movs	r1, #1
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f005 f971 	bl	800fc70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e01f      	b.n	800a9f0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	79fa      	ldrb	r2, [r7, #7]
 800a9e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f004 ffed 	bl	800f9c4 <USBD_LL_Init>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e016      	b.n	800aa3e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2c:	f107 020e 	add.w	r2, r7, #14
 800aa30:	4610      	mov	r0, r2
 800aa32:	4798      	blx	r3
 800aa34:	4602      	mov	r2, r0
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f005 f804 	bl	800fa5c <USBD_LL_Start>
 800aa54:	4603      	mov	r3, r0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa80:	2303      	movs	r3, #3
 800aa82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d009      	beq.n	800aaa2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	78fa      	ldrb	r2, [r7, #3]
 800aa98:	4611      	mov	r1, r2
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	4798      	blx	r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d007      	beq.n	800aad2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	78fa      	ldrb	r2, [r7, #3]
 800aacc:	4611      	mov	r1, r2
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	4798      	blx	r3
  }

  return USBD_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 ff90 	bl	800ba14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab02:	461a      	mov	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab10:	f003 031f 	and.w	r3, r3, #31
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d01a      	beq.n	800ab4e <USBD_LL_SetupStage+0x72>
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d822      	bhi.n	800ab62 <USBD_LL_SetupStage+0x86>
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <USBD_LL_SetupStage+0x4a>
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d00a      	beq.n	800ab3a <USBD_LL_SetupStage+0x5e>
 800ab24:	e01d      	b.n	800ab62 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fa62 	bl	800aff8 <USBD_StdDevReq>
 800ab34:	4603      	mov	r3, r0
 800ab36:	73fb      	strb	r3, [r7, #15]
      break;
 800ab38:	e020      	b.n	800ab7c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fac6 	bl	800b0d4 <USBD_StdItfReq>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab4c:	e016      	b.n	800ab7c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fb05 	bl	800b166 <USBD_StdEPReq>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab60:	e00c      	b.n	800ab7c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f004 ffd3 	bl	800fb1c <USBD_LL_StallEP>
 800ab76:	4603      	mov	r3, r0
 800ab78:	73fb      	strb	r3, [r7, #15]
      break;
 800ab7a:	bf00      	nop
  }

  return ret;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b086      	sub	sp, #24
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	60f8      	str	r0, [r7, #12]
 800ab8e:	460b      	mov	r3, r1
 800ab90:	607a      	str	r2, [r7, #4]
 800ab92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab94:	7afb      	ldrb	r3, [r7, #11]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d138      	bne.n	800ac0c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aba0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d14a      	bne.n	800ac42 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	689a      	ldr	r2, [r3, #8]
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d913      	bls.n	800abe0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	1ad2      	subs	r2, r2, r3
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	68da      	ldr	r2, [r3, #12]
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	4293      	cmp	r3, r2
 800abd0:	bf28      	it	cs
 800abd2:	4613      	movcs	r3, r2
 800abd4:	461a      	mov	r2, r3
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f001 f80f 	bl	800bbfc <USBD_CtlContinueRx>
 800abde:	e030      	b.n	800ac42 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b03      	cmp	r3, #3
 800abea:	d10b      	bne.n	800ac04 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d005      	beq.n	800ac04 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f001 f80a 	bl	800bc1e <USBD_CtlSendStatus>
 800ac0a:	e01a      	b.n	800ac42 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	2b03      	cmp	r3, #3
 800ac16:	d114      	bne.n	800ac42 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00e      	beq.n	800ac42 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	7afa      	ldrb	r2, [r7, #11]
 800ac2e:	4611      	mov	r1, r2
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	4798      	blx	r3
 800ac34:	4603      	mov	r3, r0
 800ac36:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	e000      	b.n	800ac44 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3718      	adds	r7, #24
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	460b      	mov	r3, r1
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac5a:	7afb      	ldrb	r3, [r7, #11]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d16b      	bne.n	800ad38 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3314      	adds	r3, #20
 800ac64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d156      	bne.n	800ad1e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	689a      	ldr	r2, [r3, #8]
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d914      	bls.n	800aca6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	689a      	ldr	r2, [r3, #8]
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	1ad2      	subs	r2, r2, r3
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 ff84 	bl	800bba0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac98:	2300      	movs	r3, #0
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f004 ffe6 	bl	800fc70 <USBD_LL_PrepareReceive>
 800aca4:	e03b      	b.n	800ad1e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	68da      	ldr	r2, [r3, #12]
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d11c      	bne.n	800acec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800acba:	429a      	cmp	r2, r3
 800acbc:	d316      	bcc.n	800acec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800acc8:	429a      	cmp	r2, r3
 800acca:	d20f      	bcs.n	800acec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800accc:	2200      	movs	r2, #0
 800acce:	2100      	movs	r1, #0
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f000 ff65 	bl	800bba0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acde:	2300      	movs	r3, #0
 800ace0:	2200      	movs	r2, #0
 800ace2:	2100      	movs	r1, #0
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f004 ffc3 	bl	800fc70 <USBD_LL_PrepareReceive>
 800acea:	e018      	b.n	800ad1e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d10b      	bne.n	800ad10 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad10:	2180      	movs	r1, #128	; 0x80
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f004 ff02 	bl	800fb1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 ff93 	bl	800bc44 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d122      	bne.n	800ad6e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7ff fe98 	bl	800aa5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ad36:	e01a      	b.n	800ad6e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d114      	bne.n	800ad6e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00e      	beq.n	800ad6e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	7afa      	ldrb	r2, [r7, #11]
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	4798      	blx	r3
 800ad60:	4603      	mov	r3, r0
 800ad62:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ad6a:	7dfb      	ldrb	r3, [r7, #23]
 800ad6c:	e000      	b.n	800ad70 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3718      	adds	r7, #24
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e02f      	b.n	800ae0c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00f      	beq.n	800add6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d009      	beq.n	800add6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	6852      	ldr	r2, [r2, #4]
 800adce:	b2d2      	uxtb	r2, r2
 800add0:	4611      	mov	r1, r2
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	2200      	movs	r2, #0
 800adda:	2100      	movs	r1, #0
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f004 fe58 	bl	800fa92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2240      	movs	r2, #64	; 0x40
 800adee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adf2:	2340      	movs	r3, #64	; 0x40
 800adf4:	2200      	movs	r2, #0
 800adf6:	2180      	movs	r1, #128	; 0x80
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f004 fe4a 	bl	800fa92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2240      	movs	r2, #64	; 0x40
 800ae08:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	78fa      	ldrb	r2, [r7, #3]
 800ae24:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2204      	movs	r2, #4
 800ae4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b04      	cmp	r3, #4
 800ae72:	d106      	bne.n	800ae82 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e012      	b.n	800aecc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d10b      	bne.n	800aeca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d005      	beq.n	800aeca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e014      	b.n	800af18 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d10d      	bne.n	800af16 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d007      	beq.n	800af16 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	78fa      	ldrb	r2, [r7, #3]
 800af10:	4611      	mov	r1, r2
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d101      	bne.n	800af3a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800af36:	2303      	movs	r3, #3
 800af38:	e014      	b.n	800af64 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b03      	cmp	r3, #3
 800af44:	d10d      	bne.n	800af62 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d007      	beq.n	800af62 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	78fa      	ldrb	r2, [r7, #3]
 800af5c:	4611      	mov	r1, r2
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2201      	movs	r2, #1
 800af8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d009      	beq.n	800afb0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	6852      	ldr	r2, [r2, #4]
 800afa8:	b2d2      	uxtb	r2, r2
 800afaa:	4611      	mov	r1, r2
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	4798      	blx	r3
  }

  return USBD_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800afba:	b480      	push	{r7}
 800afbc:	b087      	sub	sp, #28
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	3301      	adds	r3, #1
 800afd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800afd8:	8a3b      	ldrh	r3, [r7, #16]
 800afda:	021b      	lsls	r3, r3, #8
 800afdc:	b21a      	sxth	r2, r3
 800afde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	b21b      	sxth	r3, r3
 800afe6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800afe8:	89fb      	ldrh	r3, [r7, #14]
}
 800afea:	4618      	mov	r0, r3
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
	...

0800aff8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b00e:	2b40      	cmp	r3, #64	; 0x40
 800b010:	d005      	beq.n	800b01e <USBD_StdDevReq+0x26>
 800b012:	2b40      	cmp	r3, #64	; 0x40
 800b014:	d853      	bhi.n	800b0be <USBD_StdDevReq+0xc6>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00b      	beq.n	800b032 <USBD_StdDevReq+0x3a>
 800b01a:	2b20      	cmp	r3, #32
 800b01c:	d14f      	bne.n	800b0be <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	4798      	blx	r3
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]
      break;
 800b030:	e04a      	b.n	800b0c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	785b      	ldrb	r3, [r3, #1]
 800b036:	2b09      	cmp	r3, #9
 800b038:	d83b      	bhi.n	800b0b2 <USBD_StdDevReq+0xba>
 800b03a:	a201      	add	r2, pc, #4	; (adr r2, 800b040 <USBD_StdDevReq+0x48>)
 800b03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b040:	0800b095 	.word	0x0800b095
 800b044:	0800b0a9 	.word	0x0800b0a9
 800b048:	0800b0b3 	.word	0x0800b0b3
 800b04c:	0800b09f 	.word	0x0800b09f
 800b050:	0800b0b3 	.word	0x0800b0b3
 800b054:	0800b073 	.word	0x0800b073
 800b058:	0800b069 	.word	0x0800b069
 800b05c:	0800b0b3 	.word	0x0800b0b3
 800b060:	0800b08b 	.word	0x0800b08b
 800b064:	0800b07d 	.word	0x0800b07d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f9de 	bl	800b42c <USBD_GetDescriptor>
          break;
 800b070:	e024      	b.n	800b0bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fb43 	bl	800b700 <USBD_SetAddress>
          break;
 800b07a:	e01f      	b.n	800b0bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fb82 	bl	800b788 <USBD_SetConfig>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]
          break;
 800b088:	e018      	b.n	800b0bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fc21 	bl	800b8d4 <USBD_GetConfig>
          break;
 800b092:	e013      	b.n	800b0bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fc52 	bl	800b940 <USBD_GetStatus>
          break;
 800b09c:	e00e      	b.n	800b0bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fc81 	bl	800b9a8 <USBD_SetFeature>
          break;
 800b0a6:	e009      	b.n	800b0bc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fc90 	bl	800b9d0 <USBD_ClrFeature>
          break;
 800b0b0:	e004      	b.n	800b0bc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fce7 	bl	800ba88 <USBD_CtlError>
          break;
 800b0ba:	bf00      	nop
      }
      break;
 800b0bc:	e004      	b.n	800b0c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fce1 	bl	800ba88 <USBD_CtlError>
      break;
 800b0c6:	bf00      	nop
  }

  return ret;
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop

0800b0d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0ea:	2b40      	cmp	r3, #64	; 0x40
 800b0ec:	d005      	beq.n	800b0fa <USBD_StdItfReq+0x26>
 800b0ee:	2b40      	cmp	r3, #64	; 0x40
 800b0f0:	d82f      	bhi.n	800b152 <USBD_StdItfReq+0x7e>
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <USBD_StdItfReq+0x26>
 800b0f6:	2b20      	cmp	r3, #32
 800b0f8:	d12b      	bne.n	800b152 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b100:	b2db      	uxtb	r3, r3
 800b102:	3b01      	subs	r3, #1
 800b104:	2b02      	cmp	r3, #2
 800b106:	d81d      	bhi.n	800b144 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	889b      	ldrh	r3, [r3, #4]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d813      	bhi.n	800b13a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	4798      	blx	r3
 800b120:	4603      	mov	r3, r0
 800b122:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	88db      	ldrh	r3, [r3, #6]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d110      	bne.n	800b14e <USBD_StdItfReq+0x7a>
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10d      	bne.n	800b14e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fd73 	bl	800bc1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b138:	e009      	b.n	800b14e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fca3 	bl	800ba88 <USBD_CtlError>
          break;
 800b142:	e004      	b.n	800b14e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fc9e 	bl	800ba88 <USBD_CtlError>
          break;
 800b14c:	e000      	b.n	800b150 <USBD_StdItfReq+0x7c>
          break;
 800b14e:	bf00      	nop
      }
      break;
 800b150:	e004      	b.n	800b15c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fc97 	bl	800ba88 <USBD_CtlError>
      break;
 800b15a:	bf00      	nop
  }

  return ret;
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	889b      	ldrh	r3, [r3, #4]
 800b178:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b182:	2b40      	cmp	r3, #64	; 0x40
 800b184:	d007      	beq.n	800b196 <USBD_StdEPReq+0x30>
 800b186:	2b40      	cmp	r3, #64	; 0x40
 800b188:	f200 8145 	bhi.w	800b416 <USBD_StdEPReq+0x2b0>
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00c      	beq.n	800b1aa <USBD_StdEPReq+0x44>
 800b190:	2b20      	cmp	r3, #32
 800b192:	f040 8140 	bne.w	800b416 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	4798      	blx	r3
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a8:	e13a      	b.n	800b420 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	785b      	ldrb	r3, [r3, #1]
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d007      	beq.n	800b1c2 <USBD_StdEPReq+0x5c>
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	f300 8129 	bgt.w	800b40a <USBD_StdEPReq+0x2a4>
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d07f      	beq.n	800b2bc <USBD_StdEPReq+0x156>
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d03c      	beq.n	800b23a <USBD_StdEPReq+0xd4>
 800b1c0:	e123      	b.n	800b40a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d002      	beq.n	800b1d4 <USBD_StdEPReq+0x6e>
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d016      	beq.n	800b200 <USBD_StdEPReq+0x9a>
 800b1d2:	e02c      	b.n	800b22e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00d      	beq.n	800b1f6 <USBD_StdEPReq+0x90>
 800b1da:	7bbb      	ldrb	r3, [r7, #14]
 800b1dc:	2b80      	cmp	r3, #128	; 0x80
 800b1de:	d00a      	beq.n	800b1f6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f004 fc99 	bl	800fb1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1ea:	2180      	movs	r1, #128	; 0x80
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f004 fc95 	bl	800fb1c <USBD_LL_StallEP>
 800b1f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1f4:	e020      	b.n	800b238 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fc45 	bl	800ba88 <USBD_CtlError>
              break;
 800b1fe:	e01b      	b.n	800b238 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	885b      	ldrh	r3, [r3, #2]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10e      	bne.n	800b226 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b208:	7bbb      	ldrb	r3, [r7, #14]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00b      	beq.n	800b226 <USBD_StdEPReq+0xc0>
 800b20e:	7bbb      	ldrb	r3, [r7, #14]
 800b210:	2b80      	cmp	r3, #128	; 0x80
 800b212:	d008      	beq.n	800b226 <USBD_StdEPReq+0xc0>
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	88db      	ldrh	r3, [r3, #6]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d104      	bne.n	800b226 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f004 fc7b 	bl	800fb1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fcf9 	bl	800bc1e <USBD_CtlSendStatus>

              break;
 800b22c:	e004      	b.n	800b238 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fc29 	bl	800ba88 <USBD_CtlError>
              break;
 800b236:	bf00      	nop
          }
          break;
 800b238:	e0ec      	b.n	800b414 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b02      	cmp	r3, #2
 800b244:	d002      	beq.n	800b24c <USBD_StdEPReq+0xe6>
 800b246:	2b03      	cmp	r3, #3
 800b248:	d016      	beq.n	800b278 <USBD_StdEPReq+0x112>
 800b24a:	e030      	b.n	800b2ae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00d      	beq.n	800b26e <USBD_StdEPReq+0x108>
 800b252:	7bbb      	ldrb	r3, [r7, #14]
 800b254:	2b80      	cmp	r3, #128	; 0x80
 800b256:	d00a      	beq.n	800b26e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f004 fc5d 	bl	800fb1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b262:	2180      	movs	r1, #128	; 0x80
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f004 fc59 	bl	800fb1c <USBD_LL_StallEP>
 800b26a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b26c:	e025      	b.n	800b2ba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fc09 	bl	800ba88 <USBD_CtlError>
              break;
 800b276:	e020      	b.n	800b2ba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	885b      	ldrh	r3, [r3, #2]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d11b      	bne.n	800b2b8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b280:	7bbb      	ldrb	r3, [r7, #14]
 800b282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f004 fc63 	bl	800fb5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fcc2 	bl	800bc1e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	4798      	blx	r3
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b2ac:	e004      	b.n	800b2b8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fbe9 	bl	800ba88 <USBD_CtlError>
              break;
 800b2b6:	e000      	b.n	800b2ba <USBD_StdEPReq+0x154>
              break;
 800b2b8:	bf00      	nop
          }
          break;
 800b2ba:	e0ab      	b.n	800b414 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d002      	beq.n	800b2ce <USBD_StdEPReq+0x168>
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d032      	beq.n	800b332 <USBD_StdEPReq+0x1cc>
 800b2cc:	e097      	b.n	800b3fe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2ce:	7bbb      	ldrb	r3, [r7, #14]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d007      	beq.n	800b2e4 <USBD_StdEPReq+0x17e>
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	2b80      	cmp	r3, #128	; 0x80
 800b2d8:	d004      	beq.n	800b2e4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fbd3 	bl	800ba88 <USBD_CtlError>
                break;
 800b2e2:	e091      	b.n	800b408 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	da0b      	bge.n	800b304 <USBD_StdEPReq+0x19e>
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
 800b2ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	3310      	adds	r3, #16
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	4413      	add	r3, r2
 800b300:	3304      	adds	r3, #4
 800b302:	e00b      	b.n	800b31c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b304:	7bbb      	ldrb	r3, [r7, #14]
 800b306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b30a:	4613      	mov	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	4413      	add	r3, r2
 800b31a:	3304      	adds	r3, #4
 800b31c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2200      	movs	r2, #0
 800b322:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2202      	movs	r2, #2
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fc1d 	bl	800bb6a <USBD_CtlSendData>
              break;
 800b330:	e06a      	b.n	800b408 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b336:	2b00      	cmp	r3, #0
 800b338:	da11      	bge.n	800b35e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	f003 020f 	and.w	r2, r3, #15
 800b340:	6879      	ldr	r1, [r7, #4]
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	440b      	add	r3, r1
 800b34c:	3324      	adds	r3, #36	; 0x24
 800b34e:	881b      	ldrh	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d117      	bne.n	800b384 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b354:	6839      	ldr	r1, [r7, #0]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fb96 	bl	800ba88 <USBD_CtlError>
                  break;
 800b35c:	e054      	b.n	800b408 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b35e:	7bbb      	ldrb	r3, [r7, #14]
 800b360:	f003 020f 	and.w	r2, r3, #15
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	4613      	mov	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	440b      	add	r3, r1
 800b370:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d104      	bne.n	800b384 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fb83 	bl	800ba88 <USBD_CtlError>
                  break;
 800b382:	e041      	b.n	800b408 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	da0b      	bge.n	800b3a4 <USBD_StdEPReq+0x23e>
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
 800b38e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b392:	4613      	mov	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4413      	add	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	3310      	adds	r3, #16
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	4413      	add	r3, r2
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	e00b      	b.n	800b3bc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3a4:	7bbb      	ldrb	r3, [r7, #14]
 800b3a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3be:	7bbb      	ldrb	r3, [r7, #14]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <USBD_StdEPReq+0x264>
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	2b80      	cmp	r3, #128	; 0x80
 800b3c8:	d103      	bne.n	800b3d2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	e00e      	b.n	800b3f0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f004 fbde 	bl	800fb98 <USBD_LL_IsStallEP>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	e002      	b.n	800b3f0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fbb7 	bl	800bb6a <USBD_CtlSendData>
              break;
 800b3fc:	e004      	b.n	800b408 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fb41 	bl	800ba88 <USBD_CtlError>
              break;
 800b406:	bf00      	nop
          }
          break;
 800b408:	e004      	b.n	800b414 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b40a:	6839      	ldr	r1, [r7, #0]
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fb3b 	bl	800ba88 <USBD_CtlError>
          break;
 800b412:	bf00      	nop
      }
      break;
 800b414:	e004      	b.n	800b420 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fb35 	bl	800ba88 <USBD_CtlError>
      break;
 800b41e:	bf00      	nop
  }

  return ret;
 800b420:	7bfb      	ldrb	r3, [r7, #15]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
	...

0800b42c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b436:	2300      	movs	r3, #0
 800b438:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b43a:	2300      	movs	r3, #0
 800b43c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	885b      	ldrh	r3, [r3, #2]
 800b446:	0a1b      	lsrs	r3, r3, #8
 800b448:	b29b      	uxth	r3, r3
 800b44a:	3b01      	subs	r3, #1
 800b44c:	2b06      	cmp	r3, #6
 800b44e:	f200 8128 	bhi.w	800b6a2 <USBD_GetDescriptor+0x276>
 800b452:	a201      	add	r2, pc, #4	; (adr r2, 800b458 <USBD_GetDescriptor+0x2c>)
 800b454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b458:	0800b475 	.word	0x0800b475
 800b45c:	0800b48d 	.word	0x0800b48d
 800b460:	0800b4cd 	.word	0x0800b4cd
 800b464:	0800b6a3 	.word	0x0800b6a3
 800b468:	0800b6a3 	.word	0x0800b6a3
 800b46c:	0800b643 	.word	0x0800b643
 800b470:	0800b66f 	.word	0x0800b66f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	7c12      	ldrb	r2, [r2, #16]
 800b480:	f107 0108 	add.w	r1, r7, #8
 800b484:	4610      	mov	r0, r2
 800b486:	4798      	blx	r3
 800b488:	60f8      	str	r0, [r7, #12]
      break;
 800b48a:	e112      	b.n	800b6b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	7c1b      	ldrb	r3, [r3, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10d      	bne.n	800b4b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b49c:	f107 0208 	add.w	r2, r7, #8
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4798      	blx	r3
 800b4a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4ae:	e100      	b.n	800b6b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b8:	f107 0208 	add.w	r2, r7, #8
 800b4bc:	4610      	mov	r0, r2
 800b4be:	4798      	blx	r3
 800b4c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	701a      	strb	r2, [r3, #0]
      break;
 800b4ca:	e0f2      	b.n	800b6b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	885b      	ldrh	r3, [r3, #2]
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b05      	cmp	r3, #5
 800b4d4:	f200 80ac 	bhi.w	800b630 <USBD_GetDescriptor+0x204>
 800b4d8:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <USBD_GetDescriptor+0xb4>)
 800b4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4de:	bf00      	nop
 800b4e0:	0800b4f9 	.word	0x0800b4f9
 800b4e4:	0800b52d 	.word	0x0800b52d
 800b4e8:	0800b561 	.word	0x0800b561
 800b4ec:	0800b595 	.word	0x0800b595
 800b4f0:	0800b5c9 	.word	0x0800b5c9
 800b4f4:	0800b5fd 	.word	0x0800b5fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00b      	beq.n	800b51c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	7c12      	ldrb	r2, [r2, #16]
 800b510:	f107 0108 	add.w	r1, r7, #8
 800b514:	4610      	mov	r0, r2
 800b516:	4798      	blx	r3
 800b518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b51a:	e091      	b.n	800b640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fab2 	bl	800ba88 <USBD_CtlError>
            err++;
 800b524:	7afb      	ldrb	r3, [r7, #11]
 800b526:	3301      	adds	r3, #1
 800b528:	72fb      	strb	r3, [r7, #11]
          break;
 800b52a:	e089      	b.n	800b640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00b      	beq.n	800b550 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	7c12      	ldrb	r2, [r2, #16]
 800b544:	f107 0108 	add.w	r1, r7, #8
 800b548:	4610      	mov	r0, r2
 800b54a:	4798      	blx	r3
 800b54c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b54e:	e077      	b.n	800b640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 fa98 	bl	800ba88 <USBD_CtlError>
            err++;
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	3301      	adds	r3, #1
 800b55c:	72fb      	strb	r3, [r7, #11]
          break;
 800b55e:	e06f      	b.n	800b640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00b      	beq.n	800b584 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	7c12      	ldrb	r2, [r2, #16]
 800b578:	f107 0108 	add.w	r1, r7, #8
 800b57c:	4610      	mov	r0, r2
 800b57e:	4798      	blx	r3
 800b580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b582:	e05d      	b.n	800b640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fa7e 	bl	800ba88 <USBD_CtlError>
            err++;
 800b58c:	7afb      	ldrb	r3, [r7, #11]
 800b58e:	3301      	adds	r3, #1
 800b590:	72fb      	strb	r3, [r7, #11]
          break;
 800b592:	e055      	b.n	800b640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00b      	beq.n	800b5b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	7c12      	ldrb	r2, [r2, #16]
 800b5ac:	f107 0108 	add.w	r1, r7, #8
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	4798      	blx	r3
 800b5b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5b6:	e043      	b.n	800b640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fa64 	bl	800ba88 <USBD_CtlError>
            err++;
 800b5c0:	7afb      	ldrb	r3, [r7, #11]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5c6:	e03b      	b.n	800b640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ce:	695b      	ldr	r3, [r3, #20]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00b      	beq.n	800b5ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	7c12      	ldrb	r2, [r2, #16]
 800b5e0:	f107 0108 	add.w	r1, r7, #8
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	4798      	blx	r3
 800b5e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5ea:	e029      	b.n	800b640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fa4a 	bl	800ba88 <USBD_CtlError>
            err++;
 800b5f4:	7afb      	ldrb	r3, [r7, #11]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5fa:	e021      	b.n	800b640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00b      	beq.n	800b620 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	7c12      	ldrb	r2, [r2, #16]
 800b614:	f107 0108 	add.w	r1, r7, #8
 800b618:	4610      	mov	r0, r2
 800b61a:	4798      	blx	r3
 800b61c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b61e:	e00f      	b.n	800b640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fa30 	bl	800ba88 <USBD_CtlError>
            err++;
 800b628:	7afb      	ldrb	r3, [r7, #11]
 800b62a:	3301      	adds	r3, #1
 800b62c:	72fb      	strb	r3, [r7, #11]
          break;
 800b62e:	e007      	b.n	800b640 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fa28 	bl	800ba88 <USBD_CtlError>
          err++;
 800b638:	7afb      	ldrb	r3, [r7, #11]
 800b63a:	3301      	adds	r3, #1
 800b63c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b63e:	bf00      	nop
      }
      break;
 800b640:	e037      	b.n	800b6b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	7c1b      	ldrb	r3, [r3, #16]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d109      	bne.n	800b65e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b652:	f107 0208 	add.w	r2, r7, #8
 800b656:	4610      	mov	r0, r2
 800b658:	4798      	blx	r3
 800b65a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b65c:	e029      	b.n	800b6b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fa11 	bl	800ba88 <USBD_CtlError>
        err++;
 800b666:	7afb      	ldrb	r3, [r7, #11]
 800b668:	3301      	adds	r3, #1
 800b66a:	72fb      	strb	r3, [r7, #11]
      break;
 800b66c:	e021      	b.n	800b6b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	7c1b      	ldrb	r3, [r3, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10d      	bne.n	800b692 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	f107 0208 	add.w	r2, r7, #8
 800b682:	4610      	mov	r0, r2
 800b684:	4798      	blx	r3
 800b686:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3301      	adds	r3, #1
 800b68c:	2207      	movs	r2, #7
 800b68e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b690:	e00f      	b.n	800b6b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f9f7 	bl	800ba88 <USBD_CtlError>
        err++;
 800b69a:	7afb      	ldrb	r3, [r7, #11]
 800b69c:	3301      	adds	r3, #1
 800b69e:	72fb      	strb	r3, [r7, #11]
      break;
 800b6a0:	e007      	b.n	800b6b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f9ef 	bl	800ba88 <USBD_CtlError>
      err++;
 800b6aa:	7afb      	ldrb	r3, [r7, #11]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b6b0:	bf00      	nop
  }

  if (err != 0U)
 800b6b2:	7afb      	ldrb	r3, [r7, #11]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d11e      	bne.n	800b6f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	88db      	ldrh	r3, [r3, #6]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d016      	beq.n	800b6ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b6c0:	893b      	ldrh	r3, [r7, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00e      	beq.n	800b6e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	88da      	ldrh	r2, [r3, #6]
 800b6ca:	893b      	ldrh	r3, [r7, #8]
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	bf28      	it	cs
 800b6d0:	4613      	movcs	r3, r2
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6d6:	893b      	ldrh	r3, [r7, #8]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	68f9      	ldr	r1, [r7, #12]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fa44 	bl	800bb6a <USBD_CtlSendData>
 800b6e2:	e009      	b.n	800b6f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f9ce 	bl	800ba88 <USBD_CtlError>
 800b6ec:	e004      	b.n	800b6f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa95 	bl	800bc1e <USBD_CtlSendStatus>
 800b6f4:	e000      	b.n	800b6f8 <USBD_GetDescriptor+0x2cc>
    return;
 800b6f6:	bf00      	nop
  }
}
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop

0800b700 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	889b      	ldrh	r3, [r3, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d131      	bne.n	800b776 <USBD_SetAddress+0x76>
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	88db      	ldrh	r3, [r3, #6]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d12d      	bne.n	800b776 <USBD_SetAddress+0x76>
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	885b      	ldrh	r3, [r3, #2]
 800b71e:	2b7f      	cmp	r3, #127	; 0x7f
 800b720:	d829      	bhi.n	800b776 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	885b      	ldrh	r3, [r3, #2]
 800b726:	b2db      	uxtb	r3, r3
 800b728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b72c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b03      	cmp	r3, #3
 800b738:	d104      	bne.n	800b744 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f9a3 	bl	800ba88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b742:	e01d      	b.n	800b780 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	7bfa      	ldrb	r2, [r7, #15]
 800b748:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f004 fa4d 	bl	800fbf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fa61 	bl	800bc1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d004      	beq.n	800b76c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2202      	movs	r2, #2
 800b766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b76a:	e009      	b.n	800b780 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b774:	e004      	b.n	800b780 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f985 	bl	800ba88 <USBD_CtlError>
  }
}
 800b77e:	bf00      	nop
 800b780:	bf00      	nop
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	885b      	ldrh	r3, [r3, #2]
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	4b4c      	ldr	r3, [pc, #304]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b79e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7a0:	4b4b      	ldr	r3, [pc, #300]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d905      	bls.n	800b7b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7a8:	6839      	ldr	r1, [r7, #0]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f96c 	bl	800ba88 <USBD_CtlError>
    return USBD_FAIL;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e088      	b.n	800b8c6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d002      	beq.n	800b7c6 <USBD_SetConfig+0x3e>
 800b7c0:	2b03      	cmp	r3, #3
 800b7c2:	d025      	beq.n	800b810 <USBD_SetConfig+0x88>
 800b7c4:	e071      	b.n	800b8aa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7c6:	4b42      	ldr	r3, [pc, #264]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d01c      	beq.n	800b808 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b7ce:	4b40      	ldr	r3, [pc, #256]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7d8:	4b3d      	ldr	r3, [pc, #244]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7ff f948 	bl	800aa74 <USBD_SetClassConfig>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d004      	beq.n	800b7f8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f949 	bl	800ba88 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7f6:	e065      	b.n	800b8c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 fa10 	bl	800bc1e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2203      	movs	r2, #3
 800b802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b806:	e05d      	b.n	800b8c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fa08 	bl	800bc1e <USBD_CtlSendStatus>
      break;
 800b80e:	e059      	b.n	800b8c4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b810:	4b2f      	ldr	r3, [pc, #188]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d112      	bne.n	800b83e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2202      	movs	r2, #2
 800b81c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b820:	4b2b      	ldr	r3, [pc, #172]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	461a      	mov	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b82a:	4b29      	ldr	r3, [pc, #164]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff f93b 	bl	800aaac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f9f1 	bl	800bc1e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b83c:	e042      	b.n	800b8c4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b83e:	4b24      	ldr	r3, [pc, #144]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d02a      	beq.n	800b8a2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	b2db      	uxtb	r3, r3
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7ff f929 	bl	800aaac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b85a:	4b1d      	ldr	r3, [pc, #116]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b864:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff f902 	bl	800aa74 <USBD_SetClassConfig>
 800b870:	4603      	mov	r3, r0
 800b872:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00f      	beq.n	800b89a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b87a:	6839      	ldr	r1, [r7, #0]
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 f903 	bl	800ba88 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	b2db      	uxtb	r3, r3
 800b888:	4619      	mov	r1, r3
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff f90e 	bl	800aaac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2202      	movs	r2, #2
 800b894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b898:	e014      	b.n	800b8c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f9bf 	bl	800bc1e <USBD_CtlSendStatus>
      break;
 800b8a0:	e010      	b.n	800b8c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f9bb 	bl	800bc1e <USBD_CtlSendStatus>
      break;
 800b8a8:	e00c      	b.n	800b8c4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f8eb 	bl	800ba88 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8b2:	4b07      	ldr	r3, [pc, #28]	; (800b8d0 <USBD_SetConfig+0x148>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff f8f7 	bl	800aaac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c2:	bf00      	nop
  }

  return ret;
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	2000252c 	.word	0x2000252c

0800b8d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	88db      	ldrh	r3, [r3, #6]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d004      	beq.n	800b8f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 f8cd 	bl	800ba88 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b8ee:	e023      	b.n	800b938 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	dc02      	bgt.n	800b902 <USBD_GetConfig+0x2e>
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	dc03      	bgt.n	800b908 <USBD_GetConfig+0x34>
 800b900:	e015      	b.n	800b92e <USBD_GetConfig+0x5a>
 800b902:	2b03      	cmp	r3, #3
 800b904:	d00b      	beq.n	800b91e <USBD_GetConfig+0x4a>
 800b906:	e012      	b.n	800b92e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	3308      	adds	r3, #8
 800b912:	2201      	movs	r2, #1
 800b914:	4619      	mov	r1, r3
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f927 	bl	800bb6a <USBD_CtlSendData>
        break;
 800b91c:	e00c      	b.n	800b938 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3304      	adds	r3, #4
 800b922:	2201      	movs	r2, #1
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f91f 	bl	800bb6a <USBD_CtlSendData>
        break;
 800b92c:	e004      	b.n	800b938 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 f8a9 	bl	800ba88 <USBD_CtlError>
        break;
 800b936:	bf00      	nop
}
 800b938:	bf00      	nop
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b950:	b2db      	uxtb	r3, r3
 800b952:	3b01      	subs	r3, #1
 800b954:	2b02      	cmp	r3, #2
 800b956:	d81e      	bhi.n	800b996 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	88db      	ldrh	r3, [r3, #6]
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d004      	beq.n	800b96a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b960:	6839      	ldr	r1, [r7, #0]
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f890 	bl	800ba88 <USBD_CtlError>
        break;
 800b968:	e01a      	b.n	800b9a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b976:	2b00      	cmp	r3, #0
 800b978:	d005      	beq.n	800b986 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	f043 0202 	orr.w	r2, r3, #2
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	330c      	adds	r3, #12
 800b98a:	2202      	movs	r2, #2
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f8eb 	bl	800bb6a <USBD_CtlSendData>
      break;
 800b994:	e004      	b.n	800b9a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 f875 	bl	800ba88 <USBD_CtlError>
      break;
 800b99e:	bf00      	nop
  }
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	885b      	ldrh	r3, [r3, #2]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d106      	bne.n	800b9c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f92b 	bl	800bc1e <USBD_CtlSendStatus>
  }
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d80b      	bhi.n	800ba00 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	885b      	ldrh	r3, [r3, #2]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d10c      	bne.n	800ba0a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f910 	bl	800bc1e <USBD_CtlSendStatus>
      }
      break;
 800b9fe:	e004      	b.n	800ba0a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f840 	bl	800ba88 <USBD_CtlError>
      break;
 800ba08:	e000      	b.n	800ba0c <USBD_ClrFeature+0x3c>
      break;
 800ba0a:	bf00      	nop
  }
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	781a      	ldrb	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	781a      	ldrb	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7ff fabb 	bl	800afba <SWAPBYTE>
 800ba44:	4603      	mov	r3, r0
 800ba46:	461a      	mov	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3301      	adds	r3, #1
 800ba56:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f7ff faae 	bl	800afba <SWAPBYTE>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	461a      	mov	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff faa1 	bl	800afba <SWAPBYTE>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	80da      	strh	r2, [r3, #6]
}
 800ba80:	bf00      	nop
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba92:	2180      	movs	r1, #128	; 0x80
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f004 f841 	bl	800fb1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f004 f83d 	bl	800fb1c <USBD_LL_StallEP>
}
 800baa2:	bf00      	nop
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b086      	sub	sp, #24
 800baae:	af00      	add	r7, sp, #0
 800bab0:	60f8      	str	r0, [r7, #12]
 800bab2:	60b9      	str	r1, [r7, #8]
 800bab4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bab6:	2300      	movs	r3, #0
 800bab8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d036      	beq.n	800bb2e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bac4:	6938      	ldr	r0, [r7, #16]
 800bac6:	f000 f836 	bl	800bb36 <USBD_GetLen>
 800baca:	4603      	mov	r3, r0
 800bacc:	3301      	adds	r3, #1
 800bace:	b29b      	uxth	r3, r3
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bad8:	7dfb      	ldrb	r3, [r7, #23]
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	4413      	add	r3, r2
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	7812      	ldrb	r2, [r2, #0]
 800bae2:	701a      	strb	r2, [r3, #0]
  idx++;
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	3301      	adds	r3, #1
 800bae8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800baea:	7dfb      	ldrb	r3, [r7, #23]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	4413      	add	r3, r2
 800baf0:	2203      	movs	r2, #3
 800baf2:	701a      	strb	r2, [r3, #0]
  idx++;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
 800baf6:	3301      	adds	r3, #1
 800baf8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bafa:	e013      	b.n	800bb24 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	4413      	add	r3, r2
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	7812      	ldrb	r2, [r2, #0]
 800bb06:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	613b      	str	r3, [r7, #16]
    idx++;
 800bb0e:	7dfb      	ldrb	r3, [r7, #23]
 800bb10:	3301      	adds	r3, #1
 800bb12:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	4413      	add	r3, r2
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	3301      	adds	r3, #1
 800bb22:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1e7      	bne.n	800bafc <USBD_GetString+0x52>
 800bb2c:	e000      	b.n	800bb30 <USBD_GetString+0x86>
    return;
 800bb2e:	bf00      	nop
  }
}
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb36:	b480      	push	{r7}
 800bb38:	b085      	sub	sp, #20
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb46:	e005      	b.n	800bb54 <USBD_GetLen+0x1e>
  {
    len++;
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	3301      	adds	r3, #1
 800bb52:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1f5      	bne.n	800bb48 <USBD_GetLen+0x12>
  }

  return len;
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b084      	sub	sp, #16
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	60f8      	str	r0, [r7, #12]
 800bb72:	60b9      	str	r1, [r7, #8]
 800bb74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2202      	movs	r2, #2
 800bb7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	2100      	movs	r1, #0
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f004 f84c 	bl	800fc2e <USBD_LL_Transmit>

  return USBD_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f004 f83b 	bl	800fc2e <USBD_LL_Transmit>

  return USBD_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b084      	sub	sp, #16
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	60f8      	str	r0, [r7, #12]
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2203      	movs	r2, #3
 800bbd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	2100      	movs	r1, #0
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f004 f83f 	bl	800fc70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f004 f82e 	bl	800fc70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b082      	sub	sp, #8
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2204      	movs	r2, #4
 800bc2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc2e:	2300      	movs	r3, #0
 800bc30:	2200      	movs	r2, #0
 800bc32:	2100      	movs	r1, #0
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f003 fffa 	bl	800fc2e <USBD_LL_Transmit>

  return USBD_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2205      	movs	r2, #5
 800bc50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc54:	2300      	movs	r3, #0
 800bc56:	2200      	movs	r2, #0
 800bc58:	2100      	movs	r1, #0
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f004 f808 	bl	800fc70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4603      	mov	r3, r0
 800bc74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bc76:	79fb      	ldrb	r3, [r7, #7]
 800bc78:	4a08      	ldr	r2, [pc, #32]	; (800bc9c <disk_status+0x30>)
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	79fa      	ldrb	r2, [r7, #7]
 800bc84:	4905      	ldr	r1, [pc, #20]	; (800bc9c <disk_status+0x30>)
 800bc86:	440a      	add	r2, r1
 800bc88:	7a12      	ldrb	r2, [r2, #8]
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	4798      	blx	r3
 800bc8e:	4603      	mov	r3, r0
 800bc90:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	200025c0 	.word	0x200025c0

0800bca0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	4603      	mov	r3, r0
 800bca8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	4a0d      	ldr	r2, [pc, #52]	; (800bce8 <disk_initialize+0x48>)
 800bcb2:	5cd3      	ldrb	r3, [r2, r3]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d111      	bne.n	800bcdc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	4a0b      	ldr	r2, [pc, #44]	; (800bce8 <disk_initialize+0x48>)
 800bcbc:	2101      	movs	r1, #1
 800bcbe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bcc0:	79fb      	ldrb	r3, [r7, #7]
 800bcc2:	4a09      	ldr	r2, [pc, #36]	; (800bce8 <disk_initialize+0x48>)
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4413      	add	r3, r2
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	79fa      	ldrb	r2, [r7, #7]
 800bcce:	4906      	ldr	r1, [pc, #24]	; (800bce8 <disk_initialize+0x48>)
 800bcd0:	440a      	add	r2, r1
 800bcd2:	7a12      	ldrb	r2, [r2, #8]
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	4798      	blx	r3
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	200025c0 	.word	0x200025c0

0800bcec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bcec:	b590      	push	{r4, r7, lr}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60b9      	str	r1, [r7, #8]
 800bcf4:	607a      	str	r2, [r7, #4]
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	4a0a      	ldr	r2, [pc, #40]	; (800bd28 <disk_read+0x3c>)
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	689c      	ldr	r4, [r3, #8]
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
 800bd0a:	4a07      	ldr	r2, [pc, #28]	; (800bd28 <disk_read+0x3c>)
 800bd0c:	4413      	add	r3, r2
 800bd0e:	7a18      	ldrb	r0, [r3, #8]
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	68b9      	ldr	r1, [r7, #8]
 800bd16:	47a0      	blx	r4
 800bd18:	4603      	mov	r3, r0
 800bd1a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	371c      	adds	r7, #28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd90      	pop	{r4, r7, pc}
 800bd26:	bf00      	nop
 800bd28:	200025c0 	.word	0x200025c0

0800bd2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bd2c:	b590      	push	{r4, r7, lr}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60b9      	str	r1, [r7, #8]
 800bd34:	607a      	str	r2, [r7, #4]
 800bd36:	603b      	str	r3, [r7, #0]
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	4a0a      	ldr	r2, [pc, #40]	; (800bd68 <disk_write+0x3c>)
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	68dc      	ldr	r4, [r3, #12]
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	4a07      	ldr	r2, [pc, #28]	; (800bd68 <disk_write+0x3c>)
 800bd4c:	4413      	add	r3, r2
 800bd4e:	7a18      	ldrb	r0, [r3, #8]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	68b9      	ldr	r1, [r7, #8]
 800bd56:	47a0      	blx	r4
 800bd58:	4603      	mov	r3, r0
 800bd5a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd90      	pop	{r4, r7, pc}
 800bd66:	bf00      	nop
 800bd68:	200025c0 	.word	0x200025c0

0800bd6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	603a      	str	r2, [r7, #0]
 800bd76:	71fb      	strb	r3, [r7, #7]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bd7c:	79fb      	ldrb	r3, [r7, #7]
 800bd7e:	4a09      	ldr	r2, [pc, #36]	; (800bda4 <disk_ioctl+0x38>)
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	79fa      	ldrb	r2, [r7, #7]
 800bd8a:	4906      	ldr	r1, [pc, #24]	; (800bda4 <disk_ioctl+0x38>)
 800bd8c:	440a      	add	r2, r1
 800bd8e:	7a10      	ldrb	r0, [r2, #8]
 800bd90:	79b9      	ldrb	r1, [r7, #6]
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4798      	blx	r3
 800bd96:	4603      	mov	r3, r0
 800bd98:	73fb      	strb	r3, [r7, #15]
  return res;
 800bd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	200025c0 	.word	0x200025c0

0800bda8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bdb8:	89fb      	ldrh	r3, [r7, #14]
 800bdba:	021b      	lsls	r3, r3, #8
 800bdbc:	b21a      	sxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	b21b      	sxth	r3, r3
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	b21b      	sxth	r3, r3
 800bdc8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bdca:	89fb      	ldrh	r3, [r7, #14]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3714      	adds	r7, #20
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3303      	adds	r3, #3
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	021b      	lsls	r3, r3, #8
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	3202      	adds	r2, #2
 800bdf0:	7812      	ldrb	r2, [r2, #0]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	021b      	lsls	r3, r3, #8
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	3201      	adds	r2, #1
 800bdfe:	7812      	ldrb	r2, [r2, #0]
 800be00:	4313      	orrs	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	021b      	lsls	r3, r3, #8
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	7812      	ldrb	r2, [r2, #0]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	60fb      	str	r3, [r7, #12]
	return rv;
 800be10:	68fb      	ldr	r3, [r7, #12]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3714      	adds	r7, #20
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800be1e:	b480      	push	{r7}
 800be20:	b083      	sub	sp, #12
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	460b      	mov	r3, r1
 800be28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	1c5a      	adds	r2, r3, #1
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	887a      	ldrh	r2, [r7, #2]
 800be32:	b2d2      	uxtb	r2, r2
 800be34:	701a      	strb	r2, [r3, #0]
 800be36:	887b      	ldrh	r3, [r7, #2]
 800be38:	0a1b      	lsrs	r3, r3, #8
 800be3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	607a      	str	r2, [r7, #4]
 800be42:	887a      	ldrh	r2, [r7, #2]
 800be44:	b2d2      	uxtb	r2, r2
 800be46:	701a      	strb	r2, [r3, #0]
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	1c5a      	adds	r2, r3, #1
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	b2d2      	uxtb	r2, r2
 800be68:	701a      	strb	r2, [r3, #0]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	0a1b      	lsrs	r3, r3, #8
 800be6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	607a      	str	r2, [r7, #4]
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	b2d2      	uxtb	r2, r2
 800be7a:	701a      	strb	r2, [r3, #0]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	0a1b      	lsrs	r3, r3, #8
 800be80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	683a      	ldr	r2, [r7, #0]
 800be8a:	b2d2      	uxtb	r2, r2
 800be8c:	701a      	strb	r2, [r3, #0]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	0a1b      	lsrs	r3, r3, #8
 800be92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	607a      	str	r2, [r7, #4]
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	b2d2      	uxtb	r2, r2
 800be9e:	701a      	strb	r2, [r3, #0]
}
 800bea0:	bf00      	nop
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00d      	beq.n	800bee2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bec6:	693a      	ldr	r2, [r7, #16]
 800bec8:	1c53      	adds	r3, r2, #1
 800beca:	613b      	str	r3, [r7, #16]
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	1c59      	adds	r1, r3, #1
 800bed0:	6179      	str	r1, [r7, #20]
 800bed2:	7812      	ldrb	r2, [r2, #0]
 800bed4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	3b01      	subs	r3, #1
 800beda:	607b      	str	r3, [r7, #4]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1f1      	bne.n	800bec6 <mem_cpy+0x1a>
	}
}
 800bee2:	bf00      	nop
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800beee:	b480      	push	{r7}
 800bef0:	b087      	sub	sp, #28
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	60b9      	str	r1, [r7, #8]
 800bef8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	1c5a      	adds	r2, r3, #1
 800bf02:	617a      	str	r2, [r7, #20]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	b2d2      	uxtb	r2, r2
 800bf08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	607b      	str	r3, [r7, #4]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1f3      	bne.n	800befe <mem_set+0x10>
}
 800bf16:	bf00      	nop
 800bf18:	bf00      	nop
 800bf1a:	371c      	adds	r7, #28
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bf24:	b480      	push	{r7}
 800bf26:	b089      	sub	sp, #36	; 0x24
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	61fb      	str	r3, [r7, #28]
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	61fa      	str	r2, [r7, #28]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	4619      	mov	r1, r3
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	61ba      	str	r2, [r7, #24]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	1acb      	subs	r3, r1, r3
 800bf50:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	607b      	str	r3, [r7, #4]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <mem_cmp+0x40>
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d0eb      	beq.n	800bf3c <mem_cmp+0x18>

	return r;
 800bf64:	697b      	ldr	r3, [r7, #20]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3724      	adds	r7, #36	; 0x24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bf72:	b480      	push	{r7}
 800bf74:	b083      	sub	sp, #12
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bf7c:	e002      	b.n	800bf84 <chk_chr+0x12>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	3301      	adds	r3, #1
 800bf82:	607b      	str	r3, [r7, #4]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d005      	beq.n	800bf98 <chk_chr+0x26>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	461a      	mov	r2, r3
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d1f2      	bne.n	800bf7e <chk_chr+0xc>
	return *str;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	60bb      	str	r3, [r7, #8]
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	e029      	b.n	800c010 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bfbc:	4a27      	ldr	r2, [pc, #156]	; (800c05c <chk_lock+0xb4>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	011b      	lsls	r3, r3, #4
 800bfc2:	4413      	add	r3, r2
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d01d      	beq.n	800c006 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bfca:	4a24      	ldr	r2, [pc, #144]	; (800c05c <chk_lock+0xb4>)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	011b      	lsls	r3, r3, #4
 800bfd0:	4413      	add	r3, r2
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d116      	bne.n	800c00a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bfdc:	4a1f      	ldr	r2, [pc, #124]	; (800c05c <chk_lock+0xb4>)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	011b      	lsls	r3, r3, #4
 800bfe2:	4413      	add	r3, r2
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d10c      	bne.n	800c00a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bff0:	4a1a      	ldr	r2, [pc, #104]	; (800c05c <chk_lock+0xb4>)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	011b      	lsls	r3, r3, #4
 800bff6:	4413      	add	r3, r2
 800bff8:	3308      	adds	r3, #8
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c000:	429a      	cmp	r2, r3
 800c002:	d102      	bne.n	800c00a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c004:	e007      	b.n	800c016 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c006:	2301      	movs	r3, #1
 800c008:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	3301      	adds	r3, #1
 800c00e:	60fb      	str	r3, [r7, #12]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d9d2      	bls.n	800bfbc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d109      	bne.n	800c030 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d102      	bne.n	800c028 <chk_lock+0x80>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b02      	cmp	r3, #2
 800c026:	d101      	bne.n	800c02c <chk_lock+0x84>
 800c028:	2300      	movs	r3, #0
 800c02a:	e010      	b.n	800c04e <chk_lock+0xa6>
 800c02c:	2312      	movs	r3, #18
 800c02e:	e00e      	b.n	800c04e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d108      	bne.n	800c048 <chk_lock+0xa0>
 800c036:	4a09      	ldr	r2, [pc, #36]	; (800c05c <chk_lock+0xb4>)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	4413      	add	r3, r2
 800c03e:	330c      	adds	r3, #12
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c046:	d101      	bne.n	800c04c <chk_lock+0xa4>
 800c048:	2310      	movs	r3, #16
 800c04a:	e000      	b.n	800c04e <chk_lock+0xa6>
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3714      	adds	r7, #20
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	20002538 	.word	0x20002538

0800c060 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c066:	2300      	movs	r3, #0
 800c068:	607b      	str	r3, [r7, #4]
 800c06a:	e002      	b.n	800c072 <enq_lock+0x12>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3301      	adds	r3, #1
 800c070:	607b      	str	r3, [r7, #4]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d806      	bhi.n	800c086 <enq_lock+0x26>
 800c078:	4a09      	ldr	r2, [pc, #36]	; (800c0a0 <enq_lock+0x40>)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	011b      	lsls	r3, r3, #4
 800c07e:	4413      	add	r3, r2
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1f2      	bne.n	800c06c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	bf14      	ite	ne
 800c08c:	2301      	movne	r3, #1
 800c08e:	2300      	moveq	r3, #0
 800c090:	b2db      	uxtb	r3, r3
}
 800c092:	4618      	mov	r0, r3
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	20002538 	.word	0x20002538

0800c0a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60fb      	str	r3, [r7, #12]
 800c0b2:	e01f      	b.n	800c0f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c0b4:	4a41      	ldr	r2, [pc, #260]	; (800c1bc <inc_lock+0x118>)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	011b      	lsls	r3, r3, #4
 800c0ba:	4413      	add	r3, r2
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d113      	bne.n	800c0ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c0c6:	4a3d      	ldr	r2, [pc, #244]	; (800c1bc <inc_lock+0x118>)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	011b      	lsls	r3, r3, #4
 800c0cc:	4413      	add	r3, r2
 800c0ce:	3304      	adds	r3, #4
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d109      	bne.n	800c0ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c0da:	4a38      	ldr	r2, [pc, #224]	; (800c1bc <inc_lock+0x118>)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	011b      	lsls	r3, r3, #4
 800c0e0:	4413      	add	r3, r2
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d006      	beq.n	800c0fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	60fb      	str	r3, [r7, #12]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d9dc      	bls.n	800c0b4 <inc_lock+0x10>
 800c0fa:	e000      	b.n	800c0fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c0fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b02      	cmp	r3, #2
 800c102:	d132      	bne.n	800c16a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c104:	2300      	movs	r3, #0
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	e002      	b.n	800c110 <inc_lock+0x6c>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	3301      	adds	r3, #1
 800c10e:	60fb      	str	r3, [r7, #12]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d806      	bhi.n	800c124 <inc_lock+0x80>
 800c116:	4a29      	ldr	r2, [pc, #164]	; (800c1bc <inc_lock+0x118>)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	011b      	lsls	r3, r3, #4
 800c11c:	4413      	add	r3, r2
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1f2      	bne.n	800c10a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b02      	cmp	r3, #2
 800c128:	d101      	bne.n	800c12e <inc_lock+0x8a>
 800c12a:	2300      	movs	r3, #0
 800c12c:	e040      	b.n	800c1b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	4922      	ldr	r1, [pc, #136]	; (800c1bc <inc_lock+0x118>)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	011b      	lsls	r3, r3, #4
 800c138:	440b      	add	r3, r1
 800c13a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	689a      	ldr	r2, [r3, #8]
 800c140:	491e      	ldr	r1, [pc, #120]	; (800c1bc <inc_lock+0x118>)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	011b      	lsls	r3, r3, #4
 800c146:	440b      	add	r3, r1
 800c148:	3304      	adds	r3, #4
 800c14a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	695a      	ldr	r2, [r3, #20]
 800c150:	491a      	ldr	r1, [pc, #104]	; (800c1bc <inc_lock+0x118>)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	011b      	lsls	r3, r3, #4
 800c156:	440b      	add	r3, r1
 800c158:	3308      	adds	r3, #8
 800c15a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c15c:	4a17      	ldr	r2, [pc, #92]	; (800c1bc <inc_lock+0x118>)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	011b      	lsls	r3, r3, #4
 800c162:	4413      	add	r3, r2
 800c164:	330c      	adds	r3, #12
 800c166:	2200      	movs	r2, #0
 800c168:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d009      	beq.n	800c184 <inc_lock+0xe0>
 800c170:	4a12      	ldr	r2, [pc, #72]	; (800c1bc <inc_lock+0x118>)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	011b      	lsls	r3, r3, #4
 800c176:	4413      	add	r3, r2
 800c178:	330c      	adds	r3, #12
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d001      	beq.n	800c184 <inc_lock+0xe0>
 800c180:	2300      	movs	r3, #0
 800c182:	e015      	b.n	800c1b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d108      	bne.n	800c19c <inc_lock+0xf8>
 800c18a:	4a0c      	ldr	r2, [pc, #48]	; (800c1bc <inc_lock+0x118>)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	011b      	lsls	r3, r3, #4
 800c190:	4413      	add	r3, r2
 800c192:	330c      	adds	r3, #12
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	3301      	adds	r3, #1
 800c198:	b29a      	uxth	r2, r3
 800c19a:	e001      	b.n	800c1a0 <inc_lock+0xfc>
 800c19c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1a0:	4906      	ldr	r1, [pc, #24]	; (800c1bc <inc_lock+0x118>)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	011b      	lsls	r3, r3, #4
 800c1a6:	440b      	add	r3, r1
 800c1a8:	330c      	adds	r3, #12
 800c1aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3301      	adds	r3, #1
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	20002538 	.word	0x20002538

0800c1c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	607b      	str	r3, [r7, #4]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d825      	bhi.n	800c220 <dec_lock+0x60>
		n = Files[i].ctr;
 800c1d4:	4a17      	ldr	r2, [pc, #92]	; (800c234 <dec_lock+0x74>)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	011b      	lsls	r3, r3, #4
 800c1da:	4413      	add	r3, r2
 800c1dc:	330c      	adds	r3, #12
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c1e2:	89fb      	ldrh	r3, [r7, #14]
 800c1e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1e8:	d101      	bne.n	800c1ee <dec_lock+0x2e>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c1ee:	89fb      	ldrh	r3, [r7, #14]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <dec_lock+0x3a>
 800c1f4:	89fb      	ldrh	r3, [r7, #14]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c1fa:	4a0e      	ldr	r2, [pc, #56]	; (800c234 <dec_lock+0x74>)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	011b      	lsls	r3, r3, #4
 800c200:	4413      	add	r3, r2
 800c202:	330c      	adds	r3, #12
 800c204:	89fa      	ldrh	r2, [r7, #14]
 800c206:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c208:	89fb      	ldrh	r3, [r7, #14]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d105      	bne.n	800c21a <dec_lock+0x5a>
 800c20e:	4a09      	ldr	r2, [pc, #36]	; (800c234 <dec_lock+0x74>)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	011b      	lsls	r3, r3, #4
 800c214:	4413      	add	r3, r2
 800c216:	2200      	movs	r2, #0
 800c218:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	737b      	strb	r3, [r7, #13]
 800c21e:	e001      	b.n	800c224 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c220:	2302      	movs	r3, #2
 800c222:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c224:	7b7b      	ldrb	r3, [r7, #13]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	20002538 	.word	0x20002538

0800c238 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c240:	2300      	movs	r3, #0
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	e010      	b.n	800c268 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c246:	4a0d      	ldr	r2, [pc, #52]	; (800c27c <clear_lock+0x44>)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	011b      	lsls	r3, r3, #4
 800c24c:	4413      	add	r3, r2
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	429a      	cmp	r2, r3
 800c254:	d105      	bne.n	800c262 <clear_lock+0x2a>
 800c256:	4a09      	ldr	r2, [pc, #36]	; (800c27c <clear_lock+0x44>)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	011b      	lsls	r3, r3, #4
 800c25c:	4413      	add	r3, r2
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3301      	adds	r3, #1
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d9eb      	bls.n	800c246 <clear_lock+0xe>
	}
}
 800c26e:	bf00      	nop
 800c270:	bf00      	nop
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	20002538 	.word	0x20002538

0800c280 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b086      	sub	sp, #24
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	78db      	ldrb	r3, [r3, #3]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d034      	beq.n	800c2fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c298:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	7858      	ldrb	r0, [r3, #1]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	f7ff fd40 	bl	800bd2c <disk_write>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	73fb      	strb	r3, [r7, #15]
 800c2b6:	e022      	b.n	800c2fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	1ad2      	subs	r2, r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d217      	bcs.n	800c2fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	789b      	ldrb	r3, [r3, #2]
 800c2d2:	613b      	str	r3, [r7, #16]
 800c2d4:	e010      	b.n	800c2f8 <sync_window+0x78>
					wsect += fs->fsize;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	4413      	add	r3, r2
 800c2de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	7858      	ldrb	r0, [r3, #1]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	f7ff fd1d 	bl	800bd2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	613b      	str	r3, [r7, #16]
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d8eb      	bhi.n	800c2d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3718      	adds	r7, #24
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d01b      	beq.n	800c358 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7ff ffad 	bl	800c280 <sync_window>
 800c326:	4603      	mov	r3, r0
 800c328:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d113      	bne.n	800c358 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	7858      	ldrb	r0, [r3, #1]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c33a:	2301      	movs	r3, #1
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	f7ff fcd5 	bl	800bcec <disk_read>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d004      	beq.n	800c352 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c34c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c34e:	2301      	movs	r3, #1
 800c350:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	683a      	ldr	r2, [r7, #0]
 800c356:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c358:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
	...

0800c364 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f7ff ff87 	bl	800c280 <sync_window>
 800c372:	4603      	mov	r3, r0
 800c374:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d159      	bne.n	800c430 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	2b03      	cmp	r3, #3
 800c382:	d149      	bne.n	800c418 <sync_fs+0xb4>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	791b      	ldrb	r3, [r3, #4]
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d145      	bne.n	800c418 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	899b      	ldrh	r3, [r3, #12]
 800c396:	461a      	mov	r2, r3
 800c398:	2100      	movs	r1, #0
 800c39a:	f7ff fda8 	bl	800beee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3338      	adds	r3, #56	; 0x38
 800c3a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3a6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fd37 	bl	800be1e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	3338      	adds	r3, #56	; 0x38
 800c3b4:	4921      	ldr	r1, [pc, #132]	; (800c43c <sync_fs+0xd8>)
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff fd4c 	bl	800be54 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3338      	adds	r3, #56	; 0x38
 800c3c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c3c4:	491e      	ldr	r1, [pc, #120]	; (800c440 <sync_fs+0xdc>)
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff fd44 	bl	800be54 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3338      	adds	r3, #56	; 0x38
 800c3d0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4610      	mov	r0, r2
 800c3dc:	f7ff fd3a 	bl	800be54 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3338      	adds	r3, #56	; 0x38
 800c3e4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	695b      	ldr	r3, [r3, #20]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	f7ff fd30 	bl	800be54 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	7858      	ldrb	r0, [r3, #1]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c40c:	2301      	movs	r3, #1
 800c40e:	f7ff fc8d 	bl	800bd2c <disk_write>
			fs->fsi_flag = 0;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	785b      	ldrb	r3, [r3, #1]
 800c41c:	2200      	movs	r2, #0
 800c41e:	2100      	movs	r1, #0
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff fca3 	bl	800bd6c <disk_ioctl>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d001      	beq.n	800c430 <sync_fs+0xcc>
 800c42c:	2301      	movs	r3, #1
 800c42e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c430:	7bfb      	ldrb	r3, [r7, #15]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	41615252 	.word	0x41615252
 800c440:	61417272 	.word	0x61417272

0800c444 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	3b02      	subs	r3, #2
 800c452:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	69db      	ldr	r3, [r3, #28]
 800c458:	3b02      	subs	r3, #2
 800c45a:	683a      	ldr	r2, [r7, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d301      	bcc.n	800c464 <clust2sect+0x20>
 800c460:	2300      	movs	r3, #0
 800c462:	e008      	b.n	800c476 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	895b      	ldrh	r3, [r3, #10]
 800c468:	461a      	mov	r2, r3
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	fb03 f202 	mul.w	r2, r3, r2
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c474:	4413      	add	r3, r2
}
 800c476:	4618      	mov	r0, r3
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b086      	sub	sp, #24
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d904      	bls.n	800c4a2 <get_fat+0x20>
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	69db      	ldr	r3, [r3, #28]
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d302      	bcc.n	800c4a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	617b      	str	r3, [r7, #20]
 800c4a6:	e0bb      	b.n	800c620 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c4a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	2b03      	cmp	r3, #3
 800c4b4:	f000 8083 	beq.w	800c5be <get_fat+0x13c>
 800c4b8:	2b03      	cmp	r3, #3
 800c4ba:	f300 80a7 	bgt.w	800c60c <get_fat+0x18a>
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d002      	beq.n	800c4c8 <get_fat+0x46>
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d056      	beq.n	800c574 <get_fat+0xf2>
 800c4c6:	e0a1      	b.n	800c60c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	085b      	lsrs	r3, r3, #1
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	899b      	ldrh	r3, [r3, #12]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4e6:	4413      	add	r3, r2
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	6938      	ldr	r0, [r7, #16]
 800c4ec:	f7ff ff0c 	bl	800c308 <move_window>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f040 808d 	bne.w	800c612 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	1c5a      	adds	r2, r3, #1
 800c4fc:	60fa      	str	r2, [r7, #12]
 800c4fe:	693a      	ldr	r2, [r7, #16]
 800c500:	8992      	ldrh	r2, [r2, #12]
 800c502:	fbb3 f1f2 	udiv	r1, r3, r2
 800c506:	fb02 f201 	mul.w	r2, r2, r1
 800c50a:	1a9b      	subs	r3, r3, r2
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	4413      	add	r3, r2
 800c510:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c514:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	899b      	ldrh	r3, [r3, #12]
 800c51e:	4619      	mov	r1, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	fbb3 f3f1 	udiv	r3, r3, r1
 800c526:	4413      	add	r3, r2
 800c528:	4619      	mov	r1, r3
 800c52a:	6938      	ldr	r0, [r7, #16]
 800c52c:	f7ff feec 	bl	800c308 <move_window>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d16f      	bne.n	800c616 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	899b      	ldrh	r3, [r3, #12]
 800c53a:	461a      	mov	r2, r3
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c542:	fb02 f201 	mul.w	r2, r2, r1
 800c546:	1a9b      	subs	r3, r3, r2
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	4413      	add	r3, r2
 800c54c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c550:	021b      	lsls	r3, r3, #8
 800c552:	461a      	mov	r2, r3
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	4313      	orrs	r3, r2
 800c558:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	f003 0301 	and.w	r3, r3, #1
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <get_fat+0xe8>
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	091b      	lsrs	r3, r3, #4
 800c568:	e002      	b.n	800c570 <get_fat+0xee>
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c570:	617b      	str	r3, [r7, #20]
			break;
 800c572:	e055      	b.n	800c620 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	899b      	ldrh	r3, [r3, #12]
 800c57c:	085b      	lsrs	r3, r3, #1
 800c57e:	b29b      	uxth	r3, r3
 800c580:	4619      	mov	r1, r3
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	fbb3 f3f1 	udiv	r3, r3, r1
 800c588:	4413      	add	r3, r2
 800c58a:	4619      	mov	r1, r3
 800c58c:	6938      	ldr	r0, [r7, #16]
 800c58e:	f7ff febb 	bl	800c308 <move_window>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d140      	bne.n	800c61a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	005b      	lsls	r3, r3, #1
 800c5a2:	693a      	ldr	r2, [r7, #16]
 800c5a4:	8992      	ldrh	r2, [r2, #12]
 800c5a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5aa:	fb02 f200 	mul.w	r2, r2, r0
 800c5ae:	1a9b      	subs	r3, r3, r2
 800c5b0:	440b      	add	r3, r1
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7ff fbf8 	bl	800bda8 <ld_word>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	617b      	str	r3, [r7, #20]
			break;
 800c5bc:	e030      	b.n	800c620 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	899b      	ldrh	r3, [r3, #12]
 800c5c6:	089b      	lsrs	r3, r3, #2
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5d2:	4413      	add	r3, r2
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	6938      	ldr	r0, [r7, #16]
 800c5d8:	f7ff fe96 	bl	800c308 <move_window>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d11d      	bne.n	800c61e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	693a      	ldr	r2, [r7, #16]
 800c5ee:	8992      	ldrh	r2, [r2, #12]
 800c5f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5f4:	fb02 f200 	mul.w	r2, r2, r0
 800c5f8:	1a9b      	subs	r3, r3, r2
 800c5fa:	440b      	add	r3, r1
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7ff fbeb 	bl	800bdd8 <ld_dword>
 800c602:	4603      	mov	r3, r0
 800c604:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c608:	617b      	str	r3, [r7, #20]
			break;
 800c60a:	e009      	b.n	800c620 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c60c:	2301      	movs	r3, #1
 800c60e:	617b      	str	r3, [r7, #20]
 800c610:	e006      	b.n	800c620 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c612:	bf00      	nop
 800c614:	e004      	b.n	800c620 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c616:	bf00      	nop
 800c618:	e002      	b.n	800c620 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c61a:	bf00      	nop
 800c61c:	e000      	b.n	800c620 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c61e:	bf00      	nop
		}
	}

	return val;
 800c620:	697b      	ldr	r3, [r7, #20]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3718      	adds	r7, #24
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c62a:	b590      	push	{r4, r7, lr}
 800c62c:	b089      	sub	sp, #36	; 0x24
 800c62e:	af00      	add	r7, sp, #0
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c636:	2302      	movs	r3, #2
 800c638:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	f240 8102 	bls.w	800c846 <put_fat+0x21c>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	69db      	ldr	r3, [r3, #28]
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	429a      	cmp	r2, r3
 800c64a:	f080 80fc 	bcs.w	800c846 <put_fat+0x21c>
		switch (fs->fs_type) {
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	2b03      	cmp	r3, #3
 800c654:	f000 80b6 	beq.w	800c7c4 <put_fat+0x19a>
 800c658:	2b03      	cmp	r3, #3
 800c65a:	f300 80fd 	bgt.w	800c858 <put_fat+0x22e>
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d003      	beq.n	800c66a <put_fat+0x40>
 800c662:	2b02      	cmp	r3, #2
 800c664:	f000 8083 	beq.w	800c76e <put_fat+0x144>
 800c668:	e0f6      	b.n	800c858 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	61bb      	str	r3, [r7, #24]
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	085b      	lsrs	r3, r3, #1
 800c672:	69ba      	ldr	r2, [r7, #24]
 800c674:	4413      	add	r3, r2
 800c676:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	899b      	ldrh	r3, [r3, #12]
 800c680:	4619      	mov	r1, r3
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	fbb3 f3f1 	udiv	r3, r3, r1
 800c688:	4413      	add	r3, r2
 800c68a:	4619      	mov	r1, r3
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f7ff fe3b 	bl	800c308 <move_window>
 800c692:	4603      	mov	r3, r0
 800c694:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c696:	7ffb      	ldrb	r3, [r7, #31]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f040 80d6 	bne.w	800c84a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	1c5a      	adds	r2, r3, #1
 800c6a8:	61ba      	str	r2, [r7, #24]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	8992      	ldrh	r2, [r2, #12]
 800c6ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6b2:	fb02 f200 	mul.w	r2, r2, r0
 800c6b6:	1a9b      	subs	r3, r3, r2
 800c6b8:	440b      	add	r3, r1
 800c6ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f003 0301 	and.w	r3, r3, #1
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00d      	beq.n	800c6e2 <put_fat+0xb8>
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	b25b      	sxtb	r3, r3
 800c6cc:	f003 030f 	and.w	r3, r3, #15
 800c6d0:	b25a      	sxtb	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	011b      	lsls	r3, r3, #4
 800c6d8:	b25b      	sxtb	r3, r3
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	b25b      	sxtb	r3, r3
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	e001      	b.n	800c6e6 <put_fat+0xbc>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	697a      	ldr	r2, [r7, #20]
 800c6e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	899b      	ldrh	r3, [r3, #12]
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800c700:	4413      	add	r3, r2
 800c702:	4619      	mov	r1, r3
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f7ff fdff 	bl	800c308 <move_window>
 800c70a:	4603      	mov	r3, r0
 800c70c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c70e:	7ffb      	ldrb	r3, [r7, #31]
 800c710:	2b00      	cmp	r3, #0
 800c712:	f040 809c 	bne.w	800c84e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	899b      	ldrh	r3, [r3, #12]
 800c720:	461a      	mov	r2, r3
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	fbb3 f0f2 	udiv	r0, r3, r2
 800c728:	fb02 f200 	mul.w	r2, r2, r0
 800c72c:	1a9b      	subs	r3, r3, r2
 800c72e:	440b      	add	r3, r1
 800c730:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	f003 0301 	and.w	r3, r3, #1
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d003      	beq.n	800c744 <put_fat+0x11a>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	091b      	lsrs	r3, r3, #4
 800c740:	b2db      	uxtb	r3, r3
 800c742:	e00e      	b.n	800c762 <put_fat+0x138>
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	b25b      	sxtb	r3, r3
 800c74a:	f023 030f 	bic.w	r3, r3, #15
 800c74e:	b25a      	sxtb	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	0a1b      	lsrs	r3, r3, #8
 800c754:	b25b      	sxtb	r3, r3
 800c756:	f003 030f 	and.w	r3, r3, #15
 800c75a:	b25b      	sxtb	r3, r3
 800c75c:	4313      	orrs	r3, r2
 800c75e:	b25b      	sxtb	r3, r3
 800c760:	b2db      	uxtb	r3, r3
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2201      	movs	r2, #1
 800c76a:	70da      	strb	r2, [r3, #3]
			break;
 800c76c:	e074      	b.n	800c858 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	899b      	ldrh	r3, [r3, #12]
 800c776:	085b      	lsrs	r3, r3, #1
 800c778:	b29b      	uxth	r3, r3
 800c77a:	4619      	mov	r1, r3
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c782:	4413      	add	r3, r2
 800c784:	4619      	mov	r1, r3
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7ff fdbe 	bl	800c308 <move_window>
 800c78c:	4603      	mov	r3, r0
 800c78e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c790:	7ffb      	ldrb	r3, [r7, #31]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d15d      	bne.n	800c852 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	005b      	lsls	r3, r3, #1
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	8992      	ldrh	r2, [r2, #12]
 800c7a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7a8:	fb02 f200 	mul.w	r2, r2, r0
 800c7ac:	1a9b      	subs	r3, r3, r2
 800c7ae:	440b      	add	r3, r1
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	b292      	uxth	r2, r2
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7ff fb31 	bl	800be1e <st_word>
			fs->wflag = 1;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	70da      	strb	r2, [r3, #3]
			break;
 800c7c2:	e049      	b.n	800c858 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	899b      	ldrh	r3, [r3, #12]
 800c7cc:	089b      	lsrs	r3, r3, #2
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7d8:	4413      	add	r3, r2
 800c7da:	4619      	mov	r1, r3
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f7ff fd93 	bl	800c308 <move_window>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7e6:	7ffb      	ldrb	r3, [r7, #31]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d134      	bne.n	800c856 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	8992      	ldrh	r2, [r2, #12]
 800c800:	fbb3 f0f2 	udiv	r0, r3, r2
 800c804:	fb02 f200 	mul.w	r2, r2, r0
 800c808:	1a9b      	subs	r3, r3, r2
 800c80a:	440b      	add	r3, r1
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff fae3 	bl	800bdd8 <ld_dword>
 800c812:	4603      	mov	r3, r0
 800c814:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c818:	4323      	orrs	r3, r4
 800c81a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	8992      	ldrh	r2, [r2, #12]
 800c82a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c82e:	fb02 f200 	mul.w	r2, r2, r0
 800c832:	1a9b      	subs	r3, r3, r2
 800c834:	440b      	add	r3, r1
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff fb0b 	bl	800be54 <st_dword>
			fs->wflag = 1;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2201      	movs	r2, #1
 800c842:	70da      	strb	r2, [r3, #3]
			break;
 800c844:	e008      	b.n	800c858 <put_fat+0x22e>
		}
	}
 800c846:	bf00      	nop
 800c848:	e006      	b.n	800c858 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c84a:	bf00      	nop
 800c84c:	e004      	b.n	800c858 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c84e:	bf00      	nop
 800c850:	e002      	b.n	800c858 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c852:	bf00      	nop
 800c854:	e000      	b.n	800c858 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c856:	bf00      	nop
	return res;
 800c858:	7ffb      	ldrb	r3, [r7, #31]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3724      	adds	r7, #36	; 0x24
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd90      	pop	{r4, r7, pc}

0800c862 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b088      	sub	sp, #32
 800c866:	af00      	add	r7, sp, #0
 800c868:	60f8      	str	r0, [r7, #12]
 800c86a:	60b9      	str	r1, [r7, #8]
 800c86c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d904      	bls.n	800c888 <remove_chain+0x26>
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	69db      	ldr	r3, [r3, #28]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	429a      	cmp	r2, r3
 800c886:	d301      	bcc.n	800c88c <remove_chain+0x2a>
 800c888:	2302      	movs	r3, #2
 800c88a:	e04b      	b.n	800c924 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00c      	beq.n	800c8ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c896:	6879      	ldr	r1, [r7, #4]
 800c898:	69b8      	ldr	r0, [r7, #24]
 800c89a:	f7ff fec6 	bl	800c62a <put_fat>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c8a2:	7ffb      	ldrb	r3, [r7, #31]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d001      	beq.n	800c8ac <remove_chain+0x4a>
 800c8a8:	7ffb      	ldrb	r3, [r7, #31]
 800c8aa:	e03b      	b.n	800c924 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c8ac:	68b9      	ldr	r1, [r7, #8]
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7ff fde7 	bl	800c482 <get_fat>
 800c8b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d031      	beq.n	800c920 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d101      	bne.n	800c8c6 <remove_chain+0x64>
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	e02e      	b.n	800c924 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8cc:	d101      	bne.n	800c8d2 <remove_chain+0x70>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e028      	b.n	800c924 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	68b9      	ldr	r1, [r7, #8]
 800c8d6:	69b8      	ldr	r0, [r7, #24]
 800c8d8:	f7ff fea7 	bl	800c62a <put_fat>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c8e0:	7ffb      	ldrb	r3, [r7, #31]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d001      	beq.n	800c8ea <remove_chain+0x88>
 800c8e6:	7ffb      	ldrb	r3, [r7, #31]
 800c8e8:	e01c      	b.n	800c924 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	699a      	ldr	r2, [r3, #24]
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	3b02      	subs	r3, #2
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d20b      	bcs.n	800c910 <remove_chain+0xae>
			fs->free_clst++;
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	699b      	ldr	r3, [r3, #24]
 800c8fc:	1c5a      	adds	r2, r3, #1
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	791b      	ldrb	r3, [r3, #4]
 800c906:	f043 0301 	orr.w	r3, r3, #1
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	69db      	ldr	r3, [r3, #28]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d3c6      	bcc.n	800c8ac <remove_chain+0x4a>
 800c91e:	e000      	b.n	800c922 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c920:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3720      	adds	r7, #32
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b088      	sub	sp, #32
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10d      	bne.n	800c95e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d004      	beq.n	800c958 <create_chain+0x2c>
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	69db      	ldr	r3, [r3, #28]
 800c952:	69ba      	ldr	r2, [r7, #24]
 800c954:	429a      	cmp	r2, r3
 800c956:	d31b      	bcc.n	800c990 <create_chain+0x64>
 800c958:	2301      	movs	r3, #1
 800c95a:	61bb      	str	r3, [r7, #24]
 800c95c:	e018      	b.n	800c990 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7ff fd8e 	bl	800c482 <get_fat>
 800c966:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d801      	bhi.n	800c972 <create_chain+0x46>
 800c96e:	2301      	movs	r3, #1
 800c970:	e070      	b.n	800ca54 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c978:	d101      	bne.n	800c97e <create_chain+0x52>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	e06a      	b.n	800ca54 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	69db      	ldr	r3, [r3, #28]
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	429a      	cmp	r2, r3
 800c986:	d201      	bcs.n	800c98c <create_chain+0x60>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	e063      	b.n	800ca54 <create_chain+0x128>
		scl = clst;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	3301      	adds	r3, #1
 800c998:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	69db      	ldr	r3, [r3, #28]
 800c99e:	69fa      	ldr	r2, [r7, #28]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d307      	bcc.n	800c9b4 <create_chain+0x88>
				ncl = 2;
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c9a8:	69fa      	ldr	r2, [r7, #28]
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d901      	bls.n	800c9b4 <create_chain+0x88>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	e04f      	b.n	800ca54 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c9b4:	69f9      	ldr	r1, [r7, #28]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff fd63 	bl	800c482 <get_fat>
 800c9bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00e      	beq.n	800c9e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d003      	beq.n	800c9d2 <create_chain+0xa6>
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9d0:	d101      	bne.n	800c9d6 <create_chain+0xaa>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	e03e      	b.n	800ca54 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c9d6:	69fa      	ldr	r2, [r7, #28]
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d1da      	bne.n	800c994 <create_chain+0x68>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e038      	b.n	800ca54 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c9e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c9e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9e8:	69f9      	ldr	r1, [r7, #28]
 800c9ea:	6938      	ldr	r0, [r7, #16]
 800c9ec:	f7ff fe1d 	bl	800c62a <put_fat>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d109      	bne.n	800ca0e <create_chain+0xe2>
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d006      	beq.n	800ca0e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ca00:	69fa      	ldr	r2, [r7, #28]
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6938      	ldr	r0, [r7, #16]
 800ca06:	f7ff fe10 	bl	800c62a <put_fat>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d116      	bne.n	800ca42 <create_chain+0x116>
		fs->last_clst = ncl;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	69fa      	ldr	r2, [r7, #28]
 800ca18:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	699a      	ldr	r2, [r3, #24]
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	3b02      	subs	r3, #2
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d804      	bhi.n	800ca32 <create_chain+0x106>
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	699b      	ldr	r3, [r3, #24]
 800ca2c:	1e5a      	subs	r2, r3, #1
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	791b      	ldrb	r3, [r3, #4]
 800ca36:	f043 0301 	orr.w	r3, r3, #1
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	711a      	strb	r2, [r3, #4]
 800ca40:	e007      	b.n	800ca52 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d102      	bne.n	800ca4e <create_chain+0x122>
 800ca48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca4c:	e000      	b.n	800ca50 <create_chain+0x124>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ca52:	69fb      	ldr	r3, [r7, #28]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3720      	adds	r7, #32
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b087      	sub	sp, #28
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca70:	3304      	adds	r3, #4
 800ca72:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	899b      	ldrh	r3, [r3, #12]
 800ca78:	461a      	mov	r2, r3
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	8952      	ldrh	r2, [r2, #10]
 800ca84:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	1d1a      	adds	r2, r3, #4
 800ca8e:	613a      	str	r2, [r7, #16]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d101      	bne.n	800ca9e <clmt_clust+0x42>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e010      	b.n	800cac0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d307      	bcc.n	800cab6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	617b      	str	r3, [r7, #20]
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	3304      	adds	r3, #4
 800cab2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cab4:	e7e9      	b.n	800ca8a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cab6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	4413      	add	r3, r2
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	371c      	adds	r7, #28
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cae2:	d204      	bcs.n	800caee <dir_sdi+0x22>
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	f003 031f 	and.w	r3, r3, #31
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800caee:	2302      	movs	r3, #2
 800caf0:	e071      	b.n	800cbd6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d106      	bne.n	800cb12 <dir_sdi+0x46>
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d902      	bls.n	800cb12 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10c      	bne.n	800cb32 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	095b      	lsrs	r3, r3, #5
 800cb1c:	693a      	ldr	r2, [r7, #16]
 800cb1e:	8912      	ldrh	r2, [r2, #8]
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d301      	bcc.n	800cb28 <dir_sdi+0x5c>
 800cb24:	2302      	movs	r3, #2
 800cb26:	e056      	b.n	800cbd6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	61da      	str	r2, [r3, #28]
 800cb30:	e02d      	b.n	800cb8e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	895b      	ldrh	r3, [r3, #10]
 800cb36:	461a      	mov	r2, r3
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	899b      	ldrh	r3, [r3, #12]
 800cb3c:	fb03 f302 	mul.w	r3, r3, r2
 800cb40:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb42:	e019      	b.n	800cb78 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6979      	ldr	r1, [r7, #20]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7ff fc9a 	bl	800c482 <get_fat>
 800cb4e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb56:	d101      	bne.n	800cb5c <dir_sdi+0x90>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e03c      	b.n	800cbd6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d904      	bls.n	800cb6c <dir_sdi+0xa0>
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	69db      	ldr	r3, [r3, #28]
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d301      	bcc.n	800cb70 <dir_sdi+0xa4>
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	e032      	b.n	800cbd6 <dir_sdi+0x10a>
			ofs -= csz;
 800cb70:	683a      	ldr	r2, [r7, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb78:	683a      	ldr	r2, [r7, #0]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d2e1      	bcs.n	800cb44 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cb80:	6979      	ldr	r1, [r7, #20]
 800cb82:	6938      	ldr	r0, [r7, #16]
 800cb84:	f7ff fc5e 	bl	800c444 <clust2sect>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	697a      	ldr	r2, [r7, #20]
 800cb92:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <dir_sdi+0xd4>
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	e01a      	b.n	800cbd6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	69da      	ldr	r2, [r3, #28]
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	899b      	ldrh	r3, [r3, #12]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbb0:	441a      	add	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	899b      	ldrh	r3, [r3, #12]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbc8:	fb02 f200 	mul.w	r2, r2, r0
 800cbcc:	1a9b      	subs	r3, r3, r2
 800cbce:	18ca      	adds	r2, r1, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b086      	sub	sp, #24
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	3320      	adds	r3, #32
 800cbf4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d003      	beq.n	800cc06 <dir_next+0x28>
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc04:	d301      	bcc.n	800cc0a <dir_next+0x2c>
 800cc06:	2304      	movs	r3, #4
 800cc08:	e0bb      	b.n	800cd82 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	899b      	ldrh	r3, [r3, #12]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc16:	fb02 f201 	mul.w	r2, r2, r1
 800cc1a:	1a9b      	subs	r3, r3, r2
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f040 809d 	bne.w	800cd5c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	69db      	ldr	r3, [r3, #28]
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	699b      	ldr	r3, [r3, #24]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10b      	bne.n	800cc4c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	095b      	lsrs	r3, r3, #5
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	8912      	ldrh	r2, [r2, #8]
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	f0c0 808d 	bcc.w	800cd5c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	61da      	str	r2, [r3, #28]
 800cc48:	2304      	movs	r3, #4
 800cc4a:	e09a      	b.n	800cd82 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	899b      	ldrh	r3, [r3, #12]
 800cc50:	461a      	mov	r2, r3
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	8952      	ldrh	r2, [r2, #10]
 800cc5c:	3a01      	subs	r2, #1
 800cc5e:	4013      	ands	r3, r2
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d17b      	bne.n	800cd5c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	699b      	ldr	r3, [r3, #24]
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	f7ff fc08 	bl	800c482 <get_fat>
 800cc72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d801      	bhi.n	800cc7e <dir_next+0xa0>
 800cc7a:	2302      	movs	r3, #2
 800cc7c:	e081      	b.n	800cd82 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc84:	d101      	bne.n	800cc8a <dir_next+0xac>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e07b      	b.n	800cd82 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	697a      	ldr	r2, [r7, #20]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d359      	bcc.n	800cd48 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d104      	bne.n	800cca4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	61da      	str	r2, [r3, #28]
 800cca0:	2304      	movs	r3, #4
 800cca2:	e06e      	b.n	800cd82 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f7ff fe3d 	bl	800c92c <create_chain>
 800ccb2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d101      	bne.n	800ccbe <dir_next+0xe0>
 800ccba:	2307      	movs	r3, #7
 800ccbc:	e061      	b.n	800cd82 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d101      	bne.n	800ccc8 <dir_next+0xea>
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	e05c      	b.n	800cd82 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccce:	d101      	bne.n	800ccd4 <dir_next+0xf6>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e056      	b.n	800cd82 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f7ff fad3 	bl	800c280 <sync_window>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <dir_next+0x106>
 800cce0:	2301      	movs	r3, #1
 800cce2:	e04e      	b.n	800cd82 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	899b      	ldrh	r3, [r3, #12]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	f7ff f8fc 	bl	800beee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	613b      	str	r3, [r7, #16]
 800ccfa:	6979      	ldr	r1, [r7, #20]
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f7ff fba1 	bl	800c444 <clust2sect>
 800cd02:	4602      	mov	r2, r0
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	635a      	str	r2, [r3, #52]	; 0x34
 800cd08:	e012      	b.n	800cd30 <dir_next+0x152>
						fs->wflag = 1;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f7ff fab5 	bl	800c280 <sync_window>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <dir_next+0x142>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e030      	b.n	800cd82 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	3301      	adds	r3, #1
 800cd24:	613b      	str	r3, [r7, #16]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2a:	1c5a      	adds	r2, r3, #1
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	635a      	str	r2, [r3, #52]	; 0x34
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	895b      	ldrh	r3, [r3, #10]
 800cd34:	461a      	mov	r2, r3
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d3e6      	bcc.n	800cd0a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	1ad2      	subs	r2, r2, r3
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cd4e:	6979      	ldr	r1, [r7, #20]
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f7ff fb77 	bl	800c444 <clust2sect>
 800cd56:	4602      	mov	r2, r0
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	899b      	ldrh	r3, [r3, #12]
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd74:	fb02 f200 	mul.w	r2, r2, r0
 800cd78:	1a9b      	subs	r3, r3, r2
 800cd7a:	18ca      	adds	r2, r1, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3718      	adds	r7, #24
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b086      	sub	sp, #24
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7ff fe95 	bl	800cacc <dir_sdi>
 800cda2:	4603      	mov	r3, r0
 800cda4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d12b      	bne.n	800ce04 <dir_alloc+0x7a>
		n = 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f7ff faa6 	bl	800c308 <move_window>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cdc0:	7dfb      	ldrb	r3, [r7, #23]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d11d      	bne.n	800ce02 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2be5      	cmp	r3, #229	; 0xe5
 800cdce:	d004      	beq.n	800cdda <dir_alloc+0x50>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a1b      	ldr	r3, [r3, #32]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d107      	bne.n	800cdea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	3301      	adds	r3, #1
 800cdde:	613b      	str	r3, [r7, #16]
 800cde0:	693a      	ldr	r2, [r7, #16]
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d102      	bne.n	800cdee <dir_alloc+0x64>
 800cde8:	e00c      	b.n	800ce04 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cdea:	2300      	movs	r3, #0
 800cdec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cdee:	2101      	movs	r1, #1
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7ff fef4 	bl	800cbde <dir_next>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d0d7      	beq.n	800cdb0 <dir_alloc+0x26>
 800ce00:	e000      	b.n	800ce04 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ce02:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ce04:	7dfb      	ldrb	r3, [r7, #23]
 800ce06:	2b04      	cmp	r3, #4
 800ce08:	d101      	bne.n	800ce0e <dir_alloc+0x84>
 800ce0a:	2307      	movs	r3, #7
 800ce0c:	75fb      	strb	r3, [r7, #23]
	return res;
 800ce0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3718      	adds	r7, #24
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	331a      	adds	r3, #26
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe ffbe 	bl	800bda8 <ld_word>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d109      	bne.n	800ce4c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	3314      	adds	r3, #20
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fe ffb3 	bl	800bda8 <ld_word>
 800ce42:	4603      	mov	r3, r0
 800ce44:	041b      	lsls	r3, r3, #16
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b084      	sub	sp, #16
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	60b9      	str	r1, [r7, #8]
 800ce60:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	331a      	adds	r3, #26
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	b292      	uxth	r2, r2
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe ffd6 	bl	800be1e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	2b03      	cmp	r3, #3
 800ce78:	d109      	bne.n	800ce8e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	f103 0214 	add.w	r2, r3, #20
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	0c1b      	lsrs	r3, r3, #16
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	4619      	mov	r1, r3
 800ce88:	4610      	mov	r0, r2
 800ce8a:	f7fe ffc8 	bl	800be1e <st_word>
	}
}
 800ce8e:	bf00      	nop
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
	...

0800ce98 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ce98:	b590      	push	{r4, r7, lr}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	331a      	adds	r3, #26
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe ff7e 	bl	800bda8 <ld_word>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d001      	beq.n	800ceb6 <cmp_lfn+0x1e>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	e059      	b.n	800cf6a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cebe:	1e5a      	subs	r2, r3, #1
 800cec0:	4613      	mov	r3, r2
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	4413      	add	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cecc:	2301      	movs	r3, #1
 800cece:	81fb      	strh	r3, [r7, #14]
 800ced0:	2300      	movs	r3, #0
 800ced2:	613b      	str	r3, [r7, #16]
 800ced4:	e033      	b.n	800cf3e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ced6:	4a27      	ldr	r2, [pc, #156]	; (800cf74 <cmp_lfn+0xdc>)
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	4413      	add	r3, r2
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	461a      	mov	r2, r3
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	4413      	add	r3, r2
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fe ff5f 	bl	800bda8 <ld_word>
 800ceea:	4603      	mov	r3, r0
 800ceec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ceee:	89fb      	ldrh	r3, [r7, #14]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d01a      	beq.n	800cf2a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b31      	cmp	r3, #49	; 0x31
 800cef8:	d812      	bhi.n	800cf20 <cmp_lfn+0x88>
 800cefa:	89bb      	ldrh	r3, [r7, #12]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f002 f98b 	bl	800f218 <ff_wtoupper>
 800cf02:	4603      	mov	r3, r0
 800cf04:	461c      	mov	r4, r3
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	1c5a      	adds	r2, r3, #1
 800cf0a:	617a      	str	r2, [r7, #20]
 800cf0c:	005b      	lsls	r3, r3, #1
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	4413      	add	r3, r2
 800cf12:	881b      	ldrh	r3, [r3, #0]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f002 f97f 	bl	800f218 <ff_wtoupper>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	429c      	cmp	r4, r3
 800cf1e:	d001      	beq.n	800cf24 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cf20:	2300      	movs	r3, #0
 800cf22:	e022      	b.n	800cf6a <cmp_lfn+0xd2>
			}
			wc = uc;
 800cf24:	89bb      	ldrh	r3, [r7, #12]
 800cf26:	81fb      	strh	r3, [r7, #14]
 800cf28:	e006      	b.n	800cf38 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cf2a:	89bb      	ldrh	r3, [r7, #12]
 800cf2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d001      	beq.n	800cf38 <cmp_lfn+0xa0>
 800cf34:	2300      	movs	r3, #0
 800cf36:	e018      	b.n	800cf6a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	613b      	str	r3, [r7, #16]
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b0c      	cmp	r3, #12
 800cf42:	d9c8      	bls.n	800ced6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00b      	beq.n	800cf68 <cmp_lfn+0xd0>
 800cf50:	89fb      	ldrh	r3, [r7, #14]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d008      	beq.n	800cf68 <cmp_lfn+0xd0>
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	881b      	ldrh	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <cmp_lfn+0xd0>
 800cf64:	2300      	movs	r3, #0
 800cf66:	e000      	b.n	800cf6a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cf68:	2301      	movs	r3, #1
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	371c      	adds	r7, #28
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd90      	pop	{r4, r7, pc}
 800cf72:	bf00      	nop
 800cf74:	08014bb4 	.word	0x08014bb4

0800cf78 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	331a      	adds	r3, #26
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fe ff0e 	bl	800bda8 <ld_word>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d001      	beq.n	800cf96 <pick_lfn+0x1e>
 800cf92:	2300      	movs	r3, #0
 800cf94:	e04d      	b.n	800d032 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf9e:	1e5a      	subs	r2, r3, #1
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	4413      	add	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cfac:	2301      	movs	r3, #1
 800cfae:	81fb      	strh	r3, [r7, #14]
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	613b      	str	r3, [r7, #16]
 800cfb4:	e028      	b.n	800d008 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cfb6:	4a21      	ldr	r2, [pc, #132]	; (800d03c <pick_lfn+0xc4>)
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	4413      	add	r3, r2
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7fe feef 	bl	800bda8 <ld_word>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cfce:	89fb      	ldrh	r3, [r7, #14]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00f      	beq.n	800cff4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	2b31      	cmp	r3, #49	; 0x31
 800cfd8:	d901      	bls.n	800cfde <pick_lfn+0x66>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	e029      	b.n	800d032 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cfde:	89bb      	ldrh	r3, [r7, #12]
 800cfe0:	81fb      	strh	r3, [r7, #14]
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	1c5a      	adds	r2, r3, #1
 800cfe6:	617a      	str	r2, [r7, #20]
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	4413      	add	r3, r2
 800cfee:	89fa      	ldrh	r2, [r7, #14]
 800cff0:	801a      	strh	r2, [r3, #0]
 800cff2:	e006      	b.n	800d002 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cff4:	89bb      	ldrh	r3, [r7, #12]
 800cff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d001      	beq.n	800d002 <pick_lfn+0x8a>
 800cffe:	2300      	movs	r3, #0
 800d000:	e017      	b.n	800d032 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	3301      	adds	r3, #1
 800d006:	613b      	str	r3, [r7, #16]
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	2b0c      	cmp	r3, #12
 800d00c:	d9d3      	bls.n	800cfb6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00a      	beq.n	800d030 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b31      	cmp	r3, #49	; 0x31
 800d01e:	d901      	bls.n	800d024 <pick_lfn+0xac>
 800d020:	2300      	movs	r3, #0
 800d022:	e006      	b.n	800d032 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	4413      	add	r3, r2
 800d02c:	2200      	movs	r2, #0
 800d02e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d030:	2301      	movs	r3, #1
}
 800d032:	4618      	mov	r0, r3
 800d034:	3718      	adds	r7, #24
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	08014bb4 	.word	0x08014bb4

0800d040 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	4611      	mov	r1, r2
 800d04c:	461a      	mov	r2, r3
 800d04e:	460b      	mov	r3, r1
 800d050:	71fb      	strb	r3, [r7, #7]
 800d052:	4613      	mov	r3, r2
 800d054:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	330d      	adds	r3, #13
 800d05a:	79ba      	ldrb	r2, [r7, #6]
 800d05c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	330b      	adds	r3, #11
 800d062:	220f      	movs	r2, #15
 800d064:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	330c      	adds	r3, #12
 800d06a:	2200      	movs	r2, #0
 800d06c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	331a      	adds	r3, #26
 800d072:	2100      	movs	r1, #0
 800d074:	4618      	mov	r0, r3
 800d076:	f7fe fed2 	bl	800be1e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d07a:	79fb      	ldrb	r3, [r7, #7]
 800d07c:	1e5a      	subs	r2, r3, #1
 800d07e:	4613      	mov	r3, r2
 800d080:	005b      	lsls	r3, r3, #1
 800d082:	4413      	add	r3, r2
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	82fb      	strh	r3, [r7, #22]
 800d08e:	2300      	movs	r3, #0
 800d090:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d092:	8afb      	ldrh	r3, [r7, #22]
 800d094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d098:	4293      	cmp	r3, r2
 800d09a:	d007      	beq.n	800d0ac <put_lfn+0x6c>
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	1c5a      	adds	r2, r3, #1
 800d0a0:	61fa      	str	r2, [r7, #28]
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d0ac:	4a17      	ldr	r2, [pc, #92]	; (800d10c <put_lfn+0xcc>)
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	8afa      	ldrh	r2, [r7, #22]
 800d0bc:	4611      	mov	r1, r2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fe fead 	bl	800be1e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d0c4:	8afb      	ldrh	r3, [r7, #22]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d102      	bne.n	800d0d0 <put_lfn+0x90>
 800d0ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	61bb      	str	r3, [r7, #24]
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	2b0c      	cmp	r3, #12
 800d0da:	d9da      	bls.n	800d092 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d0dc:	8afb      	ldrh	r3, [r7, #22]
 800d0de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d006      	beq.n	800d0f4 <put_lfn+0xb4>
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d103      	bne.n	800d0fc <put_lfn+0xbc>
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	79fa      	ldrb	r2, [r7, #7]
 800d100:	701a      	strb	r2, [r3, #0]
}
 800d102:	bf00      	nop
 800d104:	3720      	adds	r7, #32
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	08014bb4 	.word	0x08014bb4

0800d110 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08c      	sub	sp, #48	; 0x30
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d11e:	220b      	movs	r2, #11
 800d120:	68b9      	ldr	r1, [r7, #8]
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f7fe fec2 	bl	800beac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	2b05      	cmp	r3, #5
 800d12c:	d92b      	bls.n	800d186 <gen_numname+0x76>
		sr = seq;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d132:	e022      	b.n	800d17a <gen_numname+0x6a>
			wc = *lfn++;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	1c9a      	adds	r2, r3, #2
 800d138:	607a      	str	r2, [r7, #4]
 800d13a:	881b      	ldrh	r3, [r3, #0]
 800d13c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d13e:	2300      	movs	r3, #0
 800d140:	62bb      	str	r3, [r7, #40]	; 0x28
 800d142:	e017      	b.n	800d174 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	005a      	lsls	r2, r3, #1
 800d148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	4413      	add	r3, r2
 800d150:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d152:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d154:	085b      	lsrs	r3, r3, #1
 800d156:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d005      	beq.n	800d16e <gen_numname+0x5e>
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d168:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d16c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	3301      	adds	r3, #1
 800d172:	62bb      	str	r3, [r7, #40]	; 0x28
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	2b0f      	cmp	r3, #15
 800d178:	d9e4      	bls.n	800d144 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d1d8      	bne.n	800d134 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d186:	2307      	movs	r3, #7
 800d188:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	f003 030f 	and.w	r3, r3, #15
 800d192:	b2db      	uxtb	r3, r3
 800d194:	3330      	adds	r3, #48	; 0x30
 800d196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d19a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d19e:	2b39      	cmp	r3, #57	; 0x39
 800d1a0:	d904      	bls.n	800d1ac <gen_numname+0x9c>
 800d1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1a6:	3307      	adds	r3, #7
 800d1a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	1e5a      	subs	r2, r3, #1
 800d1b0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d1b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d1b6:	4413      	add	r3, r2
 800d1b8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d1bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	091b      	lsrs	r3, r3, #4
 800d1c4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1de      	bne.n	800d18a <gen_numname+0x7a>
	ns[i] = '~';
 800d1cc:	f107 0214 	add.w	r2, r7, #20
 800d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d2:	4413      	add	r3, r2
 800d1d4:	227e      	movs	r2, #126	; 0x7e
 800d1d6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d1d8:	2300      	movs	r3, #0
 800d1da:	627b      	str	r3, [r7, #36]	; 0x24
 800d1dc:	e002      	b.n	800d1e4 <gen_numname+0xd4>
 800d1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	627b      	str	r3, [r7, #36]	; 0x24
 800d1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d205      	bcs.n	800d1f8 <gen_numname+0xe8>
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	4413      	add	r3, r2
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b20      	cmp	r3, #32
 800d1f6:	d1f2      	bne.n	800d1de <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fa:	2b07      	cmp	r3, #7
 800d1fc:	d808      	bhi.n	800d210 <gen_numname+0x100>
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	62ba      	str	r2, [r7, #40]	; 0x28
 800d204:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d208:	4413      	add	r3, r2
 800d20a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d20e:	e000      	b.n	800d212 <gen_numname+0x102>
 800d210:	2120      	movs	r1, #32
 800d212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d214:	1c5a      	adds	r2, r3, #1
 800d216:	627a      	str	r2, [r7, #36]	; 0x24
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	4413      	add	r3, r2
 800d21c:	460a      	mov	r2, r1
 800d21e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d222:	2b07      	cmp	r3, #7
 800d224:	d9e8      	bls.n	800d1f8 <gen_numname+0xe8>
}
 800d226:	bf00      	nop
 800d228:	bf00      	nop
 800d22a:	3730      	adds	r7, #48	; 0x30
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d23c:	230b      	movs	r3, #11
 800d23e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d240:	7bfb      	ldrb	r3, [r7, #15]
 800d242:	b2da      	uxtb	r2, r3
 800d244:	0852      	lsrs	r2, r2, #1
 800d246:	01db      	lsls	r3, r3, #7
 800d248:	4313      	orrs	r3, r2
 800d24a:	b2da      	uxtb	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	1c59      	adds	r1, r3, #1
 800d250:	6079      	str	r1, [r7, #4]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	4413      	add	r3, r2
 800d256:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	60bb      	str	r3, [r7, #8]
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1ed      	bne.n	800d240 <sum_sfn+0x10>
	return sum;
 800d264:	7bfb      	ldrb	r3, [r7, #15]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b086      	sub	sp, #24
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
 800d27a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d27c:	2304      	movs	r3, #4
 800d27e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d286:	23ff      	movs	r3, #255	; 0xff
 800d288:	757b      	strb	r3, [r7, #21]
 800d28a:	23ff      	movs	r3, #255	; 0xff
 800d28c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d28e:	e081      	b.n	800d394 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	69db      	ldr	r3, [r3, #28]
 800d294:	4619      	mov	r1, r3
 800d296:	6938      	ldr	r0, [r7, #16]
 800d298:	f7ff f836 	bl	800c308 <move_window>
 800d29c:	4603      	mov	r3, r0
 800d29e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2a0:	7dfb      	ldrb	r3, [r7, #23]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d17c      	bne.n	800d3a0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d2ae:	7dbb      	ldrb	r3, [r7, #22]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d102      	bne.n	800d2ba <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d2b4:	2304      	movs	r3, #4
 800d2b6:	75fb      	strb	r3, [r7, #23]
 800d2b8:	e077      	b.n	800d3aa <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a1b      	ldr	r3, [r3, #32]
 800d2be:	330b      	adds	r3, #11
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2c6:	73fb      	strb	r3, [r7, #15]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	7bfa      	ldrb	r2, [r7, #15]
 800d2cc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d2ce:	7dbb      	ldrb	r3, [r7, #22]
 800d2d0:	2be5      	cmp	r3, #229	; 0xe5
 800d2d2:	d00e      	beq.n	800d2f2 <dir_read+0x80>
 800d2d4:	7dbb      	ldrb	r3, [r7, #22]
 800d2d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2d8:	d00b      	beq.n	800d2f2 <dir_read+0x80>
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	f023 0320 	bic.w	r3, r3, #32
 800d2e0:	2b08      	cmp	r3, #8
 800d2e2:	bf0c      	ite	eq
 800d2e4:	2301      	moveq	r3, #1
 800d2e6:	2300      	movne	r3, #0
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d002      	beq.n	800d2f8 <dir_read+0x86>
				ord = 0xFF;
 800d2f2:	23ff      	movs	r3, #255	; 0xff
 800d2f4:	757b      	strb	r3, [r7, #21]
 800d2f6:	e044      	b.n	800d382 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
 800d2fa:	2b0f      	cmp	r3, #15
 800d2fc:	d12f      	bne.n	800d35e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d2fe:	7dbb      	ldrb	r3, [r7, #22]
 800d300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00d      	beq.n	800d324 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6a1b      	ldr	r3, [r3, #32]
 800d30c:	7b5b      	ldrb	r3, [r3, #13]
 800d30e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d310:	7dbb      	ldrb	r3, [r7, #22]
 800d312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d316:	75bb      	strb	r3, [r7, #22]
 800d318:	7dbb      	ldrb	r3, [r7, #22]
 800d31a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	695a      	ldr	r2, [r3, #20]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d324:	7dba      	ldrb	r2, [r7, #22]
 800d326:	7d7b      	ldrb	r3, [r7, #21]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d115      	bne.n	800d358 <dir_read+0xe6>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a1b      	ldr	r3, [r3, #32]
 800d330:	330d      	adds	r3, #13
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	7d3a      	ldrb	r2, [r7, #20]
 800d336:	429a      	cmp	r2, r3
 800d338:	d10e      	bne.n	800d358 <dir_read+0xe6>
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	691a      	ldr	r2, [r3, #16]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a1b      	ldr	r3, [r3, #32]
 800d342:	4619      	mov	r1, r3
 800d344:	4610      	mov	r0, r2
 800d346:	f7ff fe17 	bl	800cf78 <pick_lfn>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d003      	beq.n	800d358 <dir_read+0xe6>
 800d350:	7d7b      	ldrb	r3, [r7, #21]
 800d352:	3b01      	subs	r3, #1
 800d354:	b2db      	uxtb	r3, r3
 800d356:	e000      	b.n	800d35a <dir_read+0xe8>
 800d358:	23ff      	movs	r3, #255	; 0xff
 800d35a:	757b      	strb	r3, [r7, #21]
 800d35c:	e011      	b.n	800d382 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d35e:	7d7b      	ldrb	r3, [r7, #21]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d109      	bne.n	800d378 <dir_read+0x106>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6a1b      	ldr	r3, [r3, #32]
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff ff61 	bl	800d230 <sum_sfn>
 800d36e:	4603      	mov	r3, r0
 800d370:	461a      	mov	r2, r3
 800d372:	7d3b      	ldrb	r3, [r7, #20]
 800d374:	4293      	cmp	r3, r2
 800d376:	d015      	beq.n	800d3a4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d37e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d380:	e010      	b.n	800d3a4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d382:	2100      	movs	r1, #0
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7ff fc2a 	bl	800cbde <dir_next>
 800d38a:	4603      	mov	r3, r0
 800d38c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d38e:	7dfb      	ldrb	r3, [r7, #23]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d109      	bne.n	800d3a8 <dir_read+0x136>
	while (dp->sect) {
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	69db      	ldr	r3, [r3, #28]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f47f af79 	bne.w	800d290 <dir_read+0x1e>
 800d39e:	e004      	b.n	800d3aa <dir_read+0x138>
		if (res != FR_OK) break;
 800d3a0:	bf00      	nop
 800d3a2:	e002      	b.n	800d3aa <dir_read+0x138>
					break;
 800d3a4:	bf00      	nop
 800d3a6:	e000      	b.n	800d3aa <dir_read+0x138>
		if (res != FR_OK) break;
 800d3a8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <dir_read+0x144>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	61da      	str	r2, [r3, #28]
	return res;
 800d3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f7ff fb7b 	bl	800cacc <dir_sdi>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <dir_find+0x24>
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
 800d3e2:	e0a9      	b.n	800d538 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d3e4:	23ff      	movs	r3, #255	; 0xff
 800d3e6:	753b      	strb	r3, [r7, #20]
 800d3e8:	7d3b      	ldrb	r3, [r7, #20]
 800d3ea:	757b      	strb	r3, [r7, #21]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3f2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	69db      	ldr	r3, [r3, #28]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6938      	ldr	r0, [r7, #16]
 800d3fc:	f7fe ff84 	bl	800c308 <move_window>
 800d400:	4603      	mov	r3, r0
 800d402:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d404:	7dfb      	ldrb	r3, [r7, #23]
 800d406:	2b00      	cmp	r3, #0
 800d408:	f040 8090 	bne.w	800d52c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a1b      	ldr	r3, [r3, #32]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d414:	7dbb      	ldrb	r3, [r7, #22]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d102      	bne.n	800d420 <dir_find+0x60>
 800d41a:	2304      	movs	r3, #4
 800d41c:	75fb      	strb	r3, [r7, #23]
 800d41e:	e08a      	b.n	800d536 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a1b      	ldr	r3, [r3, #32]
 800d424:	330b      	adds	r3, #11
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d42c:	73fb      	strb	r3, [r7, #15]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	7bfa      	ldrb	r2, [r7, #15]
 800d432:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d434:	7dbb      	ldrb	r3, [r7, #22]
 800d436:	2be5      	cmp	r3, #229	; 0xe5
 800d438:	d007      	beq.n	800d44a <dir_find+0x8a>
 800d43a:	7bfb      	ldrb	r3, [r7, #15]
 800d43c:	f003 0308 	and.w	r3, r3, #8
 800d440:	2b00      	cmp	r3, #0
 800d442:	d009      	beq.n	800d458 <dir_find+0x98>
 800d444:	7bfb      	ldrb	r3, [r7, #15]
 800d446:	2b0f      	cmp	r3, #15
 800d448:	d006      	beq.n	800d458 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d44a:	23ff      	movs	r3, #255	; 0xff
 800d44c:	757b      	strb	r3, [r7, #21]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d454:	631a      	str	r2, [r3, #48]	; 0x30
 800d456:	e05e      	b.n	800d516 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d458:	7bfb      	ldrb	r3, [r7, #15]
 800d45a:	2b0f      	cmp	r3, #15
 800d45c:	d136      	bne.n	800d4cc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d154      	bne.n	800d516 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d46c:	7dbb      	ldrb	r3, [r7, #22]
 800d46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00d      	beq.n	800d492 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a1b      	ldr	r3, [r3, #32]
 800d47a:	7b5b      	ldrb	r3, [r3, #13]
 800d47c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d47e:	7dbb      	ldrb	r3, [r7, #22]
 800d480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d484:	75bb      	strb	r3, [r7, #22]
 800d486:	7dbb      	ldrb	r3, [r7, #22]
 800d488:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	695a      	ldr	r2, [r3, #20]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d492:	7dba      	ldrb	r2, [r7, #22]
 800d494:	7d7b      	ldrb	r3, [r7, #21]
 800d496:	429a      	cmp	r2, r3
 800d498:	d115      	bne.n	800d4c6 <dir_find+0x106>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	330d      	adds	r3, #13
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	7d3a      	ldrb	r2, [r7, #20]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d10e      	bne.n	800d4c6 <dir_find+0x106>
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	691a      	ldr	r2, [r3, #16]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6a1b      	ldr	r3, [r3, #32]
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	4610      	mov	r0, r2
 800d4b4:	f7ff fcf0 	bl	800ce98 <cmp_lfn>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <dir_find+0x106>
 800d4be:	7d7b      	ldrb	r3, [r7, #21]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	e000      	b.n	800d4c8 <dir_find+0x108>
 800d4c6:	23ff      	movs	r3, #255	; 0xff
 800d4c8:	757b      	strb	r3, [r7, #21]
 800d4ca:	e024      	b.n	800d516 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d4cc:	7d7b      	ldrb	r3, [r7, #21]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d109      	bne.n	800d4e6 <dir_find+0x126>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a1b      	ldr	r3, [r3, #32]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7ff feaa 	bl	800d230 <sum_sfn>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	461a      	mov	r2, r3
 800d4e0:	7d3b      	ldrb	r3, [r7, #20]
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d024      	beq.n	800d530 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4ec:	f003 0301 	and.w	r3, r3, #1
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10a      	bne.n	800d50a <dir_find+0x14a>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a18      	ldr	r0, [r3, #32]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3324      	adds	r3, #36	; 0x24
 800d4fc:	220b      	movs	r2, #11
 800d4fe:	4619      	mov	r1, r3
 800d500:	f7fe fd10 	bl	800bf24 <mem_cmp>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d014      	beq.n	800d534 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d50a:	23ff      	movs	r3, #255	; 0xff
 800d50c:	757b      	strb	r3, [r7, #21]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d514:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d516:	2100      	movs	r1, #0
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7ff fb60 	bl	800cbde <dir_next>
 800d51e:	4603      	mov	r3, r0
 800d520:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d522:	7dfb      	ldrb	r3, [r7, #23]
 800d524:	2b00      	cmp	r3, #0
 800d526:	f43f af65 	beq.w	800d3f4 <dir_find+0x34>
 800d52a:	e004      	b.n	800d536 <dir_find+0x176>
		if (res != FR_OK) break;
 800d52c:	bf00      	nop
 800d52e:	e002      	b.n	800d536 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d530:	bf00      	nop
 800d532:	e000      	b.n	800d536 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d534:	bf00      	nop

	return res;
 800d536:	7dfb      	ldrb	r3, [r7, #23]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3718      	adds	r7, #24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08c      	sub	sp, #48	; 0x30
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d554:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d001      	beq.n	800d560 <dir_register+0x20>
 800d55c:	2306      	movs	r3, #6
 800d55e:	e0e0      	b.n	800d722 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d560:	2300      	movs	r3, #0
 800d562:	627b      	str	r3, [r7, #36]	; 0x24
 800d564:	e002      	b.n	800d56c <dir_register+0x2c>
 800d566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d568:	3301      	adds	r3, #1
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	691a      	ldr	r2, [r3, #16]
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	4413      	add	r3, r2
 800d576:	881b      	ldrh	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1f4      	bne.n	800d566 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d582:	f107 030c 	add.w	r3, r7, #12
 800d586:	220c      	movs	r2, #12
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fe fc8f 	bl	800beac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	2b00      	cmp	r3, #0
 800d596:	d032      	beq.n	800d5fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2240      	movs	r2, #64	; 0x40
 800d59c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5a4:	e016      	b.n	800d5d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	691a      	ldr	r2, [r3, #16]
 800d5b0:	f107 010c 	add.w	r1, r7, #12
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	f7ff fdab 	bl	800d110 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff ff00 	bl	800d3c0 <dir_find>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d5c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d106      	bne.n	800d5dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	2b63      	cmp	r3, #99	; 0x63
 800d5d8:	d9e5      	bls.n	800d5a6 <dir_register+0x66>
 800d5da:	e000      	b.n	800d5de <dir_register+0x9e>
			if (res != FR_OK) break;
 800d5dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e0:	2b64      	cmp	r3, #100	; 0x64
 800d5e2:	d101      	bne.n	800d5e8 <dir_register+0xa8>
 800d5e4:	2307      	movs	r3, #7
 800d5e6:	e09c      	b.n	800d722 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d5e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5ec:	2b04      	cmp	r3, #4
 800d5ee:	d002      	beq.n	800d5f6 <dir_register+0xb6>
 800d5f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5f4:	e095      	b.n	800d722 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d5f6:	7dfa      	ldrb	r2, [r7, #23]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d5fe:	7dfb      	ldrb	r3, [r7, #23]
 800d600:	f003 0302 	and.w	r3, r3, #2
 800d604:	2b00      	cmp	r3, #0
 800d606:	d007      	beq.n	800d618 <dir_register+0xd8>
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	330c      	adds	r3, #12
 800d60c:	4a47      	ldr	r2, [pc, #284]	; (800d72c <dir_register+0x1ec>)
 800d60e:	fba2 2303 	umull	r2, r3, r2, r3
 800d612:	089b      	lsrs	r3, r3, #2
 800d614:	3301      	adds	r3, #1
 800d616:	e000      	b.n	800d61a <dir_register+0xda>
 800d618:	2301      	movs	r3, #1
 800d61a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d61c:	6a39      	ldr	r1, [r7, #32]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7ff fbb3 	bl	800cd8a <dir_alloc>
 800d624:	4603      	mov	r3, r0
 800d626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d62a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d148      	bne.n	800d6c4 <dir_register+0x184>
 800d632:	6a3b      	ldr	r3, [r7, #32]
 800d634:	3b01      	subs	r3, #1
 800d636:	623b      	str	r3, [r7, #32]
 800d638:	6a3b      	ldr	r3, [r7, #32]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d042      	beq.n	800d6c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	695a      	ldr	r2, [r3, #20]
 800d642:	6a3b      	ldr	r3, [r7, #32]
 800d644:	015b      	lsls	r3, r3, #5
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff fa3e 	bl	800cacc <dir_sdi>
 800d650:	4603      	mov	r3, r0
 800d652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d132      	bne.n	800d6c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	3324      	adds	r3, #36	; 0x24
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff fde4 	bl	800d230 <sum_sfn>
 800d668:	4603      	mov	r3, r0
 800d66a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	69db      	ldr	r3, [r3, #28]
 800d670:	4619      	mov	r1, r3
 800d672:	69f8      	ldr	r0, [r7, #28]
 800d674:	f7fe fe48 	bl	800c308 <move_window>
 800d678:	4603      	mov	r3, r0
 800d67a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d67e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d682:	2b00      	cmp	r3, #0
 800d684:	d11d      	bne.n	800d6c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	6918      	ldr	r0, [r3, #16]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6a19      	ldr	r1, [r3, #32]
 800d68e:	6a3b      	ldr	r3, [r7, #32]
 800d690:	b2da      	uxtb	r2, r3
 800d692:	7efb      	ldrb	r3, [r7, #27]
 800d694:	f7ff fcd4 	bl	800d040 <put_lfn>
				fs->wflag = 1;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	2201      	movs	r2, #1
 800d69c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d69e:	2100      	movs	r1, #0
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff fa9c 	bl	800cbde <dir_next>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d6ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d107      	bne.n	800d6c4 <dir_register+0x184>
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	623b      	str	r3, [r7, #32]
 800d6ba:	6a3b      	ldr	r3, [r7, #32]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1d5      	bne.n	800d66c <dir_register+0x12c>
 800d6c0:	e000      	b.n	800d6c4 <dir_register+0x184>
				if (res != FR_OK) break;
 800d6c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d6c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d128      	bne.n	800d71e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	69db      	ldr	r3, [r3, #28]
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	69f8      	ldr	r0, [r7, #28]
 800d6d4:	f7fe fe18 	bl	800c308 <move_window>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d6de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d11b      	bne.n	800d71e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a1b      	ldr	r3, [r3, #32]
 800d6ea:	2220      	movs	r2, #32
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fe fbfd 	bl	800beee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6a18      	ldr	r0, [r3, #32]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3324      	adds	r3, #36	; 0x24
 800d6fc:	220b      	movs	r2, #11
 800d6fe:	4619      	mov	r1, r3
 800d700:	f7fe fbd4 	bl	800beac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a1b      	ldr	r3, [r3, #32]
 800d70e:	330c      	adds	r3, #12
 800d710:	f002 0218 	and.w	r2, r2, #24
 800d714:	b2d2      	uxtb	r2, r2
 800d716:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	2201      	movs	r2, #1
 800d71c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d71e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d722:	4618      	mov	r0, r3
 800d724:	3730      	adds	r7, #48	; 0x30
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	4ec4ec4f 	.word	0x4ec4ec4f

0800d730 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b088      	sub	sp, #32
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2200      	movs	r2, #0
 800d744:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	69db      	ldr	r3, [r3, #28]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f000 80c9 	beq.w	800d8e2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d758:	d032      	beq.n	800d7c0 <get_fileinfo+0x90>
			i = j = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	61bb      	str	r3, [r7, #24]
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d762:	e01b      	b.n	800d79c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d764:	89fb      	ldrh	r3, [r7, #14]
 800d766:	2100      	movs	r1, #0
 800d768:	4618      	mov	r0, r3
 800d76a:	f001 fd19 	bl	800f1a0 <ff_convert>
 800d76e:	4603      	mov	r3, r0
 800d770:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d772:	89fb      	ldrh	r3, [r7, #14]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d102      	bne.n	800d77e <get_fileinfo+0x4e>
 800d778:	2300      	movs	r3, #0
 800d77a:	61fb      	str	r3, [r7, #28]
 800d77c:	e01a      	b.n	800d7b4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	2b31      	cmp	r3, #49	; 0x31
 800d782:	d902      	bls.n	800d78a <get_fileinfo+0x5a>
 800d784:	2300      	movs	r3, #0
 800d786:	61fb      	str	r3, [r7, #28]
 800d788:	e014      	b.n	800d7b4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	1c5a      	adds	r2, r3, #1
 800d78e:	61fa      	str	r2, [r7, #28]
 800d790:	89fa      	ldrh	r2, [r7, #14]
 800d792:	b2d1      	uxtb	r1, r2
 800d794:	683a      	ldr	r2, [r7, #0]
 800d796:	4413      	add	r3, r2
 800d798:	460a      	mov	r2, r1
 800d79a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	691a      	ldr	r2, [r3, #16]
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	1c59      	adds	r1, r3, #1
 800d7a4:	61b9      	str	r1, [r7, #24]
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	4413      	add	r3, r2
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	81fb      	strh	r3, [r7, #14]
 800d7ae:	89fb      	ldrh	r3, [r7, #14]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1d7      	bne.n	800d764 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	3316      	adds	r3, #22
 800d7bc:	2200      	movs	r2, #0
 800d7be:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	61bb      	str	r3, [r7, #24]
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d7c8:	683a      	ldr	r2, [r7, #0]
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	3316      	adds	r3, #22
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d7d4:	e04c      	b.n	800d870 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6a1a      	ldr	r2, [r3, #32]
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	1c59      	adds	r1, r3, #1
 800d7de:	61f9      	str	r1, [r7, #28]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	2b20      	cmp	r3, #32
 800d7ea:	d100      	bne.n	800d7ee <get_fileinfo+0xbe>
 800d7ec:	e040      	b.n	800d870 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
 800d7f0:	2b05      	cmp	r3, #5
 800d7f2:	d101      	bne.n	800d7f8 <get_fileinfo+0xc8>
 800d7f4:	23e5      	movs	r3, #229	; 0xe5
 800d7f6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	2b09      	cmp	r3, #9
 800d7fc:	d10f      	bne.n	800d81e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d7fe:	89bb      	ldrh	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d105      	bne.n	800d810 <get_fileinfo+0xe0>
 800d804:	683a      	ldr	r2, [r7, #0]
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	4413      	add	r3, r2
 800d80a:	3316      	adds	r3, #22
 800d80c:	222e      	movs	r2, #46	; 0x2e
 800d80e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	61ba      	str	r2, [r7, #24]
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	4413      	add	r3, r2
 800d81a:	222e      	movs	r2, #46	; 0x2e
 800d81c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	4413      	add	r3, r2
 800d824:	3309      	adds	r3, #9
 800d826:	7dfa      	ldrb	r2, [r7, #23]
 800d828:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d82a:	89bb      	ldrh	r3, [r7, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d11c      	bne.n	800d86a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d830:	7dfb      	ldrb	r3, [r7, #23]
 800d832:	2b40      	cmp	r3, #64	; 0x40
 800d834:	d913      	bls.n	800d85e <get_fileinfo+0x12e>
 800d836:	7dfb      	ldrb	r3, [r7, #23]
 800d838:	2b5a      	cmp	r3, #90	; 0x5a
 800d83a:	d810      	bhi.n	800d85e <get_fileinfo+0x12e>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6a1b      	ldr	r3, [r3, #32]
 800d840:	330c      	adds	r3, #12
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	461a      	mov	r2, r3
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	2b08      	cmp	r3, #8
 800d84a:	d901      	bls.n	800d850 <get_fileinfo+0x120>
 800d84c:	2310      	movs	r3, #16
 800d84e:	e000      	b.n	800d852 <get_fileinfo+0x122>
 800d850:	2308      	movs	r3, #8
 800d852:	4013      	ands	r3, r2
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d858:	7dfb      	ldrb	r3, [r7, #23]
 800d85a:	3320      	adds	r3, #32
 800d85c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	4413      	add	r3, r2
 800d864:	3316      	adds	r3, #22
 800d866:	7dfa      	ldrb	r2, [r7, #23]
 800d868:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	3301      	adds	r3, #1
 800d86e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	2b0a      	cmp	r3, #10
 800d874:	d9af      	bls.n	800d7d6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d876:	89bb      	ldrh	r3, [r7, #12]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10d      	bne.n	800d898 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	4413      	add	r3, r2
 800d882:	3316      	adds	r3, #22
 800d884:	2200      	movs	r2, #0
 800d886:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6a1b      	ldr	r3, [r3, #32]
 800d88c:	330c      	adds	r3, #12
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d101      	bne.n	800d898 <get_fileinfo+0x168>
 800d894:	2300      	movs	r3, #0
 800d896:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	4413      	add	r3, r2
 800d89e:	3309      	adds	r3, #9
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6a1b      	ldr	r3, [r3, #32]
 800d8a8:	7ada      	ldrb	r2, [r3, #11]
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	331c      	adds	r3, #28
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fe fa8f 	bl	800bdd8 <ld_dword>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6a1b      	ldr	r3, [r3, #32]
 800d8c4:	3316      	adds	r3, #22
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe fa86 	bl	800bdd8 <ld_dword>
 800d8cc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	80da      	strh	r2, [r3, #6]
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	0c1b      	lsrs	r3, r3, #16
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	809a      	strh	r2, [r3, #4]
 800d8e0:	e000      	b.n	800d8e4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d8e2:	bf00      	nop
}
 800d8e4:	3720      	adds	r7, #32
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
	...

0800d8ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08a      	sub	sp, #40	; 0x28
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	613b      	str	r3, [r7, #16]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	691b      	ldr	r3, [r3, #16]
 800d902:	60fb      	str	r3, [r7, #12]
 800d904:	2300      	movs	r3, #0
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	1c5a      	adds	r2, r3, #1
 800d910:	61ba      	str	r2, [r7, #24]
 800d912:	693a      	ldr	r2, [r7, #16]
 800d914:	4413      	add	r3, r2
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d91a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d91c:	2b1f      	cmp	r3, #31
 800d91e:	d940      	bls.n	800d9a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d922:	2b2f      	cmp	r3, #47	; 0x2f
 800d924:	d006      	beq.n	800d934 <create_name+0x48>
 800d926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d928:	2b5c      	cmp	r3, #92	; 0x5c
 800d92a:	d110      	bne.n	800d94e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d92c:	e002      	b.n	800d934 <create_name+0x48>
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	3301      	adds	r3, #1
 800d932:	61bb      	str	r3, [r7, #24]
 800d934:	693a      	ldr	r2, [r7, #16]
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	4413      	add	r3, r2
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	2b2f      	cmp	r3, #47	; 0x2f
 800d93e:	d0f6      	beq.n	800d92e <create_name+0x42>
 800d940:	693a      	ldr	r2, [r7, #16]
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	4413      	add	r3, r2
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	2b5c      	cmp	r3, #92	; 0x5c
 800d94a:	d0f0      	beq.n	800d92e <create_name+0x42>
			break;
 800d94c:	e02a      	b.n	800d9a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	2b31      	cmp	r3, #49	; 0x31
 800d952:	d901      	bls.n	800d958 <create_name+0x6c>
 800d954:	2306      	movs	r3, #6
 800d956:	e177      	b.n	800dc48 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d95e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d960:	2101      	movs	r1, #1
 800d962:	4618      	mov	r0, r3
 800d964:	f001 fc1c 	bl	800f1a0 <ff_convert>
 800d968:	4603      	mov	r3, r0
 800d96a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d96c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d101      	bne.n	800d976 <create_name+0x8a>
 800d972:	2306      	movs	r3, #6
 800d974:	e168      	b.n	800dc48 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d978:	2b7f      	cmp	r3, #127	; 0x7f
 800d97a:	d809      	bhi.n	800d990 <create_name+0xa4>
 800d97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d97e:	4619      	mov	r1, r3
 800d980:	48b3      	ldr	r0, [pc, #716]	; (800dc50 <create_name+0x364>)
 800d982:	f7fe faf6 	bl	800bf72 <chk_chr>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <create_name+0xa4>
 800d98c:	2306      	movs	r3, #6
 800d98e:	e15b      	b.n	800dc48 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	617a      	str	r2, [r7, #20]
 800d996:	005b      	lsls	r3, r3, #1
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	4413      	add	r3, r2
 800d99c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d99e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d9a0:	e7b4      	b.n	800d90c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d9a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d9a4:	693a      	ldr	r2, [r7, #16]
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	441a      	add	r2, r3
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d9ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9b0:	2b1f      	cmp	r3, #31
 800d9b2:	d801      	bhi.n	800d9b8 <create_name+0xcc>
 800d9b4:	2304      	movs	r3, #4
 800d9b6:	e000      	b.n	800d9ba <create_name+0xce>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d9be:	e011      	b.n	800d9e4 <create_name+0xf8>
		w = lfn[di - 1];
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	005b      	lsls	r3, r3, #1
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	881b      	ldrh	r3, [r3, #0]
 800d9d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d4:	2b20      	cmp	r3, #32
 800d9d6:	d002      	beq.n	800d9de <create_name+0xf2>
 800d9d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9da:	2b2e      	cmp	r3, #46	; 0x2e
 800d9dc:	d106      	bne.n	800d9ec <create_name+0x100>
		di--;
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1ea      	bne.n	800d9c0 <create_name+0xd4>
 800d9ea:	e000      	b.n	800d9ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d9ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	005b      	lsls	r3, r3, #1
 800d9f2:	68fa      	ldr	r2, [r7, #12]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <create_name+0x118>
 800da00:	2306      	movs	r3, #6
 800da02:	e121      	b.n	800dc48 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	3324      	adds	r3, #36	; 0x24
 800da08:	220b      	movs	r2, #11
 800da0a:	2120      	movs	r1, #32
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fe fa6e 	bl	800beee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800da12:	2300      	movs	r3, #0
 800da14:	61bb      	str	r3, [r7, #24]
 800da16:	e002      	b.n	800da1e <create_name+0x132>
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	3301      	adds	r3, #1
 800da1c:	61bb      	str	r3, [r7, #24]
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	68fa      	ldr	r2, [r7, #12]
 800da24:	4413      	add	r3, r2
 800da26:	881b      	ldrh	r3, [r3, #0]
 800da28:	2b20      	cmp	r3, #32
 800da2a:	d0f5      	beq.n	800da18 <create_name+0x12c>
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	005b      	lsls	r3, r3, #1
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	4413      	add	r3, r2
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	2b2e      	cmp	r3, #46	; 0x2e
 800da38:	d0ee      	beq.n	800da18 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d009      	beq.n	800da54 <create_name+0x168>
 800da40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da44:	f043 0303 	orr.w	r3, r3, #3
 800da48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800da4c:	e002      	b.n	800da54 <create_name+0x168>
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	3b01      	subs	r3, #1
 800da52:	617b      	str	r3, [r7, #20]
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d009      	beq.n	800da6e <create_name+0x182>
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da60:	3b01      	subs	r3, #1
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	4413      	add	r3, r2
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	2b2e      	cmp	r3, #46	; 0x2e
 800da6c:	d1ef      	bne.n	800da4e <create_name+0x162>

	i = b = 0; ni = 8;
 800da6e:	2300      	movs	r3, #0
 800da70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da74:	2300      	movs	r3, #0
 800da76:	623b      	str	r3, [r7, #32]
 800da78:	2308      	movs	r3, #8
 800da7a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	61ba      	str	r2, [r7, #24]
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	4413      	add	r3, r2
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800da8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f000 8090 	beq.w	800dbb4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800da94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da96:	2b20      	cmp	r3, #32
 800da98:	d006      	beq.n	800daa8 <create_name+0x1bc>
 800da9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da9c:	2b2e      	cmp	r3, #46	; 0x2e
 800da9e:	d10a      	bne.n	800dab6 <create_name+0x1ca>
 800daa0:	69ba      	ldr	r2, [r7, #24]
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d006      	beq.n	800dab6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800daa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daac:	f043 0303 	orr.w	r3, r3, #3
 800dab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dab4:	e07d      	b.n	800dbb2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dab6:	6a3a      	ldr	r2, [r7, #32]
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d203      	bcs.n	800dac6 <create_name+0x1da>
 800dabe:	69ba      	ldr	r2, [r7, #24]
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d123      	bne.n	800db0e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	2b0b      	cmp	r3, #11
 800daca:	d106      	bne.n	800dada <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dad0:	f043 0303 	orr.w	r3, r3, #3
 800dad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dad8:	e06f      	b.n	800dbba <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dada:	69ba      	ldr	r2, [r7, #24]
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d005      	beq.n	800daee <create_name+0x202>
 800dae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dae6:	f043 0303 	orr.w	r3, r3, #3
 800daea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800daee:	69ba      	ldr	r2, [r7, #24]
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d860      	bhi.n	800dbb8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	61bb      	str	r3, [r7, #24]
 800dafa:	2308      	movs	r3, #8
 800dafc:	623b      	str	r3, [r7, #32]
 800dafe:	230b      	movs	r3, #11
 800db00:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800db02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db0c:	e051      	b.n	800dbb2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800db0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db10:	2b7f      	cmp	r3, #127	; 0x7f
 800db12:	d914      	bls.n	800db3e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800db14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db16:	2100      	movs	r1, #0
 800db18:	4618      	mov	r0, r3
 800db1a:	f001 fb41 	bl	800f1a0 <ff_convert>
 800db1e:	4603      	mov	r3, r0
 800db20:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800db22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db24:	2b00      	cmp	r3, #0
 800db26:	d004      	beq.n	800db32 <create_name+0x246>
 800db28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db2a:	3b80      	subs	r3, #128	; 0x80
 800db2c:	4a49      	ldr	r2, [pc, #292]	; (800dc54 <create_name+0x368>)
 800db2e:	5cd3      	ldrb	r3, [r2, r3]
 800db30:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800db32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db36:	f043 0302 	orr.w	r3, r3, #2
 800db3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800db3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db40:	2b00      	cmp	r3, #0
 800db42:	d007      	beq.n	800db54 <create_name+0x268>
 800db44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db46:	4619      	mov	r1, r3
 800db48:	4843      	ldr	r0, [pc, #268]	; (800dc58 <create_name+0x36c>)
 800db4a:	f7fe fa12 	bl	800bf72 <chk_chr>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d008      	beq.n	800db66 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800db54:	235f      	movs	r3, #95	; 0x5f
 800db56:	84bb      	strh	r3, [r7, #36]	; 0x24
 800db58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db5c:	f043 0303 	orr.w	r3, r3, #3
 800db60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db64:	e01b      	b.n	800db9e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800db66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db68:	2b40      	cmp	r3, #64	; 0x40
 800db6a:	d909      	bls.n	800db80 <create_name+0x294>
 800db6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db6e:	2b5a      	cmp	r3, #90	; 0x5a
 800db70:	d806      	bhi.n	800db80 <create_name+0x294>
					b |= 2;
 800db72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db76:	f043 0302 	orr.w	r3, r3, #2
 800db7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db7e:	e00e      	b.n	800db9e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800db80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db82:	2b60      	cmp	r3, #96	; 0x60
 800db84:	d90b      	bls.n	800db9e <create_name+0x2b2>
 800db86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db88:	2b7a      	cmp	r3, #122	; 0x7a
 800db8a:	d808      	bhi.n	800db9e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800db8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db90:	f043 0301 	orr.w	r3, r3, #1
 800db94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db9a:	3b20      	subs	r3, #32
 800db9c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800db9e:	6a3b      	ldr	r3, [r7, #32]
 800dba0:	1c5a      	adds	r2, r3, #1
 800dba2:	623a      	str	r2, [r7, #32]
 800dba4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dba6:	b2d1      	uxtb	r1, r2
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	4413      	add	r3, r2
 800dbac:	460a      	mov	r2, r1
 800dbae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dbb2:	e763      	b.n	800da7c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dbb4:	bf00      	nop
 800dbb6:	e000      	b.n	800dbba <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800dbb8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbc0:	2be5      	cmp	r3, #229	; 0xe5
 800dbc2:	d103      	bne.n	800dbcc <create_name+0x2e0>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2205      	movs	r2, #5
 800dbc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	2b08      	cmp	r3, #8
 800dbd0:	d104      	bne.n	800dbdc <create_name+0x2f0>
 800dbd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dbdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbe0:	f003 030c 	and.w	r3, r3, #12
 800dbe4:	2b0c      	cmp	r3, #12
 800dbe6:	d005      	beq.n	800dbf4 <create_name+0x308>
 800dbe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbec:	f003 0303 	and.w	r3, r3, #3
 800dbf0:	2b03      	cmp	r3, #3
 800dbf2:	d105      	bne.n	800dc00 <create_name+0x314>
 800dbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbf8:	f043 0302 	orr.w	r3, r3, #2
 800dbfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dc00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc04:	f003 0302 	and.w	r3, r3, #2
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d117      	bne.n	800dc3c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dc0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc10:	f003 0303 	and.w	r3, r3, #3
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d105      	bne.n	800dc24 <create_name+0x338>
 800dc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc1c:	f043 0310 	orr.w	r3, r3, #16
 800dc20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dc24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc28:	f003 030c 	and.w	r3, r3, #12
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	d105      	bne.n	800dc3c <create_name+0x350>
 800dc30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc34:	f043 0308 	orr.w	r3, r3, #8
 800dc38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dc46:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3728      	adds	r7, #40	; 0x28
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	08014a48 	.word	0x08014a48
 800dc54:	08014b34 	.word	0x08014b34
 800dc58:	08014a54 	.word	0x08014a54

0800dc5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dc70:	e002      	b.n	800dc78 <follow_path+0x1c>
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	3301      	adds	r3, #1
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	2b2f      	cmp	r3, #47	; 0x2f
 800dc7e:	d0f8      	beq.n	800dc72 <follow_path+0x16>
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	2b5c      	cmp	r3, #92	; 0x5c
 800dc86:	d0f4      	beq.n	800dc72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2b1f      	cmp	r3, #31
 800dc94:	d80a      	bhi.n	800dcac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2280      	movs	r2, #128	; 0x80
 800dc9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dc9e:	2100      	movs	r1, #0
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f7fe ff13 	bl	800cacc <dir_sdi>
 800dca6:	4603      	mov	r3, r0
 800dca8:	75fb      	strb	r3, [r7, #23]
 800dcaa:	e048      	b.n	800dd3e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dcac:	463b      	mov	r3, r7
 800dcae:	4619      	mov	r1, r3
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7ff fe1b 	bl	800d8ec <create_name>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dcba:	7dfb      	ldrb	r3, [r7, #23]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d139      	bne.n	800dd34 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff fb7d 	bl	800d3c0 <dir_find>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dcd0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d00a      	beq.n	800dcee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
 800dcda:	2b04      	cmp	r3, #4
 800dcdc:	d12c      	bne.n	800dd38 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dcde:	7afb      	ldrb	r3, [r7, #11]
 800dce0:	f003 0304 	and.w	r3, r3, #4
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d127      	bne.n	800dd38 <follow_path+0xdc>
 800dce8:	2305      	movs	r3, #5
 800dcea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dcec:	e024      	b.n	800dd38 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dcee:	7afb      	ldrb	r3, [r7, #11]
 800dcf0:	f003 0304 	and.w	r3, r3, #4
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d121      	bne.n	800dd3c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	799b      	ldrb	r3, [r3, #6]
 800dcfc:	f003 0310 	and.w	r3, r3, #16
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d102      	bne.n	800dd0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dd04:	2305      	movs	r3, #5
 800dd06:	75fb      	strb	r3, [r7, #23]
 800dd08:	e019      	b.n	800dd3e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	695b      	ldr	r3, [r3, #20]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	8992      	ldrh	r2, [r2, #12]
 800dd18:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd1c:	fb02 f200 	mul.w	r2, r2, r0
 800dd20:	1a9b      	subs	r3, r3, r2
 800dd22:	440b      	add	r3, r1
 800dd24:	4619      	mov	r1, r3
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f7ff f876 	bl	800ce18 <ld_clust>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd32:	e7bb      	b.n	800dcac <follow_path+0x50>
			if (res != FR_OK) break;
 800dd34:	bf00      	nop
 800dd36:	e002      	b.n	800dd3e <follow_path+0xe2>
				break;
 800dd38:	bf00      	nop
 800dd3a:	e000      	b.n	800dd3e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd3c:	bf00      	nop
			}
		}
	}

	return res;
 800dd3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3718      	adds	r7, #24
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b087      	sub	sp, #28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dd50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd54:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d031      	beq.n	800ddc2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	617b      	str	r3, [r7, #20]
 800dd64:	e002      	b.n	800dd6c <get_ldnumber+0x24>
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	617b      	str	r3, [r7, #20]
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b1f      	cmp	r3, #31
 800dd72:	d903      	bls.n	800dd7c <get_ldnumber+0x34>
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b3a      	cmp	r3, #58	; 0x3a
 800dd7a:	d1f4      	bne.n	800dd66 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b3a      	cmp	r3, #58	; 0x3a
 800dd82:	d11c      	bne.n	800ddbe <get_ldnumber+0x76>
			tp = *path;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	1c5a      	adds	r2, r3, #1
 800dd8e:	60fa      	str	r2, [r7, #12]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	3b30      	subs	r3, #48	; 0x30
 800dd94:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	2b09      	cmp	r3, #9
 800dd9a:	d80e      	bhi.n	800ddba <get_ldnumber+0x72>
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d10a      	bne.n	800ddba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d107      	bne.n	800ddba <get_ldnumber+0x72>
					vol = (int)i;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	617b      	str	r3, [r7, #20]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	e002      	b.n	800ddc4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ddc2:	693b      	ldr	r3, [r7, #16]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	371c      	adds	r7, #28
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	70da      	strb	r2, [r3, #3]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dde6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dde8:	6839      	ldr	r1, [r7, #0]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7fe fa8c 	bl	800c308 <move_window>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d001      	beq.n	800ddfa <check_fs+0x2a>
 800ddf6:	2304      	movs	r3, #4
 800ddf8:	e038      	b.n	800de6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	3338      	adds	r3, #56	; 0x38
 800ddfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de02:	4618      	mov	r0, r3
 800de04:	f7fd ffd0 	bl	800bda8 <ld_word>
 800de08:	4603      	mov	r3, r0
 800de0a:	461a      	mov	r2, r3
 800de0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de10:	429a      	cmp	r2, r3
 800de12:	d001      	beq.n	800de18 <check_fs+0x48>
 800de14:	2303      	movs	r3, #3
 800de16:	e029      	b.n	800de6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de1e:	2be9      	cmp	r3, #233	; 0xe9
 800de20:	d009      	beq.n	800de36 <check_fs+0x66>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de28:	2beb      	cmp	r3, #235	; 0xeb
 800de2a:	d11e      	bne.n	800de6a <check_fs+0x9a>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800de32:	2b90      	cmp	r3, #144	; 0x90
 800de34:	d119      	bne.n	800de6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	3338      	adds	r3, #56	; 0x38
 800de3a:	3336      	adds	r3, #54	; 0x36
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fd ffcb 	bl	800bdd8 <ld_dword>
 800de42:	4603      	mov	r3, r0
 800de44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800de48:	4a0a      	ldr	r2, [pc, #40]	; (800de74 <check_fs+0xa4>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d101      	bne.n	800de52 <check_fs+0x82>
 800de4e:	2300      	movs	r3, #0
 800de50:	e00c      	b.n	800de6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	3338      	adds	r3, #56	; 0x38
 800de56:	3352      	adds	r3, #82	; 0x52
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fd ffbd 	bl	800bdd8 <ld_dword>
 800de5e:	4603      	mov	r3, r0
 800de60:	4a05      	ldr	r2, [pc, #20]	; (800de78 <check_fs+0xa8>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d101      	bne.n	800de6a <check_fs+0x9a>
 800de66:	2300      	movs	r3, #0
 800de68:	e000      	b.n	800de6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800de6a:	2302      	movs	r3, #2
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	00544146 	.word	0x00544146
 800de78:	33544146 	.word	0x33544146

0800de7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b096      	sub	sp, #88	; 0x58
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	4613      	mov	r3, r2
 800de88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2200      	movs	r2, #0
 800de8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f7ff ff59 	bl	800dd48 <get_ldnumber>
 800de96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800de98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	da01      	bge.n	800dea2 <find_volume+0x26>
 800de9e:	230b      	movs	r3, #11
 800dea0:	e268      	b.n	800e374 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dea2:	4ab0      	ldr	r2, [pc, #704]	; (800e164 <find_volume+0x2e8>)
 800dea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deaa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800deac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <find_volume+0x3a>
 800deb2:	230c      	movs	r3, #12
 800deb4:	e25e      	b.n	800e374 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800deba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800debc:	79fb      	ldrb	r3, [r7, #7]
 800debe:	f023 0301 	bic.w	r3, r3, #1
 800dec2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d01a      	beq.n	800df02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800decc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dece:	785b      	ldrb	r3, [r3, #1]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fd fecb 	bl	800bc6c <disk_status>
 800ded6:	4603      	mov	r3, r0
 800ded8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dedc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10c      	bne.n	800df02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dee8:	79fb      	ldrb	r3, [r7, #7]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d007      	beq.n	800defe <find_volume+0x82>
 800deee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800def2:	f003 0304 	and.w	r3, r3, #4
 800def6:	2b00      	cmp	r3, #0
 800def8:	d001      	beq.n	800defe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800defa:	230a      	movs	r3, #10
 800defc:	e23a      	b.n	800e374 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800defe:	2300      	movs	r3, #0
 800df00:	e238      	b.n	800e374 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800df02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df04:	2200      	movs	r2, #0
 800df06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800df08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800df10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df12:	785b      	ldrb	r3, [r3, #1]
 800df14:	4618      	mov	r0, r3
 800df16:	f7fd fec3 	bl	800bca0 <disk_initialize>
 800df1a:	4603      	mov	r3, r0
 800df1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800df20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df24:	f003 0301 	and.w	r3, r3, #1
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d001      	beq.n	800df30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800df2c:	2303      	movs	r3, #3
 800df2e:	e221      	b.n	800e374 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800df30:	79fb      	ldrb	r3, [r7, #7]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d007      	beq.n	800df46 <find_volume+0xca>
 800df36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df3a:	f003 0304 	and.w	r3, r3, #4
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d001      	beq.n	800df46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800df42:	230a      	movs	r3, #10
 800df44:	e216      	b.n	800e374 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800df46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df48:	7858      	ldrb	r0, [r3, #1]
 800df4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4c:	330c      	adds	r3, #12
 800df4e:	461a      	mov	r2, r3
 800df50:	2102      	movs	r1, #2
 800df52:	f7fd ff0b 	bl	800bd6c <disk_ioctl>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <find_volume+0xe4>
 800df5c:	2301      	movs	r3, #1
 800df5e:	e209      	b.n	800e374 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800df60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df62:	899b      	ldrh	r3, [r3, #12]
 800df64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df68:	d80d      	bhi.n	800df86 <find_volume+0x10a>
 800df6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6c:	899b      	ldrh	r3, [r3, #12]
 800df6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df72:	d308      	bcc.n	800df86 <find_volume+0x10a>
 800df74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df76:	899b      	ldrh	r3, [r3, #12]
 800df78:	461a      	mov	r2, r3
 800df7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7c:	899b      	ldrh	r3, [r3, #12]
 800df7e:	3b01      	subs	r3, #1
 800df80:	4013      	ands	r3, r2
 800df82:	2b00      	cmp	r3, #0
 800df84:	d001      	beq.n	800df8a <find_volume+0x10e>
 800df86:	2301      	movs	r3, #1
 800df88:	e1f4      	b.n	800e374 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800df8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df92:	f7ff ff1d 	bl	800ddd0 <check_fs>
 800df96:	4603      	mov	r3, r0
 800df98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800df9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	d14b      	bne.n	800e03c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	643b      	str	r3, [r7, #64]	; 0x40
 800dfa8:	e01f      	b.n	800dfea <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfac:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dfb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfb2:	011b      	lsls	r3, r3, #4
 800dfb4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dfb8:	4413      	add	r3, r2
 800dfba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d006      	beq.n	800dfd4 <find_volume+0x158>
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	3308      	adds	r3, #8
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fd ff04 	bl	800bdd8 <ld_dword>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	e000      	b.n	800dfd6 <find_volume+0x15a>
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800dfde:	440b      	add	r3, r1
 800dfe0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dfe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	643b      	str	r3, [r7, #64]	; 0x40
 800dfea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfec:	2b03      	cmp	r3, #3
 800dfee:	d9dc      	bls.n	800dfaa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dff0:	2300      	movs	r3, #0
 800dff2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d002      	beq.n	800e000 <find_volume+0x184>
 800dffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dffc:	3b01      	subs	r3, #1
 800dffe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e008:	4413      	add	r3, r2
 800e00a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e00e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e012:	2b00      	cmp	r3, #0
 800e014:	d005      	beq.n	800e022 <find_volume+0x1a6>
 800e016:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e018:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e01a:	f7ff fed9 	bl	800ddd0 <check_fs>
 800e01e:	4603      	mov	r3, r0
 800e020:	e000      	b.n	800e024 <find_volume+0x1a8>
 800e022:	2303      	movs	r3, #3
 800e024:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d905      	bls.n	800e03c <find_volume+0x1c0>
 800e030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e032:	3301      	adds	r3, #1
 800e034:	643b      	str	r3, [r7, #64]	; 0x40
 800e036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e038:	2b03      	cmp	r3, #3
 800e03a:	d9e1      	bls.n	800e000 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e03c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e040:	2b04      	cmp	r3, #4
 800e042:	d101      	bne.n	800e048 <find_volume+0x1cc>
 800e044:	2301      	movs	r3, #1
 800e046:	e195      	b.n	800e374 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d901      	bls.n	800e054 <find_volume+0x1d8>
 800e050:	230d      	movs	r3, #13
 800e052:	e18f      	b.n	800e374 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e056:	3338      	adds	r3, #56	; 0x38
 800e058:	330b      	adds	r3, #11
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fd fea4 	bl	800bda8 <ld_word>
 800e060:	4603      	mov	r3, r0
 800e062:	461a      	mov	r2, r3
 800e064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e066:	899b      	ldrh	r3, [r3, #12]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d001      	beq.n	800e070 <find_volume+0x1f4>
 800e06c:	230d      	movs	r3, #13
 800e06e:	e181      	b.n	800e374 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e072:	3338      	adds	r3, #56	; 0x38
 800e074:	3316      	adds	r3, #22
 800e076:	4618      	mov	r0, r3
 800e078:	f7fd fe96 	bl	800bda8 <ld_word>
 800e07c:	4603      	mov	r3, r0
 800e07e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e082:	2b00      	cmp	r3, #0
 800e084:	d106      	bne.n	800e094 <find_volume+0x218>
 800e086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e088:	3338      	adds	r3, #56	; 0x38
 800e08a:	3324      	adds	r3, #36	; 0x24
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fd fea3 	bl	800bdd8 <ld_dword>
 800e092:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e098:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a6:	789b      	ldrb	r3, [r3, #2]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d005      	beq.n	800e0b8 <find_volume+0x23c>
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ae:	789b      	ldrb	r3, [r3, #2]
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	d001      	beq.n	800e0b8 <find_volume+0x23c>
 800e0b4:	230d      	movs	r3, #13
 800e0b6:	e15d      	b.n	800e374 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ba:	789b      	ldrb	r3, [r3, #2]
 800e0bc:	461a      	mov	r2, r3
 800e0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0c0:	fb02 f303 	mul.w	r3, r2, r3
 800e0c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d4:	895b      	ldrh	r3, [r3, #10]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d008      	beq.n	800e0ec <find_volume+0x270>
 800e0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0dc:	895b      	ldrh	r3, [r3, #10]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e2:	895b      	ldrh	r3, [r3, #10]
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	4013      	ands	r3, r2
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d001      	beq.n	800e0f0 <find_volume+0x274>
 800e0ec:	230d      	movs	r3, #13
 800e0ee:	e141      	b.n	800e374 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f2:	3338      	adds	r3, #56	; 0x38
 800e0f4:	3311      	adds	r3, #17
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fd fe56 	bl	800bda8 <ld_word>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	461a      	mov	r2, r3
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	891b      	ldrh	r3, [r3, #8]
 800e108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e10a:	8992      	ldrh	r2, [r2, #12]
 800e10c:	0952      	lsrs	r2, r2, #5
 800e10e:	b292      	uxth	r2, r2
 800e110:	fbb3 f1f2 	udiv	r1, r3, r2
 800e114:	fb02 f201 	mul.w	r2, r2, r1
 800e118:	1a9b      	subs	r3, r3, r2
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <find_volume+0x2a8>
 800e120:	230d      	movs	r3, #13
 800e122:	e127      	b.n	800e374 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e126:	3338      	adds	r3, #56	; 0x38
 800e128:	3313      	adds	r3, #19
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fd fe3c 	bl	800bda8 <ld_word>
 800e130:	4603      	mov	r3, r0
 800e132:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e136:	2b00      	cmp	r3, #0
 800e138:	d106      	bne.n	800e148 <find_volume+0x2cc>
 800e13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13c:	3338      	adds	r3, #56	; 0x38
 800e13e:	3320      	adds	r3, #32
 800e140:	4618      	mov	r0, r3
 800e142:	f7fd fe49 	bl	800bdd8 <ld_dword>
 800e146:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14a:	3338      	adds	r3, #56	; 0x38
 800e14c:	330e      	adds	r3, #14
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fd fe2a 	bl	800bda8 <ld_word>
 800e154:	4603      	mov	r3, r0
 800e156:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e158:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d104      	bne.n	800e168 <find_volume+0x2ec>
 800e15e:	230d      	movs	r3, #13
 800e160:	e108      	b.n	800e374 <find_volume+0x4f8>
 800e162:	bf00      	nop
 800e164:	20002530 	.word	0x20002530

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e168:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e16c:	4413      	add	r3, r2
 800e16e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e170:	8911      	ldrh	r1, [r2, #8]
 800e172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e174:	8992      	ldrh	r2, [r2, #12]
 800e176:	0952      	lsrs	r2, r2, #5
 800e178:	b292      	uxth	r2, r2
 800e17a:	fbb1 f2f2 	udiv	r2, r1, r2
 800e17e:	b292      	uxth	r2, r2
 800e180:	4413      	add	r3, r2
 800e182:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e188:	429a      	cmp	r2, r3
 800e18a:	d201      	bcs.n	800e190 <find_volume+0x314>
 800e18c:	230d      	movs	r3, #13
 800e18e:	e0f1      	b.n	800e374 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e194:	1ad3      	subs	r3, r2, r3
 800e196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e198:	8952      	ldrh	r2, [r2, #10]
 800e19a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e19e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <find_volume+0x32e>
 800e1a6:	230d      	movs	r3, #13
 800e1a8:	e0e4      	b.n	800e374 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d802      	bhi.n	800e1c0 <find_volume+0x344>
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d802      	bhi.n	800e1d0 <find_volume+0x354>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d2:	1c9a      	adds	r2, r3, #2
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1dc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e1de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e1e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1e2:	441a      	add	r2, r3
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e1e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	441a      	add	r2, r3
 800e1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e1f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1f6:	2b03      	cmp	r3, #3
 800e1f8:	d11e      	bne.n	800e238 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fc:	3338      	adds	r3, #56	; 0x38
 800e1fe:	332a      	adds	r3, #42	; 0x2a
 800e200:	4618      	mov	r0, r3
 800e202:	f7fd fdd1 	bl	800bda8 <ld_word>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <find_volume+0x394>
 800e20c:	230d      	movs	r3, #13
 800e20e:	e0b1      	b.n	800e374 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e212:	891b      	ldrh	r3, [r3, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <find_volume+0x3a0>
 800e218:	230d      	movs	r3, #13
 800e21a:	e0ab      	b.n	800e374 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21e:	3338      	adds	r3, #56	; 0x38
 800e220:	332c      	adds	r3, #44	; 0x2c
 800e222:	4618      	mov	r0, r3
 800e224:	f7fd fdd8 	bl	800bdd8 <ld_dword>
 800e228:	4602      	mov	r2, r0
 800e22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e230:	69db      	ldr	r3, [r3, #28]
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	647b      	str	r3, [r7, #68]	; 0x44
 800e236:	e01f      	b.n	800e278 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23a:	891b      	ldrh	r3, [r3, #8]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d101      	bne.n	800e244 <find_volume+0x3c8>
 800e240:	230d      	movs	r3, #13
 800e242:	e097      	b.n	800e374 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e24a:	441a      	add	r2, r3
 800e24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e254:	2b02      	cmp	r3, #2
 800e256:	d103      	bne.n	800e260 <find_volume+0x3e4>
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	69db      	ldr	r3, [r3, #28]
 800e25c:	005b      	lsls	r3, r3, #1
 800e25e:	e00a      	b.n	800e276 <find_volume+0x3fa>
 800e260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e262:	69da      	ldr	r2, [r3, #28]
 800e264:	4613      	mov	r3, r2
 800e266:	005b      	lsls	r3, r3, #1
 800e268:	4413      	add	r3, r2
 800e26a:	085a      	lsrs	r2, r3, #1
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	69db      	ldr	r3, [r3, #28]
 800e270:	f003 0301 	and.w	r3, r3, #1
 800e274:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e276:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	6a1a      	ldr	r2, [r3, #32]
 800e27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27e:	899b      	ldrh	r3, [r3, #12]
 800e280:	4619      	mov	r1, r3
 800e282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e284:	440b      	add	r3, r1
 800e286:	3b01      	subs	r3, #1
 800e288:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e28a:	8989      	ldrh	r1, [r1, #12]
 800e28c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e290:	429a      	cmp	r2, r3
 800e292:	d201      	bcs.n	800e298 <find_volume+0x41c>
 800e294:	230d      	movs	r3, #13
 800e296:	e06d      	b.n	800e374 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e29e:	619a      	str	r2, [r3, #24]
 800e2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a2:	699a      	ldr	r2, [r3, #24]
 800e2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2aa:	2280      	movs	r2, #128	; 0x80
 800e2ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e2ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d149      	bne.n	800e34a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b8:	3338      	adds	r3, #56	; 0x38
 800e2ba:	3330      	adds	r3, #48	; 0x30
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fd fd73 	bl	800bda8 <ld_word>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d140      	bne.n	800e34a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e2c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2d0:	f7fe f81a 	bl	800c308 <move_window>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d137      	bne.n	800e34a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800e2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2dc:	2200      	movs	r2, #0
 800e2de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	3338      	adds	r3, #56	; 0x38
 800e2e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fd fd5d 	bl	800bda8 <ld_word>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d127      	bne.n	800e34a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	3338      	adds	r3, #56	; 0x38
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fd fd6a 	bl	800bdd8 <ld_dword>
 800e304:	4603      	mov	r3, r0
 800e306:	4a1d      	ldr	r2, [pc, #116]	; (800e37c <find_volume+0x500>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d11e      	bne.n	800e34a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	3338      	adds	r3, #56	; 0x38
 800e310:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e314:	4618      	mov	r0, r3
 800e316:	f7fd fd5f 	bl	800bdd8 <ld_dword>
 800e31a:	4603      	mov	r3, r0
 800e31c:	4a18      	ldr	r2, [pc, #96]	; (800e380 <find_volume+0x504>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d113      	bne.n	800e34a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e324:	3338      	adds	r3, #56	; 0x38
 800e326:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fd fd54 	bl	800bdd8 <ld_dword>
 800e330:	4602      	mov	r2, r0
 800e332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e334:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e338:	3338      	adds	r3, #56	; 0x38
 800e33a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fd fd4a 	bl	800bdd8 <ld_dword>
 800e344:	4602      	mov	r2, r0
 800e346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e348:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e350:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e352:	4b0c      	ldr	r3, [pc, #48]	; (800e384 <find_volume+0x508>)
 800e354:	881b      	ldrh	r3, [r3, #0]
 800e356:	3301      	adds	r3, #1
 800e358:	b29a      	uxth	r2, r3
 800e35a:	4b0a      	ldr	r3, [pc, #40]	; (800e384 <find_volume+0x508>)
 800e35c:	801a      	strh	r2, [r3, #0]
 800e35e:	4b09      	ldr	r3, [pc, #36]	; (800e384 <find_volume+0x508>)
 800e360:	881a      	ldrh	r2, [r3, #0]
 800e362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e364:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e368:	4a07      	ldr	r2, [pc, #28]	; (800e388 <find_volume+0x50c>)
 800e36a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e36c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e36e:	f7fd ff63 	bl	800c238 <clear_lock>
#endif
	return FR_OK;
 800e372:	2300      	movs	r3, #0
}
 800e374:	4618      	mov	r0, r3
 800e376:	3758      	adds	r7, #88	; 0x58
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	41615252 	.word	0x41615252
 800e380:	61417272 	.word	0x61417272
 800e384:	20002534 	.word	0x20002534
 800e388:	20002558 	.word	0x20002558

0800e38c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e396:	2309      	movs	r3, #9
 800e398:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d01c      	beq.n	800e3da <validate+0x4e>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d018      	beq.n	800e3da <validate+0x4e>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d013      	beq.n	800e3da <validate+0x4e>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	889a      	ldrh	r2, [r3, #4]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	88db      	ldrh	r3, [r3, #6]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d10c      	bne.n	800e3da <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	785b      	ldrb	r3, [r3, #1]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd fc50 	bl	800bc6c <disk_status>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	f003 0301 	and.w	r3, r3, #1
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d101      	bne.n	800e3da <validate+0x4e>
			res = FR_OK;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e3da:	7bfb      	ldrb	r3, [r7, #15]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d102      	bne.n	800e3e6 <validate+0x5a>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	e000      	b.n	800e3e8 <validate+0x5c>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	683a      	ldr	r2, [r7, #0]
 800e3ea:	6013      	str	r3, [r2, #0]
	return res;
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
	...

0800e3f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b088      	sub	sp, #32
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	4613      	mov	r3, r2
 800e404:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e40a:	f107 0310 	add.w	r3, r7, #16
 800e40e:	4618      	mov	r0, r3
 800e410:	f7ff fc9a 	bl	800dd48 <get_ldnumber>
 800e414:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	da01      	bge.n	800e420 <f_mount+0x28>
 800e41c:	230b      	movs	r3, #11
 800e41e:	e02b      	b.n	800e478 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e420:	4a17      	ldr	r2, [pc, #92]	; (800e480 <f_mount+0x88>)
 800e422:	69fb      	ldr	r3, [r7, #28]
 800e424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e428:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d005      	beq.n	800e43c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e430:	69b8      	ldr	r0, [r7, #24]
 800e432:	f7fd ff01 	bl	800c238 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	2200      	movs	r2, #0
 800e43a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d002      	beq.n	800e448 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2200      	movs	r2, #0
 800e446:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	490d      	ldr	r1, [pc, #52]	; (800e480 <f_mount+0x88>)
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <f_mount+0x66>
 800e458:	79fb      	ldrb	r3, [r7, #7]
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d001      	beq.n	800e462 <f_mount+0x6a>
 800e45e:	2300      	movs	r3, #0
 800e460:	e00a      	b.n	800e478 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e462:	f107 010c 	add.w	r1, r7, #12
 800e466:	f107 0308 	add.w	r3, r7, #8
 800e46a:	2200      	movs	r2, #0
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7ff fd05 	bl	800de7c <find_volume>
 800e472:	4603      	mov	r3, r0
 800e474:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e476:	7dfb      	ldrb	r3, [r7, #23]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3720      	adds	r7, #32
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	20002530 	.word	0x20002530

0800e484 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b09a      	sub	sp, #104	; 0x68
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	4613      	mov	r3, r2
 800e490:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d101      	bne.n	800e49c <f_open+0x18>
 800e498:	2309      	movs	r3, #9
 800e49a:	e1bb      	b.n	800e814 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e49c:	79fb      	ldrb	r3, [r7, #7]
 800e49e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4a2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e4a4:	79fa      	ldrb	r2, [r7, #7]
 800e4a6:	f107 0114 	add.w	r1, r7, #20
 800e4aa:	f107 0308 	add.w	r3, r7, #8
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7ff fce4 	bl	800de7c <find_volume>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e4ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	f040 819f 	bne.w	800e802 <f_open+0x37e>
		dj.obj.fs = fs;
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	f107 0318 	add.w	r3, r7, #24
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7ff fbc3 	bl	800dc5c <follow_path>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e4dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d11a      	bne.n	800e51a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e4e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e4e8:	b25b      	sxtb	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	da03      	bge.n	800e4f6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e4ee:	2306      	movs	r3, #6
 800e4f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e4f4:	e011      	b.n	800e51a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	f023 0301 	bic.w	r3, r3, #1
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	bf14      	ite	ne
 800e500:	2301      	movne	r3, #1
 800e502:	2300      	moveq	r3, #0
 800e504:	b2db      	uxtb	r3, r3
 800e506:	461a      	mov	r2, r3
 800e508:	f107 0318 	add.w	r3, r7, #24
 800e50c:	4611      	mov	r1, r2
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fd fd4a 	bl	800bfa8 <chk_lock>
 800e514:	4603      	mov	r3, r0
 800e516:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e51a:	79fb      	ldrb	r3, [r7, #7]
 800e51c:	f003 031c 	and.w	r3, r3, #28
 800e520:	2b00      	cmp	r3, #0
 800e522:	d07f      	beq.n	800e624 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e524:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d017      	beq.n	800e55c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e52c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e530:	2b04      	cmp	r3, #4
 800e532:	d10e      	bne.n	800e552 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e534:	f7fd fd94 	bl	800c060 <enq_lock>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d006      	beq.n	800e54c <f_open+0xc8>
 800e53e:	f107 0318 	add.w	r3, r7, #24
 800e542:	4618      	mov	r0, r3
 800e544:	f7fe fffc 	bl	800d540 <dir_register>
 800e548:	4603      	mov	r3, r0
 800e54a:	e000      	b.n	800e54e <f_open+0xca>
 800e54c:	2312      	movs	r3, #18
 800e54e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e552:	79fb      	ldrb	r3, [r7, #7]
 800e554:	f043 0308 	orr.w	r3, r3, #8
 800e558:	71fb      	strb	r3, [r7, #7]
 800e55a:	e010      	b.n	800e57e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e55c:	7fbb      	ldrb	r3, [r7, #30]
 800e55e:	f003 0311 	and.w	r3, r3, #17
 800e562:	2b00      	cmp	r3, #0
 800e564:	d003      	beq.n	800e56e <f_open+0xea>
					res = FR_DENIED;
 800e566:	2307      	movs	r3, #7
 800e568:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e56c:	e007      	b.n	800e57e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e56e:	79fb      	ldrb	r3, [r7, #7]
 800e570:	f003 0304 	and.w	r3, r3, #4
 800e574:	2b00      	cmp	r3, #0
 800e576:	d002      	beq.n	800e57e <f_open+0xfa>
 800e578:	2308      	movs	r3, #8
 800e57a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e57e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e582:	2b00      	cmp	r3, #0
 800e584:	d168      	bne.n	800e658 <f_open+0x1d4>
 800e586:	79fb      	ldrb	r3, [r7, #7]
 800e588:	f003 0308 	and.w	r3, r3, #8
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d063      	beq.n	800e658 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e590:	f7fb fd70 	bl	800a074 <get_fattime>
 800e594:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e598:	330e      	adds	r3, #14
 800e59a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fd fc59 	bl	800be54 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a4:	3316      	adds	r3, #22
 800e5a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fd fc53 	bl	800be54 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b0:	330b      	adds	r3, #11
 800e5b2:	2220      	movs	r2, #32
 800e5b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fe fc2b 	bl	800ce18 <ld_clust>
 800e5c2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fe fc43 	bl	800ce56 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	331c      	adds	r3, #28
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fd fc3c 	bl	800be54 <st_dword>
					fs->wflag = 1;
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e5e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d037      	beq.n	800e658 <f_open+0x1d4>
						dw = fs->winsect;
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ec:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e5ee:	f107 0318 	add.w	r3, r7, #24
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fe f933 	bl	800c862 <remove_chain>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e602:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e606:	2b00      	cmp	r3, #0
 800e608:	d126      	bne.n	800e658 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fd fe7a 	bl	800c308 <move_window>
 800e614:	4603      	mov	r3, r0
 800e616:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e61e:	3a01      	subs	r2, #1
 800e620:	615a      	str	r2, [r3, #20]
 800e622:	e019      	b.n	800e658 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e624:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d115      	bne.n	800e658 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e62c:	7fbb      	ldrb	r3, [r7, #30]
 800e62e:	f003 0310 	and.w	r3, r3, #16
 800e632:	2b00      	cmp	r3, #0
 800e634:	d003      	beq.n	800e63e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e636:	2304      	movs	r3, #4
 800e638:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e63c:	e00c      	b.n	800e658 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e63e:	79fb      	ldrb	r3, [r7, #7]
 800e640:	f003 0302 	and.w	r3, r3, #2
 800e644:	2b00      	cmp	r3, #0
 800e646:	d007      	beq.n	800e658 <f_open+0x1d4>
 800e648:	7fbb      	ldrb	r3, [r7, #30]
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d002      	beq.n	800e658 <f_open+0x1d4>
						res = FR_DENIED;
 800e652:	2307      	movs	r3, #7
 800e654:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e658:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d128      	bne.n	800e6b2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e660:	79fb      	ldrb	r3, [r7, #7]
 800e662:	f003 0308 	and.w	r3, r3, #8
 800e666:	2b00      	cmp	r3, #0
 800e668:	d003      	beq.n	800e672 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e66a:	79fb      	ldrb	r3, [r7, #7]
 800e66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e670:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e67a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e680:	79fb      	ldrb	r3, [r7, #7]
 800e682:	f023 0301 	bic.w	r3, r3, #1
 800e686:	2b00      	cmp	r3, #0
 800e688:	bf14      	ite	ne
 800e68a:	2301      	movne	r3, #1
 800e68c:	2300      	moveq	r3, #0
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	461a      	mov	r2, r3
 800e692:	f107 0318 	add.w	r3, r7, #24
 800e696:	4611      	mov	r1, r2
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fd fd03 	bl	800c0a4 <inc_lock>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	691b      	ldr	r3, [r3, #16]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d102      	bne.n	800e6b2 <f_open+0x22e>
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e6b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f040 80a3 	bne.w	800e802 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6c0:	4611      	mov	r1, r2
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fe fba8 	bl	800ce18 <ld_clust>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d0:	331c      	adds	r3, #28
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fd fb80 	bl	800bdd8 <ld_dword>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e6e4:	697a      	ldr	r2, [r7, #20]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	88da      	ldrh	r2, [r3, #6]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	79fa      	ldrb	r2, [r7, #7]
 800e6f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2200      	movs	r2, #0
 800e708:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	3330      	adds	r3, #48	; 0x30
 800e70e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e712:	2100      	movs	r1, #0
 800e714:	4618      	mov	r0, r3
 800e716:	f7fd fbea 	bl	800beee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e71a:	79fb      	ldrb	r3, [r7, #7]
 800e71c:	f003 0320 	and.w	r3, r3, #32
 800e720:	2b00      	cmp	r3, #0
 800e722:	d06e      	beq.n	800e802 <f_open+0x37e>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d06a      	beq.n	800e802 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	68da      	ldr	r2, [r3, #12]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	895b      	ldrh	r3, [r3, #10]
 800e738:	461a      	mov	r2, r3
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	899b      	ldrh	r3, [r3, #12]
 800e73e:	fb03 f302 	mul.w	r3, r3, r2
 800e742:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e750:	e016      	b.n	800e780 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e756:	4618      	mov	r0, r3
 800e758:	f7fd fe93 	bl	800c482 <get_fat>
 800e75c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e75e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e760:	2b01      	cmp	r3, #1
 800e762:	d802      	bhi.n	800e76a <f_open+0x2e6>
 800e764:	2302      	movs	r3, #2
 800e766:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e76a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e76c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e770:	d102      	bne.n	800e778 <f_open+0x2f4>
 800e772:	2301      	movs	r3, #1
 800e774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e77a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e77c:	1ad3      	subs	r3, r2, r3
 800e77e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e780:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e784:	2b00      	cmp	r3, #0
 800e786:	d103      	bne.n	800e790 <f_open+0x30c>
 800e788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d8e0      	bhi.n	800e752 <f_open+0x2ce>
				}
				fp->clust = clst;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e794:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d131      	bne.n	800e802 <f_open+0x37e>
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	899b      	ldrh	r3, [r3, #12]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7aa:	fb02 f201 	mul.w	r2, r2, r1
 800e7ae:	1a9b      	subs	r3, r3, r2
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d026      	beq.n	800e802 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7fd fe43 	bl	800c444 <clust2sect>
 800e7be:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d103      	bne.n	800e7ce <f_open+0x34a>
						res = FR_INT_ERR;
 800e7c6:	2302      	movs	r3, #2
 800e7c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e7cc:	e019      	b.n	800e802 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	899b      	ldrh	r3, [r3, #12]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7dc:	441a      	add	r2, r3
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	7858      	ldrb	r0, [r3, #1]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6a1a      	ldr	r2, [r3, #32]
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	f7fd fa7b 	bl	800bcec <disk_read>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <f_open+0x37e>
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e802:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <f_open+0x38c>
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2200      	movs	r2, #0
 800e80e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e810:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e814:	4618      	mov	r0, r3
 800e816:	3768      	adds	r7, #104	; 0x68
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b08c      	sub	sp, #48	; 0x30
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2200      	movs	r2, #0
 800e832:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f107 0210 	add.w	r2, r7, #16
 800e83a:	4611      	mov	r1, r2
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7ff fda5 	bl	800e38c <validate>
 800e842:	4603      	mov	r3, r0
 800e844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d107      	bne.n	800e860 <f_write+0x44>
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	7d5b      	ldrb	r3, [r3, #21]
 800e854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <f_write+0x4a>
 800e860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e864:	e16a      	b.n	800eb3c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	7d1b      	ldrb	r3, [r3, #20]
 800e86a:	f003 0302 	and.w	r3, r3, #2
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d101      	bne.n	800e876 <f_write+0x5a>
 800e872:	2307      	movs	r3, #7
 800e874:	e162      	b.n	800eb3c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	699a      	ldr	r2, [r3, #24]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	441a      	add	r2, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	699b      	ldr	r3, [r3, #24]
 800e882:	429a      	cmp	r2, r3
 800e884:	f080 814c 	bcs.w	800eb20 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	699b      	ldr	r3, [r3, #24]
 800e88c:	43db      	mvns	r3, r3
 800e88e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e890:	e146      	b.n	800eb20 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	693a      	ldr	r2, [r7, #16]
 800e898:	8992      	ldrh	r2, [r2, #12]
 800e89a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e89e:	fb02 f201 	mul.w	r2, r2, r1
 800e8a2:	1a9b      	subs	r3, r3, r2
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f040 80f1 	bne.w	800ea8c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	699b      	ldr	r3, [r3, #24]
 800e8ae:	693a      	ldr	r2, [r7, #16]
 800e8b0:	8992      	ldrh	r2, [r2, #12]
 800e8b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8b6:	693a      	ldr	r2, [r7, #16]
 800e8b8:	8952      	ldrh	r2, [r2, #10]
 800e8ba:	3a01      	subs	r2, #1
 800e8bc:	4013      	ands	r3, r2
 800e8be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d143      	bne.n	800e94e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	699b      	ldr	r3, [r3, #24]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d10c      	bne.n	800e8e8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d11a      	bne.n	800e910 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2100      	movs	r1, #0
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fe f824 	bl	800c92c <create_chain>
 800e8e4:	62b8      	str	r0, [r7, #40]	; 0x28
 800e8e6:	e013      	b.n	800e910 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d007      	beq.n	800e900 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	699b      	ldr	r3, [r3, #24]
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f7fe f8b0 	bl	800ca5c <clmt_clust>
 800e8fc:	62b8      	str	r0, [r7, #40]	; 0x28
 800e8fe:	e007      	b.n	800e910 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	69db      	ldr	r3, [r3, #28]
 800e906:	4619      	mov	r1, r3
 800e908:	4610      	mov	r0, r2
 800e90a:	f7fe f80f 	bl	800c92c <create_chain>
 800e90e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e912:	2b00      	cmp	r3, #0
 800e914:	f000 8109 	beq.w	800eb2a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d104      	bne.n	800e928 <f_write+0x10c>
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2202      	movs	r2, #2
 800e922:	755a      	strb	r2, [r3, #21]
 800e924:	2302      	movs	r3, #2
 800e926:	e109      	b.n	800eb3c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e92e:	d104      	bne.n	800e93a <f_write+0x11e>
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2201      	movs	r2, #1
 800e934:	755a      	strb	r2, [r3, #21]
 800e936:	2301      	movs	r3, #1
 800e938:	e100      	b.n	800eb3c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e93e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d102      	bne.n	800e94e <f_write+0x132>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e94c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	7d1b      	ldrb	r3, [r3, #20]
 800e952:	b25b      	sxtb	r3, r3
 800e954:	2b00      	cmp	r3, #0
 800e956:	da18      	bge.n	800e98a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	7858      	ldrb	r0, [r3, #1]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6a1a      	ldr	r2, [r3, #32]
 800e966:	2301      	movs	r3, #1
 800e968:	f7fd f9e0 	bl	800bd2c <disk_write>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d004      	beq.n	800e97c <f_write+0x160>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2201      	movs	r2, #1
 800e976:	755a      	strb	r2, [r3, #21]
 800e978:	2301      	movs	r3, #1
 800e97a:	e0df      	b.n	800eb3c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	7d1b      	ldrb	r3, [r3, #20]
 800e980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e984:	b2da      	uxtb	r2, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e98a:	693a      	ldr	r2, [r7, #16]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	4619      	mov	r1, r3
 800e992:	4610      	mov	r0, r2
 800e994:	f7fd fd56 	bl	800c444 <clust2sect>
 800e998:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d104      	bne.n	800e9aa <f_write+0x18e>
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2202      	movs	r2, #2
 800e9a4:	755a      	strb	r2, [r3, #21]
 800e9a6:	2302      	movs	r3, #2
 800e9a8:	e0c8      	b.n	800eb3c <f_write+0x320>
			sect += csect;
 800e9aa:	697a      	ldr	r2, [r7, #20]
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	899b      	ldrh	r3, [r3, #12]
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9be:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d043      	beq.n	800ea4e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e9c6:	69ba      	ldr	r2, [r7, #24]
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	693a      	ldr	r2, [r7, #16]
 800e9ce:	8952      	ldrh	r2, [r2, #10]
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d905      	bls.n	800e9e0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	895b      	ldrh	r3, [r3, #10]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	1ad3      	subs	r3, r2, r3
 800e9de:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	7858      	ldrb	r0, [r3, #1]
 800e9e4:	6a3b      	ldr	r3, [r7, #32]
 800e9e6:	697a      	ldr	r2, [r7, #20]
 800e9e8:	69f9      	ldr	r1, [r7, #28]
 800e9ea:	f7fd f99f 	bl	800bd2c <disk_write>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d004      	beq.n	800e9fe <f_write+0x1e2>
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	755a      	strb	r2, [r3, #21]
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e09e      	b.n	800eb3c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6a1a      	ldr	r2, [r3, #32]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	1ad3      	subs	r3, r2, r3
 800ea06:	6a3a      	ldr	r2, [r7, #32]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d918      	bls.n	800ea3e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	6a1a      	ldr	r2, [r3, #32]
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	693a      	ldr	r2, [r7, #16]
 800ea1c:	8992      	ldrh	r2, [r2, #12]
 800ea1e:	fb02 f303 	mul.w	r3, r2, r3
 800ea22:	69fa      	ldr	r2, [r7, #28]
 800ea24:	18d1      	adds	r1, r2, r3
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	899b      	ldrh	r3, [r3, #12]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	f7fd fa3e 	bl	800beac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	7d1b      	ldrb	r3, [r3, #20]
 800ea34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	899b      	ldrh	r3, [r3, #12]
 800ea42:	461a      	mov	r2, r3
 800ea44:	6a3b      	ldr	r3, [r7, #32]
 800ea46:	fb02 f303 	mul.w	r3, r2, r3
 800ea4a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ea4c:	e04b      	b.n	800eae6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	697a      	ldr	r2, [r7, #20]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d016      	beq.n	800ea86 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	699a      	ldr	r2, [r3, #24]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d210      	bcs.n	800ea86 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	7858      	ldrb	r0, [r3, #1]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea6e:	2301      	movs	r3, #1
 800ea70:	697a      	ldr	r2, [r7, #20]
 800ea72:	f7fd f93b 	bl	800bcec <disk_read>
 800ea76:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d004      	beq.n	800ea86 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	755a      	strb	r2, [r3, #21]
 800ea82:	2301      	movs	r3, #1
 800ea84:	e05a      	b.n	800eb3c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	899b      	ldrh	r3, [r3, #12]
 800ea90:	4618      	mov	r0, r3
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	699b      	ldr	r3, [r3, #24]
 800ea96:	693a      	ldr	r2, [r7, #16]
 800ea98:	8992      	ldrh	r2, [r2, #12]
 800ea9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea9e:	fb02 f201 	mul.w	r2, r2, r1
 800eaa2:	1a9b      	subs	r3, r3, r2
 800eaa4:	1ac3      	subs	r3, r0, r3
 800eaa6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800eaa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d901      	bls.n	800eab4 <f_write+0x298>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	699b      	ldr	r3, [r3, #24]
 800eabe:	693a      	ldr	r2, [r7, #16]
 800eac0:	8992      	ldrh	r2, [r2, #12]
 800eac2:	fbb3 f0f2 	udiv	r0, r3, r2
 800eac6:	fb02 f200 	mul.w	r2, r2, r0
 800eaca:	1a9b      	subs	r3, r3, r2
 800eacc:	440b      	add	r3, r1
 800eace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ead0:	69f9      	ldr	r1, [r7, #28]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fd f9ea 	bl	800beac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	7d1b      	ldrb	r3, [r3, #20]
 800eadc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eae0:	b2da      	uxtb	r2, r3
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800eae6:	69fa      	ldr	r2, [r7, #28]
 800eae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaea:	4413      	add	r3, r2
 800eaec:	61fb      	str	r3, [r7, #28]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	699a      	ldr	r2, [r3, #24]
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	441a      	add	r2, r3
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	619a      	str	r2, [r3, #24]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	68da      	ldr	r2, [r3, #12]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	699b      	ldr	r3, [r3, #24]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	bf38      	it	cc
 800eb06:	461a      	movcc	r2, r3
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	60da      	str	r2, [r3, #12]
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	441a      	add	r2, r3
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	601a      	str	r2, [r3, #0]
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1c:	1ad3      	subs	r3, r2, r3
 800eb1e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	f47f aeb5 	bne.w	800e892 <f_write+0x76>
 800eb28:	e000      	b.n	800eb2c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eb2a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	7d1b      	ldrb	r3, [r3, #20]
 800eb30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb34:	b2da      	uxtb	r2, r3
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800eb3a:	2300      	movs	r3, #0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3730      	adds	r7, #48	; 0x30
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f107 0208 	add.w	r2, r7, #8
 800eb52:	4611      	mov	r1, r2
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7ff fc19 	bl	800e38c <validate>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d168      	bne.n	800ec36 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	7d1b      	ldrb	r3, [r3, #20]
 800eb68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d062      	beq.n	800ec36 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	7d1b      	ldrb	r3, [r3, #20]
 800eb74:	b25b      	sxtb	r3, r3
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	da15      	bge.n	800eba6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	7858      	ldrb	r0, [r3, #1]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6a1a      	ldr	r2, [r3, #32]
 800eb88:	2301      	movs	r3, #1
 800eb8a:	f7fd f8cf 	bl	800bd2c <disk_write>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <f_sync+0x54>
 800eb94:	2301      	movs	r3, #1
 800eb96:	e04f      	b.n	800ec38 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	7d1b      	ldrb	r3, [r3, #20]
 800eb9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eba0:	b2da      	uxtb	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eba6:	f7fb fa65 	bl	800a074 <get_fattime>
 800ebaa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	4610      	mov	r0, r2
 800ebb6:	f7fd fba7 	bl	800c308 <move_window>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ebbe:	7dfb      	ldrb	r3, [r7, #23]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d138      	bne.n	800ec36 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	330b      	adds	r3, #11
 800ebce:	781a      	ldrb	r2, [r3, #0]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	330b      	adds	r3, #11
 800ebd4:	f042 0220 	orr.w	r2, r2, #32
 800ebd8:	b2d2      	uxtb	r2, r2
 800ebda:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6818      	ldr	r0, [r3, #0]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	68f9      	ldr	r1, [r7, #12]
 800ebe8:	f7fe f935 	bl	800ce56 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f103 021c 	add.w	r2, r3, #28
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	4610      	mov	r0, r2
 800ebfa:	f7fd f92b 	bl	800be54 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	3316      	adds	r3, #22
 800ec02:	6939      	ldr	r1, [r7, #16]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fd f925 	bl	800be54 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	3312      	adds	r3, #18
 800ec0e:	2100      	movs	r1, #0
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fd f904 	bl	800be1e <st_word>
					fs->wflag = 1;
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	2201      	movs	r2, #1
 800ec1a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fd fba0 	bl	800c364 <sync_fs>
 800ec24:	4603      	mov	r3, r0
 800ec26:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	7d1b      	ldrb	r3, [r3, #20]
 800ec2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3718      	adds	r7, #24
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7ff ff7b 	bl	800eb44 <f_sync>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec52:	7bfb      	ldrb	r3, [r7, #15]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d118      	bne.n	800ec8a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f107 0208 	add.w	r2, r7, #8
 800ec5e:	4611      	mov	r1, r2
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff fb93 	bl	800e38c <validate>
 800ec66:	4603      	mov	r3, r0
 800ec68:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d10c      	bne.n	800ec8a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	691b      	ldr	r3, [r3, #16]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fd faa3 	bl	800c1c0 <dec_lock>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec7e:	7bfb      	ldrb	r3, [r7, #15]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d102      	bne.n	800ec8a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d101      	bne.n	800eca8 <f_opendir+0x14>
 800eca4:	2309      	movs	r3, #9
 800eca6:	e064      	b.n	800ed72 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ecac:	f107 010c 	add.w	r1, r7, #12
 800ecb0:	463b      	mov	r3, r7
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7ff f8e1 	bl	800de7c <find_volume>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ecbe:	7dfb      	ldrb	r3, [r7, #23]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d14f      	bne.n	800ed64 <f_opendir+0xd0>
		obj->fs = fs;
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	4619      	mov	r1, r3
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7fe ffc4 	bl	800dc5c <follow_path>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ecd8:	7dfb      	ldrb	r3, [r7, #23]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d13d      	bne.n	800ed5a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ece4:	b25b      	sxtb	r3, r3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	db12      	blt.n	800ed10 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	799b      	ldrb	r3, [r3, #6]
 800ecee:	f003 0310 	and.w	r3, r3, #16
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00a      	beq.n	800ed0c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ecf6:	68fa      	ldr	r2, [r7, #12]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a1b      	ldr	r3, [r3, #32]
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	4610      	mov	r0, r2
 800ed00:	f7fe f88a 	bl	800ce18 <ld_clust>
 800ed04:	4602      	mov	r2, r0
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	609a      	str	r2, [r3, #8]
 800ed0a:	e001      	b.n	800ed10 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ed0c:	2305      	movs	r3, #5
 800ed0e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ed10:	7dfb      	ldrb	r3, [r7, #23]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d121      	bne.n	800ed5a <f_opendir+0xc6>
				obj->id = fs->id;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	88da      	ldrh	r2, [r3, #6]
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ed1e:	2100      	movs	r1, #0
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7fd fed3 	bl	800cacc <dir_sdi>
 800ed26:	4603      	mov	r3, r0
 800ed28:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d114      	bne.n	800ed5a <f_opendir+0xc6>
					if (obj->sclust) {
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d00d      	beq.n	800ed54 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ed38:	2100      	movs	r1, #0
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7fd f9b2 	bl	800c0a4 <inc_lock>
 800ed40:	4602      	mov	r2, r0
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d105      	bne.n	800ed5a <f_opendir+0xc6>
 800ed4e:	2312      	movs	r3, #18
 800ed50:	75fb      	strb	r3, [r7, #23]
 800ed52:	e002      	b.n	800ed5a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	2200      	movs	r2, #0
 800ed58:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ed5a:	7dfb      	ldrb	r3, [r7, #23]
 800ed5c:	2b04      	cmp	r3, #4
 800ed5e:	d101      	bne.n	800ed64 <f_opendir+0xd0>
 800ed60:	2305      	movs	r3, #5
 800ed62:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ed64:	7dfb      	ldrb	r3, [r7, #23]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d002      	beq.n	800ed70 <f_opendir+0xdc>
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ed70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3718      	adds	r7, #24
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b084      	sub	sp, #16
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f107 0208 	add.w	r2, r7, #8
 800ed88:	4611      	mov	r1, r2
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7ff fafe 	bl	800e38c <validate>
 800ed90:	4603      	mov	r3, r0
 800ed92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ed94:	7bfb      	ldrb	r3, [r7, #15]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d110      	bne.n	800edbc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	691b      	ldr	r3, [r3, #16]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d006      	beq.n	800edb0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fd fa0a 	bl	800c1c0 <dec_lock>
 800edac:	4603      	mov	r3, r0
 800edae:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800edb0:	7bfb      	ldrb	r3, [r7, #15]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d102      	bne.n	800edbc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b084      	sub	sp, #16
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f107 0208 	add.w	r2, r7, #8
 800edd6:	4611      	mov	r1, r2
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff fad7 	bl	800e38c <validate>
 800edde:	4603      	mov	r3, r0
 800ede0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ede2:	7bfb      	ldrb	r3, [r7, #15]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d126      	bne.n	800ee36 <f_readdir+0x70>
		if (!fno) {
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d106      	bne.n	800edfc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800edee:	2100      	movs	r1, #0
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f7fd fe6b 	bl	800cacc <dir_sdi>
 800edf6:	4603      	mov	r3, r0
 800edf8:	73fb      	strb	r3, [r7, #15]
 800edfa:	e01c      	b.n	800ee36 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800edfc:	2100      	movs	r1, #0
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7fe fa37 	bl	800d272 <dir_read>
 800ee04:	4603      	mov	r3, r0
 800ee06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
 800ee0a:	2b04      	cmp	r3, #4
 800ee0c:	d101      	bne.n	800ee12 <f_readdir+0x4c>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10e      	bne.n	800ee36 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f7fe fc88 	bl	800d730 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ee20:	2100      	movs	r1, #0
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7fd fedb 	bl	800cbde <dir_next>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	2b04      	cmp	r3, #4
 800ee30:	d101      	bne.n	800ee36 <f_readdir+0x70>
 800ee32:	2300      	movs	r3, #0
 800ee34:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b098      	sub	sp, #96	; 0x60
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ee48:	f107 010c 	add.w	r1, r7, #12
 800ee4c:	1d3b      	adds	r3, r7, #4
 800ee4e:	2202      	movs	r2, #2
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff f813 	bl	800de7c <find_volume>
 800ee56:	4603      	mov	r3, r0
 800ee58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800ee60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f040 80f2 	bne.w	800f04e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	f107 0310 	add.w	r3, r7, #16
 800ee70:	4611      	mov	r1, r2
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7fe fef2 	bl	800dc5c <follow_path>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ee7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d102      	bne.n	800ee8c <f_mkdir+0x4c>
 800ee86:	2308      	movs	r3, #8
 800ee88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ee8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee90:	2b04      	cmp	r3, #4
 800ee92:	f040 80dc 	bne.w	800f04e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ee96:	f107 0310 	add.w	r3, r7, #16
 800ee9a:	2100      	movs	r1, #0
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7fd fd45 	bl	800c92c <create_chain>
 800eea2:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	895b      	ldrh	r3, [r3, #10]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	899b      	ldrh	r3, [r3, #12]
 800eeae:	fb03 f302 	mul.w	r3, r3, r2
 800eeb2:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800eeba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d102      	bne.n	800eec6 <f_mkdir+0x86>
 800eec0:	2307      	movs	r3, #7
 800eec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800eec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d102      	bne.n	800eed2 <f_mkdir+0x92>
 800eecc:	2302      	movs	r3, #2
 800eece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eed8:	d102      	bne.n	800eee0 <f_mkdir+0xa0>
 800eeda:	2301      	movs	r3, #1
 800eedc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800eee0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d106      	bne.n	800eef6 <f_mkdir+0xb6>
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fd f9c8 	bl	800c280 <sync_window>
 800eef0:	4603      	mov	r3, r0
 800eef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800eef6:	f7fb f8bd 	bl	800a074 <get_fattime>
 800eefa:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800eefc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d16c      	bne.n	800efde <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fd fa9b 	bl	800c444 <clust2sect>
 800ef0e:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	3338      	adds	r3, #56	; 0x38
 800ef14:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	899b      	ldrh	r3, [r3, #12]
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	2100      	movs	r1, #0
 800ef1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ef20:	f7fc ffe5 	bl	800beee <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ef24:	220b      	movs	r2, #11
 800ef26:	2120      	movs	r1, #32
 800ef28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ef2a:	f7fc ffe0 	bl	800beee <mem_set>
					dir[DIR_Name] = '.';
 800ef2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef30:	222e      	movs	r2, #46	; 0x2e
 800ef32:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800ef34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef36:	330b      	adds	r3, #11
 800ef38:	2210      	movs	r2, #16
 800ef3a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800ef3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef3e:	3316      	adds	r3, #22
 800ef40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fc ff86 	bl	800be54 <st_dword>
					st_clust(fs, dir, dcl);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fd ff81 	bl	800ce56 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800ef54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef56:	3320      	adds	r3, #32
 800ef58:	2220      	movs	r2, #32
 800ef5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fc ffa5 	bl	800beac <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800ef62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef64:	3321      	adds	r3, #33	; 0x21
 800ef66:	222e      	movs	r2, #46	; 0x2e
 800ef68:	701a      	strb	r2, [r3, #0]
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	2b03      	cmp	r3, #3
 800ef74:	d106      	bne.n	800ef84 <f_mkdir+0x144>
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d101      	bne.n	800ef84 <f_mkdir+0x144>
 800ef80:	2300      	movs	r3, #0
 800ef82:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800ef84:	68f8      	ldr	r0, [r7, #12]
 800ef86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef88:	3320      	adds	r3, #32
 800ef8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	f7fd ff62 	bl	800ce56 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	895b      	ldrh	r3, [r3, #10]
 800ef96:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef98:	e01c      	b.n	800efd4 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800ef9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef9c:	1c5a      	adds	r2, r3, #1
 800ef9e:	657a      	str	r2, [r7, #84]	; 0x54
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2201      	movs	r2, #1
 800efa8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	4618      	mov	r0, r3
 800efae:	f7fd f967 	bl	800c280 <sync_window>
 800efb2:	4603      	mov	r3, r0
 800efb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800efb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d10d      	bne.n	800efdc <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	899b      	ldrh	r3, [r3, #12]
 800efc4:	461a      	mov	r2, r3
 800efc6:	2100      	movs	r1, #0
 800efc8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800efca:	f7fc ff90 	bl	800beee <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800efce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efd0:	3b01      	subs	r3, #1
 800efd2:	65bb      	str	r3, [r7, #88]	; 0x58
 800efd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1df      	bne.n	800ef9a <f_mkdir+0x15a>
 800efda:	e000      	b.n	800efde <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800efdc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800efde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d107      	bne.n	800eff6 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800efe6:	f107 0310 	add.w	r3, r7, #16
 800efea:	4618      	mov	r0, r3
 800efec:	f7fe faa8 	bl	800d540 <dir_register>
 800eff0:	4603      	mov	r3, r0
 800eff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800eff6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800effa:	2b00      	cmp	r3, #0
 800effc:	d120      	bne.n	800f040 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f004:	3316      	adds	r3, #22
 800f006:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fc ff23 	bl	800be54 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f014:	4618      	mov	r0, r3
 800f016:	f7fd ff1e 	bl	800ce56 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f01c:	330b      	adds	r3, #11
 800f01e:	2210      	movs	r2, #16
 800f020:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2201      	movs	r2, #1
 800f026:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d10e      	bne.n	800f04e <f_mkdir+0x20e>
					res = sync_fs(fs);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	4618      	mov	r0, r3
 800f034:	f7fd f996 	bl	800c364 <sync_fs>
 800f038:	4603      	mov	r3, r0
 800f03a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f03e:	e006      	b.n	800f04e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f040:	f107 0310 	add.w	r3, r7, #16
 800f044:	2200      	movs	r2, #0
 800f046:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fd fc0a 	bl	800c862 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f04e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f052:	4618      	mov	r0, r3
 800f054:	3760      	adds	r7, #96	; 0x60
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
	...

0800f05c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b087      	sub	sp, #28
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	4613      	mov	r3, r2
 800f068:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f06a:	2301      	movs	r3, #1
 800f06c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f072:	4b1f      	ldr	r3, [pc, #124]	; (800f0f0 <FATFS_LinkDriverEx+0x94>)
 800f074:	7a5b      	ldrb	r3, [r3, #9]
 800f076:	b2db      	uxtb	r3, r3
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d131      	bne.n	800f0e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f07c:	4b1c      	ldr	r3, [pc, #112]	; (800f0f0 <FATFS_LinkDriverEx+0x94>)
 800f07e:	7a5b      	ldrb	r3, [r3, #9]
 800f080:	b2db      	uxtb	r3, r3
 800f082:	461a      	mov	r2, r3
 800f084:	4b1a      	ldr	r3, [pc, #104]	; (800f0f0 <FATFS_LinkDriverEx+0x94>)
 800f086:	2100      	movs	r1, #0
 800f088:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f08a:	4b19      	ldr	r3, [pc, #100]	; (800f0f0 <FATFS_LinkDriverEx+0x94>)
 800f08c:	7a5b      	ldrb	r3, [r3, #9]
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	4a17      	ldr	r2, [pc, #92]	; (800f0f0 <FATFS_LinkDriverEx+0x94>)
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	4413      	add	r3, r2
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f09a:	4b15      	ldr	r3, [pc, #84]	; (800f0f0 <FATFS_LinkDriverEx+0x94>)
 800f09c:	7a5b      	ldrb	r3, [r3, #9]
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	4b13      	ldr	r3, [pc, #76]	; (800f0f0 <FATFS_LinkDriverEx+0x94>)
 800f0a4:	4413      	add	r3, r2
 800f0a6:	79fa      	ldrb	r2, [r7, #7]
 800f0a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f0aa:	4b11      	ldr	r3, [pc, #68]	; (800f0f0 <FATFS_LinkDriverEx+0x94>)
 800f0ac:	7a5b      	ldrb	r3, [r3, #9]
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	1c5a      	adds	r2, r3, #1
 800f0b2:	b2d1      	uxtb	r1, r2
 800f0b4:	4a0e      	ldr	r2, [pc, #56]	; (800f0f0 <FATFS_LinkDriverEx+0x94>)
 800f0b6:	7251      	strb	r1, [r2, #9]
 800f0b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f0ba:	7dbb      	ldrb	r3, [r7, #22]
 800f0bc:	3330      	adds	r3, #48	; 0x30
 800f0be:	b2da      	uxtb	r2, r3
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	223a      	movs	r2, #58	; 0x3a
 800f0ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	3302      	adds	r3, #2
 800f0d0:	222f      	movs	r2, #47	; 0x2f
 800f0d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	3303      	adds	r3, #3
 800f0d8:	2200      	movs	r2, #0
 800f0da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	371c      	adds	r7, #28
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	200025c0 	.word	0x200025c0

0800f0f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f0fe:	2200      	movs	r2, #0
 800f100:	6839      	ldr	r1, [r7, #0]
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7ff ffaa 	bl	800f05c <FATFS_LinkDriverEx>
 800f108:	4603      	mov	r3, r0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
	...

0800f114 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800f114:	b480      	push	{r7}
 800f116:	b085      	sub	sp, #20
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800f120:	2300      	movs	r3, #0
 800f122:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800f124:	2301      	movs	r3, #1
 800f126:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800f128:	4b15      	ldr	r3, [pc, #84]	; (800f180 <FATFS_UnLinkDriverEx+0x6c>)
 800f12a:	7a5b      	ldrb	r3, [r3, #9]
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d01e      	beq.n	800f170 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	3b30      	subs	r3, #48	; 0x30
 800f138:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800f13a:	7bbb      	ldrb	r3, [r7, #14]
 800f13c:	4a10      	ldr	r2, [pc, #64]	; (800f180 <FATFS_UnLinkDriverEx+0x6c>)
 800f13e:	009b      	lsls	r3, r3, #2
 800f140:	4413      	add	r3, r2
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d013      	beq.n	800f170 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800f148:	7bbb      	ldrb	r3, [r7, #14]
 800f14a:	4a0d      	ldr	r2, [pc, #52]	; (800f180 <FATFS_UnLinkDriverEx+0x6c>)
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	2200      	movs	r2, #0
 800f152:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800f154:	7bbb      	ldrb	r3, [r7, #14]
 800f156:	4a0a      	ldr	r2, [pc, #40]	; (800f180 <FATFS_UnLinkDriverEx+0x6c>)
 800f158:	4413      	add	r3, r2
 800f15a:	2200      	movs	r2, #0
 800f15c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800f15e:	4b08      	ldr	r3, [pc, #32]	; (800f180 <FATFS_UnLinkDriverEx+0x6c>)
 800f160:	7a5b      	ldrb	r3, [r3, #9]
 800f162:	b2db      	uxtb	r3, r3
 800f164:	3b01      	subs	r3, #1
 800f166:	b2da      	uxtb	r2, r3
 800f168:	4b05      	ldr	r3, [pc, #20]	; (800f180 <FATFS_UnLinkDriverEx+0x6c>)
 800f16a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800f16c:	2300      	movs	r3, #0
 800f16e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f170:	7bfb      	ldrb	r3, [r7, #15]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3714      	adds	r7, #20
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	200025c0 	.word	0x200025c0

0800f184 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800f18c:	2100      	movs	r1, #0
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7ff ffc0 	bl	800f114 <FATFS_UnLinkDriverEx>
 800f194:	4603      	mov	r3, r0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
	...

0800f1a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	6039      	str	r1, [r7, #0]
 800f1aa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f1ac:	88fb      	ldrh	r3, [r7, #6]
 800f1ae:	2b7f      	cmp	r3, #127	; 0x7f
 800f1b0:	d802      	bhi.n	800f1b8 <ff_convert+0x18>
		c = chr;
 800f1b2:	88fb      	ldrh	r3, [r7, #6]
 800f1b4:	81fb      	strh	r3, [r7, #14]
 800f1b6:	e025      	b.n	800f204 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00b      	beq.n	800f1d6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f1be:	88fb      	ldrh	r3, [r7, #6]
 800f1c0:	2bff      	cmp	r3, #255	; 0xff
 800f1c2:	d805      	bhi.n	800f1d0 <ff_convert+0x30>
 800f1c4:	88fb      	ldrh	r3, [r7, #6]
 800f1c6:	3b80      	subs	r3, #128	; 0x80
 800f1c8:	4a12      	ldr	r2, [pc, #72]	; (800f214 <ff_convert+0x74>)
 800f1ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ce:	e000      	b.n	800f1d2 <ff_convert+0x32>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	81fb      	strh	r3, [r7, #14]
 800f1d4:	e016      	b.n	800f204 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	81fb      	strh	r3, [r7, #14]
 800f1da:	e009      	b.n	800f1f0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f1dc:	89fb      	ldrh	r3, [r7, #14]
 800f1de:	4a0d      	ldr	r2, [pc, #52]	; (800f214 <ff_convert+0x74>)
 800f1e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1e4:	88fa      	ldrh	r2, [r7, #6]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d006      	beq.n	800f1f8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f1ea:	89fb      	ldrh	r3, [r7, #14]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	81fb      	strh	r3, [r7, #14]
 800f1f0:	89fb      	ldrh	r3, [r7, #14]
 800f1f2:	2b7f      	cmp	r3, #127	; 0x7f
 800f1f4:	d9f2      	bls.n	800f1dc <ff_convert+0x3c>
 800f1f6:	e000      	b.n	800f1fa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f1f8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f1fa:	89fb      	ldrh	r3, [r7, #14]
 800f1fc:	3380      	adds	r3, #128	; 0x80
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	b2db      	uxtb	r3, r3
 800f202:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f204:	89fb      	ldrh	r3, [r7, #14]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3714      	adds	r7, #20
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr
 800f212:	bf00      	nop
 800f214:	08014bc4 	.word	0x08014bc4

0800f218 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f218:	b480      	push	{r7}
 800f21a:	b087      	sub	sp, #28
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	4603      	mov	r3, r0
 800f220:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f222:	88fb      	ldrh	r3, [r7, #6]
 800f224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f228:	d201      	bcs.n	800f22e <ff_wtoupper+0x16>
 800f22a:	4b3e      	ldr	r3, [pc, #248]	; (800f324 <ff_wtoupper+0x10c>)
 800f22c:	e000      	b.n	800f230 <ff_wtoupper+0x18>
 800f22e:	4b3e      	ldr	r3, [pc, #248]	; (800f328 <ff_wtoupper+0x110>)
 800f230:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	1c9a      	adds	r2, r3, #2
 800f236:	617a      	str	r2, [r7, #20]
 800f238:	881b      	ldrh	r3, [r3, #0]
 800f23a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f23c:	8a7b      	ldrh	r3, [r7, #18]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d068      	beq.n	800f314 <ff_wtoupper+0xfc>
 800f242:	88fa      	ldrh	r2, [r7, #6]
 800f244:	8a7b      	ldrh	r3, [r7, #18]
 800f246:	429a      	cmp	r2, r3
 800f248:	d364      	bcc.n	800f314 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	1c9a      	adds	r2, r3, #2
 800f24e:	617a      	str	r2, [r7, #20]
 800f250:	881b      	ldrh	r3, [r3, #0]
 800f252:	823b      	strh	r3, [r7, #16]
 800f254:	8a3b      	ldrh	r3, [r7, #16]
 800f256:	0a1b      	lsrs	r3, r3, #8
 800f258:	81fb      	strh	r3, [r7, #14]
 800f25a:	8a3b      	ldrh	r3, [r7, #16]
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f260:	88fa      	ldrh	r2, [r7, #6]
 800f262:	8a79      	ldrh	r1, [r7, #18]
 800f264:	8a3b      	ldrh	r3, [r7, #16]
 800f266:	440b      	add	r3, r1
 800f268:	429a      	cmp	r2, r3
 800f26a:	da49      	bge.n	800f300 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f26c:	89fb      	ldrh	r3, [r7, #14]
 800f26e:	2b08      	cmp	r3, #8
 800f270:	d84f      	bhi.n	800f312 <ff_wtoupper+0xfa>
 800f272:	a201      	add	r2, pc, #4	; (adr r2, 800f278 <ff_wtoupper+0x60>)
 800f274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f278:	0800f29d 	.word	0x0800f29d
 800f27c:	0800f2af 	.word	0x0800f2af
 800f280:	0800f2c5 	.word	0x0800f2c5
 800f284:	0800f2cd 	.word	0x0800f2cd
 800f288:	0800f2d5 	.word	0x0800f2d5
 800f28c:	0800f2dd 	.word	0x0800f2dd
 800f290:	0800f2e5 	.word	0x0800f2e5
 800f294:	0800f2ed 	.word	0x0800f2ed
 800f298:	0800f2f5 	.word	0x0800f2f5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f29c:	88fa      	ldrh	r2, [r7, #6]
 800f29e:	8a7b      	ldrh	r3, [r7, #18]
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	005b      	lsls	r3, r3, #1
 800f2a4:	697a      	ldr	r2, [r7, #20]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	881b      	ldrh	r3, [r3, #0]
 800f2aa:	80fb      	strh	r3, [r7, #6]
 800f2ac:	e027      	b.n	800f2fe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f2ae:	88fa      	ldrh	r2, [r7, #6]
 800f2b0:	8a7b      	ldrh	r3, [r7, #18]
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	f003 0301 	and.w	r3, r3, #1
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	88fa      	ldrh	r2, [r7, #6]
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	80fb      	strh	r3, [r7, #6]
 800f2c2:	e01c      	b.n	800f2fe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f2c4:	88fb      	ldrh	r3, [r7, #6]
 800f2c6:	3b10      	subs	r3, #16
 800f2c8:	80fb      	strh	r3, [r7, #6]
 800f2ca:	e018      	b.n	800f2fe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f2cc:	88fb      	ldrh	r3, [r7, #6]
 800f2ce:	3b20      	subs	r3, #32
 800f2d0:	80fb      	strh	r3, [r7, #6]
 800f2d2:	e014      	b.n	800f2fe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f2d4:	88fb      	ldrh	r3, [r7, #6]
 800f2d6:	3b30      	subs	r3, #48	; 0x30
 800f2d8:	80fb      	strh	r3, [r7, #6]
 800f2da:	e010      	b.n	800f2fe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f2dc:	88fb      	ldrh	r3, [r7, #6]
 800f2de:	3b1a      	subs	r3, #26
 800f2e0:	80fb      	strh	r3, [r7, #6]
 800f2e2:	e00c      	b.n	800f2fe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f2e4:	88fb      	ldrh	r3, [r7, #6]
 800f2e6:	3308      	adds	r3, #8
 800f2e8:	80fb      	strh	r3, [r7, #6]
 800f2ea:	e008      	b.n	800f2fe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f2ec:	88fb      	ldrh	r3, [r7, #6]
 800f2ee:	3b50      	subs	r3, #80	; 0x50
 800f2f0:	80fb      	strh	r3, [r7, #6]
 800f2f2:	e004      	b.n	800f2fe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f2f4:	88fb      	ldrh	r3, [r7, #6]
 800f2f6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f2fa:	80fb      	strh	r3, [r7, #6]
 800f2fc:	bf00      	nop
			}
			break;
 800f2fe:	e008      	b.n	800f312 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f300:	89fb      	ldrh	r3, [r7, #14]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d195      	bne.n	800f232 <ff_wtoupper+0x1a>
 800f306:	8a3b      	ldrh	r3, [r7, #16]
 800f308:	005b      	lsls	r3, r3, #1
 800f30a:	697a      	ldr	r2, [r7, #20]
 800f30c:	4413      	add	r3, r2
 800f30e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f310:	e78f      	b.n	800f232 <ff_wtoupper+0x1a>
			break;
 800f312:	bf00      	nop
	}

	return chr;
 800f314:	88fb      	ldrh	r3, [r7, #6]
}
 800f316:	4618      	mov	r0, r3
 800f318:	371c      	adds	r7, #28
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop
 800f324:	08014cc4 	.word	0x08014cc4
 800f328:	08014eb8 	.word	0x08014eb8

0800f32c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f330:	2200      	movs	r2, #0
 800f332:	4912      	ldr	r1, [pc, #72]	; (800f37c <MX_USB_DEVICE_Init+0x50>)
 800f334:	4812      	ldr	r0, [pc, #72]	; (800f380 <MX_USB_DEVICE_Init+0x54>)
 800f336:	f7fb fb2f 	bl	800a998 <USBD_Init>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d001      	beq.n	800f344 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f340:	f7f3 f9e6 	bl	8002710 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f344:	490f      	ldr	r1, [pc, #60]	; (800f384 <MX_USB_DEVICE_Init+0x58>)
 800f346:	480e      	ldr	r0, [pc, #56]	; (800f380 <MX_USB_DEVICE_Init+0x54>)
 800f348:	f7fb fb56 	bl	800a9f8 <USBD_RegisterClass>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d001      	beq.n	800f356 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f352:	f7f3 f9dd 	bl	8002710 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f356:	490c      	ldr	r1, [pc, #48]	; (800f388 <MX_USB_DEVICE_Init+0x5c>)
 800f358:	4809      	ldr	r0, [pc, #36]	; (800f380 <MX_USB_DEVICE_Init+0x54>)
 800f35a:	f7fb fa77 	bl	800a84c <USBD_CDC_RegisterInterface>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f364:	f7f3 f9d4 	bl	8002710 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f368:	4805      	ldr	r0, [pc, #20]	; (800f380 <MX_USB_DEVICE_Init+0x54>)
 800f36a:	f7fb fb6c 	bl	800aa46 <USBD_Start>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d001      	beq.n	800f378 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f374:	f7f3 f9cc 	bl	8002710 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f378:	bf00      	nop
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	20000138 	.word	0x20000138
 800f380:	20004b50 	.word	0x20004b50
 800f384:	20000020 	.word	0x20000020
 800f388:	20000124 	.word	0x20000124

0800f38c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f390:	2200      	movs	r2, #0
 800f392:	4905      	ldr	r1, [pc, #20]	; (800f3a8 <CDC_Init_FS+0x1c>)
 800f394:	4805      	ldr	r0, [pc, #20]	; (800f3ac <CDC_Init_FS+0x20>)
 800f396:	f7fb fa6e 	bl	800a876 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f39a:	4905      	ldr	r1, [pc, #20]	; (800f3b0 <CDC_Init_FS+0x24>)
 800f39c:	4803      	ldr	r0, [pc, #12]	; (800f3ac <CDC_Init_FS+0x20>)
 800f39e:	f7fb fa88 	bl	800a8b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f3a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	20005620 	.word	0x20005620
 800f3ac:	20004b50 	.word	0x20004b50
 800f3b0:	20004e20 	.word	0x20004e20

0800f3b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f3b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	6039      	str	r1, [r7, #0]
 800f3ce:	71fb      	strb	r3, [r7, #7]
 800f3d0:	4613      	mov	r3, r2
 800f3d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f3d4:	79fb      	ldrb	r3, [r7, #7]
 800f3d6:	2b23      	cmp	r3, #35	; 0x23
 800f3d8:	d84a      	bhi.n	800f470 <CDC_Control_FS+0xac>
 800f3da:	a201      	add	r2, pc, #4	; (adr r2, 800f3e0 <CDC_Control_FS+0x1c>)
 800f3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e0:	0800f471 	.word	0x0800f471
 800f3e4:	0800f471 	.word	0x0800f471
 800f3e8:	0800f471 	.word	0x0800f471
 800f3ec:	0800f471 	.word	0x0800f471
 800f3f0:	0800f471 	.word	0x0800f471
 800f3f4:	0800f471 	.word	0x0800f471
 800f3f8:	0800f471 	.word	0x0800f471
 800f3fc:	0800f471 	.word	0x0800f471
 800f400:	0800f471 	.word	0x0800f471
 800f404:	0800f471 	.word	0x0800f471
 800f408:	0800f471 	.word	0x0800f471
 800f40c:	0800f471 	.word	0x0800f471
 800f410:	0800f471 	.word	0x0800f471
 800f414:	0800f471 	.word	0x0800f471
 800f418:	0800f471 	.word	0x0800f471
 800f41c:	0800f471 	.word	0x0800f471
 800f420:	0800f471 	.word	0x0800f471
 800f424:	0800f471 	.word	0x0800f471
 800f428:	0800f471 	.word	0x0800f471
 800f42c:	0800f471 	.word	0x0800f471
 800f430:	0800f471 	.word	0x0800f471
 800f434:	0800f471 	.word	0x0800f471
 800f438:	0800f471 	.word	0x0800f471
 800f43c:	0800f471 	.word	0x0800f471
 800f440:	0800f471 	.word	0x0800f471
 800f444:	0800f471 	.word	0x0800f471
 800f448:	0800f471 	.word	0x0800f471
 800f44c:	0800f471 	.word	0x0800f471
 800f450:	0800f471 	.word	0x0800f471
 800f454:	0800f471 	.word	0x0800f471
 800f458:	0800f471 	.word	0x0800f471
 800f45c:	0800f471 	.word	0x0800f471
 800f460:	0800f471 	.word	0x0800f471
 800f464:	0800f471 	.word	0x0800f471
 800f468:	0800f471 	.word	0x0800f471
 800f46c:	0800f471 	.word	0x0800f471
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f470:	bf00      	nop
  }

  return (USBD_OK);
 800f472:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f474:	4618      	mov	r0, r3
 800f476:	370c      	adds	r7, #12
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr

0800f480 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f48a:	6879      	ldr	r1, [r7, #4]
 800f48c:	4805      	ldr	r0, [pc, #20]	; (800f4a4 <CDC_Receive_FS+0x24>)
 800f48e:	f7fb fa10 	bl	800a8b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f492:	4804      	ldr	r0, [pc, #16]	; (800f4a4 <CDC_Receive_FS+0x24>)
 800f494:	f7fb fa56 	bl	800a944 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f498:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3708      	adds	r7, #8
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	20004b50 	.word	0x20004b50

0800f4a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f4b8:	4b0d      	ldr	r3, [pc, #52]	; (800f4f0 <CDC_Transmit_FS+0x48>)
 800f4ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d001      	beq.n	800f4ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e00b      	b.n	800f4e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f4ce:	887b      	ldrh	r3, [r7, #2]
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	6879      	ldr	r1, [r7, #4]
 800f4d4:	4806      	ldr	r0, [pc, #24]	; (800f4f0 <CDC_Transmit_FS+0x48>)
 800f4d6:	f7fb f9ce 	bl	800a876 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f4da:	4805      	ldr	r0, [pc, #20]	; (800f4f0 <CDC_Transmit_FS+0x48>)
 800f4dc:	f7fb fa02 	bl	800a8e4 <USBD_CDC_TransmitPacket>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	20004b50 	.word	0x20004b50

0800f4f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b087      	sub	sp, #28
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	4613      	mov	r3, r2
 800f500:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f502:	2300      	movs	r3, #0
 800f504:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	371c      	adds	r7, #28
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr
	...

0800f518 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	4603      	mov	r3, r0
 800f520:	6039      	str	r1, [r7, #0]
 800f522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	2212      	movs	r2, #18
 800f528:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f52a:	4b03      	ldr	r3, [pc, #12]	; (800f538 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr
 800f538:	20000154 	.word	0x20000154

0800f53c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
 800f542:	4603      	mov	r3, r0
 800f544:	6039      	str	r1, [r7, #0]
 800f546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	2204      	movs	r2, #4
 800f54c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f54e:	4b03      	ldr	r3, [pc, #12]	; (800f55c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f550:	4618      	mov	r0, r3
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr
 800f55c:	20000168 	.word	0x20000168

0800f560 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	4603      	mov	r3, r0
 800f568:	6039      	str	r1, [r7, #0]
 800f56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f56c:	79fb      	ldrb	r3, [r7, #7]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d105      	bne.n	800f57e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f572:	683a      	ldr	r2, [r7, #0]
 800f574:	4907      	ldr	r1, [pc, #28]	; (800f594 <USBD_FS_ProductStrDescriptor+0x34>)
 800f576:	4808      	ldr	r0, [pc, #32]	; (800f598 <USBD_FS_ProductStrDescriptor+0x38>)
 800f578:	f7fc fa97 	bl	800baaa <USBD_GetString>
 800f57c:	e004      	b.n	800f588 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f57e:	683a      	ldr	r2, [r7, #0]
 800f580:	4904      	ldr	r1, [pc, #16]	; (800f594 <USBD_FS_ProductStrDescriptor+0x34>)
 800f582:	4805      	ldr	r0, [pc, #20]	; (800f598 <USBD_FS_ProductStrDescriptor+0x38>)
 800f584:	f7fc fa91 	bl	800baaa <USBD_GetString>
  }
  return USBD_StrDesc;
 800f588:	4b02      	ldr	r3, [pc, #8]	; (800f594 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	20005e20 	.word	0x20005e20
 800f598:	08014a90 	.word	0x08014a90

0800f59c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	6039      	str	r1, [r7, #0]
 800f5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f5a8:	683a      	ldr	r2, [r7, #0]
 800f5aa:	4904      	ldr	r1, [pc, #16]	; (800f5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f5ac:	4804      	ldr	r0, [pc, #16]	; (800f5c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f5ae:	f7fc fa7c 	bl	800baaa <USBD_GetString>
  return USBD_StrDesc;
 800f5b2:	4b02      	ldr	r3, [pc, #8]	; (800f5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	20005e20 	.word	0x20005e20
 800f5c0:	08014aa8 	.word	0x08014aa8

0800f5c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	6039      	str	r1, [r7, #0]
 800f5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	221a      	movs	r2, #26
 800f5d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f5d6:	f000 f843 	bl	800f660 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f5da:	4b02      	ldr	r3, [pc, #8]	; (800f5e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	2000016c 	.word	0x2000016c

0800f5e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	6039      	str	r1, [r7, #0]
 800f5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d105      	bne.n	800f606 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f5fa:	683a      	ldr	r2, [r7, #0]
 800f5fc:	4907      	ldr	r1, [pc, #28]	; (800f61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f5fe:	4808      	ldr	r0, [pc, #32]	; (800f620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f600:	f7fc fa53 	bl	800baaa <USBD_GetString>
 800f604:	e004      	b.n	800f610 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f606:	683a      	ldr	r2, [r7, #0]
 800f608:	4904      	ldr	r1, [pc, #16]	; (800f61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f60a:	4805      	ldr	r0, [pc, #20]	; (800f620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f60c:	f7fc fa4d 	bl	800baaa <USBD_GetString>
  }
  return USBD_StrDesc;
 800f610:	4b02      	ldr	r3, [pc, #8]	; (800f61c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f612:	4618      	mov	r0, r3
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20005e20 	.word	0x20005e20
 800f620:	08014abc 	.word	0x08014abc

0800f624 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	4603      	mov	r3, r0
 800f62c:	6039      	str	r1, [r7, #0]
 800f62e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f630:	79fb      	ldrb	r3, [r7, #7]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d105      	bne.n	800f642 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f636:	683a      	ldr	r2, [r7, #0]
 800f638:	4907      	ldr	r1, [pc, #28]	; (800f658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f63a:	4808      	ldr	r0, [pc, #32]	; (800f65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f63c:	f7fc fa35 	bl	800baaa <USBD_GetString>
 800f640:	e004      	b.n	800f64c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	4904      	ldr	r1, [pc, #16]	; (800f658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f646:	4805      	ldr	r0, [pc, #20]	; (800f65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f648:	f7fc fa2f 	bl	800baaa <USBD_GetString>
  }
  return USBD_StrDesc;
 800f64c:	4b02      	ldr	r3, [pc, #8]	; (800f658 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	20005e20 	.word	0x20005e20
 800f65c:	08014ac8 	.word	0x08014ac8

0800f660 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f666:	4b0f      	ldr	r3, [pc, #60]	; (800f6a4 <Get_SerialNum+0x44>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f66c:	4b0e      	ldr	r3, [pc, #56]	; (800f6a8 <Get_SerialNum+0x48>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f672:	4b0e      	ldr	r3, [pc, #56]	; (800f6ac <Get_SerialNum+0x4c>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4413      	add	r3, r2
 800f67e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d009      	beq.n	800f69a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f686:	2208      	movs	r2, #8
 800f688:	4909      	ldr	r1, [pc, #36]	; (800f6b0 <Get_SerialNum+0x50>)
 800f68a:	68f8      	ldr	r0, [r7, #12]
 800f68c:	f000 f814 	bl	800f6b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f690:	2204      	movs	r2, #4
 800f692:	4908      	ldr	r1, [pc, #32]	; (800f6b4 <Get_SerialNum+0x54>)
 800f694:	68b8      	ldr	r0, [r7, #8]
 800f696:	f000 f80f 	bl	800f6b8 <IntToUnicode>
  }
}
 800f69a:	bf00      	nop
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	1fff7a10 	.word	0x1fff7a10
 800f6a8:	1fff7a14 	.word	0x1fff7a14
 800f6ac:	1fff7a18 	.word	0x1fff7a18
 800f6b0:	2000016e 	.word	0x2000016e
 800f6b4:	2000017e 	.word	0x2000017e

0800f6b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	75fb      	strb	r3, [r7, #23]
 800f6ce:	e027      	b.n	800f720 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	0f1b      	lsrs	r3, r3, #28
 800f6d4:	2b09      	cmp	r3, #9
 800f6d6:	d80b      	bhi.n	800f6f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	0f1b      	lsrs	r3, r3, #28
 800f6dc:	b2da      	uxtb	r2, r3
 800f6de:	7dfb      	ldrb	r3, [r7, #23]
 800f6e0:	005b      	lsls	r3, r3, #1
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	440b      	add	r3, r1
 800f6e8:	3230      	adds	r2, #48	; 0x30
 800f6ea:	b2d2      	uxtb	r2, r2
 800f6ec:	701a      	strb	r2, [r3, #0]
 800f6ee:	e00a      	b.n	800f706 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	0f1b      	lsrs	r3, r3, #28
 800f6f4:	b2da      	uxtb	r2, r3
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
 800f6f8:	005b      	lsls	r3, r3, #1
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	440b      	add	r3, r1
 800f700:	3237      	adds	r2, #55	; 0x37
 800f702:	b2d2      	uxtb	r2, r2
 800f704:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	011b      	lsls	r3, r3, #4
 800f70a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f70c:	7dfb      	ldrb	r3, [r7, #23]
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	3301      	adds	r3, #1
 800f712:	68ba      	ldr	r2, [r7, #8]
 800f714:	4413      	add	r3, r2
 800f716:	2200      	movs	r2, #0
 800f718:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f71a:	7dfb      	ldrb	r3, [r7, #23]
 800f71c:	3301      	adds	r3, #1
 800f71e:	75fb      	strb	r3, [r7, #23]
 800f720:	7dfa      	ldrb	r2, [r7, #23]
 800f722:	79fb      	ldrb	r3, [r7, #7]
 800f724:	429a      	cmp	r2, r3
 800f726:	d3d3      	bcc.n	800f6d0 <IntToUnicode+0x18>
  }
}
 800f728:	bf00      	nop
 800f72a:	bf00      	nop
 800f72c:	371c      	adds	r7, #28
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
	...

0800f738 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b08a      	sub	sp, #40	; 0x28
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f740:	f107 0314 	add.w	r3, r7, #20
 800f744:	2200      	movs	r2, #0
 800f746:	601a      	str	r2, [r3, #0]
 800f748:	605a      	str	r2, [r3, #4]
 800f74a:	609a      	str	r2, [r3, #8]
 800f74c:	60da      	str	r2, [r3, #12]
 800f74e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f758:	d13a      	bne.n	800f7d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f75a:	2300      	movs	r3, #0
 800f75c:	613b      	str	r3, [r7, #16]
 800f75e:	4b1e      	ldr	r3, [pc, #120]	; (800f7d8 <HAL_PCD_MspInit+0xa0>)
 800f760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f762:	4a1d      	ldr	r2, [pc, #116]	; (800f7d8 <HAL_PCD_MspInit+0xa0>)
 800f764:	f043 0301 	orr.w	r3, r3, #1
 800f768:	6313      	str	r3, [r2, #48]	; 0x30
 800f76a:	4b1b      	ldr	r3, [pc, #108]	; (800f7d8 <HAL_PCD_MspInit+0xa0>)
 800f76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f76e:	f003 0301 	and.w	r3, r3, #1
 800f772:	613b      	str	r3, [r7, #16]
 800f774:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f776:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f77a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f77c:	2302      	movs	r3, #2
 800f77e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f780:	2300      	movs	r3, #0
 800f782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f784:	2303      	movs	r3, #3
 800f786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f788:	230a      	movs	r3, #10
 800f78a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f78c:	f107 0314 	add.w	r3, r7, #20
 800f790:	4619      	mov	r1, r3
 800f792:	4812      	ldr	r0, [pc, #72]	; (800f7dc <HAL_PCD_MspInit+0xa4>)
 800f794:	f7f4 f91e 	bl	80039d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f798:	4b0f      	ldr	r3, [pc, #60]	; (800f7d8 <HAL_PCD_MspInit+0xa0>)
 800f79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f79c:	4a0e      	ldr	r2, [pc, #56]	; (800f7d8 <HAL_PCD_MspInit+0xa0>)
 800f79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7a2:	6353      	str	r3, [r2, #52]	; 0x34
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	60fb      	str	r3, [r7, #12]
 800f7a8:	4b0b      	ldr	r3, [pc, #44]	; (800f7d8 <HAL_PCD_MspInit+0xa0>)
 800f7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ac:	4a0a      	ldr	r2, [pc, #40]	; (800f7d8 <HAL_PCD_MspInit+0xa0>)
 800f7ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7b2:	6453      	str	r3, [r2, #68]	; 0x44
 800f7b4:	4b08      	ldr	r3, [pc, #32]	; (800f7d8 <HAL_PCD_MspInit+0xa0>)
 800f7b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7bc:	60fb      	str	r3, [r7, #12]
 800f7be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	2043      	movs	r0, #67	; 0x43
 800f7c6:	f7f4 f83c 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f7ca:	2043      	movs	r0, #67	; 0x43
 800f7cc:	f7f4 f855 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f7d0:	bf00      	nop
 800f7d2:	3728      	adds	r7, #40	; 0x28
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	40023800 	.word	0x40023800
 800f7dc:	40020000 	.word	0x40020000

0800f7e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	f7fb f970 	bl	800aadc <USBD_LL_SetupStage>
}
 800f7fc:	bf00      	nop
 800f7fe:	3708      	adds	r7, #8
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}

0800f804 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	460b      	mov	r3, r1
 800f80e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f816:	78fa      	ldrb	r2, [r7, #3]
 800f818:	6879      	ldr	r1, [r7, #4]
 800f81a:	4613      	mov	r3, r2
 800f81c:	00db      	lsls	r3, r3, #3
 800f81e:	1a9b      	subs	r3, r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	440b      	add	r3, r1
 800f824:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	78fb      	ldrb	r3, [r7, #3]
 800f82c:	4619      	mov	r1, r3
 800f82e:	f7fb f9aa 	bl	800ab86 <USBD_LL_DataOutStage>
}
 800f832:	bf00      	nop
 800f834:	3708      	adds	r7, #8
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b082      	sub	sp, #8
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
 800f842:	460b      	mov	r3, r1
 800f844:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f84c:	78fa      	ldrb	r2, [r7, #3]
 800f84e:	6879      	ldr	r1, [r7, #4]
 800f850:	4613      	mov	r3, r2
 800f852:	00db      	lsls	r3, r3, #3
 800f854:	1a9b      	subs	r3, r3, r2
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	440b      	add	r3, r1
 800f85a:	3348      	adds	r3, #72	; 0x48
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	78fb      	ldrb	r3, [r7, #3]
 800f860:	4619      	mov	r1, r3
 800f862:	f7fb f9f3 	bl	800ac4c <USBD_LL_DataInStage>
}
 800f866:	bf00      	nop
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b082      	sub	sp, #8
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fb fb07 	bl	800ae90 <USBD_LL_SOF>
}
 800f882:	bf00      	nop
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b084      	sub	sp, #16
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f892:	2301      	movs	r3, #1
 800f894:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d102      	bne.n	800f8a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	73fb      	strb	r3, [r7, #15]
 800f8a2:	e008      	b.n	800f8b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	68db      	ldr	r3, [r3, #12]
 800f8a8:	2b02      	cmp	r3, #2
 800f8aa:	d102      	bne.n	800f8b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	73fb      	strb	r3, [r7, #15]
 800f8b0:	e001      	b.n	800f8b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f8b2:	f7f2 ff2d 	bl	8002710 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8bc:	7bfa      	ldrb	r2, [r7, #15]
 800f8be:	4611      	mov	r1, r2
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7fb faa7 	bl	800ae14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fb fa53 	bl	800ad78 <USBD_LL_Reset>
}
 800f8d2:	bf00      	nop
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
	...

0800f8dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fb faa2 	bl	800ae34 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	6812      	ldr	r2, [r2, #0]
 800f8fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f902:	f043 0301 	orr.w	r3, r3, #1
 800f906:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a1b      	ldr	r3, [r3, #32]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d005      	beq.n	800f91c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f910:	4b04      	ldr	r3, [pc, #16]	; (800f924 <HAL_PCD_SuspendCallback+0x48>)
 800f912:	691b      	ldr	r3, [r3, #16]
 800f914:	4a03      	ldr	r2, [pc, #12]	; (800f924 <HAL_PCD_SuspendCallback+0x48>)
 800f916:	f043 0306 	orr.w	r3, r3, #6
 800f91a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f91c:	bf00      	nop
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	e000ed00 	.word	0xe000ed00

0800f928 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f936:	4618      	mov	r0, r3
 800f938:	f7fb fa92 	bl	800ae60 <USBD_LL_Resume>
}
 800f93c:	bf00      	nop
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	460b      	mov	r3, r1
 800f94e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f956:	78fa      	ldrb	r2, [r7, #3]
 800f958:	4611      	mov	r1, r2
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7fb fae0 	bl	800af20 <USBD_LL_IsoOUTIncomplete>
}
 800f960:	bf00      	nop
 800f962:	3708      	adds	r7, #8
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	460b      	mov	r3, r1
 800f972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f97a:	78fa      	ldrb	r2, [r7, #3]
 800f97c:	4611      	mov	r1, r2
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fb faa8 	bl	800aed4 <USBD_LL_IsoINIncomplete>
}
 800f984:	bf00      	nop
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fb fae6 	bl	800af6c <USBD_LL_DevConnected>
}
 800f9a0:	bf00      	nop
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fb fae3 	bl	800af82 <USBD_LL_DevDisconnected>
}
 800f9bc:	bf00      	nop
 800f9be:	3708      	adds	r7, #8
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d13c      	bne.n	800fa4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f9d4:	4a20      	ldr	r2, [pc, #128]	; (800fa58 <USBD_LL_Init+0x94>)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a1e      	ldr	r2, [pc, #120]	; (800fa58 <USBD_LL_Init+0x94>)
 800f9e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f9e4:	4b1c      	ldr	r3, [pc, #112]	; (800fa58 <USBD_LL_Init+0x94>)
 800f9e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f9ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f9ec:	4b1a      	ldr	r3, [pc, #104]	; (800fa58 <USBD_LL_Init+0x94>)
 800f9ee:	2204      	movs	r2, #4
 800f9f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f9f2:	4b19      	ldr	r3, [pc, #100]	; (800fa58 <USBD_LL_Init+0x94>)
 800f9f4:	2202      	movs	r2, #2
 800f9f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f9f8:	4b17      	ldr	r3, [pc, #92]	; (800fa58 <USBD_LL_Init+0x94>)
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f9fe:	4b16      	ldr	r3, [pc, #88]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa00:	2202      	movs	r2, #2
 800fa02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fa04:	4b14      	ldr	r3, [pc, #80]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fa0a:	4b13      	ldr	r3, [pc, #76]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fa10:	4b11      	ldr	r3, [pc, #68]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fa16:	4b10      	ldr	r3, [pc, #64]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa18:	2200      	movs	r2, #0
 800fa1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fa1c:	4b0e      	ldr	r3, [pc, #56]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa1e:	2200      	movs	r2, #0
 800fa20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fa22:	480d      	ldr	r0, [pc, #52]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa24:	f7f4 fb46 	bl	80040b4 <HAL_PCD_Init>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d001      	beq.n	800fa32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fa2e:	f7f2 fe6f 	bl	8002710 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fa32:	2180      	movs	r1, #128	; 0x80
 800fa34:	4808      	ldr	r0, [pc, #32]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa36:	f7f5 fca4 	bl	8005382 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fa3a:	2240      	movs	r2, #64	; 0x40
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	4806      	ldr	r0, [pc, #24]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa40:	f7f5 fc58 	bl	80052f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fa44:	2280      	movs	r2, #128	; 0x80
 800fa46:	2101      	movs	r1, #1
 800fa48:	4803      	ldr	r0, [pc, #12]	; (800fa58 <USBD_LL_Init+0x94>)
 800fa4a:	f7f5 fc53 	bl	80052f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fa4e:	2300      	movs	r3, #0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	20006020 	.word	0x20006020

0800fa5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa64:	2300      	movs	r3, #0
 800fa66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7f4 fc3b 	bl	80042ee <HAL_PCD_Start>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa7c:	7bfb      	ldrb	r3, [r7, #15]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f000 f942 	bl	800fd08 <USBD_Get_USB_Status>
 800fa84:	4603      	mov	r3, r0
 800fa86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa88:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3710      	adds	r7, #16
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b084      	sub	sp, #16
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
 800fa9a:	4608      	mov	r0, r1
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	461a      	mov	r2, r3
 800faa0:	4603      	mov	r3, r0
 800faa2:	70fb      	strb	r3, [r7, #3]
 800faa4:	460b      	mov	r3, r1
 800faa6:	70bb      	strb	r3, [r7, #2]
 800faa8:	4613      	mov	r3, r2
 800faaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faac:	2300      	movs	r3, #0
 800faae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fab0:	2300      	movs	r3, #0
 800fab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800faba:	78bb      	ldrb	r3, [r7, #2]
 800fabc:	883a      	ldrh	r2, [r7, #0]
 800fabe:	78f9      	ldrb	r1, [r7, #3]
 800fac0:	f7f5 f81f 	bl	8004b02 <HAL_PCD_EP_Open>
 800fac4:	4603      	mov	r3, r0
 800fac6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fac8:	7bfb      	ldrb	r3, [r7, #15]
 800faca:	4618      	mov	r0, r3
 800facc:	f000 f91c 	bl	800fd08 <USBD_Get_USB_Status>
 800fad0:	4603      	mov	r3, r0
 800fad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fad4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b084      	sub	sp, #16
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	460b      	mov	r3, r1
 800fae8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faea:	2300      	movs	r3, #0
 800faec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faee:	2300      	movs	r3, #0
 800faf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800faf8:	78fa      	ldrb	r2, [r7, #3]
 800fafa:	4611      	mov	r1, r2
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7f5 f868 	bl	8004bd2 <HAL_PCD_EP_Close>
 800fb02:	4603      	mov	r3, r0
 800fb04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb06:	7bfb      	ldrb	r3, [r7, #15]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f000 f8fd 	bl	800fd08 <USBD_Get_USB_Status>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb12:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3710      	adds	r7, #16
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	460b      	mov	r3, r1
 800fb26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb36:	78fa      	ldrb	r2, [r7, #3]
 800fb38:	4611      	mov	r1, r2
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7f5 f940 	bl	8004dc0 <HAL_PCD_EP_SetStall>
 800fb40:	4603      	mov	r3, r0
 800fb42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb44:	7bfb      	ldrb	r3, [r7, #15]
 800fb46:	4618      	mov	r0, r3
 800fb48:	f000 f8de 	bl	800fd08 <USBD_Get_USB_Status>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b084      	sub	sp, #16
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	460b      	mov	r3, r1
 800fb64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb66:	2300      	movs	r3, #0
 800fb68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb74:	78fa      	ldrb	r2, [r7, #3]
 800fb76:	4611      	mov	r1, r2
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7f5 f985 	bl	8004e88 <HAL_PCD_EP_ClrStall>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb82:	7bfb      	ldrb	r3, [r7, #15]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f000 f8bf 	bl	800fd08 <USBD_Get_USB_Status>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	460b      	mov	r3, r1
 800fba2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fbaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fbac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	da0b      	bge.n	800fbcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fbb4:	78fb      	ldrb	r3, [r7, #3]
 800fbb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbba:	68f9      	ldr	r1, [r7, #12]
 800fbbc:	4613      	mov	r3, r2
 800fbbe:	00db      	lsls	r3, r3, #3
 800fbc0:	1a9b      	subs	r3, r3, r2
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	440b      	add	r3, r1
 800fbc6:	333e      	adds	r3, #62	; 0x3e
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	e00b      	b.n	800fbe4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fbcc:	78fb      	ldrb	r3, [r7, #3]
 800fbce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbd2:	68f9      	ldr	r1, [r7, #12]
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	00db      	lsls	r3, r3, #3
 800fbd8:	1a9b      	subs	r3, r3, r2
 800fbda:	009b      	lsls	r3, r3, #2
 800fbdc:	440b      	add	r3, r1
 800fbde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fbe2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3714      	adds	r7, #20
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc0a:	78fa      	ldrb	r2, [r7, #3]
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7f4 ff52 	bl	8004ab8 <HAL_PCD_SetAddress>
 800fc14:	4603      	mov	r3, r0
 800fc16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f000 f874 	bl	800fd08 <USBD_Get_USB_Status>
 800fc20:	4603      	mov	r3, r0
 800fc22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc24:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b086      	sub	sp, #24
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	60f8      	str	r0, [r7, #12]
 800fc36:	607a      	str	r2, [r7, #4]
 800fc38:	603b      	str	r3, [r7, #0]
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc42:	2300      	movs	r3, #0
 800fc44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc4c:	7af9      	ldrb	r1, [r7, #11]
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	f7f5 f86b 	bl	8004d2c <HAL_PCD_EP_Transmit>
 800fc56:	4603      	mov	r3, r0
 800fc58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc5a:	7dfb      	ldrb	r3, [r7, #23]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f000 f853 	bl	800fd08 <USBD_Get_USB_Status>
 800fc62:	4603      	mov	r3, r0
 800fc64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc66:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3718      	adds	r7, #24
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	607a      	str	r2, [r7, #4]
 800fc7a:	603b      	str	r3, [r7, #0]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc80:	2300      	movs	r3, #0
 800fc82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc84:	2300      	movs	r3, #0
 800fc86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc8e:	7af9      	ldrb	r1, [r7, #11]
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	f7f4 ffe7 	bl	8004c66 <HAL_PCD_EP_Receive>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc9c:	7dfb      	ldrb	r3, [r7, #23]
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f000 f832 	bl	800fd08 <USBD_Get_USB_Status>
 800fca4:	4603      	mov	r3, r0
 800fca6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fca8:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3718      	adds	r7, #24
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b082      	sub	sp, #8
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
 800fcba:	460b      	mov	r3, r1
 800fcbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fcc4:	78fa      	ldrb	r2, [r7, #3]
 800fcc6:	4611      	mov	r1, r2
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7f5 f817 	bl	8004cfc <HAL_PCD_EP_GetRxCount>
 800fcce:	4603      	mov	r3, r0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fce0:	4b03      	ldr	r3, [pc, #12]	; (800fcf0 <USBD_static_malloc+0x18>)
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	370c      	adds	r7, #12
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	200025cc 	.word	0x200025cc

0800fcf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]

}
 800fcfc:	bf00      	nop
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	4603      	mov	r3, r0
 800fd10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd12:	2300      	movs	r3, #0
 800fd14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fd16:	79fb      	ldrb	r3, [r7, #7]
 800fd18:	2b03      	cmp	r3, #3
 800fd1a:	d817      	bhi.n	800fd4c <USBD_Get_USB_Status+0x44>
 800fd1c:	a201      	add	r2, pc, #4	; (adr r2, 800fd24 <USBD_Get_USB_Status+0x1c>)
 800fd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd22:	bf00      	nop
 800fd24:	0800fd35 	.word	0x0800fd35
 800fd28:	0800fd3b 	.word	0x0800fd3b
 800fd2c:	0800fd41 	.word	0x0800fd41
 800fd30:	0800fd47 	.word	0x0800fd47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fd34:	2300      	movs	r3, #0
 800fd36:	73fb      	strb	r3, [r7, #15]
    break;
 800fd38:	e00b      	b.n	800fd52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fd3a:	2303      	movs	r3, #3
 800fd3c:	73fb      	strb	r3, [r7, #15]
    break;
 800fd3e:	e008      	b.n	800fd52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fd40:	2301      	movs	r3, #1
 800fd42:	73fb      	strb	r3, [r7, #15]
    break;
 800fd44:	e005      	b.n	800fd52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fd46:	2303      	movs	r3, #3
 800fd48:	73fb      	strb	r3, [r7, #15]
    break;
 800fd4a:	e002      	b.n	800fd52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fd4c:	2303      	movs	r3, #3
 800fd4e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd50:	bf00      	nop
  }
  return usb_status;
 800fd52:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3714      	adds	r7, #20
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <_ZdlPv>:
 800fd60:	f000 b874 	b.w	800fe4c <free>

0800fd64 <_ZdlPvj>:
 800fd64:	f7ff bffc 	b.w	800fd60 <_ZdlPv>

0800fd68 <__cxa_guard_acquire>:
 800fd68:	6803      	ldr	r3, [r0, #0]
 800fd6a:	07db      	lsls	r3, r3, #31
 800fd6c:	d406      	bmi.n	800fd7c <__cxa_guard_acquire+0x14>
 800fd6e:	7843      	ldrb	r3, [r0, #1]
 800fd70:	b103      	cbz	r3, 800fd74 <__cxa_guard_acquire+0xc>
 800fd72:	deff      	udf	#255	; 0xff
 800fd74:	2301      	movs	r3, #1
 800fd76:	7043      	strb	r3, [r0, #1]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	4770      	bx	lr
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	4770      	bx	lr

0800fd80 <__cxa_guard_release>:
 800fd80:	2301      	movs	r3, #1
 800fd82:	6003      	str	r3, [r0, #0]
 800fd84:	4770      	bx	lr

0800fd86 <_Znwj>:
 800fd86:	2801      	cmp	r0, #1
 800fd88:	bf38      	it	cc
 800fd8a:	2001      	movcc	r0, #1
 800fd8c:	b510      	push	{r4, lr}
 800fd8e:	4604      	mov	r4, r0
 800fd90:	4620      	mov	r0, r4
 800fd92:	f000 f853 	bl	800fe3c <malloc>
 800fd96:	b930      	cbnz	r0, 800fda6 <_Znwj+0x20>
 800fd98:	f000 f810 	bl	800fdbc <_ZSt15get_new_handlerv>
 800fd9c:	b908      	cbnz	r0, 800fda2 <_Znwj+0x1c>
 800fd9e:	f000 f815 	bl	800fdcc <abort>
 800fda2:	4780      	blx	r0
 800fda4:	e7f4      	b.n	800fd90 <_Znwj+0xa>
 800fda6:	bd10      	pop	{r4, pc}

0800fda8 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800fda8:	684b      	ldr	r3, [r1, #4]
 800fdaa:	6043      	str	r3, [r0, #4]
 800fdac:	684b      	ldr	r3, [r1, #4]
 800fdae:	6001      	str	r1, [r0, #0]
 800fdb0:	6018      	str	r0, [r3, #0]
 800fdb2:	6048      	str	r0, [r1, #4]
 800fdb4:	4770      	bx	lr

0800fdb6 <_ZSt17__throw_bad_allocv>:
 800fdb6:	b508      	push	{r3, lr}
 800fdb8:	f000 f808 	bl	800fdcc <abort>

0800fdbc <_ZSt15get_new_handlerv>:
 800fdbc:	4b02      	ldr	r3, [pc, #8]	; (800fdc8 <_ZSt15get_new_handlerv+0xc>)
 800fdbe:	6818      	ldr	r0, [r3, #0]
 800fdc0:	f3bf 8f5b 	dmb	ish
 800fdc4:	4770      	bx	lr
 800fdc6:	bf00      	nop
 800fdc8:	200027ec 	.word	0x200027ec

0800fdcc <abort>:
 800fdcc:	b508      	push	{r3, lr}
 800fdce:	2006      	movs	r0, #6
 800fdd0:	f001 f84a 	bl	8010e68 <raise>
 800fdd4:	2001      	movs	r0, #1
 800fdd6:	f7f2 ff29 	bl	8002c2c <_exit>

0800fdda <atexit>:
 800fdda:	2300      	movs	r3, #0
 800fddc:	4601      	mov	r1, r0
 800fdde:	461a      	mov	r2, r3
 800fde0:	4618      	mov	r0, r3
 800fde2:	f001 bfef 	b.w	8011dc4 <__register_exitproc>
	...

0800fde8 <__errno>:
 800fde8:	4b01      	ldr	r3, [pc, #4]	; (800fdf0 <__errno+0x8>)
 800fdea:	6818      	ldr	r0, [r3, #0]
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	20000188 	.word	0x20000188

0800fdf4 <__libc_init_array>:
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	4d0d      	ldr	r5, [pc, #52]	; (800fe2c <__libc_init_array+0x38>)
 800fdf8:	4c0d      	ldr	r4, [pc, #52]	; (800fe30 <__libc_init_array+0x3c>)
 800fdfa:	1b64      	subs	r4, r4, r5
 800fdfc:	10a4      	asrs	r4, r4, #2
 800fdfe:	2600      	movs	r6, #0
 800fe00:	42a6      	cmp	r6, r4
 800fe02:	d109      	bne.n	800fe18 <__libc_init_array+0x24>
 800fe04:	4d0b      	ldr	r5, [pc, #44]	; (800fe34 <__libc_init_array+0x40>)
 800fe06:	4c0c      	ldr	r4, [pc, #48]	; (800fe38 <__libc_init_array+0x44>)
 800fe08:	f004 fd30 	bl	801486c <_init>
 800fe0c:	1b64      	subs	r4, r4, r5
 800fe0e:	10a4      	asrs	r4, r4, #2
 800fe10:	2600      	movs	r6, #0
 800fe12:	42a6      	cmp	r6, r4
 800fe14:	d105      	bne.n	800fe22 <__libc_init_array+0x2e>
 800fe16:	bd70      	pop	{r4, r5, r6, pc}
 800fe18:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe1c:	4798      	blx	r3
 800fe1e:	3601      	adds	r6, #1
 800fe20:	e7ee      	b.n	800fe00 <__libc_init_array+0xc>
 800fe22:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe26:	4798      	blx	r3
 800fe28:	3601      	adds	r6, #1
 800fe2a:	e7f2      	b.n	800fe12 <__libc_init_array+0x1e>
 800fe2c:	08015434 	.word	0x08015434
 800fe30:	08015434 	.word	0x08015434
 800fe34:	08015434 	.word	0x08015434
 800fe38:	0801543c 	.word	0x0801543c

0800fe3c <malloc>:
 800fe3c:	4b02      	ldr	r3, [pc, #8]	; (800fe48 <malloc+0xc>)
 800fe3e:	4601      	mov	r1, r0
 800fe40:	6818      	ldr	r0, [r3, #0]
 800fe42:	f000 b871 	b.w	800ff28 <_malloc_r>
 800fe46:	bf00      	nop
 800fe48:	20000188 	.word	0x20000188

0800fe4c <free>:
 800fe4c:	4b02      	ldr	r3, [pc, #8]	; (800fe58 <free+0xc>)
 800fe4e:	4601      	mov	r1, r0
 800fe50:	6818      	ldr	r0, [r3, #0]
 800fe52:	f000 b819 	b.w	800fe88 <_free_r>
 800fe56:	bf00      	nop
 800fe58:	20000188 	.word	0x20000188

0800fe5c <memcpy>:
 800fe5c:	440a      	add	r2, r1
 800fe5e:	4291      	cmp	r1, r2
 800fe60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fe64:	d100      	bne.n	800fe68 <memcpy+0xc>
 800fe66:	4770      	bx	lr
 800fe68:	b510      	push	{r4, lr}
 800fe6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe72:	4291      	cmp	r1, r2
 800fe74:	d1f9      	bne.n	800fe6a <memcpy+0xe>
 800fe76:	bd10      	pop	{r4, pc}

0800fe78 <memset>:
 800fe78:	4402      	add	r2, r0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d100      	bne.n	800fe82 <memset+0xa>
 800fe80:	4770      	bx	lr
 800fe82:	f803 1b01 	strb.w	r1, [r3], #1
 800fe86:	e7f9      	b.n	800fe7c <memset+0x4>

0800fe88 <_free_r>:
 800fe88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe8a:	2900      	cmp	r1, #0
 800fe8c:	d048      	beq.n	800ff20 <_free_r+0x98>
 800fe8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe92:	9001      	str	r0, [sp, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f1a1 0404 	sub.w	r4, r1, #4
 800fe9a:	bfb8      	it	lt
 800fe9c:	18e4      	addlt	r4, r4, r3
 800fe9e:	f003 fc0f 	bl	80136c0 <__malloc_lock>
 800fea2:	4a20      	ldr	r2, [pc, #128]	; (800ff24 <_free_r+0x9c>)
 800fea4:	9801      	ldr	r0, [sp, #4]
 800fea6:	6813      	ldr	r3, [r2, #0]
 800fea8:	4615      	mov	r5, r2
 800feaa:	b933      	cbnz	r3, 800feba <_free_r+0x32>
 800feac:	6063      	str	r3, [r4, #4]
 800feae:	6014      	str	r4, [r2, #0]
 800feb0:	b003      	add	sp, #12
 800feb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800feb6:	f003 bc09 	b.w	80136cc <__malloc_unlock>
 800feba:	42a3      	cmp	r3, r4
 800febc:	d90b      	bls.n	800fed6 <_free_r+0x4e>
 800febe:	6821      	ldr	r1, [r4, #0]
 800fec0:	1862      	adds	r2, r4, r1
 800fec2:	4293      	cmp	r3, r2
 800fec4:	bf04      	itt	eq
 800fec6:	681a      	ldreq	r2, [r3, #0]
 800fec8:	685b      	ldreq	r3, [r3, #4]
 800feca:	6063      	str	r3, [r4, #4]
 800fecc:	bf04      	itt	eq
 800fece:	1852      	addeq	r2, r2, r1
 800fed0:	6022      	streq	r2, [r4, #0]
 800fed2:	602c      	str	r4, [r5, #0]
 800fed4:	e7ec      	b.n	800feb0 <_free_r+0x28>
 800fed6:	461a      	mov	r2, r3
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	b10b      	cbz	r3, 800fee0 <_free_r+0x58>
 800fedc:	42a3      	cmp	r3, r4
 800fede:	d9fa      	bls.n	800fed6 <_free_r+0x4e>
 800fee0:	6811      	ldr	r1, [r2, #0]
 800fee2:	1855      	adds	r5, r2, r1
 800fee4:	42a5      	cmp	r5, r4
 800fee6:	d10b      	bne.n	800ff00 <_free_r+0x78>
 800fee8:	6824      	ldr	r4, [r4, #0]
 800feea:	4421      	add	r1, r4
 800feec:	1854      	adds	r4, r2, r1
 800feee:	42a3      	cmp	r3, r4
 800fef0:	6011      	str	r1, [r2, #0]
 800fef2:	d1dd      	bne.n	800feb0 <_free_r+0x28>
 800fef4:	681c      	ldr	r4, [r3, #0]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	6053      	str	r3, [r2, #4]
 800fefa:	4421      	add	r1, r4
 800fefc:	6011      	str	r1, [r2, #0]
 800fefe:	e7d7      	b.n	800feb0 <_free_r+0x28>
 800ff00:	d902      	bls.n	800ff08 <_free_r+0x80>
 800ff02:	230c      	movs	r3, #12
 800ff04:	6003      	str	r3, [r0, #0]
 800ff06:	e7d3      	b.n	800feb0 <_free_r+0x28>
 800ff08:	6825      	ldr	r5, [r4, #0]
 800ff0a:	1961      	adds	r1, r4, r5
 800ff0c:	428b      	cmp	r3, r1
 800ff0e:	bf04      	itt	eq
 800ff10:	6819      	ldreq	r1, [r3, #0]
 800ff12:	685b      	ldreq	r3, [r3, #4]
 800ff14:	6063      	str	r3, [r4, #4]
 800ff16:	bf04      	itt	eq
 800ff18:	1949      	addeq	r1, r1, r5
 800ff1a:	6021      	streq	r1, [r4, #0]
 800ff1c:	6054      	str	r4, [r2, #4]
 800ff1e:	e7c7      	b.n	800feb0 <_free_r+0x28>
 800ff20:	b003      	add	sp, #12
 800ff22:	bd30      	pop	{r4, r5, pc}
 800ff24:	200027f0 	.word	0x200027f0

0800ff28 <_malloc_r>:
 800ff28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff2a:	1ccd      	adds	r5, r1, #3
 800ff2c:	f025 0503 	bic.w	r5, r5, #3
 800ff30:	3508      	adds	r5, #8
 800ff32:	2d0c      	cmp	r5, #12
 800ff34:	bf38      	it	cc
 800ff36:	250c      	movcc	r5, #12
 800ff38:	2d00      	cmp	r5, #0
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	db01      	blt.n	800ff42 <_malloc_r+0x1a>
 800ff3e:	42a9      	cmp	r1, r5
 800ff40:	d903      	bls.n	800ff4a <_malloc_r+0x22>
 800ff42:	230c      	movs	r3, #12
 800ff44:	6033      	str	r3, [r6, #0]
 800ff46:	2000      	movs	r0, #0
 800ff48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff4a:	f003 fbb9 	bl	80136c0 <__malloc_lock>
 800ff4e:	4921      	ldr	r1, [pc, #132]	; (800ffd4 <_malloc_r+0xac>)
 800ff50:	680a      	ldr	r2, [r1, #0]
 800ff52:	4614      	mov	r4, r2
 800ff54:	b99c      	cbnz	r4, 800ff7e <_malloc_r+0x56>
 800ff56:	4f20      	ldr	r7, [pc, #128]	; (800ffd8 <_malloc_r+0xb0>)
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	b923      	cbnz	r3, 800ff66 <_malloc_r+0x3e>
 800ff5c:	4621      	mov	r1, r4
 800ff5e:	4630      	mov	r0, r6
 800ff60:	f000 ff44 	bl	8010dec <_sbrk_r>
 800ff64:	6038      	str	r0, [r7, #0]
 800ff66:	4629      	mov	r1, r5
 800ff68:	4630      	mov	r0, r6
 800ff6a:	f000 ff3f 	bl	8010dec <_sbrk_r>
 800ff6e:	1c43      	adds	r3, r0, #1
 800ff70:	d123      	bne.n	800ffba <_malloc_r+0x92>
 800ff72:	230c      	movs	r3, #12
 800ff74:	6033      	str	r3, [r6, #0]
 800ff76:	4630      	mov	r0, r6
 800ff78:	f003 fba8 	bl	80136cc <__malloc_unlock>
 800ff7c:	e7e3      	b.n	800ff46 <_malloc_r+0x1e>
 800ff7e:	6823      	ldr	r3, [r4, #0]
 800ff80:	1b5b      	subs	r3, r3, r5
 800ff82:	d417      	bmi.n	800ffb4 <_malloc_r+0x8c>
 800ff84:	2b0b      	cmp	r3, #11
 800ff86:	d903      	bls.n	800ff90 <_malloc_r+0x68>
 800ff88:	6023      	str	r3, [r4, #0]
 800ff8a:	441c      	add	r4, r3
 800ff8c:	6025      	str	r5, [r4, #0]
 800ff8e:	e004      	b.n	800ff9a <_malloc_r+0x72>
 800ff90:	6863      	ldr	r3, [r4, #4]
 800ff92:	42a2      	cmp	r2, r4
 800ff94:	bf0c      	ite	eq
 800ff96:	600b      	streq	r3, [r1, #0]
 800ff98:	6053      	strne	r3, [r2, #4]
 800ff9a:	4630      	mov	r0, r6
 800ff9c:	f003 fb96 	bl	80136cc <__malloc_unlock>
 800ffa0:	f104 000b 	add.w	r0, r4, #11
 800ffa4:	1d23      	adds	r3, r4, #4
 800ffa6:	f020 0007 	bic.w	r0, r0, #7
 800ffaa:	1ac2      	subs	r2, r0, r3
 800ffac:	d0cc      	beq.n	800ff48 <_malloc_r+0x20>
 800ffae:	1a1b      	subs	r3, r3, r0
 800ffb0:	50a3      	str	r3, [r4, r2]
 800ffb2:	e7c9      	b.n	800ff48 <_malloc_r+0x20>
 800ffb4:	4622      	mov	r2, r4
 800ffb6:	6864      	ldr	r4, [r4, #4]
 800ffb8:	e7cc      	b.n	800ff54 <_malloc_r+0x2c>
 800ffba:	1cc4      	adds	r4, r0, #3
 800ffbc:	f024 0403 	bic.w	r4, r4, #3
 800ffc0:	42a0      	cmp	r0, r4
 800ffc2:	d0e3      	beq.n	800ff8c <_malloc_r+0x64>
 800ffc4:	1a21      	subs	r1, r4, r0
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	f000 ff10 	bl	8010dec <_sbrk_r>
 800ffcc:	3001      	adds	r0, #1
 800ffce:	d1dd      	bne.n	800ff8c <_malloc_r+0x64>
 800ffd0:	e7cf      	b.n	800ff72 <_malloc_r+0x4a>
 800ffd2:	bf00      	nop
 800ffd4:	200027f0 	.word	0x200027f0
 800ffd8:	200027f4 	.word	0x200027f4

0800ffdc <__cvt>:
 800ffdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe0:	ec55 4b10 	vmov	r4, r5, d0
 800ffe4:	2d00      	cmp	r5, #0
 800ffe6:	460e      	mov	r6, r1
 800ffe8:	4619      	mov	r1, r3
 800ffea:	462b      	mov	r3, r5
 800ffec:	bfbb      	ittet	lt
 800ffee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fff2:	461d      	movlt	r5, r3
 800fff4:	2300      	movge	r3, #0
 800fff6:	232d      	movlt	r3, #45	; 0x2d
 800fff8:	700b      	strb	r3, [r1, #0]
 800fffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fffc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010000:	4691      	mov	r9, r2
 8010002:	f023 0820 	bic.w	r8, r3, #32
 8010006:	bfbc      	itt	lt
 8010008:	4622      	movlt	r2, r4
 801000a:	4614      	movlt	r4, r2
 801000c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010010:	d005      	beq.n	801001e <__cvt+0x42>
 8010012:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010016:	d100      	bne.n	801001a <__cvt+0x3e>
 8010018:	3601      	adds	r6, #1
 801001a:	2102      	movs	r1, #2
 801001c:	e000      	b.n	8010020 <__cvt+0x44>
 801001e:	2103      	movs	r1, #3
 8010020:	ab03      	add	r3, sp, #12
 8010022:	9301      	str	r3, [sp, #4]
 8010024:	ab02      	add	r3, sp, #8
 8010026:	9300      	str	r3, [sp, #0]
 8010028:	ec45 4b10 	vmov	d0, r4, r5
 801002c:	4653      	mov	r3, sl
 801002e:	4632      	mov	r2, r6
 8010030:	f001 ffb6 	bl	8011fa0 <_dtoa_r>
 8010034:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010038:	4607      	mov	r7, r0
 801003a:	d102      	bne.n	8010042 <__cvt+0x66>
 801003c:	f019 0f01 	tst.w	r9, #1
 8010040:	d022      	beq.n	8010088 <__cvt+0xac>
 8010042:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010046:	eb07 0906 	add.w	r9, r7, r6
 801004a:	d110      	bne.n	801006e <__cvt+0x92>
 801004c:	783b      	ldrb	r3, [r7, #0]
 801004e:	2b30      	cmp	r3, #48	; 0x30
 8010050:	d10a      	bne.n	8010068 <__cvt+0x8c>
 8010052:	2200      	movs	r2, #0
 8010054:	2300      	movs	r3, #0
 8010056:	4620      	mov	r0, r4
 8010058:	4629      	mov	r1, r5
 801005a:	f7f0 fd45 	bl	8000ae8 <__aeabi_dcmpeq>
 801005e:	b918      	cbnz	r0, 8010068 <__cvt+0x8c>
 8010060:	f1c6 0601 	rsb	r6, r6, #1
 8010064:	f8ca 6000 	str.w	r6, [sl]
 8010068:	f8da 3000 	ldr.w	r3, [sl]
 801006c:	4499      	add	r9, r3
 801006e:	2200      	movs	r2, #0
 8010070:	2300      	movs	r3, #0
 8010072:	4620      	mov	r0, r4
 8010074:	4629      	mov	r1, r5
 8010076:	f7f0 fd37 	bl	8000ae8 <__aeabi_dcmpeq>
 801007a:	b108      	cbz	r0, 8010080 <__cvt+0xa4>
 801007c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010080:	2230      	movs	r2, #48	; 0x30
 8010082:	9b03      	ldr	r3, [sp, #12]
 8010084:	454b      	cmp	r3, r9
 8010086:	d307      	bcc.n	8010098 <__cvt+0xbc>
 8010088:	9b03      	ldr	r3, [sp, #12]
 801008a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801008c:	1bdb      	subs	r3, r3, r7
 801008e:	4638      	mov	r0, r7
 8010090:	6013      	str	r3, [r2, #0]
 8010092:	b004      	add	sp, #16
 8010094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010098:	1c59      	adds	r1, r3, #1
 801009a:	9103      	str	r1, [sp, #12]
 801009c:	701a      	strb	r2, [r3, #0]
 801009e:	e7f0      	b.n	8010082 <__cvt+0xa6>

080100a0 <__exponent>:
 80100a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100a2:	4603      	mov	r3, r0
 80100a4:	2900      	cmp	r1, #0
 80100a6:	bfb8      	it	lt
 80100a8:	4249      	neglt	r1, r1
 80100aa:	f803 2b02 	strb.w	r2, [r3], #2
 80100ae:	bfb4      	ite	lt
 80100b0:	222d      	movlt	r2, #45	; 0x2d
 80100b2:	222b      	movge	r2, #43	; 0x2b
 80100b4:	2909      	cmp	r1, #9
 80100b6:	7042      	strb	r2, [r0, #1]
 80100b8:	dd2a      	ble.n	8010110 <__exponent+0x70>
 80100ba:	f10d 0407 	add.w	r4, sp, #7
 80100be:	46a4      	mov	ip, r4
 80100c0:	270a      	movs	r7, #10
 80100c2:	46a6      	mov	lr, r4
 80100c4:	460a      	mov	r2, r1
 80100c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80100ca:	fb07 1516 	mls	r5, r7, r6, r1
 80100ce:	3530      	adds	r5, #48	; 0x30
 80100d0:	2a63      	cmp	r2, #99	; 0x63
 80100d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80100d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80100da:	4631      	mov	r1, r6
 80100dc:	dcf1      	bgt.n	80100c2 <__exponent+0x22>
 80100de:	3130      	adds	r1, #48	; 0x30
 80100e0:	f1ae 0502 	sub.w	r5, lr, #2
 80100e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80100e8:	1c44      	adds	r4, r0, #1
 80100ea:	4629      	mov	r1, r5
 80100ec:	4561      	cmp	r1, ip
 80100ee:	d30a      	bcc.n	8010106 <__exponent+0x66>
 80100f0:	f10d 0209 	add.w	r2, sp, #9
 80100f4:	eba2 020e 	sub.w	r2, r2, lr
 80100f8:	4565      	cmp	r5, ip
 80100fa:	bf88      	it	hi
 80100fc:	2200      	movhi	r2, #0
 80100fe:	4413      	add	r3, r2
 8010100:	1a18      	subs	r0, r3, r0
 8010102:	b003      	add	sp, #12
 8010104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010106:	f811 2b01 	ldrb.w	r2, [r1], #1
 801010a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801010e:	e7ed      	b.n	80100ec <__exponent+0x4c>
 8010110:	2330      	movs	r3, #48	; 0x30
 8010112:	3130      	adds	r1, #48	; 0x30
 8010114:	7083      	strb	r3, [r0, #2]
 8010116:	70c1      	strb	r1, [r0, #3]
 8010118:	1d03      	adds	r3, r0, #4
 801011a:	e7f1      	b.n	8010100 <__exponent+0x60>

0801011c <_printf_float>:
 801011c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010120:	ed2d 8b02 	vpush	{d8}
 8010124:	b08d      	sub	sp, #52	; 0x34
 8010126:	460c      	mov	r4, r1
 8010128:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801012c:	4616      	mov	r6, r2
 801012e:	461f      	mov	r7, r3
 8010130:	4605      	mov	r5, r0
 8010132:	f003 fa47 	bl	80135c4 <_localeconv_r>
 8010136:	f8d0 a000 	ldr.w	sl, [r0]
 801013a:	4650      	mov	r0, sl
 801013c:	f7f0 f856 	bl	80001ec <strlen>
 8010140:	2300      	movs	r3, #0
 8010142:	930a      	str	r3, [sp, #40]	; 0x28
 8010144:	6823      	ldr	r3, [r4, #0]
 8010146:	9305      	str	r3, [sp, #20]
 8010148:	f8d8 3000 	ldr.w	r3, [r8]
 801014c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010150:	3307      	adds	r3, #7
 8010152:	f023 0307 	bic.w	r3, r3, #7
 8010156:	f103 0208 	add.w	r2, r3, #8
 801015a:	f8c8 2000 	str.w	r2, [r8]
 801015e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010162:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010166:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801016a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801016e:	9307      	str	r3, [sp, #28]
 8010170:	f8cd 8018 	str.w	r8, [sp, #24]
 8010174:	ee08 0a10 	vmov	s16, r0
 8010178:	4b9f      	ldr	r3, [pc, #636]	; (80103f8 <_printf_float+0x2dc>)
 801017a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801017e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010182:	f7f0 fce3 	bl	8000b4c <__aeabi_dcmpun>
 8010186:	bb88      	cbnz	r0, 80101ec <_printf_float+0xd0>
 8010188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801018c:	4b9a      	ldr	r3, [pc, #616]	; (80103f8 <_printf_float+0x2dc>)
 801018e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010192:	f7f0 fcbd 	bl	8000b10 <__aeabi_dcmple>
 8010196:	bb48      	cbnz	r0, 80101ec <_printf_float+0xd0>
 8010198:	2200      	movs	r2, #0
 801019a:	2300      	movs	r3, #0
 801019c:	4640      	mov	r0, r8
 801019e:	4649      	mov	r1, r9
 80101a0:	f7f0 fcac 	bl	8000afc <__aeabi_dcmplt>
 80101a4:	b110      	cbz	r0, 80101ac <_printf_float+0x90>
 80101a6:	232d      	movs	r3, #45	; 0x2d
 80101a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101ac:	4b93      	ldr	r3, [pc, #588]	; (80103fc <_printf_float+0x2e0>)
 80101ae:	4894      	ldr	r0, [pc, #592]	; (8010400 <_printf_float+0x2e4>)
 80101b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80101b4:	bf94      	ite	ls
 80101b6:	4698      	movls	r8, r3
 80101b8:	4680      	movhi	r8, r0
 80101ba:	2303      	movs	r3, #3
 80101bc:	6123      	str	r3, [r4, #16]
 80101be:	9b05      	ldr	r3, [sp, #20]
 80101c0:	f023 0204 	bic.w	r2, r3, #4
 80101c4:	6022      	str	r2, [r4, #0]
 80101c6:	f04f 0900 	mov.w	r9, #0
 80101ca:	9700      	str	r7, [sp, #0]
 80101cc:	4633      	mov	r3, r6
 80101ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80101d0:	4621      	mov	r1, r4
 80101d2:	4628      	mov	r0, r5
 80101d4:	f000 f9d8 	bl	8010588 <_printf_common>
 80101d8:	3001      	adds	r0, #1
 80101da:	f040 8090 	bne.w	80102fe <_printf_float+0x1e2>
 80101de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101e2:	b00d      	add	sp, #52	; 0x34
 80101e4:	ecbd 8b02 	vpop	{d8}
 80101e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ec:	4642      	mov	r2, r8
 80101ee:	464b      	mov	r3, r9
 80101f0:	4640      	mov	r0, r8
 80101f2:	4649      	mov	r1, r9
 80101f4:	f7f0 fcaa 	bl	8000b4c <__aeabi_dcmpun>
 80101f8:	b140      	cbz	r0, 801020c <_printf_float+0xf0>
 80101fa:	464b      	mov	r3, r9
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	bfbc      	itt	lt
 8010200:	232d      	movlt	r3, #45	; 0x2d
 8010202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010206:	487f      	ldr	r0, [pc, #508]	; (8010404 <_printf_float+0x2e8>)
 8010208:	4b7f      	ldr	r3, [pc, #508]	; (8010408 <_printf_float+0x2ec>)
 801020a:	e7d1      	b.n	80101b0 <_printf_float+0x94>
 801020c:	6863      	ldr	r3, [r4, #4]
 801020e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010212:	9206      	str	r2, [sp, #24]
 8010214:	1c5a      	adds	r2, r3, #1
 8010216:	d13f      	bne.n	8010298 <_printf_float+0x17c>
 8010218:	2306      	movs	r3, #6
 801021a:	6063      	str	r3, [r4, #4]
 801021c:	9b05      	ldr	r3, [sp, #20]
 801021e:	6861      	ldr	r1, [r4, #4]
 8010220:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010224:	2300      	movs	r3, #0
 8010226:	9303      	str	r3, [sp, #12]
 8010228:	ab0a      	add	r3, sp, #40	; 0x28
 801022a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801022e:	ab09      	add	r3, sp, #36	; 0x24
 8010230:	ec49 8b10 	vmov	d0, r8, r9
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	6022      	str	r2, [r4, #0]
 8010238:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801023c:	4628      	mov	r0, r5
 801023e:	f7ff fecd 	bl	800ffdc <__cvt>
 8010242:	9b06      	ldr	r3, [sp, #24]
 8010244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010246:	2b47      	cmp	r3, #71	; 0x47
 8010248:	4680      	mov	r8, r0
 801024a:	d108      	bne.n	801025e <_printf_float+0x142>
 801024c:	1cc8      	adds	r0, r1, #3
 801024e:	db02      	blt.n	8010256 <_printf_float+0x13a>
 8010250:	6863      	ldr	r3, [r4, #4]
 8010252:	4299      	cmp	r1, r3
 8010254:	dd41      	ble.n	80102da <_printf_float+0x1be>
 8010256:	f1ab 0b02 	sub.w	fp, fp, #2
 801025a:	fa5f fb8b 	uxtb.w	fp, fp
 801025e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010262:	d820      	bhi.n	80102a6 <_printf_float+0x18a>
 8010264:	3901      	subs	r1, #1
 8010266:	465a      	mov	r2, fp
 8010268:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801026c:	9109      	str	r1, [sp, #36]	; 0x24
 801026e:	f7ff ff17 	bl	80100a0 <__exponent>
 8010272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010274:	1813      	adds	r3, r2, r0
 8010276:	2a01      	cmp	r2, #1
 8010278:	4681      	mov	r9, r0
 801027a:	6123      	str	r3, [r4, #16]
 801027c:	dc02      	bgt.n	8010284 <_printf_float+0x168>
 801027e:	6822      	ldr	r2, [r4, #0]
 8010280:	07d2      	lsls	r2, r2, #31
 8010282:	d501      	bpl.n	8010288 <_printf_float+0x16c>
 8010284:	3301      	adds	r3, #1
 8010286:	6123      	str	r3, [r4, #16]
 8010288:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801028c:	2b00      	cmp	r3, #0
 801028e:	d09c      	beq.n	80101ca <_printf_float+0xae>
 8010290:	232d      	movs	r3, #45	; 0x2d
 8010292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010296:	e798      	b.n	80101ca <_printf_float+0xae>
 8010298:	9a06      	ldr	r2, [sp, #24]
 801029a:	2a47      	cmp	r2, #71	; 0x47
 801029c:	d1be      	bne.n	801021c <_printf_float+0x100>
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1bc      	bne.n	801021c <_printf_float+0x100>
 80102a2:	2301      	movs	r3, #1
 80102a4:	e7b9      	b.n	801021a <_printf_float+0xfe>
 80102a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80102aa:	d118      	bne.n	80102de <_printf_float+0x1c2>
 80102ac:	2900      	cmp	r1, #0
 80102ae:	6863      	ldr	r3, [r4, #4]
 80102b0:	dd0b      	ble.n	80102ca <_printf_float+0x1ae>
 80102b2:	6121      	str	r1, [r4, #16]
 80102b4:	b913      	cbnz	r3, 80102bc <_printf_float+0x1a0>
 80102b6:	6822      	ldr	r2, [r4, #0]
 80102b8:	07d0      	lsls	r0, r2, #31
 80102ba:	d502      	bpl.n	80102c2 <_printf_float+0x1a6>
 80102bc:	3301      	adds	r3, #1
 80102be:	440b      	add	r3, r1
 80102c0:	6123      	str	r3, [r4, #16]
 80102c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80102c4:	f04f 0900 	mov.w	r9, #0
 80102c8:	e7de      	b.n	8010288 <_printf_float+0x16c>
 80102ca:	b913      	cbnz	r3, 80102d2 <_printf_float+0x1b6>
 80102cc:	6822      	ldr	r2, [r4, #0]
 80102ce:	07d2      	lsls	r2, r2, #31
 80102d0:	d501      	bpl.n	80102d6 <_printf_float+0x1ba>
 80102d2:	3302      	adds	r3, #2
 80102d4:	e7f4      	b.n	80102c0 <_printf_float+0x1a4>
 80102d6:	2301      	movs	r3, #1
 80102d8:	e7f2      	b.n	80102c0 <_printf_float+0x1a4>
 80102da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80102de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102e0:	4299      	cmp	r1, r3
 80102e2:	db05      	blt.n	80102f0 <_printf_float+0x1d4>
 80102e4:	6823      	ldr	r3, [r4, #0]
 80102e6:	6121      	str	r1, [r4, #16]
 80102e8:	07d8      	lsls	r0, r3, #31
 80102ea:	d5ea      	bpl.n	80102c2 <_printf_float+0x1a6>
 80102ec:	1c4b      	adds	r3, r1, #1
 80102ee:	e7e7      	b.n	80102c0 <_printf_float+0x1a4>
 80102f0:	2900      	cmp	r1, #0
 80102f2:	bfd4      	ite	le
 80102f4:	f1c1 0202 	rsble	r2, r1, #2
 80102f8:	2201      	movgt	r2, #1
 80102fa:	4413      	add	r3, r2
 80102fc:	e7e0      	b.n	80102c0 <_printf_float+0x1a4>
 80102fe:	6823      	ldr	r3, [r4, #0]
 8010300:	055a      	lsls	r2, r3, #21
 8010302:	d407      	bmi.n	8010314 <_printf_float+0x1f8>
 8010304:	6923      	ldr	r3, [r4, #16]
 8010306:	4642      	mov	r2, r8
 8010308:	4631      	mov	r1, r6
 801030a:	4628      	mov	r0, r5
 801030c:	47b8      	blx	r7
 801030e:	3001      	adds	r0, #1
 8010310:	d12c      	bne.n	801036c <_printf_float+0x250>
 8010312:	e764      	b.n	80101de <_printf_float+0xc2>
 8010314:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010318:	f240 80e0 	bls.w	80104dc <_printf_float+0x3c0>
 801031c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010320:	2200      	movs	r2, #0
 8010322:	2300      	movs	r3, #0
 8010324:	f7f0 fbe0 	bl	8000ae8 <__aeabi_dcmpeq>
 8010328:	2800      	cmp	r0, #0
 801032a:	d034      	beq.n	8010396 <_printf_float+0x27a>
 801032c:	4a37      	ldr	r2, [pc, #220]	; (801040c <_printf_float+0x2f0>)
 801032e:	2301      	movs	r3, #1
 8010330:	4631      	mov	r1, r6
 8010332:	4628      	mov	r0, r5
 8010334:	47b8      	blx	r7
 8010336:	3001      	adds	r0, #1
 8010338:	f43f af51 	beq.w	80101de <_printf_float+0xc2>
 801033c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010340:	429a      	cmp	r2, r3
 8010342:	db02      	blt.n	801034a <_printf_float+0x22e>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	07d8      	lsls	r0, r3, #31
 8010348:	d510      	bpl.n	801036c <_printf_float+0x250>
 801034a:	ee18 3a10 	vmov	r3, s16
 801034e:	4652      	mov	r2, sl
 8010350:	4631      	mov	r1, r6
 8010352:	4628      	mov	r0, r5
 8010354:	47b8      	blx	r7
 8010356:	3001      	adds	r0, #1
 8010358:	f43f af41 	beq.w	80101de <_printf_float+0xc2>
 801035c:	f04f 0800 	mov.w	r8, #0
 8010360:	f104 091a 	add.w	r9, r4, #26
 8010364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010366:	3b01      	subs	r3, #1
 8010368:	4543      	cmp	r3, r8
 801036a:	dc09      	bgt.n	8010380 <_printf_float+0x264>
 801036c:	6823      	ldr	r3, [r4, #0]
 801036e:	079b      	lsls	r3, r3, #30
 8010370:	f100 8105 	bmi.w	801057e <_printf_float+0x462>
 8010374:	68e0      	ldr	r0, [r4, #12]
 8010376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010378:	4298      	cmp	r0, r3
 801037a:	bfb8      	it	lt
 801037c:	4618      	movlt	r0, r3
 801037e:	e730      	b.n	80101e2 <_printf_float+0xc6>
 8010380:	2301      	movs	r3, #1
 8010382:	464a      	mov	r2, r9
 8010384:	4631      	mov	r1, r6
 8010386:	4628      	mov	r0, r5
 8010388:	47b8      	blx	r7
 801038a:	3001      	adds	r0, #1
 801038c:	f43f af27 	beq.w	80101de <_printf_float+0xc2>
 8010390:	f108 0801 	add.w	r8, r8, #1
 8010394:	e7e6      	b.n	8010364 <_printf_float+0x248>
 8010396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010398:	2b00      	cmp	r3, #0
 801039a:	dc39      	bgt.n	8010410 <_printf_float+0x2f4>
 801039c:	4a1b      	ldr	r2, [pc, #108]	; (801040c <_printf_float+0x2f0>)
 801039e:	2301      	movs	r3, #1
 80103a0:	4631      	mov	r1, r6
 80103a2:	4628      	mov	r0, r5
 80103a4:	47b8      	blx	r7
 80103a6:	3001      	adds	r0, #1
 80103a8:	f43f af19 	beq.w	80101de <_printf_float+0xc2>
 80103ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103b0:	4313      	orrs	r3, r2
 80103b2:	d102      	bne.n	80103ba <_printf_float+0x29e>
 80103b4:	6823      	ldr	r3, [r4, #0]
 80103b6:	07d9      	lsls	r1, r3, #31
 80103b8:	d5d8      	bpl.n	801036c <_printf_float+0x250>
 80103ba:	ee18 3a10 	vmov	r3, s16
 80103be:	4652      	mov	r2, sl
 80103c0:	4631      	mov	r1, r6
 80103c2:	4628      	mov	r0, r5
 80103c4:	47b8      	blx	r7
 80103c6:	3001      	adds	r0, #1
 80103c8:	f43f af09 	beq.w	80101de <_printf_float+0xc2>
 80103cc:	f04f 0900 	mov.w	r9, #0
 80103d0:	f104 0a1a 	add.w	sl, r4, #26
 80103d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103d6:	425b      	negs	r3, r3
 80103d8:	454b      	cmp	r3, r9
 80103da:	dc01      	bgt.n	80103e0 <_printf_float+0x2c4>
 80103dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103de:	e792      	b.n	8010306 <_printf_float+0x1ea>
 80103e0:	2301      	movs	r3, #1
 80103e2:	4652      	mov	r2, sl
 80103e4:	4631      	mov	r1, r6
 80103e6:	4628      	mov	r0, r5
 80103e8:	47b8      	blx	r7
 80103ea:	3001      	adds	r0, #1
 80103ec:	f43f aef7 	beq.w	80101de <_printf_float+0xc2>
 80103f0:	f109 0901 	add.w	r9, r9, #1
 80103f4:	e7ee      	b.n	80103d4 <_printf_float+0x2b8>
 80103f6:	bf00      	nop
 80103f8:	7fefffff 	.word	0x7fefffff
 80103fc:	08014f78 	.word	0x08014f78
 8010400:	08014f7c 	.word	0x08014f7c
 8010404:	08014f84 	.word	0x08014f84
 8010408:	08014f80 	.word	0x08014f80
 801040c:	08014f88 	.word	0x08014f88
 8010410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010414:	429a      	cmp	r2, r3
 8010416:	bfa8      	it	ge
 8010418:	461a      	movge	r2, r3
 801041a:	2a00      	cmp	r2, #0
 801041c:	4691      	mov	r9, r2
 801041e:	dc37      	bgt.n	8010490 <_printf_float+0x374>
 8010420:	f04f 0b00 	mov.w	fp, #0
 8010424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010428:	f104 021a 	add.w	r2, r4, #26
 801042c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801042e:	9305      	str	r3, [sp, #20]
 8010430:	eba3 0309 	sub.w	r3, r3, r9
 8010434:	455b      	cmp	r3, fp
 8010436:	dc33      	bgt.n	80104a0 <_printf_float+0x384>
 8010438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801043c:	429a      	cmp	r2, r3
 801043e:	db3b      	blt.n	80104b8 <_printf_float+0x39c>
 8010440:	6823      	ldr	r3, [r4, #0]
 8010442:	07da      	lsls	r2, r3, #31
 8010444:	d438      	bmi.n	80104b8 <_printf_float+0x39c>
 8010446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010448:	9b05      	ldr	r3, [sp, #20]
 801044a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	eba2 0901 	sub.w	r9, r2, r1
 8010452:	4599      	cmp	r9, r3
 8010454:	bfa8      	it	ge
 8010456:	4699      	movge	r9, r3
 8010458:	f1b9 0f00 	cmp.w	r9, #0
 801045c:	dc35      	bgt.n	80104ca <_printf_float+0x3ae>
 801045e:	f04f 0800 	mov.w	r8, #0
 8010462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010466:	f104 0a1a 	add.w	sl, r4, #26
 801046a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801046e:	1a9b      	subs	r3, r3, r2
 8010470:	eba3 0309 	sub.w	r3, r3, r9
 8010474:	4543      	cmp	r3, r8
 8010476:	f77f af79 	ble.w	801036c <_printf_float+0x250>
 801047a:	2301      	movs	r3, #1
 801047c:	4652      	mov	r2, sl
 801047e:	4631      	mov	r1, r6
 8010480:	4628      	mov	r0, r5
 8010482:	47b8      	blx	r7
 8010484:	3001      	adds	r0, #1
 8010486:	f43f aeaa 	beq.w	80101de <_printf_float+0xc2>
 801048a:	f108 0801 	add.w	r8, r8, #1
 801048e:	e7ec      	b.n	801046a <_printf_float+0x34e>
 8010490:	4613      	mov	r3, r2
 8010492:	4631      	mov	r1, r6
 8010494:	4642      	mov	r2, r8
 8010496:	4628      	mov	r0, r5
 8010498:	47b8      	blx	r7
 801049a:	3001      	adds	r0, #1
 801049c:	d1c0      	bne.n	8010420 <_printf_float+0x304>
 801049e:	e69e      	b.n	80101de <_printf_float+0xc2>
 80104a0:	2301      	movs	r3, #1
 80104a2:	4631      	mov	r1, r6
 80104a4:	4628      	mov	r0, r5
 80104a6:	9205      	str	r2, [sp, #20]
 80104a8:	47b8      	blx	r7
 80104aa:	3001      	adds	r0, #1
 80104ac:	f43f ae97 	beq.w	80101de <_printf_float+0xc2>
 80104b0:	9a05      	ldr	r2, [sp, #20]
 80104b2:	f10b 0b01 	add.w	fp, fp, #1
 80104b6:	e7b9      	b.n	801042c <_printf_float+0x310>
 80104b8:	ee18 3a10 	vmov	r3, s16
 80104bc:	4652      	mov	r2, sl
 80104be:	4631      	mov	r1, r6
 80104c0:	4628      	mov	r0, r5
 80104c2:	47b8      	blx	r7
 80104c4:	3001      	adds	r0, #1
 80104c6:	d1be      	bne.n	8010446 <_printf_float+0x32a>
 80104c8:	e689      	b.n	80101de <_printf_float+0xc2>
 80104ca:	9a05      	ldr	r2, [sp, #20]
 80104cc:	464b      	mov	r3, r9
 80104ce:	4442      	add	r2, r8
 80104d0:	4631      	mov	r1, r6
 80104d2:	4628      	mov	r0, r5
 80104d4:	47b8      	blx	r7
 80104d6:	3001      	adds	r0, #1
 80104d8:	d1c1      	bne.n	801045e <_printf_float+0x342>
 80104da:	e680      	b.n	80101de <_printf_float+0xc2>
 80104dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104de:	2a01      	cmp	r2, #1
 80104e0:	dc01      	bgt.n	80104e6 <_printf_float+0x3ca>
 80104e2:	07db      	lsls	r3, r3, #31
 80104e4:	d538      	bpl.n	8010558 <_printf_float+0x43c>
 80104e6:	2301      	movs	r3, #1
 80104e8:	4642      	mov	r2, r8
 80104ea:	4631      	mov	r1, r6
 80104ec:	4628      	mov	r0, r5
 80104ee:	47b8      	blx	r7
 80104f0:	3001      	adds	r0, #1
 80104f2:	f43f ae74 	beq.w	80101de <_printf_float+0xc2>
 80104f6:	ee18 3a10 	vmov	r3, s16
 80104fa:	4652      	mov	r2, sl
 80104fc:	4631      	mov	r1, r6
 80104fe:	4628      	mov	r0, r5
 8010500:	47b8      	blx	r7
 8010502:	3001      	adds	r0, #1
 8010504:	f43f ae6b 	beq.w	80101de <_printf_float+0xc2>
 8010508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801050c:	2200      	movs	r2, #0
 801050e:	2300      	movs	r3, #0
 8010510:	f7f0 faea 	bl	8000ae8 <__aeabi_dcmpeq>
 8010514:	b9d8      	cbnz	r0, 801054e <_printf_float+0x432>
 8010516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010518:	f108 0201 	add.w	r2, r8, #1
 801051c:	3b01      	subs	r3, #1
 801051e:	4631      	mov	r1, r6
 8010520:	4628      	mov	r0, r5
 8010522:	47b8      	blx	r7
 8010524:	3001      	adds	r0, #1
 8010526:	d10e      	bne.n	8010546 <_printf_float+0x42a>
 8010528:	e659      	b.n	80101de <_printf_float+0xc2>
 801052a:	2301      	movs	r3, #1
 801052c:	4652      	mov	r2, sl
 801052e:	4631      	mov	r1, r6
 8010530:	4628      	mov	r0, r5
 8010532:	47b8      	blx	r7
 8010534:	3001      	adds	r0, #1
 8010536:	f43f ae52 	beq.w	80101de <_printf_float+0xc2>
 801053a:	f108 0801 	add.w	r8, r8, #1
 801053e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010540:	3b01      	subs	r3, #1
 8010542:	4543      	cmp	r3, r8
 8010544:	dcf1      	bgt.n	801052a <_printf_float+0x40e>
 8010546:	464b      	mov	r3, r9
 8010548:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801054c:	e6dc      	b.n	8010308 <_printf_float+0x1ec>
 801054e:	f04f 0800 	mov.w	r8, #0
 8010552:	f104 0a1a 	add.w	sl, r4, #26
 8010556:	e7f2      	b.n	801053e <_printf_float+0x422>
 8010558:	2301      	movs	r3, #1
 801055a:	4642      	mov	r2, r8
 801055c:	e7df      	b.n	801051e <_printf_float+0x402>
 801055e:	2301      	movs	r3, #1
 8010560:	464a      	mov	r2, r9
 8010562:	4631      	mov	r1, r6
 8010564:	4628      	mov	r0, r5
 8010566:	47b8      	blx	r7
 8010568:	3001      	adds	r0, #1
 801056a:	f43f ae38 	beq.w	80101de <_printf_float+0xc2>
 801056e:	f108 0801 	add.w	r8, r8, #1
 8010572:	68e3      	ldr	r3, [r4, #12]
 8010574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010576:	1a5b      	subs	r3, r3, r1
 8010578:	4543      	cmp	r3, r8
 801057a:	dcf0      	bgt.n	801055e <_printf_float+0x442>
 801057c:	e6fa      	b.n	8010374 <_printf_float+0x258>
 801057e:	f04f 0800 	mov.w	r8, #0
 8010582:	f104 0919 	add.w	r9, r4, #25
 8010586:	e7f4      	b.n	8010572 <_printf_float+0x456>

08010588 <_printf_common>:
 8010588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801058c:	4616      	mov	r6, r2
 801058e:	4699      	mov	r9, r3
 8010590:	688a      	ldr	r2, [r1, #8]
 8010592:	690b      	ldr	r3, [r1, #16]
 8010594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010598:	4293      	cmp	r3, r2
 801059a:	bfb8      	it	lt
 801059c:	4613      	movlt	r3, r2
 801059e:	6033      	str	r3, [r6, #0]
 80105a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80105a4:	4607      	mov	r7, r0
 80105a6:	460c      	mov	r4, r1
 80105a8:	b10a      	cbz	r2, 80105ae <_printf_common+0x26>
 80105aa:	3301      	adds	r3, #1
 80105ac:	6033      	str	r3, [r6, #0]
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	0699      	lsls	r1, r3, #26
 80105b2:	bf42      	ittt	mi
 80105b4:	6833      	ldrmi	r3, [r6, #0]
 80105b6:	3302      	addmi	r3, #2
 80105b8:	6033      	strmi	r3, [r6, #0]
 80105ba:	6825      	ldr	r5, [r4, #0]
 80105bc:	f015 0506 	ands.w	r5, r5, #6
 80105c0:	d106      	bne.n	80105d0 <_printf_common+0x48>
 80105c2:	f104 0a19 	add.w	sl, r4, #25
 80105c6:	68e3      	ldr	r3, [r4, #12]
 80105c8:	6832      	ldr	r2, [r6, #0]
 80105ca:	1a9b      	subs	r3, r3, r2
 80105cc:	42ab      	cmp	r3, r5
 80105ce:	dc26      	bgt.n	801061e <_printf_common+0x96>
 80105d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80105d4:	1e13      	subs	r3, r2, #0
 80105d6:	6822      	ldr	r2, [r4, #0]
 80105d8:	bf18      	it	ne
 80105da:	2301      	movne	r3, #1
 80105dc:	0692      	lsls	r2, r2, #26
 80105de:	d42b      	bmi.n	8010638 <_printf_common+0xb0>
 80105e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105e4:	4649      	mov	r1, r9
 80105e6:	4638      	mov	r0, r7
 80105e8:	47c0      	blx	r8
 80105ea:	3001      	adds	r0, #1
 80105ec:	d01e      	beq.n	801062c <_printf_common+0xa4>
 80105ee:	6823      	ldr	r3, [r4, #0]
 80105f0:	68e5      	ldr	r5, [r4, #12]
 80105f2:	6832      	ldr	r2, [r6, #0]
 80105f4:	f003 0306 	and.w	r3, r3, #6
 80105f8:	2b04      	cmp	r3, #4
 80105fa:	bf08      	it	eq
 80105fc:	1aad      	subeq	r5, r5, r2
 80105fe:	68a3      	ldr	r3, [r4, #8]
 8010600:	6922      	ldr	r2, [r4, #16]
 8010602:	bf0c      	ite	eq
 8010604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010608:	2500      	movne	r5, #0
 801060a:	4293      	cmp	r3, r2
 801060c:	bfc4      	itt	gt
 801060e:	1a9b      	subgt	r3, r3, r2
 8010610:	18ed      	addgt	r5, r5, r3
 8010612:	2600      	movs	r6, #0
 8010614:	341a      	adds	r4, #26
 8010616:	42b5      	cmp	r5, r6
 8010618:	d11a      	bne.n	8010650 <_printf_common+0xc8>
 801061a:	2000      	movs	r0, #0
 801061c:	e008      	b.n	8010630 <_printf_common+0xa8>
 801061e:	2301      	movs	r3, #1
 8010620:	4652      	mov	r2, sl
 8010622:	4649      	mov	r1, r9
 8010624:	4638      	mov	r0, r7
 8010626:	47c0      	blx	r8
 8010628:	3001      	adds	r0, #1
 801062a:	d103      	bne.n	8010634 <_printf_common+0xac>
 801062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010634:	3501      	adds	r5, #1
 8010636:	e7c6      	b.n	80105c6 <_printf_common+0x3e>
 8010638:	18e1      	adds	r1, r4, r3
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	2030      	movs	r0, #48	; 0x30
 801063e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010642:	4422      	add	r2, r4
 8010644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801064c:	3302      	adds	r3, #2
 801064e:	e7c7      	b.n	80105e0 <_printf_common+0x58>
 8010650:	2301      	movs	r3, #1
 8010652:	4622      	mov	r2, r4
 8010654:	4649      	mov	r1, r9
 8010656:	4638      	mov	r0, r7
 8010658:	47c0      	blx	r8
 801065a:	3001      	adds	r0, #1
 801065c:	d0e6      	beq.n	801062c <_printf_common+0xa4>
 801065e:	3601      	adds	r6, #1
 8010660:	e7d9      	b.n	8010616 <_printf_common+0x8e>
	...

08010664 <_printf_i>:
 8010664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010668:	460c      	mov	r4, r1
 801066a:	4691      	mov	r9, r2
 801066c:	7e27      	ldrb	r7, [r4, #24]
 801066e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010670:	2f78      	cmp	r7, #120	; 0x78
 8010672:	4680      	mov	r8, r0
 8010674:	469a      	mov	sl, r3
 8010676:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801067a:	d807      	bhi.n	801068c <_printf_i+0x28>
 801067c:	2f62      	cmp	r7, #98	; 0x62
 801067e:	d80a      	bhi.n	8010696 <_printf_i+0x32>
 8010680:	2f00      	cmp	r7, #0
 8010682:	f000 80d8 	beq.w	8010836 <_printf_i+0x1d2>
 8010686:	2f58      	cmp	r7, #88	; 0x58
 8010688:	f000 80a3 	beq.w	80107d2 <_printf_i+0x16e>
 801068c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010694:	e03a      	b.n	801070c <_printf_i+0xa8>
 8010696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801069a:	2b15      	cmp	r3, #21
 801069c:	d8f6      	bhi.n	801068c <_printf_i+0x28>
 801069e:	a001      	add	r0, pc, #4	; (adr r0, 80106a4 <_printf_i+0x40>)
 80106a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80106a4:	080106fd 	.word	0x080106fd
 80106a8:	08010711 	.word	0x08010711
 80106ac:	0801068d 	.word	0x0801068d
 80106b0:	0801068d 	.word	0x0801068d
 80106b4:	0801068d 	.word	0x0801068d
 80106b8:	0801068d 	.word	0x0801068d
 80106bc:	08010711 	.word	0x08010711
 80106c0:	0801068d 	.word	0x0801068d
 80106c4:	0801068d 	.word	0x0801068d
 80106c8:	0801068d 	.word	0x0801068d
 80106cc:	0801068d 	.word	0x0801068d
 80106d0:	0801081d 	.word	0x0801081d
 80106d4:	08010741 	.word	0x08010741
 80106d8:	080107ff 	.word	0x080107ff
 80106dc:	0801068d 	.word	0x0801068d
 80106e0:	0801068d 	.word	0x0801068d
 80106e4:	0801083f 	.word	0x0801083f
 80106e8:	0801068d 	.word	0x0801068d
 80106ec:	08010741 	.word	0x08010741
 80106f0:	0801068d 	.word	0x0801068d
 80106f4:	0801068d 	.word	0x0801068d
 80106f8:	08010807 	.word	0x08010807
 80106fc:	680b      	ldr	r3, [r1, #0]
 80106fe:	1d1a      	adds	r2, r3, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	600a      	str	r2, [r1, #0]
 8010704:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801070c:	2301      	movs	r3, #1
 801070e:	e0a3      	b.n	8010858 <_printf_i+0x1f4>
 8010710:	6825      	ldr	r5, [r4, #0]
 8010712:	6808      	ldr	r0, [r1, #0]
 8010714:	062e      	lsls	r6, r5, #24
 8010716:	f100 0304 	add.w	r3, r0, #4
 801071a:	d50a      	bpl.n	8010732 <_printf_i+0xce>
 801071c:	6805      	ldr	r5, [r0, #0]
 801071e:	600b      	str	r3, [r1, #0]
 8010720:	2d00      	cmp	r5, #0
 8010722:	da03      	bge.n	801072c <_printf_i+0xc8>
 8010724:	232d      	movs	r3, #45	; 0x2d
 8010726:	426d      	negs	r5, r5
 8010728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801072c:	485e      	ldr	r0, [pc, #376]	; (80108a8 <_printf_i+0x244>)
 801072e:	230a      	movs	r3, #10
 8010730:	e019      	b.n	8010766 <_printf_i+0x102>
 8010732:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010736:	6805      	ldr	r5, [r0, #0]
 8010738:	600b      	str	r3, [r1, #0]
 801073a:	bf18      	it	ne
 801073c:	b22d      	sxthne	r5, r5
 801073e:	e7ef      	b.n	8010720 <_printf_i+0xbc>
 8010740:	680b      	ldr	r3, [r1, #0]
 8010742:	6825      	ldr	r5, [r4, #0]
 8010744:	1d18      	adds	r0, r3, #4
 8010746:	6008      	str	r0, [r1, #0]
 8010748:	0628      	lsls	r0, r5, #24
 801074a:	d501      	bpl.n	8010750 <_printf_i+0xec>
 801074c:	681d      	ldr	r5, [r3, #0]
 801074e:	e002      	b.n	8010756 <_printf_i+0xf2>
 8010750:	0669      	lsls	r1, r5, #25
 8010752:	d5fb      	bpl.n	801074c <_printf_i+0xe8>
 8010754:	881d      	ldrh	r5, [r3, #0]
 8010756:	4854      	ldr	r0, [pc, #336]	; (80108a8 <_printf_i+0x244>)
 8010758:	2f6f      	cmp	r7, #111	; 0x6f
 801075a:	bf0c      	ite	eq
 801075c:	2308      	moveq	r3, #8
 801075e:	230a      	movne	r3, #10
 8010760:	2100      	movs	r1, #0
 8010762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010766:	6866      	ldr	r6, [r4, #4]
 8010768:	60a6      	str	r6, [r4, #8]
 801076a:	2e00      	cmp	r6, #0
 801076c:	bfa2      	ittt	ge
 801076e:	6821      	ldrge	r1, [r4, #0]
 8010770:	f021 0104 	bicge.w	r1, r1, #4
 8010774:	6021      	strge	r1, [r4, #0]
 8010776:	b90d      	cbnz	r5, 801077c <_printf_i+0x118>
 8010778:	2e00      	cmp	r6, #0
 801077a:	d04d      	beq.n	8010818 <_printf_i+0x1b4>
 801077c:	4616      	mov	r6, r2
 801077e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010782:	fb03 5711 	mls	r7, r3, r1, r5
 8010786:	5dc7      	ldrb	r7, [r0, r7]
 8010788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801078c:	462f      	mov	r7, r5
 801078e:	42bb      	cmp	r3, r7
 8010790:	460d      	mov	r5, r1
 8010792:	d9f4      	bls.n	801077e <_printf_i+0x11a>
 8010794:	2b08      	cmp	r3, #8
 8010796:	d10b      	bne.n	80107b0 <_printf_i+0x14c>
 8010798:	6823      	ldr	r3, [r4, #0]
 801079a:	07df      	lsls	r7, r3, #31
 801079c:	d508      	bpl.n	80107b0 <_printf_i+0x14c>
 801079e:	6923      	ldr	r3, [r4, #16]
 80107a0:	6861      	ldr	r1, [r4, #4]
 80107a2:	4299      	cmp	r1, r3
 80107a4:	bfde      	ittt	le
 80107a6:	2330      	movle	r3, #48	; 0x30
 80107a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80107ac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80107b0:	1b92      	subs	r2, r2, r6
 80107b2:	6122      	str	r2, [r4, #16]
 80107b4:	f8cd a000 	str.w	sl, [sp]
 80107b8:	464b      	mov	r3, r9
 80107ba:	aa03      	add	r2, sp, #12
 80107bc:	4621      	mov	r1, r4
 80107be:	4640      	mov	r0, r8
 80107c0:	f7ff fee2 	bl	8010588 <_printf_common>
 80107c4:	3001      	adds	r0, #1
 80107c6:	d14c      	bne.n	8010862 <_printf_i+0x1fe>
 80107c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107cc:	b004      	add	sp, #16
 80107ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107d2:	4835      	ldr	r0, [pc, #212]	; (80108a8 <_printf_i+0x244>)
 80107d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80107d8:	6823      	ldr	r3, [r4, #0]
 80107da:	680e      	ldr	r6, [r1, #0]
 80107dc:	061f      	lsls	r7, r3, #24
 80107de:	f856 5b04 	ldr.w	r5, [r6], #4
 80107e2:	600e      	str	r6, [r1, #0]
 80107e4:	d514      	bpl.n	8010810 <_printf_i+0x1ac>
 80107e6:	07d9      	lsls	r1, r3, #31
 80107e8:	bf44      	itt	mi
 80107ea:	f043 0320 	orrmi.w	r3, r3, #32
 80107ee:	6023      	strmi	r3, [r4, #0]
 80107f0:	b91d      	cbnz	r5, 80107fa <_printf_i+0x196>
 80107f2:	6823      	ldr	r3, [r4, #0]
 80107f4:	f023 0320 	bic.w	r3, r3, #32
 80107f8:	6023      	str	r3, [r4, #0]
 80107fa:	2310      	movs	r3, #16
 80107fc:	e7b0      	b.n	8010760 <_printf_i+0xfc>
 80107fe:	6823      	ldr	r3, [r4, #0]
 8010800:	f043 0320 	orr.w	r3, r3, #32
 8010804:	6023      	str	r3, [r4, #0]
 8010806:	2378      	movs	r3, #120	; 0x78
 8010808:	4828      	ldr	r0, [pc, #160]	; (80108ac <_printf_i+0x248>)
 801080a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801080e:	e7e3      	b.n	80107d8 <_printf_i+0x174>
 8010810:	065e      	lsls	r6, r3, #25
 8010812:	bf48      	it	mi
 8010814:	b2ad      	uxthmi	r5, r5
 8010816:	e7e6      	b.n	80107e6 <_printf_i+0x182>
 8010818:	4616      	mov	r6, r2
 801081a:	e7bb      	b.n	8010794 <_printf_i+0x130>
 801081c:	680b      	ldr	r3, [r1, #0]
 801081e:	6826      	ldr	r6, [r4, #0]
 8010820:	6960      	ldr	r0, [r4, #20]
 8010822:	1d1d      	adds	r5, r3, #4
 8010824:	600d      	str	r5, [r1, #0]
 8010826:	0635      	lsls	r5, r6, #24
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	d501      	bpl.n	8010830 <_printf_i+0x1cc>
 801082c:	6018      	str	r0, [r3, #0]
 801082e:	e002      	b.n	8010836 <_printf_i+0x1d2>
 8010830:	0671      	lsls	r1, r6, #25
 8010832:	d5fb      	bpl.n	801082c <_printf_i+0x1c8>
 8010834:	8018      	strh	r0, [r3, #0]
 8010836:	2300      	movs	r3, #0
 8010838:	6123      	str	r3, [r4, #16]
 801083a:	4616      	mov	r6, r2
 801083c:	e7ba      	b.n	80107b4 <_printf_i+0x150>
 801083e:	680b      	ldr	r3, [r1, #0]
 8010840:	1d1a      	adds	r2, r3, #4
 8010842:	600a      	str	r2, [r1, #0]
 8010844:	681e      	ldr	r6, [r3, #0]
 8010846:	6862      	ldr	r2, [r4, #4]
 8010848:	2100      	movs	r1, #0
 801084a:	4630      	mov	r0, r6
 801084c:	f7ef fcd8 	bl	8000200 <memchr>
 8010850:	b108      	cbz	r0, 8010856 <_printf_i+0x1f2>
 8010852:	1b80      	subs	r0, r0, r6
 8010854:	6060      	str	r0, [r4, #4]
 8010856:	6863      	ldr	r3, [r4, #4]
 8010858:	6123      	str	r3, [r4, #16]
 801085a:	2300      	movs	r3, #0
 801085c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010860:	e7a8      	b.n	80107b4 <_printf_i+0x150>
 8010862:	6923      	ldr	r3, [r4, #16]
 8010864:	4632      	mov	r2, r6
 8010866:	4649      	mov	r1, r9
 8010868:	4640      	mov	r0, r8
 801086a:	47d0      	blx	sl
 801086c:	3001      	adds	r0, #1
 801086e:	d0ab      	beq.n	80107c8 <_printf_i+0x164>
 8010870:	6823      	ldr	r3, [r4, #0]
 8010872:	079b      	lsls	r3, r3, #30
 8010874:	d413      	bmi.n	801089e <_printf_i+0x23a>
 8010876:	68e0      	ldr	r0, [r4, #12]
 8010878:	9b03      	ldr	r3, [sp, #12]
 801087a:	4298      	cmp	r0, r3
 801087c:	bfb8      	it	lt
 801087e:	4618      	movlt	r0, r3
 8010880:	e7a4      	b.n	80107cc <_printf_i+0x168>
 8010882:	2301      	movs	r3, #1
 8010884:	4632      	mov	r2, r6
 8010886:	4649      	mov	r1, r9
 8010888:	4640      	mov	r0, r8
 801088a:	47d0      	blx	sl
 801088c:	3001      	adds	r0, #1
 801088e:	d09b      	beq.n	80107c8 <_printf_i+0x164>
 8010890:	3501      	adds	r5, #1
 8010892:	68e3      	ldr	r3, [r4, #12]
 8010894:	9903      	ldr	r1, [sp, #12]
 8010896:	1a5b      	subs	r3, r3, r1
 8010898:	42ab      	cmp	r3, r5
 801089a:	dcf2      	bgt.n	8010882 <_printf_i+0x21e>
 801089c:	e7eb      	b.n	8010876 <_printf_i+0x212>
 801089e:	2500      	movs	r5, #0
 80108a0:	f104 0619 	add.w	r6, r4, #25
 80108a4:	e7f5      	b.n	8010892 <_printf_i+0x22e>
 80108a6:	bf00      	nop
 80108a8:	08014f8a 	.word	0x08014f8a
 80108ac:	08014f9b 	.word	0x08014f9b

080108b0 <_scanf_float>:
 80108b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b4:	b087      	sub	sp, #28
 80108b6:	4617      	mov	r7, r2
 80108b8:	9303      	str	r3, [sp, #12]
 80108ba:	688b      	ldr	r3, [r1, #8]
 80108bc:	1e5a      	subs	r2, r3, #1
 80108be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80108c2:	bf83      	ittte	hi
 80108c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80108c8:	195b      	addhi	r3, r3, r5
 80108ca:	9302      	strhi	r3, [sp, #8]
 80108cc:	2300      	movls	r3, #0
 80108ce:	bf86      	itte	hi
 80108d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80108d4:	608b      	strhi	r3, [r1, #8]
 80108d6:	9302      	strls	r3, [sp, #8]
 80108d8:	680b      	ldr	r3, [r1, #0]
 80108da:	468b      	mov	fp, r1
 80108dc:	2500      	movs	r5, #0
 80108de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80108e2:	f84b 3b1c 	str.w	r3, [fp], #28
 80108e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80108ea:	4680      	mov	r8, r0
 80108ec:	460c      	mov	r4, r1
 80108ee:	465e      	mov	r6, fp
 80108f0:	46aa      	mov	sl, r5
 80108f2:	46a9      	mov	r9, r5
 80108f4:	9501      	str	r5, [sp, #4]
 80108f6:	68a2      	ldr	r2, [r4, #8]
 80108f8:	b152      	cbz	r2, 8010910 <_scanf_float+0x60>
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	2b4e      	cmp	r3, #78	; 0x4e
 8010900:	d864      	bhi.n	80109cc <_scanf_float+0x11c>
 8010902:	2b40      	cmp	r3, #64	; 0x40
 8010904:	d83c      	bhi.n	8010980 <_scanf_float+0xd0>
 8010906:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801090a:	b2c8      	uxtb	r0, r1
 801090c:	280e      	cmp	r0, #14
 801090e:	d93a      	bls.n	8010986 <_scanf_float+0xd6>
 8010910:	f1b9 0f00 	cmp.w	r9, #0
 8010914:	d003      	beq.n	801091e <_scanf_float+0x6e>
 8010916:	6823      	ldr	r3, [r4, #0]
 8010918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801091c:	6023      	str	r3, [r4, #0]
 801091e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010922:	f1ba 0f01 	cmp.w	sl, #1
 8010926:	f200 8113 	bhi.w	8010b50 <_scanf_float+0x2a0>
 801092a:	455e      	cmp	r6, fp
 801092c:	f200 8105 	bhi.w	8010b3a <_scanf_float+0x28a>
 8010930:	2501      	movs	r5, #1
 8010932:	4628      	mov	r0, r5
 8010934:	b007      	add	sp, #28
 8010936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801093a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801093e:	2a0d      	cmp	r2, #13
 8010940:	d8e6      	bhi.n	8010910 <_scanf_float+0x60>
 8010942:	a101      	add	r1, pc, #4	; (adr r1, 8010948 <_scanf_float+0x98>)
 8010944:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010948:	08010a87 	.word	0x08010a87
 801094c:	08010911 	.word	0x08010911
 8010950:	08010911 	.word	0x08010911
 8010954:	08010911 	.word	0x08010911
 8010958:	08010ae7 	.word	0x08010ae7
 801095c:	08010abf 	.word	0x08010abf
 8010960:	08010911 	.word	0x08010911
 8010964:	08010911 	.word	0x08010911
 8010968:	08010a95 	.word	0x08010a95
 801096c:	08010911 	.word	0x08010911
 8010970:	08010911 	.word	0x08010911
 8010974:	08010911 	.word	0x08010911
 8010978:	08010911 	.word	0x08010911
 801097c:	08010a4d 	.word	0x08010a4d
 8010980:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010984:	e7db      	b.n	801093e <_scanf_float+0x8e>
 8010986:	290e      	cmp	r1, #14
 8010988:	d8c2      	bhi.n	8010910 <_scanf_float+0x60>
 801098a:	a001      	add	r0, pc, #4	; (adr r0, 8010990 <_scanf_float+0xe0>)
 801098c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010990:	08010a3f 	.word	0x08010a3f
 8010994:	08010911 	.word	0x08010911
 8010998:	08010a3f 	.word	0x08010a3f
 801099c:	08010ad3 	.word	0x08010ad3
 80109a0:	08010911 	.word	0x08010911
 80109a4:	080109ed 	.word	0x080109ed
 80109a8:	08010a29 	.word	0x08010a29
 80109ac:	08010a29 	.word	0x08010a29
 80109b0:	08010a29 	.word	0x08010a29
 80109b4:	08010a29 	.word	0x08010a29
 80109b8:	08010a29 	.word	0x08010a29
 80109bc:	08010a29 	.word	0x08010a29
 80109c0:	08010a29 	.word	0x08010a29
 80109c4:	08010a29 	.word	0x08010a29
 80109c8:	08010a29 	.word	0x08010a29
 80109cc:	2b6e      	cmp	r3, #110	; 0x6e
 80109ce:	d809      	bhi.n	80109e4 <_scanf_float+0x134>
 80109d0:	2b60      	cmp	r3, #96	; 0x60
 80109d2:	d8b2      	bhi.n	801093a <_scanf_float+0x8a>
 80109d4:	2b54      	cmp	r3, #84	; 0x54
 80109d6:	d077      	beq.n	8010ac8 <_scanf_float+0x218>
 80109d8:	2b59      	cmp	r3, #89	; 0x59
 80109da:	d199      	bne.n	8010910 <_scanf_float+0x60>
 80109dc:	2d07      	cmp	r5, #7
 80109de:	d197      	bne.n	8010910 <_scanf_float+0x60>
 80109e0:	2508      	movs	r5, #8
 80109e2:	e029      	b.n	8010a38 <_scanf_float+0x188>
 80109e4:	2b74      	cmp	r3, #116	; 0x74
 80109e6:	d06f      	beq.n	8010ac8 <_scanf_float+0x218>
 80109e8:	2b79      	cmp	r3, #121	; 0x79
 80109ea:	e7f6      	b.n	80109da <_scanf_float+0x12a>
 80109ec:	6821      	ldr	r1, [r4, #0]
 80109ee:	05c8      	lsls	r0, r1, #23
 80109f0:	d51a      	bpl.n	8010a28 <_scanf_float+0x178>
 80109f2:	9b02      	ldr	r3, [sp, #8]
 80109f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80109f8:	6021      	str	r1, [r4, #0]
 80109fa:	f109 0901 	add.w	r9, r9, #1
 80109fe:	b11b      	cbz	r3, 8010a08 <_scanf_float+0x158>
 8010a00:	3b01      	subs	r3, #1
 8010a02:	3201      	adds	r2, #1
 8010a04:	9302      	str	r3, [sp, #8]
 8010a06:	60a2      	str	r2, [r4, #8]
 8010a08:	68a3      	ldr	r3, [r4, #8]
 8010a0a:	3b01      	subs	r3, #1
 8010a0c:	60a3      	str	r3, [r4, #8]
 8010a0e:	6923      	ldr	r3, [r4, #16]
 8010a10:	3301      	adds	r3, #1
 8010a12:	6123      	str	r3, [r4, #16]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	3b01      	subs	r3, #1
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	607b      	str	r3, [r7, #4]
 8010a1c:	f340 8084 	ble.w	8010b28 <_scanf_float+0x278>
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	3301      	adds	r3, #1
 8010a24:	603b      	str	r3, [r7, #0]
 8010a26:	e766      	b.n	80108f6 <_scanf_float+0x46>
 8010a28:	eb1a 0f05 	cmn.w	sl, r5
 8010a2c:	f47f af70 	bne.w	8010910 <_scanf_float+0x60>
 8010a30:	6822      	ldr	r2, [r4, #0]
 8010a32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010a36:	6022      	str	r2, [r4, #0]
 8010a38:	f806 3b01 	strb.w	r3, [r6], #1
 8010a3c:	e7e4      	b.n	8010a08 <_scanf_float+0x158>
 8010a3e:	6822      	ldr	r2, [r4, #0]
 8010a40:	0610      	lsls	r0, r2, #24
 8010a42:	f57f af65 	bpl.w	8010910 <_scanf_float+0x60>
 8010a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a4a:	e7f4      	b.n	8010a36 <_scanf_float+0x186>
 8010a4c:	f1ba 0f00 	cmp.w	sl, #0
 8010a50:	d10e      	bne.n	8010a70 <_scanf_float+0x1c0>
 8010a52:	f1b9 0f00 	cmp.w	r9, #0
 8010a56:	d10e      	bne.n	8010a76 <_scanf_float+0x1c6>
 8010a58:	6822      	ldr	r2, [r4, #0]
 8010a5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010a5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010a62:	d108      	bne.n	8010a76 <_scanf_float+0x1c6>
 8010a64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a68:	6022      	str	r2, [r4, #0]
 8010a6a:	f04f 0a01 	mov.w	sl, #1
 8010a6e:	e7e3      	b.n	8010a38 <_scanf_float+0x188>
 8010a70:	f1ba 0f02 	cmp.w	sl, #2
 8010a74:	d055      	beq.n	8010b22 <_scanf_float+0x272>
 8010a76:	2d01      	cmp	r5, #1
 8010a78:	d002      	beq.n	8010a80 <_scanf_float+0x1d0>
 8010a7a:	2d04      	cmp	r5, #4
 8010a7c:	f47f af48 	bne.w	8010910 <_scanf_float+0x60>
 8010a80:	3501      	adds	r5, #1
 8010a82:	b2ed      	uxtb	r5, r5
 8010a84:	e7d8      	b.n	8010a38 <_scanf_float+0x188>
 8010a86:	f1ba 0f01 	cmp.w	sl, #1
 8010a8a:	f47f af41 	bne.w	8010910 <_scanf_float+0x60>
 8010a8e:	f04f 0a02 	mov.w	sl, #2
 8010a92:	e7d1      	b.n	8010a38 <_scanf_float+0x188>
 8010a94:	b97d      	cbnz	r5, 8010ab6 <_scanf_float+0x206>
 8010a96:	f1b9 0f00 	cmp.w	r9, #0
 8010a9a:	f47f af3c 	bne.w	8010916 <_scanf_float+0x66>
 8010a9e:	6822      	ldr	r2, [r4, #0]
 8010aa0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010aa4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010aa8:	f47f af39 	bne.w	801091e <_scanf_float+0x6e>
 8010aac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010ab0:	6022      	str	r2, [r4, #0]
 8010ab2:	2501      	movs	r5, #1
 8010ab4:	e7c0      	b.n	8010a38 <_scanf_float+0x188>
 8010ab6:	2d03      	cmp	r5, #3
 8010ab8:	d0e2      	beq.n	8010a80 <_scanf_float+0x1d0>
 8010aba:	2d05      	cmp	r5, #5
 8010abc:	e7de      	b.n	8010a7c <_scanf_float+0x1cc>
 8010abe:	2d02      	cmp	r5, #2
 8010ac0:	f47f af26 	bne.w	8010910 <_scanf_float+0x60>
 8010ac4:	2503      	movs	r5, #3
 8010ac6:	e7b7      	b.n	8010a38 <_scanf_float+0x188>
 8010ac8:	2d06      	cmp	r5, #6
 8010aca:	f47f af21 	bne.w	8010910 <_scanf_float+0x60>
 8010ace:	2507      	movs	r5, #7
 8010ad0:	e7b2      	b.n	8010a38 <_scanf_float+0x188>
 8010ad2:	6822      	ldr	r2, [r4, #0]
 8010ad4:	0591      	lsls	r1, r2, #22
 8010ad6:	f57f af1b 	bpl.w	8010910 <_scanf_float+0x60>
 8010ada:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010ade:	6022      	str	r2, [r4, #0]
 8010ae0:	f8cd 9004 	str.w	r9, [sp, #4]
 8010ae4:	e7a8      	b.n	8010a38 <_scanf_float+0x188>
 8010ae6:	6822      	ldr	r2, [r4, #0]
 8010ae8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010aec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010af0:	d006      	beq.n	8010b00 <_scanf_float+0x250>
 8010af2:	0550      	lsls	r0, r2, #21
 8010af4:	f57f af0c 	bpl.w	8010910 <_scanf_float+0x60>
 8010af8:	f1b9 0f00 	cmp.w	r9, #0
 8010afc:	f43f af0f 	beq.w	801091e <_scanf_float+0x6e>
 8010b00:	0591      	lsls	r1, r2, #22
 8010b02:	bf58      	it	pl
 8010b04:	9901      	ldrpl	r1, [sp, #4]
 8010b06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b0a:	bf58      	it	pl
 8010b0c:	eba9 0101 	subpl.w	r1, r9, r1
 8010b10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010b14:	bf58      	it	pl
 8010b16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010b1a:	6022      	str	r2, [r4, #0]
 8010b1c:	f04f 0900 	mov.w	r9, #0
 8010b20:	e78a      	b.n	8010a38 <_scanf_float+0x188>
 8010b22:	f04f 0a03 	mov.w	sl, #3
 8010b26:	e787      	b.n	8010a38 <_scanf_float+0x188>
 8010b28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010b2c:	4639      	mov	r1, r7
 8010b2e:	4640      	mov	r0, r8
 8010b30:	4798      	blx	r3
 8010b32:	2800      	cmp	r0, #0
 8010b34:	f43f aedf 	beq.w	80108f6 <_scanf_float+0x46>
 8010b38:	e6ea      	b.n	8010910 <_scanf_float+0x60>
 8010b3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b42:	463a      	mov	r2, r7
 8010b44:	4640      	mov	r0, r8
 8010b46:	4798      	blx	r3
 8010b48:	6923      	ldr	r3, [r4, #16]
 8010b4a:	3b01      	subs	r3, #1
 8010b4c:	6123      	str	r3, [r4, #16]
 8010b4e:	e6ec      	b.n	801092a <_scanf_float+0x7a>
 8010b50:	1e6b      	subs	r3, r5, #1
 8010b52:	2b06      	cmp	r3, #6
 8010b54:	d825      	bhi.n	8010ba2 <_scanf_float+0x2f2>
 8010b56:	2d02      	cmp	r5, #2
 8010b58:	d836      	bhi.n	8010bc8 <_scanf_float+0x318>
 8010b5a:	455e      	cmp	r6, fp
 8010b5c:	f67f aee8 	bls.w	8010930 <_scanf_float+0x80>
 8010b60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b68:	463a      	mov	r2, r7
 8010b6a:	4640      	mov	r0, r8
 8010b6c:	4798      	blx	r3
 8010b6e:	6923      	ldr	r3, [r4, #16]
 8010b70:	3b01      	subs	r3, #1
 8010b72:	6123      	str	r3, [r4, #16]
 8010b74:	e7f1      	b.n	8010b5a <_scanf_float+0x2aa>
 8010b76:	9802      	ldr	r0, [sp, #8]
 8010b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010b80:	9002      	str	r0, [sp, #8]
 8010b82:	463a      	mov	r2, r7
 8010b84:	4640      	mov	r0, r8
 8010b86:	4798      	blx	r3
 8010b88:	6923      	ldr	r3, [r4, #16]
 8010b8a:	3b01      	subs	r3, #1
 8010b8c:	6123      	str	r3, [r4, #16]
 8010b8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010b92:	fa5f fa8a 	uxtb.w	sl, sl
 8010b96:	f1ba 0f02 	cmp.w	sl, #2
 8010b9a:	d1ec      	bne.n	8010b76 <_scanf_float+0x2c6>
 8010b9c:	3d03      	subs	r5, #3
 8010b9e:	b2ed      	uxtb	r5, r5
 8010ba0:	1b76      	subs	r6, r6, r5
 8010ba2:	6823      	ldr	r3, [r4, #0]
 8010ba4:	05da      	lsls	r2, r3, #23
 8010ba6:	d52f      	bpl.n	8010c08 <_scanf_float+0x358>
 8010ba8:	055b      	lsls	r3, r3, #21
 8010baa:	d510      	bpl.n	8010bce <_scanf_float+0x31e>
 8010bac:	455e      	cmp	r6, fp
 8010bae:	f67f aebf 	bls.w	8010930 <_scanf_float+0x80>
 8010bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010bba:	463a      	mov	r2, r7
 8010bbc:	4640      	mov	r0, r8
 8010bbe:	4798      	blx	r3
 8010bc0:	6923      	ldr	r3, [r4, #16]
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	6123      	str	r3, [r4, #16]
 8010bc6:	e7f1      	b.n	8010bac <_scanf_float+0x2fc>
 8010bc8:	46aa      	mov	sl, r5
 8010bca:	9602      	str	r6, [sp, #8]
 8010bcc:	e7df      	b.n	8010b8e <_scanf_float+0x2de>
 8010bce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010bd2:	6923      	ldr	r3, [r4, #16]
 8010bd4:	2965      	cmp	r1, #101	; 0x65
 8010bd6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010bda:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8010bde:	6123      	str	r3, [r4, #16]
 8010be0:	d00c      	beq.n	8010bfc <_scanf_float+0x34c>
 8010be2:	2945      	cmp	r1, #69	; 0x45
 8010be4:	d00a      	beq.n	8010bfc <_scanf_float+0x34c>
 8010be6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bea:	463a      	mov	r2, r7
 8010bec:	4640      	mov	r0, r8
 8010bee:	4798      	blx	r3
 8010bf0:	6923      	ldr	r3, [r4, #16]
 8010bf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010bf6:	3b01      	subs	r3, #1
 8010bf8:	1eb5      	subs	r5, r6, #2
 8010bfa:	6123      	str	r3, [r4, #16]
 8010bfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c00:	463a      	mov	r2, r7
 8010c02:	4640      	mov	r0, r8
 8010c04:	4798      	blx	r3
 8010c06:	462e      	mov	r6, r5
 8010c08:	6825      	ldr	r5, [r4, #0]
 8010c0a:	f015 0510 	ands.w	r5, r5, #16
 8010c0e:	d158      	bne.n	8010cc2 <_scanf_float+0x412>
 8010c10:	7035      	strb	r5, [r6, #0]
 8010c12:	6823      	ldr	r3, [r4, #0]
 8010c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c1c:	d11c      	bne.n	8010c58 <_scanf_float+0x3a8>
 8010c1e:	9b01      	ldr	r3, [sp, #4]
 8010c20:	454b      	cmp	r3, r9
 8010c22:	eba3 0209 	sub.w	r2, r3, r9
 8010c26:	d124      	bne.n	8010c72 <_scanf_float+0x3c2>
 8010c28:	2200      	movs	r2, #0
 8010c2a:	4659      	mov	r1, fp
 8010c2c:	4640      	mov	r0, r8
 8010c2e:	f000 ff7d 	bl	8011b2c <_strtod_r>
 8010c32:	9b03      	ldr	r3, [sp, #12]
 8010c34:	6821      	ldr	r1, [r4, #0]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f011 0f02 	tst.w	r1, #2
 8010c3c:	ec57 6b10 	vmov	r6, r7, d0
 8010c40:	f103 0204 	add.w	r2, r3, #4
 8010c44:	d020      	beq.n	8010c88 <_scanf_float+0x3d8>
 8010c46:	9903      	ldr	r1, [sp, #12]
 8010c48:	600a      	str	r2, [r1, #0]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	e9c3 6700 	strd	r6, r7, [r3]
 8010c50:	68e3      	ldr	r3, [r4, #12]
 8010c52:	3301      	adds	r3, #1
 8010c54:	60e3      	str	r3, [r4, #12]
 8010c56:	e66c      	b.n	8010932 <_scanf_float+0x82>
 8010c58:	9b04      	ldr	r3, [sp, #16]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d0e4      	beq.n	8010c28 <_scanf_float+0x378>
 8010c5e:	9905      	ldr	r1, [sp, #20]
 8010c60:	230a      	movs	r3, #10
 8010c62:	462a      	mov	r2, r5
 8010c64:	3101      	adds	r1, #1
 8010c66:	4640      	mov	r0, r8
 8010c68:	f000 ffea 	bl	8011c40 <_strtol_r>
 8010c6c:	9b04      	ldr	r3, [sp, #16]
 8010c6e:	9e05      	ldr	r6, [sp, #20]
 8010c70:	1ac2      	subs	r2, r0, r3
 8010c72:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010c76:	429e      	cmp	r6, r3
 8010c78:	bf28      	it	cs
 8010c7a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010c7e:	4912      	ldr	r1, [pc, #72]	; (8010cc8 <_scanf_float+0x418>)
 8010c80:	4630      	mov	r0, r6
 8010c82:	f000 f90d 	bl	8010ea0 <siprintf>
 8010c86:	e7cf      	b.n	8010c28 <_scanf_float+0x378>
 8010c88:	f011 0f04 	tst.w	r1, #4
 8010c8c:	9903      	ldr	r1, [sp, #12]
 8010c8e:	600a      	str	r2, [r1, #0]
 8010c90:	d1db      	bne.n	8010c4a <_scanf_float+0x39a>
 8010c92:	f8d3 8000 	ldr.w	r8, [r3]
 8010c96:	ee10 2a10 	vmov	r2, s0
 8010c9a:	ee10 0a10 	vmov	r0, s0
 8010c9e:	463b      	mov	r3, r7
 8010ca0:	4639      	mov	r1, r7
 8010ca2:	f7ef ff53 	bl	8000b4c <__aeabi_dcmpun>
 8010ca6:	b128      	cbz	r0, 8010cb4 <_scanf_float+0x404>
 8010ca8:	4808      	ldr	r0, [pc, #32]	; (8010ccc <_scanf_float+0x41c>)
 8010caa:	f000 f8af 	bl	8010e0c <nanf>
 8010cae:	ed88 0a00 	vstr	s0, [r8]
 8010cb2:	e7cd      	b.n	8010c50 <_scanf_float+0x3a0>
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	4639      	mov	r1, r7
 8010cb8:	f7ef ffa6 	bl	8000c08 <__aeabi_d2f>
 8010cbc:	f8c8 0000 	str.w	r0, [r8]
 8010cc0:	e7c6      	b.n	8010c50 <_scanf_float+0x3a0>
 8010cc2:	2500      	movs	r5, #0
 8010cc4:	e635      	b.n	8010932 <_scanf_float+0x82>
 8010cc6:	bf00      	nop
 8010cc8:	08014fac 	.word	0x08014fac
 8010ccc:	08015428 	.word	0x08015428

08010cd0 <iprintf>:
 8010cd0:	b40f      	push	{r0, r1, r2, r3}
 8010cd2:	4b0a      	ldr	r3, [pc, #40]	; (8010cfc <iprintf+0x2c>)
 8010cd4:	b513      	push	{r0, r1, r4, lr}
 8010cd6:	681c      	ldr	r4, [r3, #0]
 8010cd8:	b124      	cbz	r4, 8010ce4 <iprintf+0x14>
 8010cda:	69a3      	ldr	r3, [r4, #24]
 8010cdc:	b913      	cbnz	r3, 8010ce4 <iprintf+0x14>
 8010cde:	4620      	mov	r0, r4
 8010ce0:	f002 f864 	bl	8012dac <__sinit>
 8010ce4:	ab05      	add	r3, sp, #20
 8010ce6:	9a04      	ldr	r2, [sp, #16]
 8010ce8:	68a1      	ldr	r1, [r4, #8]
 8010cea:	9301      	str	r3, [sp, #4]
 8010cec:	4620      	mov	r0, r4
 8010cee:	f003 fb43 	bl	8014378 <_vfiprintf_r>
 8010cf2:	b002      	add	sp, #8
 8010cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cf8:	b004      	add	sp, #16
 8010cfa:	4770      	bx	lr
 8010cfc:	20000188 	.word	0x20000188

08010d00 <_puts_r>:
 8010d00:	b570      	push	{r4, r5, r6, lr}
 8010d02:	460e      	mov	r6, r1
 8010d04:	4605      	mov	r5, r0
 8010d06:	b118      	cbz	r0, 8010d10 <_puts_r+0x10>
 8010d08:	6983      	ldr	r3, [r0, #24]
 8010d0a:	b90b      	cbnz	r3, 8010d10 <_puts_r+0x10>
 8010d0c:	f002 f84e 	bl	8012dac <__sinit>
 8010d10:	69ab      	ldr	r3, [r5, #24]
 8010d12:	68ac      	ldr	r4, [r5, #8]
 8010d14:	b913      	cbnz	r3, 8010d1c <_puts_r+0x1c>
 8010d16:	4628      	mov	r0, r5
 8010d18:	f002 f848 	bl	8012dac <__sinit>
 8010d1c:	4b2c      	ldr	r3, [pc, #176]	; (8010dd0 <_puts_r+0xd0>)
 8010d1e:	429c      	cmp	r4, r3
 8010d20:	d120      	bne.n	8010d64 <_puts_r+0x64>
 8010d22:	686c      	ldr	r4, [r5, #4]
 8010d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d26:	07db      	lsls	r3, r3, #31
 8010d28:	d405      	bmi.n	8010d36 <_puts_r+0x36>
 8010d2a:	89a3      	ldrh	r3, [r4, #12]
 8010d2c:	0598      	lsls	r0, r3, #22
 8010d2e:	d402      	bmi.n	8010d36 <_puts_r+0x36>
 8010d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d32:	f002 fc4c 	bl	80135ce <__retarget_lock_acquire_recursive>
 8010d36:	89a3      	ldrh	r3, [r4, #12]
 8010d38:	0719      	lsls	r1, r3, #28
 8010d3a:	d51d      	bpl.n	8010d78 <_puts_r+0x78>
 8010d3c:	6923      	ldr	r3, [r4, #16]
 8010d3e:	b1db      	cbz	r3, 8010d78 <_puts_r+0x78>
 8010d40:	3e01      	subs	r6, #1
 8010d42:	68a3      	ldr	r3, [r4, #8]
 8010d44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	60a3      	str	r3, [r4, #8]
 8010d4c:	bb39      	cbnz	r1, 8010d9e <_puts_r+0x9e>
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	da38      	bge.n	8010dc4 <_puts_r+0xc4>
 8010d52:	4622      	mov	r2, r4
 8010d54:	210a      	movs	r1, #10
 8010d56:	4628      	mov	r0, r5
 8010d58:	f000 ff74 	bl	8011c44 <__swbuf_r>
 8010d5c:	3001      	adds	r0, #1
 8010d5e:	d011      	beq.n	8010d84 <_puts_r+0x84>
 8010d60:	250a      	movs	r5, #10
 8010d62:	e011      	b.n	8010d88 <_puts_r+0x88>
 8010d64:	4b1b      	ldr	r3, [pc, #108]	; (8010dd4 <_puts_r+0xd4>)
 8010d66:	429c      	cmp	r4, r3
 8010d68:	d101      	bne.n	8010d6e <_puts_r+0x6e>
 8010d6a:	68ac      	ldr	r4, [r5, #8]
 8010d6c:	e7da      	b.n	8010d24 <_puts_r+0x24>
 8010d6e:	4b1a      	ldr	r3, [pc, #104]	; (8010dd8 <_puts_r+0xd8>)
 8010d70:	429c      	cmp	r4, r3
 8010d72:	bf08      	it	eq
 8010d74:	68ec      	ldreq	r4, [r5, #12]
 8010d76:	e7d5      	b.n	8010d24 <_puts_r+0x24>
 8010d78:	4621      	mov	r1, r4
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	f000 ffb4 	bl	8011ce8 <__swsetup_r>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	d0dd      	beq.n	8010d40 <_puts_r+0x40>
 8010d84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d8a:	07da      	lsls	r2, r3, #31
 8010d8c:	d405      	bmi.n	8010d9a <_puts_r+0x9a>
 8010d8e:	89a3      	ldrh	r3, [r4, #12]
 8010d90:	059b      	lsls	r3, r3, #22
 8010d92:	d402      	bmi.n	8010d9a <_puts_r+0x9a>
 8010d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d96:	f002 fc1c 	bl	80135d2 <__retarget_lock_release_recursive>
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	bd70      	pop	{r4, r5, r6, pc}
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	da04      	bge.n	8010dac <_puts_r+0xac>
 8010da2:	69a2      	ldr	r2, [r4, #24]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	dc06      	bgt.n	8010db6 <_puts_r+0xb6>
 8010da8:	290a      	cmp	r1, #10
 8010daa:	d004      	beq.n	8010db6 <_puts_r+0xb6>
 8010dac:	6823      	ldr	r3, [r4, #0]
 8010dae:	1c5a      	adds	r2, r3, #1
 8010db0:	6022      	str	r2, [r4, #0]
 8010db2:	7019      	strb	r1, [r3, #0]
 8010db4:	e7c5      	b.n	8010d42 <_puts_r+0x42>
 8010db6:	4622      	mov	r2, r4
 8010db8:	4628      	mov	r0, r5
 8010dba:	f000 ff43 	bl	8011c44 <__swbuf_r>
 8010dbe:	3001      	adds	r0, #1
 8010dc0:	d1bf      	bne.n	8010d42 <_puts_r+0x42>
 8010dc2:	e7df      	b.n	8010d84 <_puts_r+0x84>
 8010dc4:	6823      	ldr	r3, [r4, #0]
 8010dc6:	250a      	movs	r5, #10
 8010dc8:	1c5a      	adds	r2, r3, #1
 8010dca:	6022      	str	r2, [r4, #0]
 8010dcc:	701d      	strb	r5, [r3, #0]
 8010dce:	e7db      	b.n	8010d88 <_puts_r+0x88>
 8010dd0:	080151c0 	.word	0x080151c0
 8010dd4:	080151e0 	.word	0x080151e0
 8010dd8:	080151a0 	.word	0x080151a0

08010ddc <puts>:
 8010ddc:	4b02      	ldr	r3, [pc, #8]	; (8010de8 <puts+0xc>)
 8010dde:	4601      	mov	r1, r0
 8010de0:	6818      	ldr	r0, [r3, #0]
 8010de2:	f7ff bf8d 	b.w	8010d00 <_puts_r>
 8010de6:	bf00      	nop
 8010de8:	20000188 	.word	0x20000188

08010dec <_sbrk_r>:
 8010dec:	b538      	push	{r3, r4, r5, lr}
 8010dee:	4d06      	ldr	r5, [pc, #24]	; (8010e08 <_sbrk_r+0x1c>)
 8010df0:	2300      	movs	r3, #0
 8010df2:	4604      	mov	r4, r0
 8010df4:	4608      	mov	r0, r1
 8010df6:	602b      	str	r3, [r5, #0]
 8010df8:	f7f1 ff74 	bl	8002ce4 <_sbrk>
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d102      	bne.n	8010e06 <_sbrk_r+0x1a>
 8010e00:	682b      	ldr	r3, [r5, #0]
 8010e02:	b103      	cbz	r3, 8010e06 <_sbrk_r+0x1a>
 8010e04:	6023      	str	r3, [r4, #0]
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
 8010e08:	20006434 	.word	0x20006434

08010e0c <nanf>:
 8010e0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010e14 <nanf+0x8>
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop
 8010e14:	7fc00000 	.word	0x7fc00000

08010e18 <_raise_r>:
 8010e18:	291f      	cmp	r1, #31
 8010e1a:	b538      	push	{r3, r4, r5, lr}
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	460d      	mov	r5, r1
 8010e20:	d904      	bls.n	8010e2c <_raise_r+0x14>
 8010e22:	2316      	movs	r3, #22
 8010e24:	6003      	str	r3, [r0, #0]
 8010e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e2a:	bd38      	pop	{r3, r4, r5, pc}
 8010e2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e2e:	b112      	cbz	r2, 8010e36 <_raise_r+0x1e>
 8010e30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e34:	b94b      	cbnz	r3, 8010e4a <_raise_r+0x32>
 8010e36:	4620      	mov	r0, r4
 8010e38:	f000 f830 	bl	8010e9c <_getpid_r>
 8010e3c:	462a      	mov	r2, r5
 8010e3e:	4601      	mov	r1, r0
 8010e40:	4620      	mov	r0, r4
 8010e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e46:	f000 b817 	b.w	8010e78 <_kill_r>
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d00a      	beq.n	8010e64 <_raise_r+0x4c>
 8010e4e:	1c59      	adds	r1, r3, #1
 8010e50:	d103      	bne.n	8010e5a <_raise_r+0x42>
 8010e52:	2316      	movs	r3, #22
 8010e54:	6003      	str	r3, [r0, #0]
 8010e56:	2001      	movs	r0, #1
 8010e58:	e7e7      	b.n	8010e2a <_raise_r+0x12>
 8010e5a:	2400      	movs	r4, #0
 8010e5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e60:	4628      	mov	r0, r5
 8010e62:	4798      	blx	r3
 8010e64:	2000      	movs	r0, #0
 8010e66:	e7e0      	b.n	8010e2a <_raise_r+0x12>

08010e68 <raise>:
 8010e68:	4b02      	ldr	r3, [pc, #8]	; (8010e74 <raise+0xc>)
 8010e6a:	4601      	mov	r1, r0
 8010e6c:	6818      	ldr	r0, [r3, #0]
 8010e6e:	f7ff bfd3 	b.w	8010e18 <_raise_r>
 8010e72:	bf00      	nop
 8010e74:	20000188 	.word	0x20000188

08010e78 <_kill_r>:
 8010e78:	b538      	push	{r3, r4, r5, lr}
 8010e7a:	4d07      	ldr	r5, [pc, #28]	; (8010e98 <_kill_r+0x20>)
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	4604      	mov	r4, r0
 8010e80:	4608      	mov	r0, r1
 8010e82:	4611      	mov	r1, r2
 8010e84:	602b      	str	r3, [r5, #0]
 8010e86:	f7f1 fec1 	bl	8002c0c <_kill>
 8010e8a:	1c43      	adds	r3, r0, #1
 8010e8c:	d102      	bne.n	8010e94 <_kill_r+0x1c>
 8010e8e:	682b      	ldr	r3, [r5, #0]
 8010e90:	b103      	cbz	r3, 8010e94 <_kill_r+0x1c>
 8010e92:	6023      	str	r3, [r4, #0]
 8010e94:	bd38      	pop	{r3, r4, r5, pc}
 8010e96:	bf00      	nop
 8010e98:	20006434 	.word	0x20006434

08010e9c <_getpid_r>:
 8010e9c:	f7f1 beae 	b.w	8002bfc <_getpid>

08010ea0 <siprintf>:
 8010ea0:	b40e      	push	{r1, r2, r3}
 8010ea2:	b500      	push	{lr}
 8010ea4:	b09c      	sub	sp, #112	; 0x70
 8010ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8010ea8:	9002      	str	r0, [sp, #8]
 8010eaa:	9006      	str	r0, [sp, #24]
 8010eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010eb0:	4809      	ldr	r0, [pc, #36]	; (8010ed8 <siprintf+0x38>)
 8010eb2:	9107      	str	r1, [sp, #28]
 8010eb4:	9104      	str	r1, [sp, #16]
 8010eb6:	4909      	ldr	r1, [pc, #36]	; (8010edc <siprintf+0x3c>)
 8010eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ebc:	9105      	str	r1, [sp, #20]
 8010ebe:	6800      	ldr	r0, [r0, #0]
 8010ec0:	9301      	str	r3, [sp, #4]
 8010ec2:	a902      	add	r1, sp, #8
 8010ec4:	f003 f92e 	bl	8014124 <_svfiprintf_r>
 8010ec8:	9b02      	ldr	r3, [sp, #8]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	701a      	strb	r2, [r3, #0]
 8010ece:	b01c      	add	sp, #112	; 0x70
 8010ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ed4:	b003      	add	sp, #12
 8010ed6:	4770      	bx	lr
 8010ed8:	20000188 	.word	0x20000188
 8010edc:	ffff0208 	.word	0xffff0208

08010ee0 <sulp>:
 8010ee0:	b570      	push	{r4, r5, r6, lr}
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	460d      	mov	r5, r1
 8010ee6:	ec45 4b10 	vmov	d0, r4, r5
 8010eea:	4616      	mov	r6, r2
 8010eec:	f002 ff60 	bl	8013db0 <__ulp>
 8010ef0:	ec51 0b10 	vmov	r0, r1, d0
 8010ef4:	b17e      	cbz	r6, 8010f16 <sulp+0x36>
 8010ef6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010efa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	dd09      	ble.n	8010f16 <sulp+0x36>
 8010f02:	051b      	lsls	r3, r3, #20
 8010f04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010f08:	2400      	movs	r4, #0
 8010f0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010f0e:	4622      	mov	r2, r4
 8010f10:	462b      	mov	r3, r5
 8010f12:	f7ef fb81 	bl	8000618 <__aeabi_dmul>
 8010f16:	bd70      	pop	{r4, r5, r6, pc}

08010f18 <_strtod_l>:
 8010f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f1c:	b0a3      	sub	sp, #140	; 0x8c
 8010f1e:	461f      	mov	r7, r3
 8010f20:	2300      	movs	r3, #0
 8010f22:	931e      	str	r3, [sp, #120]	; 0x78
 8010f24:	4ba4      	ldr	r3, [pc, #656]	; (80111b8 <_strtod_l+0x2a0>)
 8010f26:	9219      	str	r2, [sp, #100]	; 0x64
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	9307      	str	r3, [sp, #28]
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	4618      	mov	r0, r3
 8010f30:	4688      	mov	r8, r1
 8010f32:	f7ef f95b 	bl	80001ec <strlen>
 8010f36:	f04f 0a00 	mov.w	sl, #0
 8010f3a:	4605      	mov	r5, r0
 8010f3c:	f04f 0b00 	mov.w	fp, #0
 8010f40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010f44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f46:	781a      	ldrb	r2, [r3, #0]
 8010f48:	2a2b      	cmp	r2, #43	; 0x2b
 8010f4a:	d04c      	beq.n	8010fe6 <_strtod_l+0xce>
 8010f4c:	d839      	bhi.n	8010fc2 <_strtod_l+0xaa>
 8010f4e:	2a0d      	cmp	r2, #13
 8010f50:	d832      	bhi.n	8010fb8 <_strtod_l+0xa0>
 8010f52:	2a08      	cmp	r2, #8
 8010f54:	d832      	bhi.n	8010fbc <_strtod_l+0xa4>
 8010f56:	2a00      	cmp	r2, #0
 8010f58:	d03c      	beq.n	8010fd4 <_strtod_l+0xbc>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8010f5e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010f60:	7833      	ldrb	r3, [r6, #0]
 8010f62:	2b30      	cmp	r3, #48	; 0x30
 8010f64:	f040 80b4 	bne.w	80110d0 <_strtod_l+0x1b8>
 8010f68:	7873      	ldrb	r3, [r6, #1]
 8010f6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010f6e:	2b58      	cmp	r3, #88	; 0x58
 8010f70:	d16c      	bne.n	801104c <_strtod_l+0x134>
 8010f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f74:	9301      	str	r3, [sp, #4]
 8010f76:	ab1e      	add	r3, sp, #120	; 0x78
 8010f78:	9702      	str	r7, [sp, #8]
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	4a8f      	ldr	r2, [pc, #572]	; (80111bc <_strtod_l+0x2a4>)
 8010f7e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010f80:	a91d      	add	r1, sp, #116	; 0x74
 8010f82:	4620      	mov	r0, r4
 8010f84:	f002 f816 	bl	8012fb4 <__gethex>
 8010f88:	f010 0707 	ands.w	r7, r0, #7
 8010f8c:	4605      	mov	r5, r0
 8010f8e:	d005      	beq.n	8010f9c <_strtod_l+0x84>
 8010f90:	2f06      	cmp	r7, #6
 8010f92:	d12a      	bne.n	8010fea <_strtod_l+0xd2>
 8010f94:	3601      	adds	r6, #1
 8010f96:	2300      	movs	r3, #0
 8010f98:	961d      	str	r6, [sp, #116]	; 0x74
 8010f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8010f9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f040 8596 	bne.w	8011ad0 <_strtod_l+0xbb8>
 8010fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fa6:	b1db      	cbz	r3, 8010fe0 <_strtod_l+0xc8>
 8010fa8:	4652      	mov	r2, sl
 8010faa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010fae:	ec43 2b10 	vmov	d0, r2, r3
 8010fb2:	b023      	add	sp, #140	; 0x8c
 8010fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb8:	2a20      	cmp	r2, #32
 8010fba:	d1ce      	bne.n	8010f5a <_strtod_l+0x42>
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	931d      	str	r3, [sp, #116]	; 0x74
 8010fc0:	e7c0      	b.n	8010f44 <_strtod_l+0x2c>
 8010fc2:	2a2d      	cmp	r2, #45	; 0x2d
 8010fc4:	d1c9      	bne.n	8010f5a <_strtod_l+0x42>
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	920e      	str	r2, [sp, #56]	; 0x38
 8010fca:	1c5a      	adds	r2, r3, #1
 8010fcc:	921d      	str	r2, [sp, #116]	; 0x74
 8010fce:	785b      	ldrb	r3, [r3, #1]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d1c4      	bne.n	8010f5e <_strtod_l+0x46>
 8010fd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010fd6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f040 8576 	bne.w	8011acc <_strtod_l+0xbb4>
 8010fe0:	4652      	mov	r2, sl
 8010fe2:	465b      	mov	r3, fp
 8010fe4:	e7e3      	b.n	8010fae <_strtod_l+0x96>
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	e7ee      	b.n	8010fc8 <_strtod_l+0xb0>
 8010fea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010fec:	b13a      	cbz	r2, 8010ffe <_strtod_l+0xe6>
 8010fee:	2135      	movs	r1, #53	; 0x35
 8010ff0:	a820      	add	r0, sp, #128	; 0x80
 8010ff2:	f002 ffe8 	bl	8013fc6 <__copybits>
 8010ff6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f002 fbad 	bl	8013758 <_Bfree>
 8010ffe:	3f01      	subs	r7, #1
 8011000:	2f05      	cmp	r7, #5
 8011002:	d807      	bhi.n	8011014 <_strtod_l+0xfc>
 8011004:	e8df f007 	tbb	[pc, r7]
 8011008:	1d180b0e 	.word	0x1d180b0e
 801100c:	030e      	.short	0x030e
 801100e:	f04f 0b00 	mov.w	fp, #0
 8011012:	46da      	mov	sl, fp
 8011014:	0728      	lsls	r0, r5, #28
 8011016:	d5c1      	bpl.n	8010f9c <_strtod_l+0x84>
 8011018:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801101c:	e7be      	b.n	8010f9c <_strtod_l+0x84>
 801101e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011022:	e7f7      	b.n	8011014 <_strtod_l+0xfc>
 8011024:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011028:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801102a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801102e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011032:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011036:	e7ed      	b.n	8011014 <_strtod_l+0xfc>
 8011038:	f8df b184 	ldr.w	fp, [pc, #388]	; 80111c0 <_strtod_l+0x2a8>
 801103c:	f04f 0a00 	mov.w	sl, #0
 8011040:	e7e8      	b.n	8011014 <_strtod_l+0xfc>
 8011042:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011046:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801104a:	e7e3      	b.n	8011014 <_strtod_l+0xfc>
 801104c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801104e:	1c5a      	adds	r2, r3, #1
 8011050:	921d      	str	r2, [sp, #116]	; 0x74
 8011052:	785b      	ldrb	r3, [r3, #1]
 8011054:	2b30      	cmp	r3, #48	; 0x30
 8011056:	d0f9      	beq.n	801104c <_strtod_l+0x134>
 8011058:	2b00      	cmp	r3, #0
 801105a:	d09f      	beq.n	8010f9c <_strtod_l+0x84>
 801105c:	2301      	movs	r3, #1
 801105e:	f04f 0900 	mov.w	r9, #0
 8011062:	9304      	str	r3, [sp, #16]
 8011064:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011066:	930a      	str	r3, [sp, #40]	; 0x28
 8011068:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801106c:	464f      	mov	r7, r9
 801106e:	220a      	movs	r2, #10
 8011070:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011072:	7806      	ldrb	r6, [r0, #0]
 8011074:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011078:	b2d9      	uxtb	r1, r3
 801107a:	2909      	cmp	r1, #9
 801107c:	d92a      	bls.n	80110d4 <_strtod_l+0x1bc>
 801107e:	9907      	ldr	r1, [sp, #28]
 8011080:	462a      	mov	r2, r5
 8011082:	f003 faf4 	bl	801466e <strncmp>
 8011086:	b398      	cbz	r0, 80110f0 <_strtod_l+0x1d8>
 8011088:	2000      	movs	r0, #0
 801108a:	4633      	mov	r3, r6
 801108c:	463d      	mov	r5, r7
 801108e:	9007      	str	r0, [sp, #28]
 8011090:	4602      	mov	r2, r0
 8011092:	2b65      	cmp	r3, #101	; 0x65
 8011094:	d001      	beq.n	801109a <_strtod_l+0x182>
 8011096:	2b45      	cmp	r3, #69	; 0x45
 8011098:	d118      	bne.n	80110cc <_strtod_l+0x1b4>
 801109a:	b91d      	cbnz	r5, 80110a4 <_strtod_l+0x18c>
 801109c:	9b04      	ldr	r3, [sp, #16]
 801109e:	4303      	orrs	r3, r0
 80110a0:	d098      	beq.n	8010fd4 <_strtod_l+0xbc>
 80110a2:	2500      	movs	r5, #0
 80110a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80110a8:	f108 0301 	add.w	r3, r8, #1
 80110ac:	931d      	str	r3, [sp, #116]	; 0x74
 80110ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 80110b2:	2b2b      	cmp	r3, #43	; 0x2b
 80110b4:	d075      	beq.n	80111a2 <_strtod_l+0x28a>
 80110b6:	2b2d      	cmp	r3, #45	; 0x2d
 80110b8:	d07b      	beq.n	80111b2 <_strtod_l+0x29a>
 80110ba:	f04f 0c00 	mov.w	ip, #0
 80110be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80110c2:	2909      	cmp	r1, #9
 80110c4:	f240 8082 	bls.w	80111cc <_strtod_l+0x2b4>
 80110c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80110cc:	2600      	movs	r6, #0
 80110ce:	e09d      	b.n	801120c <_strtod_l+0x2f4>
 80110d0:	2300      	movs	r3, #0
 80110d2:	e7c4      	b.n	801105e <_strtod_l+0x146>
 80110d4:	2f08      	cmp	r7, #8
 80110d6:	bfd8      	it	le
 80110d8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80110da:	f100 0001 	add.w	r0, r0, #1
 80110de:	bfda      	itte	le
 80110e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80110e4:	9309      	strle	r3, [sp, #36]	; 0x24
 80110e6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80110ea:	3701      	adds	r7, #1
 80110ec:	901d      	str	r0, [sp, #116]	; 0x74
 80110ee:	e7bf      	b.n	8011070 <_strtod_l+0x158>
 80110f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110f2:	195a      	adds	r2, r3, r5
 80110f4:	921d      	str	r2, [sp, #116]	; 0x74
 80110f6:	5d5b      	ldrb	r3, [r3, r5]
 80110f8:	2f00      	cmp	r7, #0
 80110fa:	d037      	beq.n	801116c <_strtod_l+0x254>
 80110fc:	9007      	str	r0, [sp, #28]
 80110fe:	463d      	mov	r5, r7
 8011100:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011104:	2a09      	cmp	r2, #9
 8011106:	d912      	bls.n	801112e <_strtod_l+0x216>
 8011108:	2201      	movs	r2, #1
 801110a:	e7c2      	b.n	8011092 <_strtod_l+0x17a>
 801110c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801110e:	1c5a      	adds	r2, r3, #1
 8011110:	921d      	str	r2, [sp, #116]	; 0x74
 8011112:	785b      	ldrb	r3, [r3, #1]
 8011114:	3001      	adds	r0, #1
 8011116:	2b30      	cmp	r3, #48	; 0x30
 8011118:	d0f8      	beq.n	801110c <_strtod_l+0x1f4>
 801111a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801111e:	2a08      	cmp	r2, #8
 8011120:	f200 84db 	bhi.w	8011ada <_strtod_l+0xbc2>
 8011124:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011126:	9007      	str	r0, [sp, #28]
 8011128:	2000      	movs	r0, #0
 801112a:	920a      	str	r2, [sp, #40]	; 0x28
 801112c:	4605      	mov	r5, r0
 801112e:	3b30      	subs	r3, #48	; 0x30
 8011130:	f100 0201 	add.w	r2, r0, #1
 8011134:	d014      	beq.n	8011160 <_strtod_l+0x248>
 8011136:	9907      	ldr	r1, [sp, #28]
 8011138:	4411      	add	r1, r2
 801113a:	9107      	str	r1, [sp, #28]
 801113c:	462a      	mov	r2, r5
 801113e:	eb00 0e05 	add.w	lr, r0, r5
 8011142:	210a      	movs	r1, #10
 8011144:	4572      	cmp	r2, lr
 8011146:	d113      	bne.n	8011170 <_strtod_l+0x258>
 8011148:	182a      	adds	r2, r5, r0
 801114a:	2a08      	cmp	r2, #8
 801114c:	f105 0501 	add.w	r5, r5, #1
 8011150:	4405      	add	r5, r0
 8011152:	dc1c      	bgt.n	801118e <_strtod_l+0x276>
 8011154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011156:	220a      	movs	r2, #10
 8011158:	fb02 3301 	mla	r3, r2, r1, r3
 801115c:	9309      	str	r3, [sp, #36]	; 0x24
 801115e:	2200      	movs	r2, #0
 8011160:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011162:	1c59      	adds	r1, r3, #1
 8011164:	911d      	str	r1, [sp, #116]	; 0x74
 8011166:	785b      	ldrb	r3, [r3, #1]
 8011168:	4610      	mov	r0, r2
 801116a:	e7c9      	b.n	8011100 <_strtod_l+0x1e8>
 801116c:	4638      	mov	r0, r7
 801116e:	e7d2      	b.n	8011116 <_strtod_l+0x1fe>
 8011170:	2a08      	cmp	r2, #8
 8011172:	dc04      	bgt.n	801117e <_strtod_l+0x266>
 8011174:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011176:	434e      	muls	r6, r1
 8011178:	9609      	str	r6, [sp, #36]	; 0x24
 801117a:	3201      	adds	r2, #1
 801117c:	e7e2      	b.n	8011144 <_strtod_l+0x22c>
 801117e:	f102 0c01 	add.w	ip, r2, #1
 8011182:	f1bc 0f10 	cmp.w	ip, #16
 8011186:	bfd8      	it	le
 8011188:	fb01 f909 	mulle.w	r9, r1, r9
 801118c:	e7f5      	b.n	801117a <_strtod_l+0x262>
 801118e:	2d10      	cmp	r5, #16
 8011190:	bfdc      	itt	le
 8011192:	220a      	movle	r2, #10
 8011194:	fb02 3909 	mlale	r9, r2, r9, r3
 8011198:	e7e1      	b.n	801115e <_strtod_l+0x246>
 801119a:	2300      	movs	r3, #0
 801119c:	9307      	str	r3, [sp, #28]
 801119e:	2201      	movs	r2, #1
 80111a0:	e77c      	b.n	801109c <_strtod_l+0x184>
 80111a2:	f04f 0c00 	mov.w	ip, #0
 80111a6:	f108 0302 	add.w	r3, r8, #2
 80111aa:	931d      	str	r3, [sp, #116]	; 0x74
 80111ac:	f898 3002 	ldrb.w	r3, [r8, #2]
 80111b0:	e785      	b.n	80110be <_strtod_l+0x1a6>
 80111b2:	f04f 0c01 	mov.w	ip, #1
 80111b6:	e7f6      	b.n	80111a6 <_strtod_l+0x28e>
 80111b8:	0801526c 	.word	0x0801526c
 80111bc:	08014fb4 	.word	0x08014fb4
 80111c0:	7ff00000 	.word	0x7ff00000
 80111c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80111c6:	1c59      	adds	r1, r3, #1
 80111c8:	911d      	str	r1, [sp, #116]	; 0x74
 80111ca:	785b      	ldrb	r3, [r3, #1]
 80111cc:	2b30      	cmp	r3, #48	; 0x30
 80111ce:	d0f9      	beq.n	80111c4 <_strtod_l+0x2ac>
 80111d0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80111d4:	2908      	cmp	r1, #8
 80111d6:	f63f af79 	bhi.w	80110cc <_strtod_l+0x1b4>
 80111da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80111de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80111e0:	9308      	str	r3, [sp, #32]
 80111e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80111e4:	1c59      	adds	r1, r3, #1
 80111e6:	911d      	str	r1, [sp, #116]	; 0x74
 80111e8:	785b      	ldrb	r3, [r3, #1]
 80111ea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80111ee:	2e09      	cmp	r6, #9
 80111f0:	d937      	bls.n	8011262 <_strtod_l+0x34a>
 80111f2:	9e08      	ldr	r6, [sp, #32]
 80111f4:	1b89      	subs	r1, r1, r6
 80111f6:	2908      	cmp	r1, #8
 80111f8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80111fc:	dc02      	bgt.n	8011204 <_strtod_l+0x2ec>
 80111fe:	4576      	cmp	r6, lr
 8011200:	bfa8      	it	ge
 8011202:	4676      	movge	r6, lr
 8011204:	f1bc 0f00 	cmp.w	ip, #0
 8011208:	d000      	beq.n	801120c <_strtod_l+0x2f4>
 801120a:	4276      	negs	r6, r6
 801120c:	2d00      	cmp	r5, #0
 801120e:	d14f      	bne.n	80112b0 <_strtod_l+0x398>
 8011210:	9904      	ldr	r1, [sp, #16]
 8011212:	4301      	orrs	r1, r0
 8011214:	f47f aec2 	bne.w	8010f9c <_strtod_l+0x84>
 8011218:	2a00      	cmp	r2, #0
 801121a:	f47f aedb 	bne.w	8010fd4 <_strtod_l+0xbc>
 801121e:	2b69      	cmp	r3, #105	; 0x69
 8011220:	d027      	beq.n	8011272 <_strtod_l+0x35a>
 8011222:	dc24      	bgt.n	801126e <_strtod_l+0x356>
 8011224:	2b49      	cmp	r3, #73	; 0x49
 8011226:	d024      	beq.n	8011272 <_strtod_l+0x35a>
 8011228:	2b4e      	cmp	r3, #78	; 0x4e
 801122a:	f47f aed3 	bne.w	8010fd4 <_strtod_l+0xbc>
 801122e:	499e      	ldr	r1, [pc, #632]	; (80114a8 <_strtod_l+0x590>)
 8011230:	a81d      	add	r0, sp, #116	; 0x74
 8011232:	f002 f917 	bl	8013464 <__match>
 8011236:	2800      	cmp	r0, #0
 8011238:	f43f aecc 	beq.w	8010fd4 <_strtod_l+0xbc>
 801123c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	2b28      	cmp	r3, #40	; 0x28
 8011242:	d12d      	bne.n	80112a0 <_strtod_l+0x388>
 8011244:	4999      	ldr	r1, [pc, #612]	; (80114ac <_strtod_l+0x594>)
 8011246:	aa20      	add	r2, sp, #128	; 0x80
 8011248:	a81d      	add	r0, sp, #116	; 0x74
 801124a:	f002 f91f 	bl	801348c <__hexnan>
 801124e:	2805      	cmp	r0, #5
 8011250:	d126      	bne.n	80112a0 <_strtod_l+0x388>
 8011252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011254:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011258:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801125c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011260:	e69c      	b.n	8010f9c <_strtod_l+0x84>
 8011262:	210a      	movs	r1, #10
 8011264:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011268:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801126c:	e7b9      	b.n	80111e2 <_strtod_l+0x2ca>
 801126e:	2b6e      	cmp	r3, #110	; 0x6e
 8011270:	e7db      	b.n	801122a <_strtod_l+0x312>
 8011272:	498f      	ldr	r1, [pc, #572]	; (80114b0 <_strtod_l+0x598>)
 8011274:	a81d      	add	r0, sp, #116	; 0x74
 8011276:	f002 f8f5 	bl	8013464 <__match>
 801127a:	2800      	cmp	r0, #0
 801127c:	f43f aeaa 	beq.w	8010fd4 <_strtod_l+0xbc>
 8011280:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011282:	498c      	ldr	r1, [pc, #560]	; (80114b4 <_strtod_l+0x59c>)
 8011284:	3b01      	subs	r3, #1
 8011286:	a81d      	add	r0, sp, #116	; 0x74
 8011288:	931d      	str	r3, [sp, #116]	; 0x74
 801128a:	f002 f8eb 	bl	8013464 <__match>
 801128e:	b910      	cbnz	r0, 8011296 <_strtod_l+0x37e>
 8011290:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011292:	3301      	adds	r3, #1
 8011294:	931d      	str	r3, [sp, #116]	; 0x74
 8011296:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80114c4 <_strtod_l+0x5ac>
 801129a:	f04f 0a00 	mov.w	sl, #0
 801129e:	e67d      	b.n	8010f9c <_strtod_l+0x84>
 80112a0:	4885      	ldr	r0, [pc, #532]	; (80114b8 <_strtod_l+0x5a0>)
 80112a2:	f003 f999 	bl	80145d8 <nan>
 80112a6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80112aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80112ae:	e675      	b.n	8010f9c <_strtod_l+0x84>
 80112b0:	9b07      	ldr	r3, [sp, #28]
 80112b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112b4:	1af3      	subs	r3, r6, r3
 80112b6:	2f00      	cmp	r7, #0
 80112b8:	bf08      	it	eq
 80112ba:	462f      	moveq	r7, r5
 80112bc:	2d10      	cmp	r5, #16
 80112be:	9308      	str	r3, [sp, #32]
 80112c0:	46a8      	mov	r8, r5
 80112c2:	bfa8      	it	ge
 80112c4:	f04f 0810 	movge.w	r8, #16
 80112c8:	f7ef f92c 	bl	8000524 <__aeabi_ui2d>
 80112cc:	2d09      	cmp	r5, #9
 80112ce:	4682      	mov	sl, r0
 80112d0:	468b      	mov	fp, r1
 80112d2:	dd13      	ble.n	80112fc <_strtod_l+0x3e4>
 80112d4:	4b79      	ldr	r3, [pc, #484]	; (80114bc <_strtod_l+0x5a4>)
 80112d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80112da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80112de:	f7ef f99b 	bl	8000618 <__aeabi_dmul>
 80112e2:	4682      	mov	sl, r0
 80112e4:	4648      	mov	r0, r9
 80112e6:	468b      	mov	fp, r1
 80112e8:	f7ef f91c 	bl	8000524 <__aeabi_ui2d>
 80112ec:	4602      	mov	r2, r0
 80112ee:	460b      	mov	r3, r1
 80112f0:	4650      	mov	r0, sl
 80112f2:	4659      	mov	r1, fp
 80112f4:	f7ee ffda 	bl	80002ac <__adddf3>
 80112f8:	4682      	mov	sl, r0
 80112fa:	468b      	mov	fp, r1
 80112fc:	2d0f      	cmp	r5, #15
 80112fe:	dc38      	bgt.n	8011372 <_strtod_l+0x45a>
 8011300:	9b08      	ldr	r3, [sp, #32]
 8011302:	2b00      	cmp	r3, #0
 8011304:	f43f ae4a 	beq.w	8010f9c <_strtod_l+0x84>
 8011308:	dd24      	ble.n	8011354 <_strtod_l+0x43c>
 801130a:	2b16      	cmp	r3, #22
 801130c:	dc0b      	bgt.n	8011326 <_strtod_l+0x40e>
 801130e:	4d6b      	ldr	r5, [pc, #428]	; (80114bc <_strtod_l+0x5a4>)
 8011310:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011314:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011318:	4652      	mov	r2, sl
 801131a:	465b      	mov	r3, fp
 801131c:	f7ef f97c 	bl	8000618 <__aeabi_dmul>
 8011320:	4682      	mov	sl, r0
 8011322:	468b      	mov	fp, r1
 8011324:	e63a      	b.n	8010f9c <_strtod_l+0x84>
 8011326:	9a08      	ldr	r2, [sp, #32]
 8011328:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801132c:	4293      	cmp	r3, r2
 801132e:	db20      	blt.n	8011372 <_strtod_l+0x45a>
 8011330:	4c62      	ldr	r4, [pc, #392]	; (80114bc <_strtod_l+0x5a4>)
 8011332:	f1c5 050f 	rsb	r5, r5, #15
 8011336:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801133a:	4652      	mov	r2, sl
 801133c:	465b      	mov	r3, fp
 801133e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011342:	f7ef f969 	bl	8000618 <__aeabi_dmul>
 8011346:	9b08      	ldr	r3, [sp, #32]
 8011348:	1b5d      	subs	r5, r3, r5
 801134a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801134e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011352:	e7e3      	b.n	801131c <_strtod_l+0x404>
 8011354:	9b08      	ldr	r3, [sp, #32]
 8011356:	3316      	adds	r3, #22
 8011358:	db0b      	blt.n	8011372 <_strtod_l+0x45a>
 801135a:	9b07      	ldr	r3, [sp, #28]
 801135c:	4a57      	ldr	r2, [pc, #348]	; (80114bc <_strtod_l+0x5a4>)
 801135e:	1b9e      	subs	r6, r3, r6
 8011360:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011364:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011368:	4650      	mov	r0, sl
 801136a:	4659      	mov	r1, fp
 801136c:	f7ef fa7e 	bl	800086c <__aeabi_ddiv>
 8011370:	e7d6      	b.n	8011320 <_strtod_l+0x408>
 8011372:	9b08      	ldr	r3, [sp, #32]
 8011374:	eba5 0808 	sub.w	r8, r5, r8
 8011378:	4498      	add	r8, r3
 801137a:	f1b8 0f00 	cmp.w	r8, #0
 801137e:	dd71      	ble.n	8011464 <_strtod_l+0x54c>
 8011380:	f018 030f 	ands.w	r3, r8, #15
 8011384:	d00a      	beq.n	801139c <_strtod_l+0x484>
 8011386:	494d      	ldr	r1, [pc, #308]	; (80114bc <_strtod_l+0x5a4>)
 8011388:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801138c:	4652      	mov	r2, sl
 801138e:	465b      	mov	r3, fp
 8011390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011394:	f7ef f940 	bl	8000618 <__aeabi_dmul>
 8011398:	4682      	mov	sl, r0
 801139a:	468b      	mov	fp, r1
 801139c:	f038 080f 	bics.w	r8, r8, #15
 80113a0:	d04d      	beq.n	801143e <_strtod_l+0x526>
 80113a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80113a6:	dd22      	ble.n	80113ee <_strtod_l+0x4d6>
 80113a8:	2500      	movs	r5, #0
 80113aa:	462e      	mov	r6, r5
 80113ac:	9509      	str	r5, [sp, #36]	; 0x24
 80113ae:	9507      	str	r5, [sp, #28]
 80113b0:	2322      	movs	r3, #34	; 0x22
 80113b2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80114c4 <_strtod_l+0x5ac>
 80113b6:	6023      	str	r3, [r4, #0]
 80113b8:	f04f 0a00 	mov.w	sl, #0
 80113bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f43f adec 	beq.w	8010f9c <_strtod_l+0x84>
 80113c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80113c6:	4620      	mov	r0, r4
 80113c8:	f002 f9c6 	bl	8013758 <_Bfree>
 80113cc:	9907      	ldr	r1, [sp, #28]
 80113ce:	4620      	mov	r0, r4
 80113d0:	f002 f9c2 	bl	8013758 <_Bfree>
 80113d4:	4631      	mov	r1, r6
 80113d6:	4620      	mov	r0, r4
 80113d8:	f002 f9be 	bl	8013758 <_Bfree>
 80113dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113de:	4620      	mov	r0, r4
 80113e0:	f002 f9ba 	bl	8013758 <_Bfree>
 80113e4:	4629      	mov	r1, r5
 80113e6:	4620      	mov	r0, r4
 80113e8:	f002 f9b6 	bl	8013758 <_Bfree>
 80113ec:	e5d6      	b.n	8010f9c <_strtod_l+0x84>
 80113ee:	2300      	movs	r3, #0
 80113f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80113f4:	4650      	mov	r0, sl
 80113f6:	4659      	mov	r1, fp
 80113f8:	4699      	mov	r9, r3
 80113fa:	f1b8 0f01 	cmp.w	r8, #1
 80113fe:	dc21      	bgt.n	8011444 <_strtod_l+0x52c>
 8011400:	b10b      	cbz	r3, 8011406 <_strtod_l+0x4ee>
 8011402:	4682      	mov	sl, r0
 8011404:	468b      	mov	fp, r1
 8011406:	4b2e      	ldr	r3, [pc, #184]	; (80114c0 <_strtod_l+0x5a8>)
 8011408:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801140c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011410:	4652      	mov	r2, sl
 8011412:	465b      	mov	r3, fp
 8011414:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011418:	f7ef f8fe 	bl	8000618 <__aeabi_dmul>
 801141c:	4b29      	ldr	r3, [pc, #164]	; (80114c4 <_strtod_l+0x5ac>)
 801141e:	460a      	mov	r2, r1
 8011420:	400b      	ands	r3, r1
 8011422:	4929      	ldr	r1, [pc, #164]	; (80114c8 <_strtod_l+0x5b0>)
 8011424:	428b      	cmp	r3, r1
 8011426:	4682      	mov	sl, r0
 8011428:	d8be      	bhi.n	80113a8 <_strtod_l+0x490>
 801142a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801142e:	428b      	cmp	r3, r1
 8011430:	bf86      	itte	hi
 8011432:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80114cc <_strtod_l+0x5b4>
 8011436:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801143a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801143e:	2300      	movs	r3, #0
 8011440:	9304      	str	r3, [sp, #16]
 8011442:	e081      	b.n	8011548 <_strtod_l+0x630>
 8011444:	f018 0f01 	tst.w	r8, #1
 8011448:	d007      	beq.n	801145a <_strtod_l+0x542>
 801144a:	4b1d      	ldr	r3, [pc, #116]	; (80114c0 <_strtod_l+0x5a8>)
 801144c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011454:	f7ef f8e0 	bl	8000618 <__aeabi_dmul>
 8011458:	2301      	movs	r3, #1
 801145a:	f109 0901 	add.w	r9, r9, #1
 801145e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011462:	e7ca      	b.n	80113fa <_strtod_l+0x4e2>
 8011464:	d0eb      	beq.n	801143e <_strtod_l+0x526>
 8011466:	f1c8 0800 	rsb	r8, r8, #0
 801146a:	f018 020f 	ands.w	r2, r8, #15
 801146e:	d00a      	beq.n	8011486 <_strtod_l+0x56e>
 8011470:	4b12      	ldr	r3, [pc, #72]	; (80114bc <_strtod_l+0x5a4>)
 8011472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011476:	4650      	mov	r0, sl
 8011478:	4659      	mov	r1, fp
 801147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147e:	f7ef f9f5 	bl	800086c <__aeabi_ddiv>
 8011482:	4682      	mov	sl, r0
 8011484:	468b      	mov	fp, r1
 8011486:	ea5f 1828 	movs.w	r8, r8, asr #4
 801148a:	d0d8      	beq.n	801143e <_strtod_l+0x526>
 801148c:	f1b8 0f1f 	cmp.w	r8, #31
 8011490:	dd1e      	ble.n	80114d0 <_strtod_l+0x5b8>
 8011492:	2500      	movs	r5, #0
 8011494:	462e      	mov	r6, r5
 8011496:	9509      	str	r5, [sp, #36]	; 0x24
 8011498:	9507      	str	r5, [sp, #28]
 801149a:	2322      	movs	r3, #34	; 0x22
 801149c:	f04f 0a00 	mov.w	sl, #0
 80114a0:	f04f 0b00 	mov.w	fp, #0
 80114a4:	6023      	str	r3, [r4, #0]
 80114a6:	e789      	b.n	80113bc <_strtod_l+0x4a4>
 80114a8:	08014f85 	.word	0x08014f85
 80114ac:	08014fc8 	.word	0x08014fc8
 80114b0:	08014f7d 	.word	0x08014f7d
 80114b4:	0801510c 	.word	0x0801510c
 80114b8:	08015428 	.word	0x08015428
 80114bc:	08015308 	.word	0x08015308
 80114c0:	080152e0 	.word	0x080152e0
 80114c4:	7ff00000 	.word	0x7ff00000
 80114c8:	7ca00000 	.word	0x7ca00000
 80114cc:	7fefffff 	.word	0x7fefffff
 80114d0:	f018 0310 	ands.w	r3, r8, #16
 80114d4:	bf18      	it	ne
 80114d6:	236a      	movne	r3, #106	; 0x6a
 80114d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011890 <_strtod_l+0x978>
 80114dc:	9304      	str	r3, [sp, #16]
 80114de:	4650      	mov	r0, sl
 80114e0:	4659      	mov	r1, fp
 80114e2:	2300      	movs	r3, #0
 80114e4:	f018 0f01 	tst.w	r8, #1
 80114e8:	d004      	beq.n	80114f4 <_strtod_l+0x5dc>
 80114ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80114ee:	f7ef f893 	bl	8000618 <__aeabi_dmul>
 80114f2:	2301      	movs	r3, #1
 80114f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80114f8:	f109 0908 	add.w	r9, r9, #8
 80114fc:	d1f2      	bne.n	80114e4 <_strtod_l+0x5cc>
 80114fe:	b10b      	cbz	r3, 8011504 <_strtod_l+0x5ec>
 8011500:	4682      	mov	sl, r0
 8011502:	468b      	mov	fp, r1
 8011504:	9b04      	ldr	r3, [sp, #16]
 8011506:	b1bb      	cbz	r3, 8011538 <_strtod_l+0x620>
 8011508:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801150c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011510:	2b00      	cmp	r3, #0
 8011512:	4659      	mov	r1, fp
 8011514:	dd10      	ble.n	8011538 <_strtod_l+0x620>
 8011516:	2b1f      	cmp	r3, #31
 8011518:	f340 8128 	ble.w	801176c <_strtod_l+0x854>
 801151c:	2b34      	cmp	r3, #52	; 0x34
 801151e:	bfde      	ittt	le
 8011520:	3b20      	suble	r3, #32
 8011522:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8011526:	fa02 f303 	lslle.w	r3, r2, r3
 801152a:	f04f 0a00 	mov.w	sl, #0
 801152e:	bfcc      	ite	gt
 8011530:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011534:	ea03 0b01 	andle.w	fp, r3, r1
 8011538:	2200      	movs	r2, #0
 801153a:	2300      	movs	r3, #0
 801153c:	4650      	mov	r0, sl
 801153e:	4659      	mov	r1, fp
 8011540:	f7ef fad2 	bl	8000ae8 <__aeabi_dcmpeq>
 8011544:	2800      	cmp	r0, #0
 8011546:	d1a4      	bne.n	8011492 <_strtod_l+0x57a>
 8011548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801154a:	9300      	str	r3, [sp, #0]
 801154c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801154e:	462b      	mov	r3, r5
 8011550:	463a      	mov	r2, r7
 8011552:	4620      	mov	r0, r4
 8011554:	f002 f96c 	bl	8013830 <__s2b>
 8011558:	9009      	str	r0, [sp, #36]	; 0x24
 801155a:	2800      	cmp	r0, #0
 801155c:	f43f af24 	beq.w	80113a8 <_strtod_l+0x490>
 8011560:	9b07      	ldr	r3, [sp, #28]
 8011562:	1b9e      	subs	r6, r3, r6
 8011564:	9b08      	ldr	r3, [sp, #32]
 8011566:	2b00      	cmp	r3, #0
 8011568:	bfb4      	ite	lt
 801156a:	4633      	movlt	r3, r6
 801156c:	2300      	movge	r3, #0
 801156e:	9310      	str	r3, [sp, #64]	; 0x40
 8011570:	9b08      	ldr	r3, [sp, #32]
 8011572:	2500      	movs	r5, #0
 8011574:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011578:	9318      	str	r3, [sp, #96]	; 0x60
 801157a:	462e      	mov	r6, r5
 801157c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801157e:	4620      	mov	r0, r4
 8011580:	6859      	ldr	r1, [r3, #4]
 8011582:	f002 f8a9 	bl	80136d8 <_Balloc>
 8011586:	9007      	str	r0, [sp, #28]
 8011588:	2800      	cmp	r0, #0
 801158a:	f43f af11 	beq.w	80113b0 <_strtod_l+0x498>
 801158e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011590:	691a      	ldr	r2, [r3, #16]
 8011592:	3202      	adds	r2, #2
 8011594:	f103 010c 	add.w	r1, r3, #12
 8011598:	0092      	lsls	r2, r2, #2
 801159a:	300c      	adds	r0, #12
 801159c:	f7fe fc5e 	bl	800fe5c <memcpy>
 80115a0:	ec4b ab10 	vmov	d0, sl, fp
 80115a4:	aa20      	add	r2, sp, #128	; 0x80
 80115a6:	a91f      	add	r1, sp, #124	; 0x7c
 80115a8:	4620      	mov	r0, r4
 80115aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80115ae:	f002 fc7b 	bl	8013ea8 <__d2b>
 80115b2:	901e      	str	r0, [sp, #120]	; 0x78
 80115b4:	2800      	cmp	r0, #0
 80115b6:	f43f aefb 	beq.w	80113b0 <_strtod_l+0x498>
 80115ba:	2101      	movs	r1, #1
 80115bc:	4620      	mov	r0, r4
 80115be:	f002 f9d1 	bl	8013964 <__i2b>
 80115c2:	4606      	mov	r6, r0
 80115c4:	2800      	cmp	r0, #0
 80115c6:	f43f aef3 	beq.w	80113b0 <_strtod_l+0x498>
 80115ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80115cc:	9904      	ldr	r1, [sp, #16]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	bfab      	itete	ge
 80115d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80115d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80115d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80115d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80115dc:	bfac      	ite	ge
 80115de:	eb03 0902 	addge.w	r9, r3, r2
 80115e2:	1ad7      	sublt	r7, r2, r3
 80115e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80115e6:	eba3 0801 	sub.w	r8, r3, r1
 80115ea:	4490      	add	r8, r2
 80115ec:	4ba3      	ldr	r3, [pc, #652]	; (801187c <_strtod_l+0x964>)
 80115ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80115f2:	4598      	cmp	r8, r3
 80115f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80115f8:	f280 80cc 	bge.w	8011794 <_strtod_l+0x87c>
 80115fc:	eba3 0308 	sub.w	r3, r3, r8
 8011600:	2b1f      	cmp	r3, #31
 8011602:	eba2 0203 	sub.w	r2, r2, r3
 8011606:	f04f 0101 	mov.w	r1, #1
 801160a:	f300 80b6 	bgt.w	801177a <_strtod_l+0x862>
 801160e:	fa01 f303 	lsl.w	r3, r1, r3
 8011612:	9311      	str	r3, [sp, #68]	; 0x44
 8011614:	2300      	movs	r3, #0
 8011616:	930c      	str	r3, [sp, #48]	; 0x30
 8011618:	eb09 0802 	add.w	r8, r9, r2
 801161c:	9b04      	ldr	r3, [sp, #16]
 801161e:	45c1      	cmp	r9, r8
 8011620:	4417      	add	r7, r2
 8011622:	441f      	add	r7, r3
 8011624:	464b      	mov	r3, r9
 8011626:	bfa8      	it	ge
 8011628:	4643      	movge	r3, r8
 801162a:	42bb      	cmp	r3, r7
 801162c:	bfa8      	it	ge
 801162e:	463b      	movge	r3, r7
 8011630:	2b00      	cmp	r3, #0
 8011632:	bfc2      	ittt	gt
 8011634:	eba8 0803 	subgt.w	r8, r8, r3
 8011638:	1aff      	subgt	r7, r7, r3
 801163a:	eba9 0903 	subgt.w	r9, r9, r3
 801163e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011640:	2b00      	cmp	r3, #0
 8011642:	dd17      	ble.n	8011674 <_strtod_l+0x75c>
 8011644:	4631      	mov	r1, r6
 8011646:	461a      	mov	r2, r3
 8011648:	4620      	mov	r0, r4
 801164a:	f002 fa47 	bl	8013adc <__pow5mult>
 801164e:	4606      	mov	r6, r0
 8011650:	2800      	cmp	r0, #0
 8011652:	f43f aead 	beq.w	80113b0 <_strtod_l+0x498>
 8011656:	4601      	mov	r1, r0
 8011658:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801165a:	4620      	mov	r0, r4
 801165c:	f002 f998 	bl	8013990 <__multiply>
 8011660:	900f      	str	r0, [sp, #60]	; 0x3c
 8011662:	2800      	cmp	r0, #0
 8011664:	f43f aea4 	beq.w	80113b0 <_strtod_l+0x498>
 8011668:	991e      	ldr	r1, [sp, #120]	; 0x78
 801166a:	4620      	mov	r0, r4
 801166c:	f002 f874 	bl	8013758 <_Bfree>
 8011670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011672:	931e      	str	r3, [sp, #120]	; 0x78
 8011674:	f1b8 0f00 	cmp.w	r8, #0
 8011678:	f300 8091 	bgt.w	801179e <_strtod_l+0x886>
 801167c:	9b08      	ldr	r3, [sp, #32]
 801167e:	2b00      	cmp	r3, #0
 8011680:	dd08      	ble.n	8011694 <_strtod_l+0x77c>
 8011682:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011684:	9907      	ldr	r1, [sp, #28]
 8011686:	4620      	mov	r0, r4
 8011688:	f002 fa28 	bl	8013adc <__pow5mult>
 801168c:	9007      	str	r0, [sp, #28]
 801168e:	2800      	cmp	r0, #0
 8011690:	f43f ae8e 	beq.w	80113b0 <_strtod_l+0x498>
 8011694:	2f00      	cmp	r7, #0
 8011696:	dd08      	ble.n	80116aa <_strtod_l+0x792>
 8011698:	9907      	ldr	r1, [sp, #28]
 801169a:	463a      	mov	r2, r7
 801169c:	4620      	mov	r0, r4
 801169e:	f002 fa77 	bl	8013b90 <__lshift>
 80116a2:	9007      	str	r0, [sp, #28]
 80116a4:	2800      	cmp	r0, #0
 80116a6:	f43f ae83 	beq.w	80113b0 <_strtod_l+0x498>
 80116aa:	f1b9 0f00 	cmp.w	r9, #0
 80116ae:	dd08      	ble.n	80116c2 <_strtod_l+0x7aa>
 80116b0:	4631      	mov	r1, r6
 80116b2:	464a      	mov	r2, r9
 80116b4:	4620      	mov	r0, r4
 80116b6:	f002 fa6b 	bl	8013b90 <__lshift>
 80116ba:	4606      	mov	r6, r0
 80116bc:	2800      	cmp	r0, #0
 80116be:	f43f ae77 	beq.w	80113b0 <_strtod_l+0x498>
 80116c2:	9a07      	ldr	r2, [sp, #28]
 80116c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80116c6:	4620      	mov	r0, r4
 80116c8:	f002 faea 	bl	8013ca0 <__mdiff>
 80116cc:	4605      	mov	r5, r0
 80116ce:	2800      	cmp	r0, #0
 80116d0:	f43f ae6e 	beq.w	80113b0 <_strtod_l+0x498>
 80116d4:	68c3      	ldr	r3, [r0, #12]
 80116d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80116d8:	2300      	movs	r3, #0
 80116da:	60c3      	str	r3, [r0, #12]
 80116dc:	4631      	mov	r1, r6
 80116de:	f002 fac3 	bl	8013c68 <__mcmp>
 80116e2:	2800      	cmp	r0, #0
 80116e4:	da65      	bge.n	80117b2 <_strtod_l+0x89a>
 80116e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116e8:	ea53 030a 	orrs.w	r3, r3, sl
 80116ec:	f040 8087 	bne.w	80117fe <_strtod_l+0x8e6>
 80116f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	f040 8082 	bne.w	80117fe <_strtod_l+0x8e6>
 80116fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80116fe:	0d1b      	lsrs	r3, r3, #20
 8011700:	051b      	lsls	r3, r3, #20
 8011702:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011706:	d97a      	bls.n	80117fe <_strtod_l+0x8e6>
 8011708:	696b      	ldr	r3, [r5, #20]
 801170a:	b913      	cbnz	r3, 8011712 <_strtod_l+0x7fa>
 801170c:	692b      	ldr	r3, [r5, #16]
 801170e:	2b01      	cmp	r3, #1
 8011710:	dd75      	ble.n	80117fe <_strtod_l+0x8e6>
 8011712:	4629      	mov	r1, r5
 8011714:	2201      	movs	r2, #1
 8011716:	4620      	mov	r0, r4
 8011718:	f002 fa3a 	bl	8013b90 <__lshift>
 801171c:	4631      	mov	r1, r6
 801171e:	4605      	mov	r5, r0
 8011720:	f002 faa2 	bl	8013c68 <__mcmp>
 8011724:	2800      	cmp	r0, #0
 8011726:	dd6a      	ble.n	80117fe <_strtod_l+0x8e6>
 8011728:	9904      	ldr	r1, [sp, #16]
 801172a:	4a55      	ldr	r2, [pc, #340]	; (8011880 <_strtod_l+0x968>)
 801172c:	465b      	mov	r3, fp
 801172e:	2900      	cmp	r1, #0
 8011730:	f000 8085 	beq.w	801183e <_strtod_l+0x926>
 8011734:	ea02 010b 	and.w	r1, r2, fp
 8011738:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801173c:	dc7f      	bgt.n	801183e <_strtod_l+0x926>
 801173e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011742:	f77f aeaa 	ble.w	801149a <_strtod_l+0x582>
 8011746:	4a4f      	ldr	r2, [pc, #316]	; (8011884 <_strtod_l+0x96c>)
 8011748:	2300      	movs	r3, #0
 801174a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801174e:	4650      	mov	r0, sl
 8011750:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011754:	4659      	mov	r1, fp
 8011756:	f7ee ff5f 	bl	8000618 <__aeabi_dmul>
 801175a:	460b      	mov	r3, r1
 801175c:	4303      	orrs	r3, r0
 801175e:	bf08      	it	eq
 8011760:	2322      	moveq	r3, #34	; 0x22
 8011762:	4682      	mov	sl, r0
 8011764:	468b      	mov	fp, r1
 8011766:	bf08      	it	eq
 8011768:	6023      	streq	r3, [r4, #0]
 801176a:	e62b      	b.n	80113c4 <_strtod_l+0x4ac>
 801176c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011770:	fa02 f303 	lsl.w	r3, r2, r3
 8011774:	ea03 0a0a 	and.w	sl, r3, sl
 8011778:	e6de      	b.n	8011538 <_strtod_l+0x620>
 801177a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801177e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011782:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011786:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801178a:	fa01 f308 	lsl.w	r3, r1, r8
 801178e:	930c      	str	r3, [sp, #48]	; 0x30
 8011790:	9111      	str	r1, [sp, #68]	; 0x44
 8011792:	e741      	b.n	8011618 <_strtod_l+0x700>
 8011794:	2300      	movs	r3, #0
 8011796:	930c      	str	r3, [sp, #48]	; 0x30
 8011798:	2301      	movs	r3, #1
 801179a:	9311      	str	r3, [sp, #68]	; 0x44
 801179c:	e73c      	b.n	8011618 <_strtod_l+0x700>
 801179e:	991e      	ldr	r1, [sp, #120]	; 0x78
 80117a0:	4642      	mov	r2, r8
 80117a2:	4620      	mov	r0, r4
 80117a4:	f002 f9f4 	bl	8013b90 <__lshift>
 80117a8:	901e      	str	r0, [sp, #120]	; 0x78
 80117aa:	2800      	cmp	r0, #0
 80117ac:	f47f af66 	bne.w	801167c <_strtod_l+0x764>
 80117b0:	e5fe      	b.n	80113b0 <_strtod_l+0x498>
 80117b2:	465f      	mov	r7, fp
 80117b4:	d16e      	bne.n	8011894 <_strtod_l+0x97c>
 80117b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80117b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117bc:	b342      	cbz	r2, 8011810 <_strtod_l+0x8f8>
 80117be:	4a32      	ldr	r2, [pc, #200]	; (8011888 <_strtod_l+0x970>)
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d128      	bne.n	8011816 <_strtod_l+0x8fe>
 80117c4:	9b04      	ldr	r3, [sp, #16]
 80117c6:	4650      	mov	r0, sl
 80117c8:	b1eb      	cbz	r3, 8011806 <_strtod_l+0x8ee>
 80117ca:	4a2d      	ldr	r2, [pc, #180]	; (8011880 <_strtod_l+0x968>)
 80117cc:	403a      	ands	r2, r7
 80117ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80117d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80117d6:	d819      	bhi.n	801180c <_strtod_l+0x8f4>
 80117d8:	0d12      	lsrs	r2, r2, #20
 80117da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80117de:	fa01 f303 	lsl.w	r3, r1, r3
 80117e2:	4298      	cmp	r0, r3
 80117e4:	d117      	bne.n	8011816 <_strtod_l+0x8fe>
 80117e6:	4b29      	ldr	r3, [pc, #164]	; (801188c <_strtod_l+0x974>)
 80117e8:	429f      	cmp	r7, r3
 80117ea:	d102      	bne.n	80117f2 <_strtod_l+0x8da>
 80117ec:	3001      	adds	r0, #1
 80117ee:	f43f addf 	beq.w	80113b0 <_strtod_l+0x498>
 80117f2:	4b23      	ldr	r3, [pc, #140]	; (8011880 <_strtod_l+0x968>)
 80117f4:	403b      	ands	r3, r7
 80117f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80117fa:	f04f 0a00 	mov.w	sl, #0
 80117fe:	9b04      	ldr	r3, [sp, #16]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1a0      	bne.n	8011746 <_strtod_l+0x82e>
 8011804:	e5de      	b.n	80113c4 <_strtod_l+0x4ac>
 8011806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801180a:	e7ea      	b.n	80117e2 <_strtod_l+0x8ca>
 801180c:	460b      	mov	r3, r1
 801180e:	e7e8      	b.n	80117e2 <_strtod_l+0x8ca>
 8011810:	ea53 030a 	orrs.w	r3, r3, sl
 8011814:	d088      	beq.n	8011728 <_strtod_l+0x810>
 8011816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011818:	b1db      	cbz	r3, 8011852 <_strtod_l+0x93a>
 801181a:	423b      	tst	r3, r7
 801181c:	d0ef      	beq.n	80117fe <_strtod_l+0x8e6>
 801181e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011820:	9a04      	ldr	r2, [sp, #16]
 8011822:	4650      	mov	r0, sl
 8011824:	4659      	mov	r1, fp
 8011826:	b1c3      	cbz	r3, 801185a <_strtod_l+0x942>
 8011828:	f7ff fb5a 	bl	8010ee0 <sulp>
 801182c:	4602      	mov	r2, r0
 801182e:	460b      	mov	r3, r1
 8011830:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011834:	f7ee fd3a 	bl	80002ac <__adddf3>
 8011838:	4682      	mov	sl, r0
 801183a:	468b      	mov	fp, r1
 801183c:	e7df      	b.n	80117fe <_strtod_l+0x8e6>
 801183e:	4013      	ands	r3, r2
 8011840:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011844:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011848:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801184c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011850:	e7d5      	b.n	80117fe <_strtod_l+0x8e6>
 8011852:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011854:	ea13 0f0a 	tst.w	r3, sl
 8011858:	e7e0      	b.n	801181c <_strtod_l+0x904>
 801185a:	f7ff fb41 	bl	8010ee0 <sulp>
 801185e:	4602      	mov	r2, r0
 8011860:	460b      	mov	r3, r1
 8011862:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011866:	f7ee fd1f 	bl	80002a8 <__aeabi_dsub>
 801186a:	2200      	movs	r2, #0
 801186c:	2300      	movs	r3, #0
 801186e:	4682      	mov	sl, r0
 8011870:	468b      	mov	fp, r1
 8011872:	f7ef f939 	bl	8000ae8 <__aeabi_dcmpeq>
 8011876:	2800      	cmp	r0, #0
 8011878:	d0c1      	beq.n	80117fe <_strtod_l+0x8e6>
 801187a:	e60e      	b.n	801149a <_strtod_l+0x582>
 801187c:	fffffc02 	.word	0xfffffc02
 8011880:	7ff00000 	.word	0x7ff00000
 8011884:	39500000 	.word	0x39500000
 8011888:	000fffff 	.word	0x000fffff
 801188c:	7fefffff 	.word	0x7fefffff
 8011890:	08014fe0 	.word	0x08014fe0
 8011894:	4631      	mov	r1, r6
 8011896:	4628      	mov	r0, r5
 8011898:	f002 fb62 	bl	8013f60 <__ratio>
 801189c:	ec59 8b10 	vmov	r8, r9, d0
 80118a0:	ee10 0a10 	vmov	r0, s0
 80118a4:	2200      	movs	r2, #0
 80118a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80118aa:	4649      	mov	r1, r9
 80118ac:	f7ef f930 	bl	8000b10 <__aeabi_dcmple>
 80118b0:	2800      	cmp	r0, #0
 80118b2:	d07c      	beq.n	80119ae <_strtod_l+0xa96>
 80118b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d04c      	beq.n	8011954 <_strtod_l+0xa3c>
 80118ba:	4b95      	ldr	r3, [pc, #596]	; (8011b10 <_strtod_l+0xbf8>)
 80118bc:	2200      	movs	r2, #0
 80118be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80118c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011b10 <_strtod_l+0xbf8>
 80118c6:	f04f 0800 	mov.w	r8, #0
 80118ca:	4b92      	ldr	r3, [pc, #584]	; (8011b14 <_strtod_l+0xbfc>)
 80118cc:	403b      	ands	r3, r7
 80118ce:	9311      	str	r3, [sp, #68]	; 0x44
 80118d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80118d2:	4b91      	ldr	r3, [pc, #580]	; (8011b18 <_strtod_l+0xc00>)
 80118d4:	429a      	cmp	r2, r3
 80118d6:	f040 80b2 	bne.w	8011a3e <_strtod_l+0xb26>
 80118da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80118de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80118e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80118e6:	ec4b ab10 	vmov	d0, sl, fp
 80118ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80118ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80118f2:	f002 fa5d 	bl	8013db0 <__ulp>
 80118f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80118fa:	ec53 2b10 	vmov	r2, r3, d0
 80118fe:	f7ee fe8b 	bl	8000618 <__aeabi_dmul>
 8011902:	4652      	mov	r2, sl
 8011904:	465b      	mov	r3, fp
 8011906:	f7ee fcd1 	bl	80002ac <__adddf3>
 801190a:	460b      	mov	r3, r1
 801190c:	4981      	ldr	r1, [pc, #516]	; (8011b14 <_strtod_l+0xbfc>)
 801190e:	4a83      	ldr	r2, [pc, #524]	; (8011b1c <_strtod_l+0xc04>)
 8011910:	4019      	ands	r1, r3
 8011912:	4291      	cmp	r1, r2
 8011914:	4682      	mov	sl, r0
 8011916:	d95e      	bls.n	80119d6 <_strtod_l+0xabe>
 8011918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801191a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801191e:	4293      	cmp	r3, r2
 8011920:	d103      	bne.n	801192a <_strtod_l+0xa12>
 8011922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011924:	3301      	adds	r3, #1
 8011926:	f43f ad43 	beq.w	80113b0 <_strtod_l+0x498>
 801192a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011b28 <_strtod_l+0xc10>
 801192e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011932:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011934:	4620      	mov	r0, r4
 8011936:	f001 ff0f 	bl	8013758 <_Bfree>
 801193a:	9907      	ldr	r1, [sp, #28]
 801193c:	4620      	mov	r0, r4
 801193e:	f001 ff0b 	bl	8013758 <_Bfree>
 8011942:	4631      	mov	r1, r6
 8011944:	4620      	mov	r0, r4
 8011946:	f001 ff07 	bl	8013758 <_Bfree>
 801194a:	4629      	mov	r1, r5
 801194c:	4620      	mov	r0, r4
 801194e:	f001 ff03 	bl	8013758 <_Bfree>
 8011952:	e613      	b.n	801157c <_strtod_l+0x664>
 8011954:	f1ba 0f00 	cmp.w	sl, #0
 8011958:	d11b      	bne.n	8011992 <_strtod_l+0xa7a>
 801195a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801195e:	b9f3      	cbnz	r3, 801199e <_strtod_l+0xa86>
 8011960:	4b6b      	ldr	r3, [pc, #428]	; (8011b10 <_strtod_l+0xbf8>)
 8011962:	2200      	movs	r2, #0
 8011964:	4640      	mov	r0, r8
 8011966:	4649      	mov	r1, r9
 8011968:	f7ef f8c8 	bl	8000afc <__aeabi_dcmplt>
 801196c:	b9d0      	cbnz	r0, 80119a4 <_strtod_l+0xa8c>
 801196e:	4640      	mov	r0, r8
 8011970:	4649      	mov	r1, r9
 8011972:	4b6b      	ldr	r3, [pc, #428]	; (8011b20 <_strtod_l+0xc08>)
 8011974:	2200      	movs	r2, #0
 8011976:	f7ee fe4f 	bl	8000618 <__aeabi_dmul>
 801197a:	4680      	mov	r8, r0
 801197c:	4689      	mov	r9, r1
 801197e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011982:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011986:	931b      	str	r3, [sp, #108]	; 0x6c
 8011988:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801198c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011990:	e79b      	b.n	80118ca <_strtod_l+0x9b2>
 8011992:	f1ba 0f01 	cmp.w	sl, #1
 8011996:	d102      	bne.n	801199e <_strtod_l+0xa86>
 8011998:	2f00      	cmp	r7, #0
 801199a:	f43f ad7e 	beq.w	801149a <_strtod_l+0x582>
 801199e:	4b61      	ldr	r3, [pc, #388]	; (8011b24 <_strtod_l+0xc0c>)
 80119a0:	2200      	movs	r2, #0
 80119a2:	e78c      	b.n	80118be <_strtod_l+0x9a6>
 80119a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011b20 <_strtod_l+0xc08>
 80119a8:	f04f 0800 	mov.w	r8, #0
 80119ac:	e7e7      	b.n	801197e <_strtod_l+0xa66>
 80119ae:	4b5c      	ldr	r3, [pc, #368]	; (8011b20 <_strtod_l+0xc08>)
 80119b0:	4640      	mov	r0, r8
 80119b2:	4649      	mov	r1, r9
 80119b4:	2200      	movs	r2, #0
 80119b6:	f7ee fe2f 	bl	8000618 <__aeabi_dmul>
 80119ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119bc:	4680      	mov	r8, r0
 80119be:	4689      	mov	r9, r1
 80119c0:	b933      	cbnz	r3, 80119d0 <_strtod_l+0xab8>
 80119c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80119c6:	9012      	str	r0, [sp, #72]	; 0x48
 80119c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80119ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80119ce:	e7dd      	b.n	801198c <_strtod_l+0xa74>
 80119d0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80119d4:	e7f9      	b.n	80119ca <_strtod_l+0xab2>
 80119d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80119da:	9b04      	ldr	r3, [sp, #16]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1a8      	bne.n	8011932 <_strtod_l+0xa1a>
 80119e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80119e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119e6:	0d1b      	lsrs	r3, r3, #20
 80119e8:	051b      	lsls	r3, r3, #20
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d1a1      	bne.n	8011932 <_strtod_l+0xa1a>
 80119ee:	4640      	mov	r0, r8
 80119f0:	4649      	mov	r1, r9
 80119f2:	f7ef f971 	bl	8000cd8 <__aeabi_d2lz>
 80119f6:	f7ee fde1 	bl	80005bc <__aeabi_l2d>
 80119fa:	4602      	mov	r2, r0
 80119fc:	460b      	mov	r3, r1
 80119fe:	4640      	mov	r0, r8
 8011a00:	4649      	mov	r1, r9
 8011a02:	f7ee fc51 	bl	80002a8 <__aeabi_dsub>
 8011a06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a0c:	ea43 030a 	orr.w	r3, r3, sl
 8011a10:	4313      	orrs	r3, r2
 8011a12:	4680      	mov	r8, r0
 8011a14:	4689      	mov	r9, r1
 8011a16:	d053      	beq.n	8011ac0 <_strtod_l+0xba8>
 8011a18:	a335      	add	r3, pc, #212	; (adr r3, 8011af0 <_strtod_l+0xbd8>)
 8011a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1e:	f7ef f86d 	bl	8000afc <__aeabi_dcmplt>
 8011a22:	2800      	cmp	r0, #0
 8011a24:	f47f acce 	bne.w	80113c4 <_strtod_l+0x4ac>
 8011a28:	a333      	add	r3, pc, #204	; (adr r3, 8011af8 <_strtod_l+0xbe0>)
 8011a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2e:	4640      	mov	r0, r8
 8011a30:	4649      	mov	r1, r9
 8011a32:	f7ef f881 	bl	8000b38 <__aeabi_dcmpgt>
 8011a36:	2800      	cmp	r0, #0
 8011a38:	f43f af7b 	beq.w	8011932 <_strtod_l+0xa1a>
 8011a3c:	e4c2      	b.n	80113c4 <_strtod_l+0x4ac>
 8011a3e:	9b04      	ldr	r3, [sp, #16]
 8011a40:	b333      	cbz	r3, 8011a90 <_strtod_l+0xb78>
 8011a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011a48:	d822      	bhi.n	8011a90 <_strtod_l+0xb78>
 8011a4a:	a32d      	add	r3, pc, #180	; (adr r3, 8011b00 <_strtod_l+0xbe8>)
 8011a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a50:	4640      	mov	r0, r8
 8011a52:	4649      	mov	r1, r9
 8011a54:	f7ef f85c 	bl	8000b10 <__aeabi_dcmple>
 8011a58:	b1a0      	cbz	r0, 8011a84 <_strtod_l+0xb6c>
 8011a5a:	4649      	mov	r1, r9
 8011a5c:	4640      	mov	r0, r8
 8011a5e:	f7ef f8b3 	bl	8000bc8 <__aeabi_d2uiz>
 8011a62:	2801      	cmp	r0, #1
 8011a64:	bf38      	it	cc
 8011a66:	2001      	movcc	r0, #1
 8011a68:	f7ee fd5c 	bl	8000524 <__aeabi_ui2d>
 8011a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a6e:	4680      	mov	r8, r0
 8011a70:	4689      	mov	r9, r1
 8011a72:	bb13      	cbnz	r3, 8011aba <_strtod_l+0xba2>
 8011a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a78:	9014      	str	r0, [sp, #80]	; 0x50
 8011a7a:	9315      	str	r3, [sp, #84]	; 0x54
 8011a7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011a80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011a8c:	1a9b      	subs	r3, r3, r2
 8011a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8011a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011a94:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011a98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011a9c:	f002 f988 	bl	8013db0 <__ulp>
 8011aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011aa4:	ec53 2b10 	vmov	r2, r3, d0
 8011aa8:	f7ee fdb6 	bl	8000618 <__aeabi_dmul>
 8011aac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ab0:	f7ee fbfc 	bl	80002ac <__adddf3>
 8011ab4:	4682      	mov	sl, r0
 8011ab6:	468b      	mov	fp, r1
 8011ab8:	e78f      	b.n	80119da <_strtod_l+0xac2>
 8011aba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011abe:	e7dd      	b.n	8011a7c <_strtod_l+0xb64>
 8011ac0:	a311      	add	r3, pc, #68	; (adr r3, 8011b08 <_strtod_l+0xbf0>)
 8011ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac6:	f7ef f819 	bl	8000afc <__aeabi_dcmplt>
 8011aca:	e7b4      	b.n	8011a36 <_strtod_l+0xb1e>
 8011acc:	2300      	movs	r3, #0
 8011ace:	930e      	str	r3, [sp, #56]	; 0x38
 8011ad0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011ad2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ad4:	6013      	str	r3, [r2, #0]
 8011ad6:	f7ff ba65 	b.w	8010fa4 <_strtod_l+0x8c>
 8011ada:	2b65      	cmp	r3, #101	; 0x65
 8011adc:	f43f ab5d 	beq.w	801119a <_strtod_l+0x282>
 8011ae0:	2b45      	cmp	r3, #69	; 0x45
 8011ae2:	f43f ab5a 	beq.w	801119a <_strtod_l+0x282>
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	f7ff bb92 	b.w	8011210 <_strtod_l+0x2f8>
 8011aec:	f3af 8000 	nop.w
 8011af0:	94a03595 	.word	0x94a03595
 8011af4:	3fdfffff 	.word	0x3fdfffff
 8011af8:	35afe535 	.word	0x35afe535
 8011afc:	3fe00000 	.word	0x3fe00000
 8011b00:	ffc00000 	.word	0xffc00000
 8011b04:	41dfffff 	.word	0x41dfffff
 8011b08:	94a03595 	.word	0x94a03595
 8011b0c:	3fcfffff 	.word	0x3fcfffff
 8011b10:	3ff00000 	.word	0x3ff00000
 8011b14:	7ff00000 	.word	0x7ff00000
 8011b18:	7fe00000 	.word	0x7fe00000
 8011b1c:	7c9fffff 	.word	0x7c9fffff
 8011b20:	3fe00000 	.word	0x3fe00000
 8011b24:	bff00000 	.word	0xbff00000
 8011b28:	7fefffff 	.word	0x7fefffff

08011b2c <_strtod_r>:
 8011b2c:	4b01      	ldr	r3, [pc, #4]	; (8011b34 <_strtod_r+0x8>)
 8011b2e:	f7ff b9f3 	b.w	8010f18 <_strtod_l>
 8011b32:	bf00      	nop
 8011b34:	200001f4 	.word	0x200001f4

08011b38 <_strtol_l.isra.0>:
 8011b38:	2b01      	cmp	r3, #1
 8011b3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b3e:	d001      	beq.n	8011b44 <_strtol_l.isra.0+0xc>
 8011b40:	2b24      	cmp	r3, #36	; 0x24
 8011b42:	d906      	bls.n	8011b52 <_strtol_l.isra.0+0x1a>
 8011b44:	f7fe f950 	bl	800fde8 <__errno>
 8011b48:	2316      	movs	r3, #22
 8011b4a:	6003      	str	r3, [r0, #0]
 8011b4c:	2000      	movs	r0, #0
 8011b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b52:	4f3a      	ldr	r7, [pc, #232]	; (8011c3c <_strtol_l.isra.0+0x104>)
 8011b54:	468e      	mov	lr, r1
 8011b56:	4676      	mov	r6, lr
 8011b58:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011b5c:	5de5      	ldrb	r5, [r4, r7]
 8011b5e:	f015 0508 	ands.w	r5, r5, #8
 8011b62:	d1f8      	bne.n	8011b56 <_strtol_l.isra.0+0x1e>
 8011b64:	2c2d      	cmp	r4, #45	; 0x2d
 8011b66:	d134      	bne.n	8011bd2 <_strtol_l.isra.0+0x9a>
 8011b68:	f89e 4000 	ldrb.w	r4, [lr]
 8011b6c:	f04f 0801 	mov.w	r8, #1
 8011b70:	f106 0e02 	add.w	lr, r6, #2
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d05c      	beq.n	8011c32 <_strtol_l.isra.0+0xfa>
 8011b78:	2b10      	cmp	r3, #16
 8011b7a:	d10c      	bne.n	8011b96 <_strtol_l.isra.0+0x5e>
 8011b7c:	2c30      	cmp	r4, #48	; 0x30
 8011b7e:	d10a      	bne.n	8011b96 <_strtol_l.isra.0+0x5e>
 8011b80:	f89e 4000 	ldrb.w	r4, [lr]
 8011b84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011b88:	2c58      	cmp	r4, #88	; 0x58
 8011b8a:	d14d      	bne.n	8011c28 <_strtol_l.isra.0+0xf0>
 8011b8c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011b90:	2310      	movs	r3, #16
 8011b92:	f10e 0e02 	add.w	lr, lr, #2
 8011b96:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011b9a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8011b9e:	2600      	movs	r6, #0
 8011ba0:	fbbc f9f3 	udiv	r9, ip, r3
 8011ba4:	4635      	mov	r5, r6
 8011ba6:	fb03 ca19 	mls	sl, r3, r9, ip
 8011baa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011bae:	2f09      	cmp	r7, #9
 8011bb0:	d818      	bhi.n	8011be4 <_strtol_l.isra.0+0xac>
 8011bb2:	463c      	mov	r4, r7
 8011bb4:	42a3      	cmp	r3, r4
 8011bb6:	dd24      	ble.n	8011c02 <_strtol_l.isra.0+0xca>
 8011bb8:	2e00      	cmp	r6, #0
 8011bba:	db1f      	blt.n	8011bfc <_strtol_l.isra.0+0xc4>
 8011bbc:	45a9      	cmp	r9, r5
 8011bbe:	d31d      	bcc.n	8011bfc <_strtol_l.isra.0+0xc4>
 8011bc0:	d101      	bne.n	8011bc6 <_strtol_l.isra.0+0x8e>
 8011bc2:	45a2      	cmp	sl, r4
 8011bc4:	db1a      	blt.n	8011bfc <_strtol_l.isra.0+0xc4>
 8011bc6:	fb05 4503 	mla	r5, r5, r3, r4
 8011bca:	2601      	movs	r6, #1
 8011bcc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011bd0:	e7eb      	b.n	8011baa <_strtol_l.isra.0+0x72>
 8011bd2:	2c2b      	cmp	r4, #43	; 0x2b
 8011bd4:	bf08      	it	eq
 8011bd6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011bda:	46a8      	mov	r8, r5
 8011bdc:	bf08      	it	eq
 8011bde:	f106 0e02 	addeq.w	lr, r6, #2
 8011be2:	e7c7      	b.n	8011b74 <_strtol_l.isra.0+0x3c>
 8011be4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011be8:	2f19      	cmp	r7, #25
 8011bea:	d801      	bhi.n	8011bf0 <_strtol_l.isra.0+0xb8>
 8011bec:	3c37      	subs	r4, #55	; 0x37
 8011bee:	e7e1      	b.n	8011bb4 <_strtol_l.isra.0+0x7c>
 8011bf0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011bf4:	2f19      	cmp	r7, #25
 8011bf6:	d804      	bhi.n	8011c02 <_strtol_l.isra.0+0xca>
 8011bf8:	3c57      	subs	r4, #87	; 0x57
 8011bfa:	e7db      	b.n	8011bb4 <_strtol_l.isra.0+0x7c>
 8011bfc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011c00:	e7e4      	b.n	8011bcc <_strtol_l.isra.0+0x94>
 8011c02:	2e00      	cmp	r6, #0
 8011c04:	da05      	bge.n	8011c12 <_strtol_l.isra.0+0xda>
 8011c06:	2322      	movs	r3, #34	; 0x22
 8011c08:	6003      	str	r3, [r0, #0]
 8011c0a:	4665      	mov	r5, ip
 8011c0c:	b942      	cbnz	r2, 8011c20 <_strtol_l.isra.0+0xe8>
 8011c0e:	4628      	mov	r0, r5
 8011c10:	e79d      	b.n	8011b4e <_strtol_l.isra.0+0x16>
 8011c12:	f1b8 0f00 	cmp.w	r8, #0
 8011c16:	d000      	beq.n	8011c1a <_strtol_l.isra.0+0xe2>
 8011c18:	426d      	negs	r5, r5
 8011c1a:	2a00      	cmp	r2, #0
 8011c1c:	d0f7      	beq.n	8011c0e <_strtol_l.isra.0+0xd6>
 8011c1e:	b10e      	cbz	r6, 8011c24 <_strtol_l.isra.0+0xec>
 8011c20:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8011c24:	6011      	str	r1, [r2, #0]
 8011c26:	e7f2      	b.n	8011c0e <_strtol_l.isra.0+0xd6>
 8011c28:	2430      	movs	r4, #48	; 0x30
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d1b3      	bne.n	8011b96 <_strtol_l.isra.0+0x5e>
 8011c2e:	2308      	movs	r3, #8
 8011c30:	e7b1      	b.n	8011b96 <_strtol_l.isra.0+0x5e>
 8011c32:	2c30      	cmp	r4, #48	; 0x30
 8011c34:	d0a4      	beq.n	8011b80 <_strtol_l.isra.0+0x48>
 8011c36:	230a      	movs	r3, #10
 8011c38:	e7ad      	b.n	8011b96 <_strtol_l.isra.0+0x5e>
 8011c3a:	bf00      	nop
 8011c3c:	08015009 	.word	0x08015009

08011c40 <_strtol_r>:
 8011c40:	f7ff bf7a 	b.w	8011b38 <_strtol_l.isra.0>

08011c44 <__swbuf_r>:
 8011c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c46:	460e      	mov	r6, r1
 8011c48:	4614      	mov	r4, r2
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	b118      	cbz	r0, 8011c56 <__swbuf_r+0x12>
 8011c4e:	6983      	ldr	r3, [r0, #24]
 8011c50:	b90b      	cbnz	r3, 8011c56 <__swbuf_r+0x12>
 8011c52:	f001 f8ab 	bl	8012dac <__sinit>
 8011c56:	4b21      	ldr	r3, [pc, #132]	; (8011cdc <__swbuf_r+0x98>)
 8011c58:	429c      	cmp	r4, r3
 8011c5a:	d12b      	bne.n	8011cb4 <__swbuf_r+0x70>
 8011c5c:	686c      	ldr	r4, [r5, #4]
 8011c5e:	69a3      	ldr	r3, [r4, #24]
 8011c60:	60a3      	str	r3, [r4, #8]
 8011c62:	89a3      	ldrh	r3, [r4, #12]
 8011c64:	071a      	lsls	r2, r3, #28
 8011c66:	d52f      	bpl.n	8011cc8 <__swbuf_r+0x84>
 8011c68:	6923      	ldr	r3, [r4, #16]
 8011c6a:	b36b      	cbz	r3, 8011cc8 <__swbuf_r+0x84>
 8011c6c:	6923      	ldr	r3, [r4, #16]
 8011c6e:	6820      	ldr	r0, [r4, #0]
 8011c70:	1ac0      	subs	r0, r0, r3
 8011c72:	6963      	ldr	r3, [r4, #20]
 8011c74:	b2f6      	uxtb	r6, r6
 8011c76:	4283      	cmp	r3, r0
 8011c78:	4637      	mov	r7, r6
 8011c7a:	dc04      	bgt.n	8011c86 <__swbuf_r+0x42>
 8011c7c:	4621      	mov	r1, r4
 8011c7e:	4628      	mov	r0, r5
 8011c80:	f001 f800 	bl	8012c84 <_fflush_r>
 8011c84:	bb30      	cbnz	r0, 8011cd4 <__swbuf_r+0x90>
 8011c86:	68a3      	ldr	r3, [r4, #8]
 8011c88:	3b01      	subs	r3, #1
 8011c8a:	60a3      	str	r3, [r4, #8]
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	1c5a      	adds	r2, r3, #1
 8011c90:	6022      	str	r2, [r4, #0]
 8011c92:	701e      	strb	r6, [r3, #0]
 8011c94:	6963      	ldr	r3, [r4, #20]
 8011c96:	3001      	adds	r0, #1
 8011c98:	4283      	cmp	r3, r0
 8011c9a:	d004      	beq.n	8011ca6 <__swbuf_r+0x62>
 8011c9c:	89a3      	ldrh	r3, [r4, #12]
 8011c9e:	07db      	lsls	r3, r3, #31
 8011ca0:	d506      	bpl.n	8011cb0 <__swbuf_r+0x6c>
 8011ca2:	2e0a      	cmp	r6, #10
 8011ca4:	d104      	bne.n	8011cb0 <__swbuf_r+0x6c>
 8011ca6:	4621      	mov	r1, r4
 8011ca8:	4628      	mov	r0, r5
 8011caa:	f000 ffeb 	bl	8012c84 <_fflush_r>
 8011cae:	b988      	cbnz	r0, 8011cd4 <__swbuf_r+0x90>
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cb4:	4b0a      	ldr	r3, [pc, #40]	; (8011ce0 <__swbuf_r+0x9c>)
 8011cb6:	429c      	cmp	r4, r3
 8011cb8:	d101      	bne.n	8011cbe <__swbuf_r+0x7a>
 8011cba:	68ac      	ldr	r4, [r5, #8]
 8011cbc:	e7cf      	b.n	8011c5e <__swbuf_r+0x1a>
 8011cbe:	4b09      	ldr	r3, [pc, #36]	; (8011ce4 <__swbuf_r+0xa0>)
 8011cc0:	429c      	cmp	r4, r3
 8011cc2:	bf08      	it	eq
 8011cc4:	68ec      	ldreq	r4, [r5, #12]
 8011cc6:	e7ca      	b.n	8011c5e <__swbuf_r+0x1a>
 8011cc8:	4621      	mov	r1, r4
 8011cca:	4628      	mov	r0, r5
 8011ccc:	f000 f80c 	bl	8011ce8 <__swsetup_r>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d0cb      	beq.n	8011c6c <__swbuf_r+0x28>
 8011cd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011cd8:	e7ea      	b.n	8011cb0 <__swbuf_r+0x6c>
 8011cda:	bf00      	nop
 8011cdc:	080151c0 	.word	0x080151c0
 8011ce0:	080151e0 	.word	0x080151e0
 8011ce4:	080151a0 	.word	0x080151a0

08011ce8 <__swsetup_r>:
 8011ce8:	4b32      	ldr	r3, [pc, #200]	; (8011db4 <__swsetup_r+0xcc>)
 8011cea:	b570      	push	{r4, r5, r6, lr}
 8011cec:	681d      	ldr	r5, [r3, #0]
 8011cee:	4606      	mov	r6, r0
 8011cf0:	460c      	mov	r4, r1
 8011cf2:	b125      	cbz	r5, 8011cfe <__swsetup_r+0x16>
 8011cf4:	69ab      	ldr	r3, [r5, #24]
 8011cf6:	b913      	cbnz	r3, 8011cfe <__swsetup_r+0x16>
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	f001 f857 	bl	8012dac <__sinit>
 8011cfe:	4b2e      	ldr	r3, [pc, #184]	; (8011db8 <__swsetup_r+0xd0>)
 8011d00:	429c      	cmp	r4, r3
 8011d02:	d10f      	bne.n	8011d24 <__swsetup_r+0x3c>
 8011d04:	686c      	ldr	r4, [r5, #4]
 8011d06:	89a3      	ldrh	r3, [r4, #12]
 8011d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d0c:	0719      	lsls	r1, r3, #28
 8011d0e:	d42c      	bmi.n	8011d6a <__swsetup_r+0x82>
 8011d10:	06dd      	lsls	r5, r3, #27
 8011d12:	d411      	bmi.n	8011d38 <__swsetup_r+0x50>
 8011d14:	2309      	movs	r3, #9
 8011d16:	6033      	str	r3, [r6, #0]
 8011d18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d1c:	81a3      	strh	r3, [r4, #12]
 8011d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d22:	e03e      	b.n	8011da2 <__swsetup_r+0xba>
 8011d24:	4b25      	ldr	r3, [pc, #148]	; (8011dbc <__swsetup_r+0xd4>)
 8011d26:	429c      	cmp	r4, r3
 8011d28:	d101      	bne.n	8011d2e <__swsetup_r+0x46>
 8011d2a:	68ac      	ldr	r4, [r5, #8]
 8011d2c:	e7eb      	b.n	8011d06 <__swsetup_r+0x1e>
 8011d2e:	4b24      	ldr	r3, [pc, #144]	; (8011dc0 <__swsetup_r+0xd8>)
 8011d30:	429c      	cmp	r4, r3
 8011d32:	bf08      	it	eq
 8011d34:	68ec      	ldreq	r4, [r5, #12]
 8011d36:	e7e6      	b.n	8011d06 <__swsetup_r+0x1e>
 8011d38:	0758      	lsls	r0, r3, #29
 8011d3a:	d512      	bpl.n	8011d62 <__swsetup_r+0x7a>
 8011d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d3e:	b141      	cbz	r1, 8011d52 <__swsetup_r+0x6a>
 8011d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d44:	4299      	cmp	r1, r3
 8011d46:	d002      	beq.n	8011d4e <__swsetup_r+0x66>
 8011d48:	4630      	mov	r0, r6
 8011d4a:	f7fe f89d 	bl	800fe88 <_free_r>
 8011d4e:	2300      	movs	r3, #0
 8011d50:	6363      	str	r3, [r4, #52]	; 0x34
 8011d52:	89a3      	ldrh	r3, [r4, #12]
 8011d54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d58:	81a3      	strh	r3, [r4, #12]
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	6063      	str	r3, [r4, #4]
 8011d5e:	6923      	ldr	r3, [r4, #16]
 8011d60:	6023      	str	r3, [r4, #0]
 8011d62:	89a3      	ldrh	r3, [r4, #12]
 8011d64:	f043 0308 	orr.w	r3, r3, #8
 8011d68:	81a3      	strh	r3, [r4, #12]
 8011d6a:	6923      	ldr	r3, [r4, #16]
 8011d6c:	b94b      	cbnz	r3, 8011d82 <__swsetup_r+0x9a>
 8011d6e:	89a3      	ldrh	r3, [r4, #12]
 8011d70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d78:	d003      	beq.n	8011d82 <__swsetup_r+0x9a>
 8011d7a:	4621      	mov	r1, r4
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	f001 fc4d 	bl	801361c <__smakebuf_r>
 8011d82:	89a0      	ldrh	r0, [r4, #12]
 8011d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d88:	f010 0301 	ands.w	r3, r0, #1
 8011d8c:	d00a      	beq.n	8011da4 <__swsetup_r+0xbc>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	60a3      	str	r3, [r4, #8]
 8011d92:	6963      	ldr	r3, [r4, #20]
 8011d94:	425b      	negs	r3, r3
 8011d96:	61a3      	str	r3, [r4, #24]
 8011d98:	6923      	ldr	r3, [r4, #16]
 8011d9a:	b943      	cbnz	r3, 8011dae <__swsetup_r+0xc6>
 8011d9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011da0:	d1ba      	bne.n	8011d18 <__swsetup_r+0x30>
 8011da2:	bd70      	pop	{r4, r5, r6, pc}
 8011da4:	0781      	lsls	r1, r0, #30
 8011da6:	bf58      	it	pl
 8011da8:	6963      	ldrpl	r3, [r4, #20]
 8011daa:	60a3      	str	r3, [r4, #8]
 8011dac:	e7f4      	b.n	8011d98 <__swsetup_r+0xb0>
 8011dae:	2000      	movs	r0, #0
 8011db0:	e7f7      	b.n	8011da2 <__swsetup_r+0xba>
 8011db2:	bf00      	nop
 8011db4:	20000188 	.word	0x20000188
 8011db8:	080151c0 	.word	0x080151c0
 8011dbc:	080151e0 	.word	0x080151e0
 8011dc0:	080151a0 	.word	0x080151a0

08011dc4 <__register_exitproc>:
 8011dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dc8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011e84 <__register_exitproc+0xc0>
 8011dcc:	4606      	mov	r6, r0
 8011dce:	f8d8 0000 	ldr.w	r0, [r8]
 8011dd2:	461f      	mov	r7, r3
 8011dd4:	460d      	mov	r5, r1
 8011dd6:	4691      	mov	r9, r2
 8011dd8:	f001 fbf9 	bl	80135ce <__retarget_lock_acquire_recursive>
 8011ddc:	4b25      	ldr	r3, [pc, #148]	; (8011e74 <__register_exitproc+0xb0>)
 8011dde:	681c      	ldr	r4, [r3, #0]
 8011de0:	b934      	cbnz	r4, 8011df0 <__register_exitproc+0x2c>
 8011de2:	4c25      	ldr	r4, [pc, #148]	; (8011e78 <__register_exitproc+0xb4>)
 8011de4:	601c      	str	r4, [r3, #0]
 8011de6:	4b25      	ldr	r3, [pc, #148]	; (8011e7c <__register_exitproc+0xb8>)
 8011de8:	b113      	cbz	r3, 8011df0 <__register_exitproc+0x2c>
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8011df0:	6863      	ldr	r3, [r4, #4]
 8011df2:	2b1f      	cmp	r3, #31
 8011df4:	dd07      	ble.n	8011e06 <__register_exitproc+0x42>
 8011df6:	f8d8 0000 	ldr.w	r0, [r8]
 8011dfa:	f001 fbea 	bl	80135d2 <__retarget_lock_release_recursive>
 8011dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e06:	b34e      	cbz	r6, 8011e5c <__register_exitproc+0x98>
 8011e08:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011e0c:	b988      	cbnz	r0, 8011e32 <__register_exitproc+0x6e>
 8011e0e:	4b1c      	ldr	r3, [pc, #112]	; (8011e80 <__register_exitproc+0xbc>)
 8011e10:	b923      	cbnz	r3, 8011e1c <__register_exitproc+0x58>
 8011e12:	f8d8 0000 	ldr.w	r0, [r8]
 8011e16:	f001 fbdb 	bl	80135d0 <__retarget_lock_release>
 8011e1a:	e7f0      	b.n	8011dfe <__register_exitproc+0x3a>
 8011e1c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011e20:	f7fe f80c 	bl	800fe3c <malloc>
 8011e24:	2800      	cmp	r0, #0
 8011e26:	d0f4      	beq.n	8011e12 <__register_exitproc+0x4e>
 8011e28:	2300      	movs	r3, #0
 8011e2a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8011e2e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8011e32:	6863      	ldr	r3, [r4, #4]
 8011e34:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011e38:	2201      	movs	r2, #1
 8011e3a:	409a      	lsls	r2, r3
 8011e3c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8011e40:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011e44:	4313      	orrs	r3, r2
 8011e46:	2e02      	cmp	r6, #2
 8011e48:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011e4c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8011e50:	bf02      	ittt	eq
 8011e52:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8011e56:	431a      	orreq	r2, r3
 8011e58:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8011e5c:	6863      	ldr	r3, [r4, #4]
 8011e5e:	f8d8 0000 	ldr.w	r0, [r8]
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	3302      	adds	r3, #2
 8011e66:	6062      	str	r2, [r4, #4]
 8011e68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011e6c:	f001 fbb1 	bl	80135d2 <__retarget_lock_release_recursive>
 8011e70:	2000      	movs	r0, #0
 8011e72:	e7c6      	b.n	8011e02 <__register_exitproc+0x3e>
 8011e74:	20002884 	.word	0x20002884
 8011e78:	200027f8 	.word	0x200027f8
 8011e7c:	00000000 	.word	0x00000000
 8011e80:	0800fe3d 	.word	0x0800fe3d
 8011e84:	200001ec 	.word	0x200001ec

08011e88 <quorem>:
 8011e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8c:	6903      	ldr	r3, [r0, #16]
 8011e8e:	690c      	ldr	r4, [r1, #16]
 8011e90:	42a3      	cmp	r3, r4
 8011e92:	4607      	mov	r7, r0
 8011e94:	f2c0 8081 	blt.w	8011f9a <quorem+0x112>
 8011e98:	3c01      	subs	r4, #1
 8011e9a:	f101 0814 	add.w	r8, r1, #20
 8011e9e:	f100 0514 	add.w	r5, r0, #20
 8011ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ea6:	9301      	str	r3, [sp, #4]
 8011ea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ec0:	d331      	bcc.n	8011f26 <quorem+0x9e>
 8011ec2:	f04f 0e00 	mov.w	lr, #0
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	46ac      	mov	ip, r5
 8011eca:	46f2      	mov	sl, lr
 8011ecc:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ed0:	b293      	uxth	r3, r2
 8011ed2:	fb06 e303 	mla	r3, r6, r3, lr
 8011ed6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	ebaa 0303 	sub.w	r3, sl, r3
 8011ee0:	0c12      	lsrs	r2, r2, #16
 8011ee2:	f8dc a000 	ldr.w	sl, [ip]
 8011ee6:	fb06 e202 	mla	r2, r6, r2, lr
 8011eea:	fa13 f38a 	uxtah	r3, r3, sl
 8011eee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011ef2:	fa1f fa82 	uxth.w	sl, r2
 8011ef6:	f8dc 2000 	ldr.w	r2, [ip]
 8011efa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011efe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f08:	4581      	cmp	r9, r0
 8011f0a:	f84c 3b04 	str.w	r3, [ip], #4
 8011f0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011f12:	d2db      	bcs.n	8011ecc <quorem+0x44>
 8011f14:	f855 300b 	ldr.w	r3, [r5, fp]
 8011f18:	b92b      	cbnz	r3, 8011f26 <quorem+0x9e>
 8011f1a:	9b01      	ldr	r3, [sp, #4]
 8011f1c:	3b04      	subs	r3, #4
 8011f1e:	429d      	cmp	r5, r3
 8011f20:	461a      	mov	r2, r3
 8011f22:	d32e      	bcc.n	8011f82 <quorem+0xfa>
 8011f24:	613c      	str	r4, [r7, #16]
 8011f26:	4638      	mov	r0, r7
 8011f28:	f001 fe9e 	bl	8013c68 <__mcmp>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	db24      	blt.n	8011f7a <quorem+0xf2>
 8011f30:	3601      	adds	r6, #1
 8011f32:	4628      	mov	r0, r5
 8011f34:	f04f 0c00 	mov.w	ip, #0
 8011f38:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f3c:	f8d0 e000 	ldr.w	lr, [r0]
 8011f40:	b293      	uxth	r3, r2
 8011f42:	ebac 0303 	sub.w	r3, ip, r3
 8011f46:	0c12      	lsrs	r2, r2, #16
 8011f48:	fa13 f38e 	uxtah	r3, r3, lr
 8011f4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f5a:	45c1      	cmp	r9, r8
 8011f5c:	f840 3b04 	str.w	r3, [r0], #4
 8011f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011f64:	d2e8      	bcs.n	8011f38 <quorem+0xb0>
 8011f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f6e:	b922      	cbnz	r2, 8011f7a <quorem+0xf2>
 8011f70:	3b04      	subs	r3, #4
 8011f72:	429d      	cmp	r5, r3
 8011f74:	461a      	mov	r2, r3
 8011f76:	d30a      	bcc.n	8011f8e <quorem+0x106>
 8011f78:	613c      	str	r4, [r7, #16]
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	b003      	add	sp, #12
 8011f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f82:	6812      	ldr	r2, [r2, #0]
 8011f84:	3b04      	subs	r3, #4
 8011f86:	2a00      	cmp	r2, #0
 8011f88:	d1cc      	bne.n	8011f24 <quorem+0x9c>
 8011f8a:	3c01      	subs	r4, #1
 8011f8c:	e7c7      	b.n	8011f1e <quorem+0x96>
 8011f8e:	6812      	ldr	r2, [r2, #0]
 8011f90:	3b04      	subs	r3, #4
 8011f92:	2a00      	cmp	r2, #0
 8011f94:	d1f0      	bne.n	8011f78 <quorem+0xf0>
 8011f96:	3c01      	subs	r4, #1
 8011f98:	e7eb      	b.n	8011f72 <quorem+0xea>
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	e7ee      	b.n	8011f7c <quorem+0xf4>
	...

08011fa0 <_dtoa_r>:
 8011fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	ed2d 8b02 	vpush	{d8}
 8011fa8:	ec57 6b10 	vmov	r6, r7, d0
 8011fac:	b095      	sub	sp, #84	; 0x54
 8011fae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011fb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011fb4:	9105      	str	r1, [sp, #20]
 8011fb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011fba:	4604      	mov	r4, r0
 8011fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8011fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011fc0:	b975      	cbnz	r5, 8011fe0 <_dtoa_r+0x40>
 8011fc2:	2010      	movs	r0, #16
 8011fc4:	f7fd ff3a 	bl	800fe3c <malloc>
 8011fc8:	4602      	mov	r2, r0
 8011fca:	6260      	str	r0, [r4, #36]	; 0x24
 8011fcc:	b920      	cbnz	r0, 8011fd8 <_dtoa_r+0x38>
 8011fce:	4bb2      	ldr	r3, [pc, #712]	; (8012298 <_dtoa_r+0x2f8>)
 8011fd0:	21ea      	movs	r1, #234	; 0xea
 8011fd2:	48b2      	ldr	r0, [pc, #712]	; (801229c <_dtoa_r+0x2fc>)
 8011fd4:	f002 fb7c 	bl	80146d0 <__assert_func>
 8011fd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011fdc:	6005      	str	r5, [r0, #0]
 8011fde:	60c5      	str	r5, [r0, #12]
 8011fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fe2:	6819      	ldr	r1, [r3, #0]
 8011fe4:	b151      	cbz	r1, 8011ffc <_dtoa_r+0x5c>
 8011fe6:	685a      	ldr	r2, [r3, #4]
 8011fe8:	604a      	str	r2, [r1, #4]
 8011fea:	2301      	movs	r3, #1
 8011fec:	4093      	lsls	r3, r2
 8011fee:	608b      	str	r3, [r1, #8]
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	f001 fbb1 	bl	8013758 <_Bfree>
 8011ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	601a      	str	r2, [r3, #0]
 8011ffc:	1e3b      	subs	r3, r7, #0
 8011ffe:	bfb9      	ittee	lt
 8012000:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012004:	9303      	strlt	r3, [sp, #12]
 8012006:	2300      	movge	r3, #0
 8012008:	f8c8 3000 	strge.w	r3, [r8]
 801200c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012010:	4ba3      	ldr	r3, [pc, #652]	; (80122a0 <_dtoa_r+0x300>)
 8012012:	bfbc      	itt	lt
 8012014:	2201      	movlt	r2, #1
 8012016:	f8c8 2000 	strlt.w	r2, [r8]
 801201a:	ea33 0309 	bics.w	r3, r3, r9
 801201e:	d11b      	bne.n	8012058 <_dtoa_r+0xb8>
 8012020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012022:	f242 730f 	movw	r3, #9999	; 0x270f
 8012026:	6013      	str	r3, [r2, #0]
 8012028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801202c:	4333      	orrs	r3, r6
 801202e:	f000 857a 	beq.w	8012b26 <_dtoa_r+0xb86>
 8012032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012034:	b963      	cbnz	r3, 8012050 <_dtoa_r+0xb0>
 8012036:	4b9b      	ldr	r3, [pc, #620]	; (80122a4 <_dtoa_r+0x304>)
 8012038:	e024      	b.n	8012084 <_dtoa_r+0xe4>
 801203a:	4b9b      	ldr	r3, [pc, #620]	; (80122a8 <_dtoa_r+0x308>)
 801203c:	9300      	str	r3, [sp, #0]
 801203e:	3308      	adds	r3, #8
 8012040:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012042:	6013      	str	r3, [r2, #0]
 8012044:	9800      	ldr	r0, [sp, #0]
 8012046:	b015      	add	sp, #84	; 0x54
 8012048:	ecbd 8b02 	vpop	{d8}
 801204c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012050:	4b94      	ldr	r3, [pc, #592]	; (80122a4 <_dtoa_r+0x304>)
 8012052:	9300      	str	r3, [sp, #0]
 8012054:	3303      	adds	r3, #3
 8012056:	e7f3      	b.n	8012040 <_dtoa_r+0xa0>
 8012058:	ed9d 7b02 	vldr	d7, [sp, #8]
 801205c:	2200      	movs	r2, #0
 801205e:	ec51 0b17 	vmov	r0, r1, d7
 8012062:	2300      	movs	r3, #0
 8012064:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012068:	f7ee fd3e 	bl	8000ae8 <__aeabi_dcmpeq>
 801206c:	4680      	mov	r8, r0
 801206e:	b158      	cbz	r0, 8012088 <_dtoa_r+0xe8>
 8012070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012072:	2301      	movs	r3, #1
 8012074:	6013      	str	r3, [r2, #0]
 8012076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012078:	2b00      	cmp	r3, #0
 801207a:	f000 8551 	beq.w	8012b20 <_dtoa_r+0xb80>
 801207e:	488b      	ldr	r0, [pc, #556]	; (80122ac <_dtoa_r+0x30c>)
 8012080:	6018      	str	r0, [r3, #0]
 8012082:	1e43      	subs	r3, r0, #1
 8012084:	9300      	str	r3, [sp, #0]
 8012086:	e7dd      	b.n	8012044 <_dtoa_r+0xa4>
 8012088:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801208c:	aa12      	add	r2, sp, #72	; 0x48
 801208e:	a913      	add	r1, sp, #76	; 0x4c
 8012090:	4620      	mov	r0, r4
 8012092:	f001 ff09 	bl	8013ea8 <__d2b>
 8012096:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801209a:	4683      	mov	fp, r0
 801209c:	2d00      	cmp	r5, #0
 801209e:	d07c      	beq.n	801219a <_dtoa_r+0x1fa>
 80120a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80120a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80120ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80120b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80120b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80120ba:	4b7d      	ldr	r3, [pc, #500]	; (80122b0 <_dtoa_r+0x310>)
 80120bc:	2200      	movs	r2, #0
 80120be:	4630      	mov	r0, r6
 80120c0:	4639      	mov	r1, r7
 80120c2:	f7ee f8f1 	bl	80002a8 <__aeabi_dsub>
 80120c6:	a36e      	add	r3, pc, #440	; (adr r3, 8012280 <_dtoa_r+0x2e0>)
 80120c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120cc:	f7ee faa4 	bl	8000618 <__aeabi_dmul>
 80120d0:	a36d      	add	r3, pc, #436	; (adr r3, 8012288 <_dtoa_r+0x2e8>)
 80120d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d6:	f7ee f8e9 	bl	80002ac <__adddf3>
 80120da:	4606      	mov	r6, r0
 80120dc:	4628      	mov	r0, r5
 80120de:	460f      	mov	r7, r1
 80120e0:	f7ee fa30 	bl	8000544 <__aeabi_i2d>
 80120e4:	a36a      	add	r3, pc, #424	; (adr r3, 8012290 <_dtoa_r+0x2f0>)
 80120e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ea:	f7ee fa95 	bl	8000618 <__aeabi_dmul>
 80120ee:	4602      	mov	r2, r0
 80120f0:	460b      	mov	r3, r1
 80120f2:	4630      	mov	r0, r6
 80120f4:	4639      	mov	r1, r7
 80120f6:	f7ee f8d9 	bl	80002ac <__adddf3>
 80120fa:	4606      	mov	r6, r0
 80120fc:	460f      	mov	r7, r1
 80120fe:	f7ee fd3b 	bl	8000b78 <__aeabi_d2iz>
 8012102:	2200      	movs	r2, #0
 8012104:	4682      	mov	sl, r0
 8012106:	2300      	movs	r3, #0
 8012108:	4630      	mov	r0, r6
 801210a:	4639      	mov	r1, r7
 801210c:	f7ee fcf6 	bl	8000afc <__aeabi_dcmplt>
 8012110:	b148      	cbz	r0, 8012126 <_dtoa_r+0x186>
 8012112:	4650      	mov	r0, sl
 8012114:	f7ee fa16 	bl	8000544 <__aeabi_i2d>
 8012118:	4632      	mov	r2, r6
 801211a:	463b      	mov	r3, r7
 801211c:	f7ee fce4 	bl	8000ae8 <__aeabi_dcmpeq>
 8012120:	b908      	cbnz	r0, 8012126 <_dtoa_r+0x186>
 8012122:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012126:	f1ba 0f16 	cmp.w	sl, #22
 801212a:	d854      	bhi.n	80121d6 <_dtoa_r+0x236>
 801212c:	4b61      	ldr	r3, [pc, #388]	; (80122b4 <_dtoa_r+0x314>)
 801212e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012136:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801213a:	f7ee fcdf 	bl	8000afc <__aeabi_dcmplt>
 801213e:	2800      	cmp	r0, #0
 8012140:	d04b      	beq.n	80121da <_dtoa_r+0x23a>
 8012142:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012146:	2300      	movs	r3, #0
 8012148:	930e      	str	r3, [sp, #56]	; 0x38
 801214a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801214c:	1b5d      	subs	r5, r3, r5
 801214e:	1e6b      	subs	r3, r5, #1
 8012150:	9304      	str	r3, [sp, #16]
 8012152:	bf43      	ittte	mi
 8012154:	2300      	movmi	r3, #0
 8012156:	f1c5 0801 	rsbmi	r8, r5, #1
 801215a:	9304      	strmi	r3, [sp, #16]
 801215c:	f04f 0800 	movpl.w	r8, #0
 8012160:	f1ba 0f00 	cmp.w	sl, #0
 8012164:	db3b      	blt.n	80121de <_dtoa_r+0x23e>
 8012166:	9b04      	ldr	r3, [sp, #16]
 8012168:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801216c:	4453      	add	r3, sl
 801216e:	9304      	str	r3, [sp, #16]
 8012170:	2300      	movs	r3, #0
 8012172:	9306      	str	r3, [sp, #24]
 8012174:	9b05      	ldr	r3, [sp, #20]
 8012176:	2b09      	cmp	r3, #9
 8012178:	d869      	bhi.n	801224e <_dtoa_r+0x2ae>
 801217a:	2b05      	cmp	r3, #5
 801217c:	bfc4      	itt	gt
 801217e:	3b04      	subgt	r3, #4
 8012180:	9305      	strgt	r3, [sp, #20]
 8012182:	9b05      	ldr	r3, [sp, #20]
 8012184:	f1a3 0302 	sub.w	r3, r3, #2
 8012188:	bfcc      	ite	gt
 801218a:	2500      	movgt	r5, #0
 801218c:	2501      	movle	r5, #1
 801218e:	2b03      	cmp	r3, #3
 8012190:	d869      	bhi.n	8012266 <_dtoa_r+0x2c6>
 8012192:	e8df f003 	tbb	[pc, r3]
 8012196:	4e2c      	.short	0x4e2c
 8012198:	5a4c      	.short	0x5a4c
 801219a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801219e:	441d      	add	r5, r3
 80121a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80121a4:	2b20      	cmp	r3, #32
 80121a6:	bfc1      	itttt	gt
 80121a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80121ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80121b0:	fa09 f303 	lslgt.w	r3, r9, r3
 80121b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80121b8:	bfda      	itte	le
 80121ba:	f1c3 0320 	rsble	r3, r3, #32
 80121be:	fa06 f003 	lslle.w	r0, r6, r3
 80121c2:	4318      	orrgt	r0, r3
 80121c4:	f7ee f9ae 	bl	8000524 <__aeabi_ui2d>
 80121c8:	2301      	movs	r3, #1
 80121ca:	4606      	mov	r6, r0
 80121cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80121d0:	3d01      	subs	r5, #1
 80121d2:	9310      	str	r3, [sp, #64]	; 0x40
 80121d4:	e771      	b.n	80120ba <_dtoa_r+0x11a>
 80121d6:	2301      	movs	r3, #1
 80121d8:	e7b6      	b.n	8012148 <_dtoa_r+0x1a8>
 80121da:	900e      	str	r0, [sp, #56]	; 0x38
 80121dc:	e7b5      	b.n	801214a <_dtoa_r+0x1aa>
 80121de:	f1ca 0300 	rsb	r3, sl, #0
 80121e2:	9306      	str	r3, [sp, #24]
 80121e4:	2300      	movs	r3, #0
 80121e6:	eba8 080a 	sub.w	r8, r8, sl
 80121ea:	930d      	str	r3, [sp, #52]	; 0x34
 80121ec:	e7c2      	b.n	8012174 <_dtoa_r+0x1d4>
 80121ee:	2300      	movs	r3, #0
 80121f0:	9308      	str	r3, [sp, #32]
 80121f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	dc39      	bgt.n	801226c <_dtoa_r+0x2cc>
 80121f8:	f04f 0901 	mov.w	r9, #1
 80121fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8012200:	464b      	mov	r3, r9
 8012202:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012206:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012208:	2200      	movs	r2, #0
 801220a:	6042      	str	r2, [r0, #4]
 801220c:	2204      	movs	r2, #4
 801220e:	f102 0614 	add.w	r6, r2, #20
 8012212:	429e      	cmp	r6, r3
 8012214:	6841      	ldr	r1, [r0, #4]
 8012216:	d92f      	bls.n	8012278 <_dtoa_r+0x2d8>
 8012218:	4620      	mov	r0, r4
 801221a:	f001 fa5d 	bl	80136d8 <_Balloc>
 801221e:	9000      	str	r0, [sp, #0]
 8012220:	2800      	cmp	r0, #0
 8012222:	d14b      	bne.n	80122bc <_dtoa_r+0x31c>
 8012224:	4b24      	ldr	r3, [pc, #144]	; (80122b8 <_dtoa_r+0x318>)
 8012226:	4602      	mov	r2, r0
 8012228:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801222c:	e6d1      	b.n	8011fd2 <_dtoa_r+0x32>
 801222e:	2301      	movs	r3, #1
 8012230:	e7de      	b.n	80121f0 <_dtoa_r+0x250>
 8012232:	2300      	movs	r3, #0
 8012234:	9308      	str	r3, [sp, #32]
 8012236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012238:	eb0a 0903 	add.w	r9, sl, r3
 801223c:	f109 0301 	add.w	r3, r9, #1
 8012240:	2b01      	cmp	r3, #1
 8012242:	9301      	str	r3, [sp, #4]
 8012244:	bfb8      	it	lt
 8012246:	2301      	movlt	r3, #1
 8012248:	e7dd      	b.n	8012206 <_dtoa_r+0x266>
 801224a:	2301      	movs	r3, #1
 801224c:	e7f2      	b.n	8012234 <_dtoa_r+0x294>
 801224e:	2501      	movs	r5, #1
 8012250:	2300      	movs	r3, #0
 8012252:	9305      	str	r3, [sp, #20]
 8012254:	9508      	str	r5, [sp, #32]
 8012256:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801225a:	2200      	movs	r2, #0
 801225c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012260:	2312      	movs	r3, #18
 8012262:	9209      	str	r2, [sp, #36]	; 0x24
 8012264:	e7cf      	b.n	8012206 <_dtoa_r+0x266>
 8012266:	2301      	movs	r3, #1
 8012268:	9308      	str	r3, [sp, #32]
 801226a:	e7f4      	b.n	8012256 <_dtoa_r+0x2b6>
 801226c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012270:	f8cd 9004 	str.w	r9, [sp, #4]
 8012274:	464b      	mov	r3, r9
 8012276:	e7c6      	b.n	8012206 <_dtoa_r+0x266>
 8012278:	3101      	adds	r1, #1
 801227a:	6041      	str	r1, [r0, #4]
 801227c:	0052      	lsls	r2, r2, #1
 801227e:	e7c6      	b.n	801220e <_dtoa_r+0x26e>
 8012280:	636f4361 	.word	0x636f4361
 8012284:	3fd287a7 	.word	0x3fd287a7
 8012288:	8b60c8b3 	.word	0x8b60c8b3
 801228c:	3fc68a28 	.word	0x3fc68a28
 8012290:	509f79fb 	.word	0x509f79fb
 8012294:	3fd34413 	.word	0x3fd34413
 8012298:	08015116 	.word	0x08015116
 801229c:	0801512d 	.word	0x0801512d
 80122a0:	7ff00000 	.word	0x7ff00000
 80122a4:	08015112 	.word	0x08015112
 80122a8:	08015109 	.word	0x08015109
 80122ac:	08014f89 	.word	0x08014f89
 80122b0:	3ff80000 	.word	0x3ff80000
 80122b4:	08015308 	.word	0x08015308
 80122b8:	0801518c 	.word	0x0801518c
 80122bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122be:	9a00      	ldr	r2, [sp, #0]
 80122c0:	601a      	str	r2, [r3, #0]
 80122c2:	9b01      	ldr	r3, [sp, #4]
 80122c4:	2b0e      	cmp	r3, #14
 80122c6:	f200 80ad 	bhi.w	8012424 <_dtoa_r+0x484>
 80122ca:	2d00      	cmp	r5, #0
 80122cc:	f000 80aa 	beq.w	8012424 <_dtoa_r+0x484>
 80122d0:	f1ba 0f00 	cmp.w	sl, #0
 80122d4:	dd36      	ble.n	8012344 <_dtoa_r+0x3a4>
 80122d6:	4ac3      	ldr	r2, [pc, #780]	; (80125e4 <_dtoa_r+0x644>)
 80122d8:	f00a 030f 	and.w	r3, sl, #15
 80122dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80122e0:	ed93 7b00 	vldr	d7, [r3]
 80122e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80122e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80122ec:	eeb0 8a47 	vmov.f32	s16, s14
 80122f0:	eef0 8a67 	vmov.f32	s17, s15
 80122f4:	d016      	beq.n	8012324 <_dtoa_r+0x384>
 80122f6:	4bbc      	ldr	r3, [pc, #752]	; (80125e8 <_dtoa_r+0x648>)
 80122f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80122fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012300:	f7ee fab4 	bl	800086c <__aeabi_ddiv>
 8012304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012308:	f007 070f 	and.w	r7, r7, #15
 801230c:	2503      	movs	r5, #3
 801230e:	4eb6      	ldr	r6, [pc, #728]	; (80125e8 <_dtoa_r+0x648>)
 8012310:	b957      	cbnz	r7, 8012328 <_dtoa_r+0x388>
 8012312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012316:	ec53 2b18 	vmov	r2, r3, d8
 801231a:	f7ee faa7 	bl	800086c <__aeabi_ddiv>
 801231e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012322:	e029      	b.n	8012378 <_dtoa_r+0x3d8>
 8012324:	2502      	movs	r5, #2
 8012326:	e7f2      	b.n	801230e <_dtoa_r+0x36e>
 8012328:	07f9      	lsls	r1, r7, #31
 801232a:	d508      	bpl.n	801233e <_dtoa_r+0x39e>
 801232c:	ec51 0b18 	vmov	r0, r1, d8
 8012330:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012334:	f7ee f970 	bl	8000618 <__aeabi_dmul>
 8012338:	ec41 0b18 	vmov	d8, r0, r1
 801233c:	3501      	adds	r5, #1
 801233e:	107f      	asrs	r7, r7, #1
 8012340:	3608      	adds	r6, #8
 8012342:	e7e5      	b.n	8012310 <_dtoa_r+0x370>
 8012344:	f000 80a6 	beq.w	8012494 <_dtoa_r+0x4f4>
 8012348:	f1ca 0600 	rsb	r6, sl, #0
 801234c:	4ba5      	ldr	r3, [pc, #660]	; (80125e4 <_dtoa_r+0x644>)
 801234e:	4fa6      	ldr	r7, [pc, #664]	; (80125e8 <_dtoa_r+0x648>)
 8012350:	f006 020f 	and.w	r2, r6, #15
 8012354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012360:	f7ee f95a 	bl	8000618 <__aeabi_dmul>
 8012364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012368:	1136      	asrs	r6, r6, #4
 801236a:	2300      	movs	r3, #0
 801236c:	2502      	movs	r5, #2
 801236e:	2e00      	cmp	r6, #0
 8012370:	f040 8085 	bne.w	801247e <_dtoa_r+0x4de>
 8012374:	2b00      	cmp	r3, #0
 8012376:	d1d2      	bne.n	801231e <_dtoa_r+0x37e>
 8012378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801237a:	2b00      	cmp	r3, #0
 801237c:	f000 808c 	beq.w	8012498 <_dtoa_r+0x4f8>
 8012380:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012384:	4b99      	ldr	r3, [pc, #612]	; (80125ec <_dtoa_r+0x64c>)
 8012386:	2200      	movs	r2, #0
 8012388:	4630      	mov	r0, r6
 801238a:	4639      	mov	r1, r7
 801238c:	f7ee fbb6 	bl	8000afc <__aeabi_dcmplt>
 8012390:	2800      	cmp	r0, #0
 8012392:	f000 8081 	beq.w	8012498 <_dtoa_r+0x4f8>
 8012396:	9b01      	ldr	r3, [sp, #4]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d07d      	beq.n	8012498 <_dtoa_r+0x4f8>
 801239c:	f1b9 0f00 	cmp.w	r9, #0
 80123a0:	dd3c      	ble.n	801241c <_dtoa_r+0x47c>
 80123a2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80123a6:	9307      	str	r3, [sp, #28]
 80123a8:	2200      	movs	r2, #0
 80123aa:	4b91      	ldr	r3, [pc, #580]	; (80125f0 <_dtoa_r+0x650>)
 80123ac:	4630      	mov	r0, r6
 80123ae:	4639      	mov	r1, r7
 80123b0:	f7ee f932 	bl	8000618 <__aeabi_dmul>
 80123b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123b8:	3501      	adds	r5, #1
 80123ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80123be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123c2:	4628      	mov	r0, r5
 80123c4:	f7ee f8be 	bl	8000544 <__aeabi_i2d>
 80123c8:	4632      	mov	r2, r6
 80123ca:	463b      	mov	r3, r7
 80123cc:	f7ee f924 	bl	8000618 <__aeabi_dmul>
 80123d0:	4b88      	ldr	r3, [pc, #544]	; (80125f4 <_dtoa_r+0x654>)
 80123d2:	2200      	movs	r2, #0
 80123d4:	f7ed ff6a 	bl	80002ac <__adddf3>
 80123d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80123dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123e0:	9303      	str	r3, [sp, #12]
 80123e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d15c      	bne.n	80124a2 <_dtoa_r+0x502>
 80123e8:	4b83      	ldr	r3, [pc, #524]	; (80125f8 <_dtoa_r+0x658>)
 80123ea:	2200      	movs	r2, #0
 80123ec:	4630      	mov	r0, r6
 80123ee:	4639      	mov	r1, r7
 80123f0:	f7ed ff5a 	bl	80002a8 <__aeabi_dsub>
 80123f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123f8:	4606      	mov	r6, r0
 80123fa:	460f      	mov	r7, r1
 80123fc:	f7ee fb9c 	bl	8000b38 <__aeabi_dcmpgt>
 8012400:	2800      	cmp	r0, #0
 8012402:	f040 8296 	bne.w	8012932 <_dtoa_r+0x992>
 8012406:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801240a:	4630      	mov	r0, r6
 801240c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012410:	4639      	mov	r1, r7
 8012412:	f7ee fb73 	bl	8000afc <__aeabi_dcmplt>
 8012416:	2800      	cmp	r0, #0
 8012418:	f040 8288 	bne.w	801292c <_dtoa_r+0x98c>
 801241c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012420:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012426:	2b00      	cmp	r3, #0
 8012428:	f2c0 8158 	blt.w	80126dc <_dtoa_r+0x73c>
 801242c:	f1ba 0f0e 	cmp.w	sl, #14
 8012430:	f300 8154 	bgt.w	80126dc <_dtoa_r+0x73c>
 8012434:	4b6b      	ldr	r3, [pc, #428]	; (80125e4 <_dtoa_r+0x644>)
 8012436:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801243a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801243e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012440:	2b00      	cmp	r3, #0
 8012442:	f280 80e3 	bge.w	801260c <_dtoa_r+0x66c>
 8012446:	9b01      	ldr	r3, [sp, #4]
 8012448:	2b00      	cmp	r3, #0
 801244a:	f300 80df 	bgt.w	801260c <_dtoa_r+0x66c>
 801244e:	f040 826d 	bne.w	801292c <_dtoa_r+0x98c>
 8012452:	4b69      	ldr	r3, [pc, #420]	; (80125f8 <_dtoa_r+0x658>)
 8012454:	2200      	movs	r2, #0
 8012456:	4640      	mov	r0, r8
 8012458:	4649      	mov	r1, r9
 801245a:	f7ee f8dd 	bl	8000618 <__aeabi_dmul>
 801245e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012462:	f7ee fb5f 	bl	8000b24 <__aeabi_dcmpge>
 8012466:	9e01      	ldr	r6, [sp, #4]
 8012468:	4637      	mov	r7, r6
 801246a:	2800      	cmp	r0, #0
 801246c:	f040 8243 	bne.w	80128f6 <_dtoa_r+0x956>
 8012470:	9d00      	ldr	r5, [sp, #0]
 8012472:	2331      	movs	r3, #49	; 0x31
 8012474:	f805 3b01 	strb.w	r3, [r5], #1
 8012478:	f10a 0a01 	add.w	sl, sl, #1
 801247c:	e23f      	b.n	80128fe <_dtoa_r+0x95e>
 801247e:	07f2      	lsls	r2, r6, #31
 8012480:	d505      	bpl.n	801248e <_dtoa_r+0x4ee>
 8012482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012486:	f7ee f8c7 	bl	8000618 <__aeabi_dmul>
 801248a:	3501      	adds	r5, #1
 801248c:	2301      	movs	r3, #1
 801248e:	1076      	asrs	r6, r6, #1
 8012490:	3708      	adds	r7, #8
 8012492:	e76c      	b.n	801236e <_dtoa_r+0x3ce>
 8012494:	2502      	movs	r5, #2
 8012496:	e76f      	b.n	8012378 <_dtoa_r+0x3d8>
 8012498:	9b01      	ldr	r3, [sp, #4]
 801249a:	f8cd a01c 	str.w	sl, [sp, #28]
 801249e:	930c      	str	r3, [sp, #48]	; 0x30
 80124a0:	e78d      	b.n	80123be <_dtoa_r+0x41e>
 80124a2:	9900      	ldr	r1, [sp, #0]
 80124a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80124a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124a8:	4b4e      	ldr	r3, [pc, #312]	; (80125e4 <_dtoa_r+0x644>)
 80124aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124ae:	4401      	add	r1, r0
 80124b0:	9102      	str	r1, [sp, #8]
 80124b2:	9908      	ldr	r1, [sp, #32]
 80124b4:	eeb0 8a47 	vmov.f32	s16, s14
 80124b8:	eef0 8a67 	vmov.f32	s17, s15
 80124bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80124c4:	2900      	cmp	r1, #0
 80124c6:	d045      	beq.n	8012554 <_dtoa_r+0x5b4>
 80124c8:	494c      	ldr	r1, [pc, #304]	; (80125fc <_dtoa_r+0x65c>)
 80124ca:	2000      	movs	r0, #0
 80124cc:	f7ee f9ce 	bl	800086c <__aeabi_ddiv>
 80124d0:	ec53 2b18 	vmov	r2, r3, d8
 80124d4:	f7ed fee8 	bl	80002a8 <__aeabi_dsub>
 80124d8:	9d00      	ldr	r5, [sp, #0]
 80124da:	ec41 0b18 	vmov	d8, r0, r1
 80124de:	4639      	mov	r1, r7
 80124e0:	4630      	mov	r0, r6
 80124e2:	f7ee fb49 	bl	8000b78 <__aeabi_d2iz>
 80124e6:	900c      	str	r0, [sp, #48]	; 0x30
 80124e8:	f7ee f82c 	bl	8000544 <__aeabi_i2d>
 80124ec:	4602      	mov	r2, r0
 80124ee:	460b      	mov	r3, r1
 80124f0:	4630      	mov	r0, r6
 80124f2:	4639      	mov	r1, r7
 80124f4:	f7ed fed8 	bl	80002a8 <__aeabi_dsub>
 80124f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124fa:	3330      	adds	r3, #48	; 0x30
 80124fc:	f805 3b01 	strb.w	r3, [r5], #1
 8012500:	ec53 2b18 	vmov	r2, r3, d8
 8012504:	4606      	mov	r6, r0
 8012506:	460f      	mov	r7, r1
 8012508:	f7ee faf8 	bl	8000afc <__aeabi_dcmplt>
 801250c:	2800      	cmp	r0, #0
 801250e:	d165      	bne.n	80125dc <_dtoa_r+0x63c>
 8012510:	4632      	mov	r2, r6
 8012512:	463b      	mov	r3, r7
 8012514:	4935      	ldr	r1, [pc, #212]	; (80125ec <_dtoa_r+0x64c>)
 8012516:	2000      	movs	r0, #0
 8012518:	f7ed fec6 	bl	80002a8 <__aeabi_dsub>
 801251c:	ec53 2b18 	vmov	r2, r3, d8
 8012520:	f7ee faec 	bl	8000afc <__aeabi_dcmplt>
 8012524:	2800      	cmp	r0, #0
 8012526:	f040 80b9 	bne.w	801269c <_dtoa_r+0x6fc>
 801252a:	9b02      	ldr	r3, [sp, #8]
 801252c:	429d      	cmp	r5, r3
 801252e:	f43f af75 	beq.w	801241c <_dtoa_r+0x47c>
 8012532:	4b2f      	ldr	r3, [pc, #188]	; (80125f0 <_dtoa_r+0x650>)
 8012534:	ec51 0b18 	vmov	r0, r1, d8
 8012538:	2200      	movs	r2, #0
 801253a:	f7ee f86d 	bl	8000618 <__aeabi_dmul>
 801253e:	4b2c      	ldr	r3, [pc, #176]	; (80125f0 <_dtoa_r+0x650>)
 8012540:	ec41 0b18 	vmov	d8, r0, r1
 8012544:	2200      	movs	r2, #0
 8012546:	4630      	mov	r0, r6
 8012548:	4639      	mov	r1, r7
 801254a:	f7ee f865 	bl	8000618 <__aeabi_dmul>
 801254e:	4606      	mov	r6, r0
 8012550:	460f      	mov	r7, r1
 8012552:	e7c4      	b.n	80124de <_dtoa_r+0x53e>
 8012554:	ec51 0b17 	vmov	r0, r1, d7
 8012558:	f7ee f85e 	bl	8000618 <__aeabi_dmul>
 801255c:	9b02      	ldr	r3, [sp, #8]
 801255e:	9d00      	ldr	r5, [sp, #0]
 8012560:	930c      	str	r3, [sp, #48]	; 0x30
 8012562:	ec41 0b18 	vmov	d8, r0, r1
 8012566:	4639      	mov	r1, r7
 8012568:	4630      	mov	r0, r6
 801256a:	f7ee fb05 	bl	8000b78 <__aeabi_d2iz>
 801256e:	9011      	str	r0, [sp, #68]	; 0x44
 8012570:	f7ed ffe8 	bl	8000544 <__aeabi_i2d>
 8012574:	4602      	mov	r2, r0
 8012576:	460b      	mov	r3, r1
 8012578:	4630      	mov	r0, r6
 801257a:	4639      	mov	r1, r7
 801257c:	f7ed fe94 	bl	80002a8 <__aeabi_dsub>
 8012580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012582:	3330      	adds	r3, #48	; 0x30
 8012584:	f805 3b01 	strb.w	r3, [r5], #1
 8012588:	9b02      	ldr	r3, [sp, #8]
 801258a:	429d      	cmp	r5, r3
 801258c:	4606      	mov	r6, r0
 801258e:	460f      	mov	r7, r1
 8012590:	f04f 0200 	mov.w	r2, #0
 8012594:	d134      	bne.n	8012600 <_dtoa_r+0x660>
 8012596:	4b19      	ldr	r3, [pc, #100]	; (80125fc <_dtoa_r+0x65c>)
 8012598:	ec51 0b18 	vmov	r0, r1, d8
 801259c:	f7ed fe86 	bl	80002ac <__adddf3>
 80125a0:	4602      	mov	r2, r0
 80125a2:	460b      	mov	r3, r1
 80125a4:	4630      	mov	r0, r6
 80125a6:	4639      	mov	r1, r7
 80125a8:	f7ee fac6 	bl	8000b38 <__aeabi_dcmpgt>
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d175      	bne.n	801269c <_dtoa_r+0x6fc>
 80125b0:	ec53 2b18 	vmov	r2, r3, d8
 80125b4:	4911      	ldr	r1, [pc, #68]	; (80125fc <_dtoa_r+0x65c>)
 80125b6:	2000      	movs	r0, #0
 80125b8:	f7ed fe76 	bl	80002a8 <__aeabi_dsub>
 80125bc:	4602      	mov	r2, r0
 80125be:	460b      	mov	r3, r1
 80125c0:	4630      	mov	r0, r6
 80125c2:	4639      	mov	r1, r7
 80125c4:	f7ee fa9a 	bl	8000afc <__aeabi_dcmplt>
 80125c8:	2800      	cmp	r0, #0
 80125ca:	f43f af27 	beq.w	801241c <_dtoa_r+0x47c>
 80125ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125d0:	1e6b      	subs	r3, r5, #1
 80125d2:	930c      	str	r3, [sp, #48]	; 0x30
 80125d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80125d8:	2b30      	cmp	r3, #48	; 0x30
 80125da:	d0f8      	beq.n	80125ce <_dtoa_r+0x62e>
 80125dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80125e0:	e04a      	b.n	8012678 <_dtoa_r+0x6d8>
 80125e2:	bf00      	nop
 80125e4:	08015308 	.word	0x08015308
 80125e8:	080152e0 	.word	0x080152e0
 80125ec:	3ff00000 	.word	0x3ff00000
 80125f0:	40240000 	.word	0x40240000
 80125f4:	401c0000 	.word	0x401c0000
 80125f8:	40140000 	.word	0x40140000
 80125fc:	3fe00000 	.word	0x3fe00000
 8012600:	4baf      	ldr	r3, [pc, #700]	; (80128c0 <_dtoa_r+0x920>)
 8012602:	f7ee f809 	bl	8000618 <__aeabi_dmul>
 8012606:	4606      	mov	r6, r0
 8012608:	460f      	mov	r7, r1
 801260a:	e7ac      	b.n	8012566 <_dtoa_r+0x5c6>
 801260c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012610:	9d00      	ldr	r5, [sp, #0]
 8012612:	4642      	mov	r2, r8
 8012614:	464b      	mov	r3, r9
 8012616:	4630      	mov	r0, r6
 8012618:	4639      	mov	r1, r7
 801261a:	f7ee f927 	bl	800086c <__aeabi_ddiv>
 801261e:	f7ee faab 	bl	8000b78 <__aeabi_d2iz>
 8012622:	9002      	str	r0, [sp, #8]
 8012624:	f7ed ff8e 	bl	8000544 <__aeabi_i2d>
 8012628:	4642      	mov	r2, r8
 801262a:	464b      	mov	r3, r9
 801262c:	f7ed fff4 	bl	8000618 <__aeabi_dmul>
 8012630:	4602      	mov	r2, r0
 8012632:	460b      	mov	r3, r1
 8012634:	4630      	mov	r0, r6
 8012636:	4639      	mov	r1, r7
 8012638:	f7ed fe36 	bl	80002a8 <__aeabi_dsub>
 801263c:	9e02      	ldr	r6, [sp, #8]
 801263e:	9f01      	ldr	r7, [sp, #4]
 8012640:	3630      	adds	r6, #48	; 0x30
 8012642:	f805 6b01 	strb.w	r6, [r5], #1
 8012646:	9e00      	ldr	r6, [sp, #0]
 8012648:	1bae      	subs	r6, r5, r6
 801264a:	42b7      	cmp	r7, r6
 801264c:	4602      	mov	r2, r0
 801264e:	460b      	mov	r3, r1
 8012650:	d137      	bne.n	80126c2 <_dtoa_r+0x722>
 8012652:	f7ed fe2b 	bl	80002ac <__adddf3>
 8012656:	4642      	mov	r2, r8
 8012658:	464b      	mov	r3, r9
 801265a:	4606      	mov	r6, r0
 801265c:	460f      	mov	r7, r1
 801265e:	f7ee fa6b 	bl	8000b38 <__aeabi_dcmpgt>
 8012662:	b9c8      	cbnz	r0, 8012698 <_dtoa_r+0x6f8>
 8012664:	4642      	mov	r2, r8
 8012666:	464b      	mov	r3, r9
 8012668:	4630      	mov	r0, r6
 801266a:	4639      	mov	r1, r7
 801266c:	f7ee fa3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8012670:	b110      	cbz	r0, 8012678 <_dtoa_r+0x6d8>
 8012672:	9b02      	ldr	r3, [sp, #8]
 8012674:	07d9      	lsls	r1, r3, #31
 8012676:	d40f      	bmi.n	8012698 <_dtoa_r+0x6f8>
 8012678:	4620      	mov	r0, r4
 801267a:	4659      	mov	r1, fp
 801267c:	f001 f86c 	bl	8013758 <_Bfree>
 8012680:	2300      	movs	r3, #0
 8012682:	702b      	strb	r3, [r5, #0]
 8012684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012686:	f10a 0001 	add.w	r0, sl, #1
 801268a:	6018      	str	r0, [r3, #0]
 801268c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801268e:	2b00      	cmp	r3, #0
 8012690:	f43f acd8 	beq.w	8012044 <_dtoa_r+0xa4>
 8012694:	601d      	str	r5, [r3, #0]
 8012696:	e4d5      	b.n	8012044 <_dtoa_r+0xa4>
 8012698:	f8cd a01c 	str.w	sl, [sp, #28]
 801269c:	462b      	mov	r3, r5
 801269e:	461d      	mov	r5, r3
 80126a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126a4:	2a39      	cmp	r2, #57	; 0x39
 80126a6:	d108      	bne.n	80126ba <_dtoa_r+0x71a>
 80126a8:	9a00      	ldr	r2, [sp, #0]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d1f7      	bne.n	801269e <_dtoa_r+0x6fe>
 80126ae:	9a07      	ldr	r2, [sp, #28]
 80126b0:	9900      	ldr	r1, [sp, #0]
 80126b2:	3201      	adds	r2, #1
 80126b4:	9207      	str	r2, [sp, #28]
 80126b6:	2230      	movs	r2, #48	; 0x30
 80126b8:	700a      	strb	r2, [r1, #0]
 80126ba:	781a      	ldrb	r2, [r3, #0]
 80126bc:	3201      	adds	r2, #1
 80126be:	701a      	strb	r2, [r3, #0]
 80126c0:	e78c      	b.n	80125dc <_dtoa_r+0x63c>
 80126c2:	4b7f      	ldr	r3, [pc, #508]	; (80128c0 <_dtoa_r+0x920>)
 80126c4:	2200      	movs	r2, #0
 80126c6:	f7ed ffa7 	bl	8000618 <__aeabi_dmul>
 80126ca:	2200      	movs	r2, #0
 80126cc:	2300      	movs	r3, #0
 80126ce:	4606      	mov	r6, r0
 80126d0:	460f      	mov	r7, r1
 80126d2:	f7ee fa09 	bl	8000ae8 <__aeabi_dcmpeq>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d09b      	beq.n	8012612 <_dtoa_r+0x672>
 80126da:	e7cd      	b.n	8012678 <_dtoa_r+0x6d8>
 80126dc:	9a08      	ldr	r2, [sp, #32]
 80126de:	2a00      	cmp	r2, #0
 80126e0:	f000 80c4 	beq.w	801286c <_dtoa_r+0x8cc>
 80126e4:	9a05      	ldr	r2, [sp, #20]
 80126e6:	2a01      	cmp	r2, #1
 80126e8:	f300 80a8 	bgt.w	801283c <_dtoa_r+0x89c>
 80126ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126ee:	2a00      	cmp	r2, #0
 80126f0:	f000 80a0 	beq.w	8012834 <_dtoa_r+0x894>
 80126f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80126f8:	9e06      	ldr	r6, [sp, #24]
 80126fa:	4645      	mov	r5, r8
 80126fc:	9a04      	ldr	r2, [sp, #16]
 80126fe:	2101      	movs	r1, #1
 8012700:	441a      	add	r2, r3
 8012702:	4620      	mov	r0, r4
 8012704:	4498      	add	r8, r3
 8012706:	9204      	str	r2, [sp, #16]
 8012708:	f001 f92c 	bl	8013964 <__i2b>
 801270c:	4607      	mov	r7, r0
 801270e:	2d00      	cmp	r5, #0
 8012710:	dd0b      	ble.n	801272a <_dtoa_r+0x78a>
 8012712:	9b04      	ldr	r3, [sp, #16]
 8012714:	2b00      	cmp	r3, #0
 8012716:	dd08      	ble.n	801272a <_dtoa_r+0x78a>
 8012718:	42ab      	cmp	r3, r5
 801271a:	9a04      	ldr	r2, [sp, #16]
 801271c:	bfa8      	it	ge
 801271e:	462b      	movge	r3, r5
 8012720:	eba8 0803 	sub.w	r8, r8, r3
 8012724:	1aed      	subs	r5, r5, r3
 8012726:	1ad3      	subs	r3, r2, r3
 8012728:	9304      	str	r3, [sp, #16]
 801272a:	9b06      	ldr	r3, [sp, #24]
 801272c:	b1fb      	cbz	r3, 801276e <_dtoa_r+0x7ce>
 801272e:	9b08      	ldr	r3, [sp, #32]
 8012730:	2b00      	cmp	r3, #0
 8012732:	f000 809f 	beq.w	8012874 <_dtoa_r+0x8d4>
 8012736:	2e00      	cmp	r6, #0
 8012738:	dd11      	ble.n	801275e <_dtoa_r+0x7be>
 801273a:	4639      	mov	r1, r7
 801273c:	4632      	mov	r2, r6
 801273e:	4620      	mov	r0, r4
 8012740:	f001 f9cc 	bl	8013adc <__pow5mult>
 8012744:	465a      	mov	r2, fp
 8012746:	4601      	mov	r1, r0
 8012748:	4607      	mov	r7, r0
 801274a:	4620      	mov	r0, r4
 801274c:	f001 f920 	bl	8013990 <__multiply>
 8012750:	4659      	mov	r1, fp
 8012752:	9007      	str	r0, [sp, #28]
 8012754:	4620      	mov	r0, r4
 8012756:	f000 ffff 	bl	8013758 <_Bfree>
 801275a:	9b07      	ldr	r3, [sp, #28]
 801275c:	469b      	mov	fp, r3
 801275e:	9b06      	ldr	r3, [sp, #24]
 8012760:	1b9a      	subs	r2, r3, r6
 8012762:	d004      	beq.n	801276e <_dtoa_r+0x7ce>
 8012764:	4659      	mov	r1, fp
 8012766:	4620      	mov	r0, r4
 8012768:	f001 f9b8 	bl	8013adc <__pow5mult>
 801276c:	4683      	mov	fp, r0
 801276e:	2101      	movs	r1, #1
 8012770:	4620      	mov	r0, r4
 8012772:	f001 f8f7 	bl	8013964 <__i2b>
 8012776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012778:	2b00      	cmp	r3, #0
 801277a:	4606      	mov	r6, r0
 801277c:	dd7c      	ble.n	8012878 <_dtoa_r+0x8d8>
 801277e:	461a      	mov	r2, r3
 8012780:	4601      	mov	r1, r0
 8012782:	4620      	mov	r0, r4
 8012784:	f001 f9aa 	bl	8013adc <__pow5mult>
 8012788:	9b05      	ldr	r3, [sp, #20]
 801278a:	2b01      	cmp	r3, #1
 801278c:	4606      	mov	r6, r0
 801278e:	dd76      	ble.n	801287e <_dtoa_r+0x8de>
 8012790:	2300      	movs	r3, #0
 8012792:	9306      	str	r3, [sp, #24]
 8012794:	6933      	ldr	r3, [r6, #16]
 8012796:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801279a:	6918      	ldr	r0, [r3, #16]
 801279c:	f001 f892 	bl	80138c4 <__hi0bits>
 80127a0:	f1c0 0020 	rsb	r0, r0, #32
 80127a4:	9b04      	ldr	r3, [sp, #16]
 80127a6:	4418      	add	r0, r3
 80127a8:	f010 001f 	ands.w	r0, r0, #31
 80127ac:	f000 8086 	beq.w	80128bc <_dtoa_r+0x91c>
 80127b0:	f1c0 0320 	rsb	r3, r0, #32
 80127b4:	2b04      	cmp	r3, #4
 80127b6:	dd7f      	ble.n	80128b8 <_dtoa_r+0x918>
 80127b8:	f1c0 001c 	rsb	r0, r0, #28
 80127bc:	9b04      	ldr	r3, [sp, #16]
 80127be:	4403      	add	r3, r0
 80127c0:	4480      	add	r8, r0
 80127c2:	4405      	add	r5, r0
 80127c4:	9304      	str	r3, [sp, #16]
 80127c6:	f1b8 0f00 	cmp.w	r8, #0
 80127ca:	dd05      	ble.n	80127d8 <_dtoa_r+0x838>
 80127cc:	4659      	mov	r1, fp
 80127ce:	4642      	mov	r2, r8
 80127d0:	4620      	mov	r0, r4
 80127d2:	f001 f9dd 	bl	8013b90 <__lshift>
 80127d6:	4683      	mov	fp, r0
 80127d8:	9b04      	ldr	r3, [sp, #16]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	dd05      	ble.n	80127ea <_dtoa_r+0x84a>
 80127de:	4631      	mov	r1, r6
 80127e0:	461a      	mov	r2, r3
 80127e2:	4620      	mov	r0, r4
 80127e4:	f001 f9d4 	bl	8013b90 <__lshift>
 80127e8:	4606      	mov	r6, r0
 80127ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d069      	beq.n	80128c4 <_dtoa_r+0x924>
 80127f0:	4631      	mov	r1, r6
 80127f2:	4658      	mov	r0, fp
 80127f4:	f001 fa38 	bl	8013c68 <__mcmp>
 80127f8:	2800      	cmp	r0, #0
 80127fa:	da63      	bge.n	80128c4 <_dtoa_r+0x924>
 80127fc:	2300      	movs	r3, #0
 80127fe:	4659      	mov	r1, fp
 8012800:	220a      	movs	r2, #10
 8012802:	4620      	mov	r0, r4
 8012804:	f000 ffca 	bl	801379c <__multadd>
 8012808:	9b08      	ldr	r3, [sp, #32]
 801280a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801280e:	4683      	mov	fp, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	f000 818f 	beq.w	8012b34 <_dtoa_r+0xb94>
 8012816:	4639      	mov	r1, r7
 8012818:	2300      	movs	r3, #0
 801281a:	220a      	movs	r2, #10
 801281c:	4620      	mov	r0, r4
 801281e:	f000 ffbd 	bl	801379c <__multadd>
 8012822:	f1b9 0f00 	cmp.w	r9, #0
 8012826:	4607      	mov	r7, r0
 8012828:	f300 808e 	bgt.w	8012948 <_dtoa_r+0x9a8>
 801282c:	9b05      	ldr	r3, [sp, #20]
 801282e:	2b02      	cmp	r3, #2
 8012830:	dc50      	bgt.n	80128d4 <_dtoa_r+0x934>
 8012832:	e089      	b.n	8012948 <_dtoa_r+0x9a8>
 8012834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801283a:	e75d      	b.n	80126f8 <_dtoa_r+0x758>
 801283c:	9b01      	ldr	r3, [sp, #4]
 801283e:	1e5e      	subs	r6, r3, #1
 8012840:	9b06      	ldr	r3, [sp, #24]
 8012842:	42b3      	cmp	r3, r6
 8012844:	bfbf      	itttt	lt
 8012846:	9b06      	ldrlt	r3, [sp, #24]
 8012848:	9606      	strlt	r6, [sp, #24]
 801284a:	1af2      	sublt	r2, r6, r3
 801284c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801284e:	bfb6      	itet	lt
 8012850:	189b      	addlt	r3, r3, r2
 8012852:	1b9e      	subge	r6, r3, r6
 8012854:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012856:	9b01      	ldr	r3, [sp, #4]
 8012858:	bfb8      	it	lt
 801285a:	2600      	movlt	r6, #0
 801285c:	2b00      	cmp	r3, #0
 801285e:	bfb5      	itete	lt
 8012860:	eba8 0503 	sublt.w	r5, r8, r3
 8012864:	9b01      	ldrge	r3, [sp, #4]
 8012866:	2300      	movlt	r3, #0
 8012868:	4645      	movge	r5, r8
 801286a:	e747      	b.n	80126fc <_dtoa_r+0x75c>
 801286c:	9e06      	ldr	r6, [sp, #24]
 801286e:	9f08      	ldr	r7, [sp, #32]
 8012870:	4645      	mov	r5, r8
 8012872:	e74c      	b.n	801270e <_dtoa_r+0x76e>
 8012874:	9a06      	ldr	r2, [sp, #24]
 8012876:	e775      	b.n	8012764 <_dtoa_r+0x7c4>
 8012878:	9b05      	ldr	r3, [sp, #20]
 801287a:	2b01      	cmp	r3, #1
 801287c:	dc18      	bgt.n	80128b0 <_dtoa_r+0x910>
 801287e:	9b02      	ldr	r3, [sp, #8]
 8012880:	b9b3      	cbnz	r3, 80128b0 <_dtoa_r+0x910>
 8012882:	9b03      	ldr	r3, [sp, #12]
 8012884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012888:	b9a3      	cbnz	r3, 80128b4 <_dtoa_r+0x914>
 801288a:	9b03      	ldr	r3, [sp, #12]
 801288c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012890:	0d1b      	lsrs	r3, r3, #20
 8012892:	051b      	lsls	r3, r3, #20
 8012894:	b12b      	cbz	r3, 80128a2 <_dtoa_r+0x902>
 8012896:	9b04      	ldr	r3, [sp, #16]
 8012898:	3301      	adds	r3, #1
 801289a:	9304      	str	r3, [sp, #16]
 801289c:	f108 0801 	add.w	r8, r8, #1
 80128a0:	2301      	movs	r3, #1
 80128a2:	9306      	str	r3, [sp, #24]
 80128a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	f47f af74 	bne.w	8012794 <_dtoa_r+0x7f4>
 80128ac:	2001      	movs	r0, #1
 80128ae:	e779      	b.n	80127a4 <_dtoa_r+0x804>
 80128b0:	2300      	movs	r3, #0
 80128b2:	e7f6      	b.n	80128a2 <_dtoa_r+0x902>
 80128b4:	9b02      	ldr	r3, [sp, #8]
 80128b6:	e7f4      	b.n	80128a2 <_dtoa_r+0x902>
 80128b8:	d085      	beq.n	80127c6 <_dtoa_r+0x826>
 80128ba:	4618      	mov	r0, r3
 80128bc:	301c      	adds	r0, #28
 80128be:	e77d      	b.n	80127bc <_dtoa_r+0x81c>
 80128c0:	40240000 	.word	0x40240000
 80128c4:	9b01      	ldr	r3, [sp, #4]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	dc38      	bgt.n	801293c <_dtoa_r+0x99c>
 80128ca:	9b05      	ldr	r3, [sp, #20]
 80128cc:	2b02      	cmp	r3, #2
 80128ce:	dd35      	ble.n	801293c <_dtoa_r+0x99c>
 80128d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80128d4:	f1b9 0f00 	cmp.w	r9, #0
 80128d8:	d10d      	bne.n	80128f6 <_dtoa_r+0x956>
 80128da:	4631      	mov	r1, r6
 80128dc:	464b      	mov	r3, r9
 80128de:	2205      	movs	r2, #5
 80128e0:	4620      	mov	r0, r4
 80128e2:	f000 ff5b 	bl	801379c <__multadd>
 80128e6:	4601      	mov	r1, r0
 80128e8:	4606      	mov	r6, r0
 80128ea:	4658      	mov	r0, fp
 80128ec:	f001 f9bc 	bl	8013c68 <__mcmp>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	f73f adbd 	bgt.w	8012470 <_dtoa_r+0x4d0>
 80128f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128f8:	9d00      	ldr	r5, [sp, #0]
 80128fa:	ea6f 0a03 	mvn.w	sl, r3
 80128fe:	f04f 0800 	mov.w	r8, #0
 8012902:	4631      	mov	r1, r6
 8012904:	4620      	mov	r0, r4
 8012906:	f000 ff27 	bl	8013758 <_Bfree>
 801290a:	2f00      	cmp	r7, #0
 801290c:	f43f aeb4 	beq.w	8012678 <_dtoa_r+0x6d8>
 8012910:	f1b8 0f00 	cmp.w	r8, #0
 8012914:	d005      	beq.n	8012922 <_dtoa_r+0x982>
 8012916:	45b8      	cmp	r8, r7
 8012918:	d003      	beq.n	8012922 <_dtoa_r+0x982>
 801291a:	4641      	mov	r1, r8
 801291c:	4620      	mov	r0, r4
 801291e:	f000 ff1b 	bl	8013758 <_Bfree>
 8012922:	4639      	mov	r1, r7
 8012924:	4620      	mov	r0, r4
 8012926:	f000 ff17 	bl	8013758 <_Bfree>
 801292a:	e6a5      	b.n	8012678 <_dtoa_r+0x6d8>
 801292c:	2600      	movs	r6, #0
 801292e:	4637      	mov	r7, r6
 8012930:	e7e1      	b.n	80128f6 <_dtoa_r+0x956>
 8012932:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012934:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012938:	4637      	mov	r7, r6
 801293a:	e599      	b.n	8012470 <_dtoa_r+0x4d0>
 801293c:	9b08      	ldr	r3, [sp, #32]
 801293e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	f000 80fd 	beq.w	8012b42 <_dtoa_r+0xba2>
 8012948:	2d00      	cmp	r5, #0
 801294a:	dd05      	ble.n	8012958 <_dtoa_r+0x9b8>
 801294c:	4639      	mov	r1, r7
 801294e:	462a      	mov	r2, r5
 8012950:	4620      	mov	r0, r4
 8012952:	f001 f91d 	bl	8013b90 <__lshift>
 8012956:	4607      	mov	r7, r0
 8012958:	9b06      	ldr	r3, [sp, #24]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d05c      	beq.n	8012a18 <_dtoa_r+0xa78>
 801295e:	6879      	ldr	r1, [r7, #4]
 8012960:	4620      	mov	r0, r4
 8012962:	f000 feb9 	bl	80136d8 <_Balloc>
 8012966:	4605      	mov	r5, r0
 8012968:	b928      	cbnz	r0, 8012976 <_dtoa_r+0x9d6>
 801296a:	4b80      	ldr	r3, [pc, #512]	; (8012b6c <_dtoa_r+0xbcc>)
 801296c:	4602      	mov	r2, r0
 801296e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012972:	f7ff bb2e 	b.w	8011fd2 <_dtoa_r+0x32>
 8012976:	693a      	ldr	r2, [r7, #16]
 8012978:	3202      	adds	r2, #2
 801297a:	0092      	lsls	r2, r2, #2
 801297c:	f107 010c 	add.w	r1, r7, #12
 8012980:	300c      	adds	r0, #12
 8012982:	f7fd fa6b 	bl	800fe5c <memcpy>
 8012986:	2201      	movs	r2, #1
 8012988:	4629      	mov	r1, r5
 801298a:	4620      	mov	r0, r4
 801298c:	f001 f900 	bl	8013b90 <__lshift>
 8012990:	9b00      	ldr	r3, [sp, #0]
 8012992:	3301      	adds	r3, #1
 8012994:	9301      	str	r3, [sp, #4]
 8012996:	9b00      	ldr	r3, [sp, #0]
 8012998:	444b      	add	r3, r9
 801299a:	9307      	str	r3, [sp, #28]
 801299c:	9b02      	ldr	r3, [sp, #8]
 801299e:	f003 0301 	and.w	r3, r3, #1
 80129a2:	46b8      	mov	r8, r7
 80129a4:	9306      	str	r3, [sp, #24]
 80129a6:	4607      	mov	r7, r0
 80129a8:	9b01      	ldr	r3, [sp, #4]
 80129aa:	4631      	mov	r1, r6
 80129ac:	3b01      	subs	r3, #1
 80129ae:	4658      	mov	r0, fp
 80129b0:	9302      	str	r3, [sp, #8]
 80129b2:	f7ff fa69 	bl	8011e88 <quorem>
 80129b6:	4603      	mov	r3, r0
 80129b8:	3330      	adds	r3, #48	; 0x30
 80129ba:	9004      	str	r0, [sp, #16]
 80129bc:	4641      	mov	r1, r8
 80129be:	4658      	mov	r0, fp
 80129c0:	9308      	str	r3, [sp, #32]
 80129c2:	f001 f951 	bl	8013c68 <__mcmp>
 80129c6:	463a      	mov	r2, r7
 80129c8:	4681      	mov	r9, r0
 80129ca:	4631      	mov	r1, r6
 80129cc:	4620      	mov	r0, r4
 80129ce:	f001 f967 	bl	8013ca0 <__mdiff>
 80129d2:	68c2      	ldr	r2, [r0, #12]
 80129d4:	9b08      	ldr	r3, [sp, #32]
 80129d6:	4605      	mov	r5, r0
 80129d8:	bb02      	cbnz	r2, 8012a1c <_dtoa_r+0xa7c>
 80129da:	4601      	mov	r1, r0
 80129dc:	4658      	mov	r0, fp
 80129de:	f001 f943 	bl	8013c68 <__mcmp>
 80129e2:	9b08      	ldr	r3, [sp, #32]
 80129e4:	4602      	mov	r2, r0
 80129e6:	4629      	mov	r1, r5
 80129e8:	4620      	mov	r0, r4
 80129ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80129ee:	f000 feb3 	bl	8013758 <_Bfree>
 80129f2:	9b05      	ldr	r3, [sp, #20]
 80129f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129f6:	9d01      	ldr	r5, [sp, #4]
 80129f8:	ea43 0102 	orr.w	r1, r3, r2
 80129fc:	9b06      	ldr	r3, [sp, #24]
 80129fe:	430b      	orrs	r3, r1
 8012a00:	9b08      	ldr	r3, [sp, #32]
 8012a02:	d10d      	bne.n	8012a20 <_dtoa_r+0xa80>
 8012a04:	2b39      	cmp	r3, #57	; 0x39
 8012a06:	d029      	beq.n	8012a5c <_dtoa_r+0xabc>
 8012a08:	f1b9 0f00 	cmp.w	r9, #0
 8012a0c:	dd01      	ble.n	8012a12 <_dtoa_r+0xa72>
 8012a0e:	9b04      	ldr	r3, [sp, #16]
 8012a10:	3331      	adds	r3, #49	; 0x31
 8012a12:	9a02      	ldr	r2, [sp, #8]
 8012a14:	7013      	strb	r3, [r2, #0]
 8012a16:	e774      	b.n	8012902 <_dtoa_r+0x962>
 8012a18:	4638      	mov	r0, r7
 8012a1a:	e7b9      	b.n	8012990 <_dtoa_r+0x9f0>
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	e7e2      	b.n	80129e6 <_dtoa_r+0xa46>
 8012a20:	f1b9 0f00 	cmp.w	r9, #0
 8012a24:	db06      	blt.n	8012a34 <_dtoa_r+0xa94>
 8012a26:	9905      	ldr	r1, [sp, #20]
 8012a28:	ea41 0909 	orr.w	r9, r1, r9
 8012a2c:	9906      	ldr	r1, [sp, #24]
 8012a2e:	ea59 0101 	orrs.w	r1, r9, r1
 8012a32:	d120      	bne.n	8012a76 <_dtoa_r+0xad6>
 8012a34:	2a00      	cmp	r2, #0
 8012a36:	ddec      	ble.n	8012a12 <_dtoa_r+0xa72>
 8012a38:	4659      	mov	r1, fp
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	9301      	str	r3, [sp, #4]
 8012a40:	f001 f8a6 	bl	8013b90 <__lshift>
 8012a44:	4631      	mov	r1, r6
 8012a46:	4683      	mov	fp, r0
 8012a48:	f001 f90e 	bl	8013c68 <__mcmp>
 8012a4c:	2800      	cmp	r0, #0
 8012a4e:	9b01      	ldr	r3, [sp, #4]
 8012a50:	dc02      	bgt.n	8012a58 <_dtoa_r+0xab8>
 8012a52:	d1de      	bne.n	8012a12 <_dtoa_r+0xa72>
 8012a54:	07da      	lsls	r2, r3, #31
 8012a56:	d5dc      	bpl.n	8012a12 <_dtoa_r+0xa72>
 8012a58:	2b39      	cmp	r3, #57	; 0x39
 8012a5a:	d1d8      	bne.n	8012a0e <_dtoa_r+0xa6e>
 8012a5c:	9a02      	ldr	r2, [sp, #8]
 8012a5e:	2339      	movs	r3, #57	; 0x39
 8012a60:	7013      	strb	r3, [r2, #0]
 8012a62:	462b      	mov	r3, r5
 8012a64:	461d      	mov	r5, r3
 8012a66:	3b01      	subs	r3, #1
 8012a68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a6c:	2a39      	cmp	r2, #57	; 0x39
 8012a6e:	d050      	beq.n	8012b12 <_dtoa_r+0xb72>
 8012a70:	3201      	adds	r2, #1
 8012a72:	701a      	strb	r2, [r3, #0]
 8012a74:	e745      	b.n	8012902 <_dtoa_r+0x962>
 8012a76:	2a00      	cmp	r2, #0
 8012a78:	dd03      	ble.n	8012a82 <_dtoa_r+0xae2>
 8012a7a:	2b39      	cmp	r3, #57	; 0x39
 8012a7c:	d0ee      	beq.n	8012a5c <_dtoa_r+0xabc>
 8012a7e:	3301      	adds	r3, #1
 8012a80:	e7c7      	b.n	8012a12 <_dtoa_r+0xa72>
 8012a82:	9a01      	ldr	r2, [sp, #4]
 8012a84:	9907      	ldr	r1, [sp, #28]
 8012a86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012a8a:	428a      	cmp	r2, r1
 8012a8c:	d02a      	beq.n	8012ae4 <_dtoa_r+0xb44>
 8012a8e:	4659      	mov	r1, fp
 8012a90:	2300      	movs	r3, #0
 8012a92:	220a      	movs	r2, #10
 8012a94:	4620      	mov	r0, r4
 8012a96:	f000 fe81 	bl	801379c <__multadd>
 8012a9a:	45b8      	cmp	r8, r7
 8012a9c:	4683      	mov	fp, r0
 8012a9e:	f04f 0300 	mov.w	r3, #0
 8012aa2:	f04f 020a 	mov.w	r2, #10
 8012aa6:	4641      	mov	r1, r8
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	d107      	bne.n	8012abc <_dtoa_r+0xb1c>
 8012aac:	f000 fe76 	bl	801379c <__multadd>
 8012ab0:	4680      	mov	r8, r0
 8012ab2:	4607      	mov	r7, r0
 8012ab4:	9b01      	ldr	r3, [sp, #4]
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	9301      	str	r3, [sp, #4]
 8012aba:	e775      	b.n	80129a8 <_dtoa_r+0xa08>
 8012abc:	f000 fe6e 	bl	801379c <__multadd>
 8012ac0:	4639      	mov	r1, r7
 8012ac2:	4680      	mov	r8, r0
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	220a      	movs	r2, #10
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f000 fe67 	bl	801379c <__multadd>
 8012ace:	4607      	mov	r7, r0
 8012ad0:	e7f0      	b.n	8012ab4 <_dtoa_r+0xb14>
 8012ad2:	f1b9 0f00 	cmp.w	r9, #0
 8012ad6:	9a00      	ldr	r2, [sp, #0]
 8012ad8:	bfcc      	ite	gt
 8012ada:	464d      	movgt	r5, r9
 8012adc:	2501      	movle	r5, #1
 8012ade:	4415      	add	r5, r2
 8012ae0:	f04f 0800 	mov.w	r8, #0
 8012ae4:	4659      	mov	r1, fp
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	4620      	mov	r0, r4
 8012aea:	9301      	str	r3, [sp, #4]
 8012aec:	f001 f850 	bl	8013b90 <__lshift>
 8012af0:	4631      	mov	r1, r6
 8012af2:	4683      	mov	fp, r0
 8012af4:	f001 f8b8 	bl	8013c68 <__mcmp>
 8012af8:	2800      	cmp	r0, #0
 8012afa:	dcb2      	bgt.n	8012a62 <_dtoa_r+0xac2>
 8012afc:	d102      	bne.n	8012b04 <_dtoa_r+0xb64>
 8012afe:	9b01      	ldr	r3, [sp, #4]
 8012b00:	07db      	lsls	r3, r3, #31
 8012b02:	d4ae      	bmi.n	8012a62 <_dtoa_r+0xac2>
 8012b04:	462b      	mov	r3, r5
 8012b06:	461d      	mov	r5, r3
 8012b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b0c:	2a30      	cmp	r2, #48	; 0x30
 8012b0e:	d0fa      	beq.n	8012b06 <_dtoa_r+0xb66>
 8012b10:	e6f7      	b.n	8012902 <_dtoa_r+0x962>
 8012b12:	9a00      	ldr	r2, [sp, #0]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d1a5      	bne.n	8012a64 <_dtoa_r+0xac4>
 8012b18:	f10a 0a01 	add.w	sl, sl, #1
 8012b1c:	2331      	movs	r3, #49	; 0x31
 8012b1e:	e779      	b.n	8012a14 <_dtoa_r+0xa74>
 8012b20:	4b13      	ldr	r3, [pc, #76]	; (8012b70 <_dtoa_r+0xbd0>)
 8012b22:	f7ff baaf 	b.w	8012084 <_dtoa_r+0xe4>
 8012b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	f47f aa86 	bne.w	801203a <_dtoa_r+0x9a>
 8012b2e:	4b11      	ldr	r3, [pc, #68]	; (8012b74 <_dtoa_r+0xbd4>)
 8012b30:	f7ff baa8 	b.w	8012084 <_dtoa_r+0xe4>
 8012b34:	f1b9 0f00 	cmp.w	r9, #0
 8012b38:	dc03      	bgt.n	8012b42 <_dtoa_r+0xba2>
 8012b3a:	9b05      	ldr	r3, [sp, #20]
 8012b3c:	2b02      	cmp	r3, #2
 8012b3e:	f73f aec9 	bgt.w	80128d4 <_dtoa_r+0x934>
 8012b42:	9d00      	ldr	r5, [sp, #0]
 8012b44:	4631      	mov	r1, r6
 8012b46:	4658      	mov	r0, fp
 8012b48:	f7ff f99e 	bl	8011e88 <quorem>
 8012b4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012b50:	f805 3b01 	strb.w	r3, [r5], #1
 8012b54:	9a00      	ldr	r2, [sp, #0]
 8012b56:	1aaa      	subs	r2, r5, r2
 8012b58:	4591      	cmp	r9, r2
 8012b5a:	ddba      	ble.n	8012ad2 <_dtoa_r+0xb32>
 8012b5c:	4659      	mov	r1, fp
 8012b5e:	2300      	movs	r3, #0
 8012b60:	220a      	movs	r2, #10
 8012b62:	4620      	mov	r0, r4
 8012b64:	f000 fe1a 	bl	801379c <__multadd>
 8012b68:	4683      	mov	fp, r0
 8012b6a:	e7eb      	b.n	8012b44 <_dtoa_r+0xba4>
 8012b6c:	0801518c 	.word	0x0801518c
 8012b70:	08014f88 	.word	0x08014f88
 8012b74:	08015109 	.word	0x08015109

08012b78 <__sflush_r>:
 8012b78:	898a      	ldrh	r2, [r1, #12]
 8012b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b7e:	4605      	mov	r5, r0
 8012b80:	0710      	lsls	r0, r2, #28
 8012b82:	460c      	mov	r4, r1
 8012b84:	d458      	bmi.n	8012c38 <__sflush_r+0xc0>
 8012b86:	684b      	ldr	r3, [r1, #4]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	dc05      	bgt.n	8012b98 <__sflush_r+0x20>
 8012b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	dc02      	bgt.n	8012b98 <__sflush_r+0x20>
 8012b92:	2000      	movs	r0, #0
 8012b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b9a:	2e00      	cmp	r6, #0
 8012b9c:	d0f9      	beq.n	8012b92 <__sflush_r+0x1a>
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ba4:	682f      	ldr	r7, [r5, #0]
 8012ba6:	602b      	str	r3, [r5, #0]
 8012ba8:	d032      	beq.n	8012c10 <__sflush_r+0x98>
 8012baa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012bac:	89a3      	ldrh	r3, [r4, #12]
 8012bae:	075a      	lsls	r2, r3, #29
 8012bb0:	d505      	bpl.n	8012bbe <__sflush_r+0x46>
 8012bb2:	6863      	ldr	r3, [r4, #4]
 8012bb4:	1ac0      	subs	r0, r0, r3
 8012bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bb8:	b10b      	cbz	r3, 8012bbe <__sflush_r+0x46>
 8012bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012bbc:	1ac0      	subs	r0, r0, r3
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bc4:	6a21      	ldr	r1, [r4, #32]
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	47b0      	blx	r6
 8012bca:	1c43      	adds	r3, r0, #1
 8012bcc:	89a3      	ldrh	r3, [r4, #12]
 8012bce:	d106      	bne.n	8012bde <__sflush_r+0x66>
 8012bd0:	6829      	ldr	r1, [r5, #0]
 8012bd2:	291d      	cmp	r1, #29
 8012bd4:	d82c      	bhi.n	8012c30 <__sflush_r+0xb8>
 8012bd6:	4a2a      	ldr	r2, [pc, #168]	; (8012c80 <__sflush_r+0x108>)
 8012bd8:	40ca      	lsrs	r2, r1
 8012bda:	07d6      	lsls	r6, r2, #31
 8012bdc:	d528      	bpl.n	8012c30 <__sflush_r+0xb8>
 8012bde:	2200      	movs	r2, #0
 8012be0:	6062      	str	r2, [r4, #4]
 8012be2:	04d9      	lsls	r1, r3, #19
 8012be4:	6922      	ldr	r2, [r4, #16]
 8012be6:	6022      	str	r2, [r4, #0]
 8012be8:	d504      	bpl.n	8012bf4 <__sflush_r+0x7c>
 8012bea:	1c42      	adds	r2, r0, #1
 8012bec:	d101      	bne.n	8012bf2 <__sflush_r+0x7a>
 8012bee:	682b      	ldr	r3, [r5, #0]
 8012bf0:	b903      	cbnz	r3, 8012bf4 <__sflush_r+0x7c>
 8012bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8012bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bf6:	602f      	str	r7, [r5, #0]
 8012bf8:	2900      	cmp	r1, #0
 8012bfa:	d0ca      	beq.n	8012b92 <__sflush_r+0x1a>
 8012bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c00:	4299      	cmp	r1, r3
 8012c02:	d002      	beq.n	8012c0a <__sflush_r+0x92>
 8012c04:	4628      	mov	r0, r5
 8012c06:	f7fd f93f 	bl	800fe88 <_free_r>
 8012c0a:	2000      	movs	r0, #0
 8012c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8012c0e:	e7c1      	b.n	8012b94 <__sflush_r+0x1c>
 8012c10:	6a21      	ldr	r1, [r4, #32]
 8012c12:	2301      	movs	r3, #1
 8012c14:	4628      	mov	r0, r5
 8012c16:	47b0      	blx	r6
 8012c18:	1c41      	adds	r1, r0, #1
 8012c1a:	d1c7      	bne.n	8012bac <__sflush_r+0x34>
 8012c1c:	682b      	ldr	r3, [r5, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d0c4      	beq.n	8012bac <__sflush_r+0x34>
 8012c22:	2b1d      	cmp	r3, #29
 8012c24:	d001      	beq.n	8012c2a <__sflush_r+0xb2>
 8012c26:	2b16      	cmp	r3, #22
 8012c28:	d101      	bne.n	8012c2e <__sflush_r+0xb6>
 8012c2a:	602f      	str	r7, [r5, #0]
 8012c2c:	e7b1      	b.n	8012b92 <__sflush_r+0x1a>
 8012c2e:	89a3      	ldrh	r3, [r4, #12]
 8012c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c34:	81a3      	strh	r3, [r4, #12]
 8012c36:	e7ad      	b.n	8012b94 <__sflush_r+0x1c>
 8012c38:	690f      	ldr	r7, [r1, #16]
 8012c3a:	2f00      	cmp	r7, #0
 8012c3c:	d0a9      	beq.n	8012b92 <__sflush_r+0x1a>
 8012c3e:	0793      	lsls	r3, r2, #30
 8012c40:	680e      	ldr	r6, [r1, #0]
 8012c42:	bf08      	it	eq
 8012c44:	694b      	ldreq	r3, [r1, #20]
 8012c46:	600f      	str	r7, [r1, #0]
 8012c48:	bf18      	it	ne
 8012c4a:	2300      	movne	r3, #0
 8012c4c:	eba6 0807 	sub.w	r8, r6, r7
 8012c50:	608b      	str	r3, [r1, #8]
 8012c52:	f1b8 0f00 	cmp.w	r8, #0
 8012c56:	dd9c      	ble.n	8012b92 <__sflush_r+0x1a>
 8012c58:	6a21      	ldr	r1, [r4, #32]
 8012c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012c5c:	4643      	mov	r3, r8
 8012c5e:	463a      	mov	r2, r7
 8012c60:	4628      	mov	r0, r5
 8012c62:	47b0      	blx	r6
 8012c64:	2800      	cmp	r0, #0
 8012c66:	dc06      	bgt.n	8012c76 <__sflush_r+0xfe>
 8012c68:	89a3      	ldrh	r3, [r4, #12]
 8012c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c6e:	81a3      	strh	r3, [r4, #12]
 8012c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c74:	e78e      	b.n	8012b94 <__sflush_r+0x1c>
 8012c76:	4407      	add	r7, r0
 8012c78:	eba8 0800 	sub.w	r8, r8, r0
 8012c7c:	e7e9      	b.n	8012c52 <__sflush_r+0xda>
 8012c7e:	bf00      	nop
 8012c80:	20400001 	.word	0x20400001

08012c84 <_fflush_r>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	690b      	ldr	r3, [r1, #16]
 8012c88:	4605      	mov	r5, r0
 8012c8a:	460c      	mov	r4, r1
 8012c8c:	b913      	cbnz	r3, 8012c94 <_fflush_r+0x10>
 8012c8e:	2500      	movs	r5, #0
 8012c90:	4628      	mov	r0, r5
 8012c92:	bd38      	pop	{r3, r4, r5, pc}
 8012c94:	b118      	cbz	r0, 8012c9e <_fflush_r+0x1a>
 8012c96:	6983      	ldr	r3, [r0, #24]
 8012c98:	b90b      	cbnz	r3, 8012c9e <_fflush_r+0x1a>
 8012c9a:	f000 f887 	bl	8012dac <__sinit>
 8012c9e:	4b14      	ldr	r3, [pc, #80]	; (8012cf0 <_fflush_r+0x6c>)
 8012ca0:	429c      	cmp	r4, r3
 8012ca2:	d11b      	bne.n	8012cdc <_fflush_r+0x58>
 8012ca4:	686c      	ldr	r4, [r5, #4]
 8012ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d0ef      	beq.n	8012c8e <_fflush_r+0xa>
 8012cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012cb0:	07d0      	lsls	r0, r2, #31
 8012cb2:	d404      	bmi.n	8012cbe <_fflush_r+0x3a>
 8012cb4:	0599      	lsls	r1, r3, #22
 8012cb6:	d402      	bmi.n	8012cbe <_fflush_r+0x3a>
 8012cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cba:	f000 fc88 	bl	80135ce <__retarget_lock_acquire_recursive>
 8012cbe:	4628      	mov	r0, r5
 8012cc0:	4621      	mov	r1, r4
 8012cc2:	f7ff ff59 	bl	8012b78 <__sflush_r>
 8012cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012cc8:	07da      	lsls	r2, r3, #31
 8012cca:	4605      	mov	r5, r0
 8012ccc:	d4e0      	bmi.n	8012c90 <_fflush_r+0xc>
 8012cce:	89a3      	ldrh	r3, [r4, #12]
 8012cd0:	059b      	lsls	r3, r3, #22
 8012cd2:	d4dd      	bmi.n	8012c90 <_fflush_r+0xc>
 8012cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cd6:	f000 fc7c 	bl	80135d2 <__retarget_lock_release_recursive>
 8012cda:	e7d9      	b.n	8012c90 <_fflush_r+0xc>
 8012cdc:	4b05      	ldr	r3, [pc, #20]	; (8012cf4 <_fflush_r+0x70>)
 8012cde:	429c      	cmp	r4, r3
 8012ce0:	d101      	bne.n	8012ce6 <_fflush_r+0x62>
 8012ce2:	68ac      	ldr	r4, [r5, #8]
 8012ce4:	e7df      	b.n	8012ca6 <_fflush_r+0x22>
 8012ce6:	4b04      	ldr	r3, [pc, #16]	; (8012cf8 <_fflush_r+0x74>)
 8012ce8:	429c      	cmp	r4, r3
 8012cea:	bf08      	it	eq
 8012cec:	68ec      	ldreq	r4, [r5, #12]
 8012cee:	e7da      	b.n	8012ca6 <_fflush_r+0x22>
 8012cf0:	080151c0 	.word	0x080151c0
 8012cf4:	080151e0 	.word	0x080151e0
 8012cf8:	080151a0 	.word	0x080151a0

08012cfc <std>:
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	b510      	push	{r4, lr}
 8012d00:	4604      	mov	r4, r0
 8012d02:	e9c0 3300 	strd	r3, r3, [r0]
 8012d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d0a:	6083      	str	r3, [r0, #8]
 8012d0c:	8181      	strh	r1, [r0, #12]
 8012d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8012d10:	81c2      	strh	r2, [r0, #14]
 8012d12:	6183      	str	r3, [r0, #24]
 8012d14:	4619      	mov	r1, r3
 8012d16:	2208      	movs	r2, #8
 8012d18:	305c      	adds	r0, #92	; 0x5c
 8012d1a:	f7fd f8ad 	bl	800fe78 <memset>
 8012d1e:	4b05      	ldr	r3, [pc, #20]	; (8012d34 <std+0x38>)
 8012d20:	6263      	str	r3, [r4, #36]	; 0x24
 8012d22:	4b05      	ldr	r3, [pc, #20]	; (8012d38 <std+0x3c>)
 8012d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d26:	4b05      	ldr	r3, [pc, #20]	; (8012d3c <std+0x40>)
 8012d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d2a:	4b05      	ldr	r3, [pc, #20]	; (8012d40 <std+0x44>)
 8012d2c:	6224      	str	r4, [r4, #32]
 8012d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8012d30:	bd10      	pop	{r4, pc}
 8012d32:	bf00      	nop
 8012d34:	080145e9 	.word	0x080145e9
 8012d38:	0801460b 	.word	0x0801460b
 8012d3c:	08014643 	.word	0x08014643
 8012d40:	08014667 	.word	0x08014667

08012d44 <_cleanup_r>:
 8012d44:	4901      	ldr	r1, [pc, #4]	; (8012d4c <_cleanup_r+0x8>)
 8012d46:	f000 b8af 	b.w	8012ea8 <_fwalk_reent>
 8012d4a:	bf00      	nop
 8012d4c:	08012c85 	.word	0x08012c85

08012d50 <__sfmoreglue>:
 8012d50:	b570      	push	{r4, r5, r6, lr}
 8012d52:	1e4a      	subs	r2, r1, #1
 8012d54:	2568      	movs	r5, #104	; 0x68
 8012d56:	4355      	muls	r5, r2
 8012d58:	460e      	mov	r6, r1
 8012d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012d5e:	f7fd f8e3 	bl	800ff28 <_malloc_r>
 8012d62:	4604      	mov	r4, r0
 8012d64:	b140      	cbz	r0, 8012d78 <__sfmoreglue+0x28>
 8012d66:	2100      	movs	r1, #0
 8012d68:	e9c0 1600 	strd	r1, r6, [r0]
 8012d6c:	300c      	adds	r0, #12
 8012d6e:	60a0      	str	r0, [r4, #8]
 8012d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012d74:	f7fd f880 	bl	800fe78 <memset>
 8012d78:	4620      	mov	r0, r4
 8012d7a:	bd70      	pop	{r4, r5, r6, pc}

08012d7c <__sfp_lock_acquire>:
 8012d7c:	4801      	ldr	r0, [pc, #4]	; (8012d84 <__sfp_lock_acquire+0x8>)
 8012d7e:	f000 bc26 	b.w	80135ce <__retarget_lock_acquire_recursive>
 8012d82:	bf00      	nop
 8012d84:	20006430 	.word	0x20006430

08012d88 <__sfp_lock_release>:
 8012d88:	4801      	ldr	r0, [pc, #4]	; (8012d90 <__sfp_lock_release+0x8>)
 8012d8a:	f000 bc22 	b.w	80135d2 <__retarget_lock_release_recursive>
 8012d8e:	bf00      	nop
 8012d90:	20006430 	.word	0x20006430

08012d94 <__sinit_lock_acquire>:
 8012d94:	4801      	ldr	r0, [pc, #4]	; (8012d9c <__sinit_lock_acquire+0x8>)
 8012d96:	f000 bc1a 	b.w	80135ce <__retarget_lock_acquire_recursive>
 8012d9a:	bf00      	nop
 8012d9c:	2000642b 	.word	0x2000642b

08012da0 <__sinit_lock_release>:
 8012da0:	4801      	ldr	r0, [pc, #4]	; (8012da8 <__sinit_lock_release+0x8>)
 8012da2:	f000 bc16 	b.w	80135d2 <__retarget_lock_release_recursive>
 8012da6:	bf00      	nop
 8012da8:	2000642b 	.word	0x2000642b

08012dac <__sinit>:
 8012dac:	b510      	push	{r4, lr}
 8012dae:	4604      	mov	r4, r0
 8012db0:	f7ff fff0 	bl	8012d94 <__sinit_lock_acquire>
 8012db4:	69a3      	ldr	r3, [r4, #24]
 8012db6:	b11b      	cbz	r3, 8012dc0 <__sinit+0x14>
 8012db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dbc:	f7ff bff0 	b.w	8012da0 <__sinit_lock_release>
 8012dc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012dc4:	6523      	str	r3, [r4, #80]	; 0x50
 8012dc6:	4b13      	ldr	r3, [pc, #76]	; (8012e14 <__sinit+0x68>)
 8012dc8:	4a13      	ldr	r2, [pc, #76]	; (8012e18 <__sinit+0x6c>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8012dce:	42a3      	cmp	r3, r4
 8012dd0:	bf04      	itt	eq
 8012dd2:	2301      	moveq	r3, #1
 8012dd4:	61a3      	streq	r3, [r4, #24]
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f000 f820 	bl	8012e1c <__sfp>
 8012ddc:	6060      	str	r0, [r4, #4]
 8012dde:	4620      	mov	r0, r4
 8012de0:	f000 f81c 	bl	8012e1c <__sfp>
 8012de4:	60a0      	str	r0, [r4, #8]
 8012de6:	4620      	mov	r0, r4
 8012de8:	f000 f818 	bl	8012e1c <__sfp>
 8012dec:	2200      	movs	r2, #0
 8012dee:	60e0      	str	r0, [r4, #12]
 8012df0:	2104      	movs	r1, #4
 8012df2:	6860      	ldr	r0, [r4, #4]
 8012df4:	f7ff ff82 	bl	8012cfc <std>
 8012df8:	68a0      	ldr	r0, [r4, #8]
 8012dfa:	2201      	movs	r2, #1
 8012dfc:	2109      	movs	r1, #9
 8012dfe:	f7ff ff7d 	bl	8012cfc <std>
 8012e02:	68e0      	ldr	r0, [r4, #12]
 8012e04:	2202      	movs	r2, #2
 8012e06:	2112      	movs	r1, #18
 8012e08:	f7ff ff78 	bl	8012cfc <std>
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	61a3      	str	r3, [r4, #24]
 8012e10:	e7d2      	b.n	8012db8 <__sinit+0xc>
 8012e12:	bf00      	nop
 8012e14:	08014f74 	.word	0x08014f74
 8012e18:	08012d45 	.word	0x08012d45

08012e1c <__sfp>:
 8012e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e1e:	4607      	mov	r7, r0
 8012e20:	f7ff ffac 	bl	8012d7c <__sfp_lock_acquire>
 8012e24:	4b1e      	ldr	r3, [pc, #120]	; (8012ea0 <__sfp+0x84>)
 8012e26:	681e      	ldr	r6, [r3, #0]
 8012e28:	69b3      	ldr	r3, [r6, #24]
 8012e2a:	b913      	cbnz	r3, 8012e32 <__sfp+0x16>
 8012e2c:	4630      	mov	r0, r6
 8012e2e:	f7ff ffbd 	bl	8012dac <__sinit>
 8012e32:	3648      	adds	r6, #72	; 0x48
 8012e34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e38:	3b01      	subs	r3, #1
 8012e3a:	d503      	bpl.n	8012e44 <__sfp+0x28>
 8012e3c:	6833      	ldr	r3, [r6, #0]
 8012e3e:	b30b      	cbz	r3, 8012e84 <__sfp+0x68>
 8012e40:	6836      	ldr	r6, [r6, #0]
 8012e42:	e7f7      	b.n	8012e34 <__sfp+0x18>
 8012e44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e48:	b9d5      	cbnz	r5, 8012e80 <__sfp+0x64>
 8012e4a:	4b16      	ldr	r3, [pc, #88]	; (8012ea4 <__sfp+0x88>)
 8012e4c:	60e3      	str	r3, [r4, #12]
 8012e4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e52:	6665      	str	r5, [r4, #100]	; 0x64
 8012e54:	f000 fbba 	bl	80135cc <__retarget_lock_init_recursive>
 8012e58:	f7ff ff96 	bl	8012d88 <__sfp_lock_release>
 8012e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012e64:	6025      	str	r5, [r4, #0]
 8012e66:	61a5      	str	r5, [r4, #24]
 8012e68:	2208      	movs	r2, #8
 8012e6a:	4629      	mov	r1, r5
 8012e6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012e70:	f7fd f802 	bl	800fe78 <memset>
 8012e74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012e78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e80:	3468      	adds	r4, #104	; 0x68
 8012e82:	e7d9      	b.n	8012e38 <__sfp+0x1c>
 8012e84:	2104      	movs	r1, #4
 8012e86:	4638      	mov	r0, r7
 8012e88:	f7ff ff62 	bl	8012d50 <__sfmoreglue>
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	6030      	str	r0, [r6, #0]
 8012e90:	2800      	cmp	r0, #0
 8012e92:	d1d5      	bne.n	8012e40 <__sfp+0x24>
 8012e94:	f7ff ff78 	bl	8012d88 <__sfp_lock_release>
 8012e98:	230c      	movs	r3, #12
 8012e9a:	603b      	str	r3, [r7, #0]
 8012e9c:	e7ee      	b.n	8012e7c <__sfp+0x60>
 8012e9e:	bf00      	nop
 8012ea0:	08014f74 	.word	0x08014f74
 8012ea4:	ffff0001 	.word	0xffff0001

08012ea8 <_fwalk_reent>:
 8012ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012eac:	4606      	mov	r6, r0
 8012eae:	4688      	mov	r8, r1
 8012eb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012eb4:	2700      	movs	r7, #0
 8012eb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012eba:	f1b9 0901 	subs.w	r9, r9, #1
 8012ebe:	d505      	bpl.n	8012ecc <_fwalk_reent+0x24>
 8012ec0:	6824      	ldr	r4, [r4, #0]
 8012ec2:	2c00      	cmp	r4, #0
 8012ec4:	d1f7      	bne.n	8012eb6 <_fwalk_reent+0xe>
 8012ec6:	4638      	mov	r0, r7
 8012ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ecc:	89ab      	ldrh	r3, [r5, #12]
 8012ece:	2b01      	cmp	r3, #1
 8012ed0:	d907      	bls.n	8012ee2 <_fwalk_reent+0x3a>
 8012ed2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ed6:	3301      	adds	r3, #1
 8012ed8:	d003      	beq.n	8012ee2 <_fwalk_reent+0x3a>
 8012eda:	4629      	mov	r1, r5
 8012edc:	4630      	mov	r0, r6
 8012ede:	47c0      	blx	r8
 8012ee0:	4307      	orrs	r7, r0
 8012ee2:	3568      	adds	r5, #104	; 0x68
 8012ee4:	e7e9      	b.n	8012eba <_fwalk_reent+0x12>

08012ee6 <rshift>:
 8012ee6:	6903      	ldr	r3, [r0, #16]
 8012ee8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ef0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012ef4:	f100 0414 	add.w	r4, r0, #20
 8012ef8:	dd45      	ble.n	8012f86 <rshift+0xa0>
 8012efa:	f011 011f 	ands.w	r1, r1, #31
 8012efe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012f02:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012f06:	d10c      	bne.n	8012f22 <rshift+0x3c>
 8012f08:	f100 0710 	add.w	r7, r0, #16
 8012f0c:	4629      	mov	r1, r5
 8012f0e:	42b1      	cmp	r1, r6
 8012f10:	d334      	bcc.n	8012f7c <rshift+0x96>
 8012f12:	1a9b      	subs	r3, r3, r2
 8012f14:	009b      	lsls	r3, r3, #2
 8012f16:	1eea      	subs	r2, r5, #3
 8012f18:	4296      	cmp	r6, r2
 8012f1a:	bf38      	it	cc
 8012f1c:	2300      	movcc	r3, #0
 8012f1e:	4423      	add	r3, r4
 8012f20:	e015      	b.n	8012f4e <rshift+0x68>
 8012f22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012f26:	f1c1 0820 	rsb	r8, r1, #32
 8012f2a:	40cf      	lsrs	r7, r1
 8012f2c:	f105 0e04 	add.w	lr, r5, #4
 8012f30:	46a1      	mov	r9, r4
 8012f32:	4576      	cmp	r6, lr
 8012f34:	46f4      	mov	ip, lr
 8012f36:	d815      	bhi.n	8012f64 <rshift+0x7e>
 8012f38:	1a9b      	subs	r3, r3, r2
 8012f3a:	009a      	lsls	r2, r3, #2
 8012f3c:	3a04      	subs	r2, #4
 8012f3e:	3501      	adds	r5, #1
 8012f40:	42ae      	cmp	r6, r5
 8012f42:	bf38      	it	cc
 8012f44:	2200      	movcc	r2, #0
 8012f46:	18a3      	adds	r3, r4, r2
 8012f48:	50a7      	str	r7, [r4, r2]
 8012f4a:	b107      	cbz	r7, 8012f4e <rshift+0x68>
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	1b1a      	subs	r2, r3, r4
 8012f50:	42a3      	cmp	r3, r4
 8012f52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012f56:	bf08      	it	eq
 8012f58:	2300      	moveq	r3, #0
 8012f5a:	6102      	str	r2, [r0, #16]
 8012f5c:	bf08      	it	eq
 8012f5e:	6143      	streq	r3, [r0, #20]
 8012f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f64:	f8dc c000 	ldr.w	ip, [ip]
 8012f68:	fa0c fc08 	lsl.w	ip, ip, r8
 8012f6c:	ea4c 0707 	orr.w	r7, ip, r7
 8012f70:	f849 7b04 	str.w	r7, [r9], #4
 8012f74:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012f78:	40cf      	lsrs	r7, r1
 8012f7a:	e7da      	b.n	8012f32 <rshift+0x4c>
 8012f7c:	f851 cb04 	ldr.w	ip, [r1], #4
 8012f80:	f847 cf04 	str.w	ip, [r7, #4]!
 8012f84:	e7c3      	b.n	8012f0e <rshift+0x28>
 8012f86:	4623      	mov	r3, r4
 8012f88:	e7e1      	b.n	8012f4e <rshift+0x68>

08012f8a <__hexdig_fun>:
 8012f8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012f8e:	2b09      	cmp	r3, #9
 8012f90:	d802      	bhi.n	8012f98 <__hexdig_fun+0xe>
 8012f92:	3820      	subs	r0, #32
 8012f94:	b2c0      	uxtb	r0, r0
 8012f96:	4770      	bx	lr
 8012f98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012f9c:	2b05      	cmp	r3, #5
 8012f9e:	d801      	bhi.n	8012fa4 <__hexdig_fun+0x1a>
 8012fa0:	3847      	subs	r0, #71	; 0x47
 8012fa2:	e7f7      	b.n	8012f94 <__hexdig_fun+0xa>
 8012fa4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012fa8:	2b05      	cmp	r3, #5
 8012faa:	d801      	bhi.n	8012fb0 <__hexdig_fun+0x26>
 8012fac:	3827      	subs	r0, #39	; 0x27
 8012fae:	e7f1      	b.n	8012f94 <__hexdig_fun+0xa>
 8012fb0:	2000      	movs	r0, #0
 8012fb2:	4770      	bx	lr

08012fb4 <__gethex>:
 8012fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb8:	ed2d 8b02 	vpush	{d8}
 8012fbc:	b089      	sub	sp, #36	; 0x24
 8012fbe:	ee08 0a10 	vmov	s16, r0
 8012fc2:	9304      	str	r3, [sp, #16]
 8012fc4:	4bbc      	ldr	r3, [pc, #752]	; (80132b8 <__gethex+0x304>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	9301      	str	r3, [sp, #4]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	468b      	mov	fp, r1
 8012fce:	4690      	mov	r8, r2
 8012fd0:	f7ed f90c 	bl	80001ec <strlen>
 8012fd4:	9b01      	ldr	r3, [sp, #4]
 8012fd6:	f8db 2000 	ldr.w	r2, [fp]
 8012fda:	4403      	add	r3, r0
 8012fdc:	4682      	mov	sl, r0
 8012fde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012fe2:	9305      	str	r3, [sp, #20]
 8012fe4:	1c93      	adds	r3, r2, #2
 8012fe6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012fea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012fee:	32fe      	adds	r2, #254	; 0xfe
 8012ff0:	18d1      	adds	r1, r2, r3
 8012ff2:	461f      	mov	r7, r3
 8012ff4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012ff8:	9100      	str	r1, [sp, #0]
 8012ffa:	2830      	cmp	r0, #48	; 0x30
 8012ffc:	d0f8      	beq.n	8012ff0 <__gethex+0x3c>
 8012ffe:	f7ff ffc4 	bl	8012f8a <__hexdig_fun>
 8013002:	4604      	mov	r4, r0
 8013004:	2800      	cmp	r0, #0
 8013006:	d13a      	bne.n	801307e <__gethex+0xca>
 8013008:	9901      	ldr	r1, [sp, #4]
 801300a:	4652      	mov	r2, sl
 801300c:	4638      	mov	r0, r7
 801300e:	f001 fb2e 	bl	801466e <strncmp>
 8013012:	4605      	mov	r5, r0
 8013014:	2800      	cmp	r0, #0
 8013016:	d168      	bne.n	80130ea <__gethex+0x136>
 8013018:	f817 000a 	ldrb.w	r0, [r7, sl]
 801301c:	eb07 060a 	add.w	r6, r7, sl
 8013020:	f7ff ffb3 	bl	8012f8a <__hexdig_fun>
 8013024:	2800      	cmp	r0, #0
 8013026:	d062      	beq.n	80130ee <__gethex+0x13a>
 8013028:	4633      	mov	r3, r6
 801302a:	7818      	ldrb	r0, [r3, #0]
 801302c:	2830      	cmp	r0, #48	; 0x30
 801302e:	461f      	mov	r7, r3
 8013030:	f103 0301 	add.w	r3, r3, #1
 8013034:	d0f9      	beq.n	801302a <__gethex+0x76>
 8013036:	f7ff ffa8 	bl	8012f8a <__hexdig_fun>
 801303a:	2301      	movs	r3, #1
 801303c:	fab0 f480 	clz	r4, r0
 8013040:	0964      	lsrs	r4, r4, #5
 8013042:	4635      	mov	r5, r6
 8013044:	9300      	str	r3, [sp, #0]
 8013046:	463a      	mov	r2, r7
 8013048:	4616      	mov	r6, r2
 801304a:	3201      	adds	r2, #1
 801304c:	7830      	ldrb	r0, [r6, #0]
 801304e:	f7ff ff9c 	bl	8012f8a <__hexdig_fun>
 8013052:	2800      	cmp	r0, #0
 8013054:	d1f8      	bne.n	8013048 <__gethex+0x94>
 8013056:	9901      	ldr	r1, [sp, #4]
 8013058:	4652      	mov	r2, sl
 801305a:	4630      	mov	r0, r6
 801305c:	f001 fb07 	bl	801466e <strncmp>
 8013060:	b980      	cbnz	r0, 8013084 <__gethex+0xd0>
 8013062:	b94d      	cbnz	r5, 8013078 <__gethex+0xc4>
 8013064:	eb06 050a 	add.w	r5, r6, sl
 8013068:	462a      	mov	r2, r5
 801306a:	4616      	mov	r6, r2
 801306c:	3201      	adds	r2, #1
 801306e:	7830      	ldrb	r0, [r6, #0]
 8013070:	f7ff ff8b 	bl	8012f8a <__hexdig_fun>
 8013074:	2800      	cmp	r0, #0
 8013076:	d1f8      	bne.n	801306a <__gethex+0xb6>
 8013078:	1bad      	subs	r5, r5, r6
 801307a:	00ad      	lsls	r5, r5, #2
 801307c:	e004      	b.n	8013088 <__gethex+0xd4>
 801307e:	2400      	movs	r4, #0
 8013080:	4625      	mov	r5, r4
 8013082:	e7e0      	b.n	8013046 <__gethex+0x92>
 8013084:	2d00      	cmp	r5, #0
 8013086:	d1f7      	bne.n	8013078 <__gethex+0xc4>
 8013088:	7833      	ldrb	r3, [r6, #0]
 801308a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801308e:	2b50      	cmp	r3, #80	; 0x50
 8013090:	d13b      	bne.n	801310a <__gethex+0x156>
 8013092:	7873      	ldrb	r3, [r6, #1]
 8013094:	2b2b      	cmp	r3, #43	; 0x2b
 8013096:	d02c      	beq.n	80130f2 <__gethex+0x13e>
 8013098:	2b2d      	cmp	r3, #45	; 0x2d
 801309a:	d02e      	beq.n	80130fa <__gethex+0x146>
 801309c:	1c71      	adds	r1, r6, #1
 801309e:	f04f 0900 	mov.w	r9, #0
 80130a2:	7808      	ldrb	r0, [r1, #0]
 80130a4:	f7ff ff71 	bl	8012f8a <__hexdig_fun>
 80130a8:	1e43      	subs	r3, r0, #1
 80130aa:	b2db      	uxtb	r3, r3
 80130ac:	2b18      	cmp	r3, #24
 80130ae:	d82c      	bhi.n	801310a <__gethex+0x156>
 80130b0:	f1a0 0210 	sub.w	r2, r0, #16
 80130b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80130b8:	f7ff ff67 	bl	8012f8a <__hexdig_fun>
 80130bc:	1e43      	subs	r3, r0, #1
 80130be:	b2db      	uxtb	r3, r3
 80130c0:	2b18      	cmp	r3, #24
 80130c2:	d91d      	bls.n	8013100 <__gethex+0x14c>
 80130c4:	f1b9 0f00 	cmp.w	r9, #0
 80130c8:	d000      	beq.n	80130cc <__gethex+0x118>
 80130ca:	4252      	negs	r2, r2
 80130cc:	4415      	add	r5, r2
 80130ce:	f8cb 1000 	str.w	r1, [fp]
 80130d2:	b1e4      	cbz	r4, 801310e <__gethex+0x15a>
 80130d4:	9b00      	ldr	r3, [sp, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	bf14      	ite	ne
 80130da:	2700      	movne	r7, #0
 80130dc:	2706      	moveq	r7, #6
 80130de:	4638      	mov	r0, r7
 80130e0:	b009      	add	sp, #36	; 0x24
 80130e2:	ecbd 8b02 	vpop	{d8}
 80130e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ea:	463e      	mov	r6, r7
 80130ec:	4625      	mov	r5, r4
 80130ee:	2401      	movs	r4, #1
 80130f0:	e7ca      	b.n	8013088 <__gethex+0xd4>
 80130f2:	f04f 0900 	mov.w	r9, #0
 80130f6:	1cb1      	adds	r1, r6, #2
 80130f8:	e7d3      	b.n	80130a2 <__gethex+0xee>
 80130fa:	f04f 0901 	mov.w	r9, #1
 80130fe:	e7fa      	b.n	80130f6 <__gethex+0x142>
 8013100:	230a      	movs	r3, #10
 8013102:	fb03 0202 	mla	r2, r3, r2, r0
 8013106:	3a10      	subs	r2, #16
 8013108:	e7d4      	b.n	80130b4 <__gethex+0x100>
 801310a:	4631      	mov	r1, r6
 801310c:	e7df      	b.n	80130ce <__gethex+0x11a>
 801310e:	1bf3      	subs	r3, r6, r7
 8013110:	3b01      	subs	r3, #1
 8013112:	4621      	mov	r1, r4
 8013114:	2b07      	cmp	r3, #7
 8013116:	dc0b      	bgt.n	8013130 <__gethex+0x17c>
 8013118:	ee18 0a10 	vmov	r0, s16
 801311c:	f000 fadc 	bl	80136d8 <_Balloc>
 8013120:	4604      	mov	r4, r0
 8013122:	b940      	cbnz	r0, 8013136 <__gethex+0x182>
 8013124:	4b65      	ldr	r3, [pc, #404]	; (80132bc <__gethex+0x308>)
 8013126:	4602      	mov	r2, r0
 8013128:	21de      	movs	r1, #222	; 0xde
 801312a:	4865      	ldr	r0, [pc, #404]	; (80132c0 <__gethex+0x30c>)
 801312c:	f001 fad0 	bl	80146d0 <__assert_func>
 8013130:	3101      	adds	r1, #1
 8013132:	105b      	asrs	r3, r3, #1
 8013134:	e7ee      	b.n	8013114 <__gethex+0x160>
 8013136:	f100 0914 	add.w	r9, r0, #20
 801313a:	f04f 0b00 	mov.w	fp, #0
 801313e:	f1ca 0301 	rsb	r3, sl, #1
 8013142:	f8cd 9008 	str.w	r9, [sp, #8]
 8013146:	f8cd b000 	str.w	fp, [sp]
 801314a:	9306      	str	r3, [sp, #24]
 801314c:	42b7      	cmp	r7, r6
 801314e:	d340      	bcc.n	80131d2 <__gethex+0x21e>
 8013150:	9802      	ldr	r0, [sp, #8]
 8013152:	9b00      	ldr	r3, [sp, #0]
 8013154:	f840 3b04 	str.w	r3, [r0], #4
 8013158:	eba0 0009 	sub.w	r0, r0, r9
 801315c:	1080      	asrs	r0, r0, #2
 801315e:	0146      	lsls	r6, r0, #5
 8013160:	6120      	str	r0, [r4, #16]
 8013162:	4618      	mov	r0, r3
 8013164:	f000 fbae 	bl	80138c4 <__hi0bits>
 8013168:	1a30      	subs	r0, r6, r0
 801316a:	f8d8 6000 	ldr.w	r6, [r8]
 801316e:	42b0      	cmp	r0, r6
 8013170:	dd63      	ble.n	801323a <__gethex+0x286>
 8013172:	1b87      	subs	r7, r0, r6
 8013174:	4639      	mov	r1, r7
 8013176:	4620      	mov	r0, r4
 8013178:	f000 ff48 	bl	801400c <__any_on>
 801317c:	4682      	mov	sl, r0
 801317e:	b1a8      	cbz	r0, 80131ac <__gethex+0x1f8>
 8013180:	1e7b      	subs	r3, r7, #1
 8013182:	1159      	asrs	r1, r3, #5
 8013184:	f003 021f 	and.w	r2, r3, #31
 8013188:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801318c:	f04f 0a01 	mov.w	sl, #1
 8013190:	fa0a f202 	lsl.w	r2, sl, r2
 8013194:	420a      	tst	r2, r1
 8013196:	d009      	beq.n	80131ac <__gethex+0x1f8>
 8013198:	4553      	cmp	r3, sl
 801319a:	dd05      	ble.n	80131a8 <__gethex+0x1f4>
 801319c:	1eb9      	subs	r1, r7, #2
 801319e:	4620      	mov	r0, r4
 80131a0:	f000 ff34 	bl	801400c <__any_on>
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d145      	bne.n	8013234 <__gethex+0x280>
 80131a8:	f04f 0a02 	mov.w	sl, #2
 80131ac:	4639      	mov	r1, r7
 80131ae:	4620      	mov	r0, r4
 80131b0:	f7ff fe99 	bl	8012ee6 <rshift>
 80131b4:	443d      	add	r5, r7
 80131b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131ba:	42ab      	cmp	r3, r5
 80131bc:	da4c      	bge.n	8013258 <__gethex+0x2a4>
 80131be:	ee18 0a10 	vmov	r0, s16
 80131c2:	4621      	mov	r1, r4
 80131c4:	f000 fac8 	bl	8013758 <_Bfree>
 80131c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80131ca:	2300      	movs	r3, #0
 80131cc:	6013      	str	r3, [r2, #0]
 80131ce:	27a3      	movs	r7, #163	; 0xa3
 80131d0:	e785      	b.n	80130de <__gethex+0x12a>
 80131d2:	1e73      	subs	r3, r6, #1
 80131d4:	9a05      	ldr	r2, [sp, #20]
 80131d6:	9303      	str	r3, [sp, #12]
 80131d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80131dc:	4293      	cmp	r3, r2
 80131de:	d019      	beq.n	8013214 <__gethex+0x260>
 80131e0:	f1bb 0f20 	cmp.w	fp, #32
 80131e4:	d107      	bne.n	80131f6 <__gethex+0x242>
 80131e6:	9b02      	ldr	r3, [sp, #8]
 80131e8:	9a00      	ldr	r2, [sp, #0]
 80131ea:	f843 2b04 	str.w	r2, [r3], #4
 80131ee:	9302      	str	r3, [sp, #8]
 80131f0:	2300      	movs	r3, #0
 80131f2:	9300      	str	r3, [sp, #0]
 80131f4:	469b      	mov	fp, r3
 80131f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80131fa:	f7ff fec6 	bl	8012f8a <__hexdig_fun>
 80131fe:	9b00      	ldr	r3, [sp, #0]
 8013200:	f000 000f 	and.w	r0, r0, #15
 8013204:	fa00 f00b 	lsl.w	r0, r0, fp
 8013208:	4303      	orrs	r3, r0
 801320a:	9300      	str	r3, [sp, #0]
 801320c:	f10b 0b04 	add.w	fp, fp, #4
 8013210:	9b03      	ldr	r3, [sp, #12]
 8013212:	e00d      	b.n	8013230 <__gethex+0x27c>
 8013214:	9b03      	ldr	r3, [sp, #12]
 8013216:	9a06      	ldr	r2, [sp, #24]
 8013218:	4413      	add	r3, r2
 801321a:	42bb      	cmp	r3, r7
 801321c:	d3e0      	bcc.n	80131e0 <__gethex+0x22c>
 801321e:	4618      	mov	r0, r3
 8013220:	9901      	ldr	r1, [sp, #4]
 8013222:	9307      	str	r3, [sp, #28]
 8013224:	4652      	mov	r2, sl
 8013226:	f001 fa22 	bl	801466e <strncmp>
 801322a:	9b07      	ldr	r3, [sp, #28]
 801322c:	2800      	cmp	r0, #0
 801322e:	d1d7      	bne.n	80131e0 <__gethex+0x22c>
 8013230:	461e      	mov	r6, r3
 8013232:	e78b      	b.n	801314c <__gethex+0x198>
 8013234:	f04f 0a03 	mov.w	sl, #3
 8013238:	e7b8      	b.n	80131ac <__gethex+0x1f8>
 801323a:	da0a      	bge.n	8013252 <__gethex+0x29e>
 801323c:	1a37      	subs	r7, r6, r0
 801323e:	4621      	mov	r1, r4
 8013240:	ee18 0a10 	vmov	r0, s16
 8013244:	463a      	mov	r2, r7
 8013246:	f000 fca3 	bl	8013b90 <__lshift>
 801324a:	1bed      	subs	r5, r5, r7
 801324c:	4604      	mov	r4, r0
 801324e:	f100 0914 	add.w	r9, r0, #20
 8013252:	f04f 0a00 	mov.w	sl, #0
 8013256:	e7ae      	b.n	80131b6 <__gethex+0x202>
 8013258:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801325c:	42a8      	cmp	r0, r5
 801325e:	dd72      	ble.n	8013346 <__gethex+0x392>
 8013260:	1b45      	subs	r5, r0, r5
 8013262:	42ae      	cmp	r6, r5
 8013264:	dc36      	bgt.n	80132d4 <__gethex+0x320>
 8013266:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801326a:	2b02      	cmp	r3, #2
 801326c:	d02a      	beq.n	80132c4 <__gethex+0x310>
 801326e:	2b03      	cmp	r3, #3
 8013270:	d02c      	beq.n	80132cc <__gethex+0x318>
 8013272:	2b01      	cmp	r3, #1
 8013274:	d115      	bne.n	80132a2 <__gethex+0x2ee>
 8013276:	42ae      	cmp	r6, r5
 8013278:	d113      	bne.n	80132a2 <__gethex+0x2ee>
 801327a:	2e01      	cmp	r6, #1
 801327c:	d10b      	bne.n	8013296 <__gethex+0x2e2>
 801327e:	9a04      	ldr	r2, [sp, #16]
 8013280:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013284:	6013      	str	r3, [r2, #0]
 8013286:	2301      	movs	r3, #1
 8013288:	6123      	str	r3, [r4, #16]
 801328a:	f8c9 3000 	str.w	r3, [r9]
 801328e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013290:	2762      	movs	r7, #98	; 0x62
 8013292:	601c      	str	r4, [r3, #0]
 8013294:	e723      	b.n	80130de <__gethex+0x12a>
 8013296:	1e71      	subs	r1, r6, #1
 8013298:	4620      	mov	r0, r4
 801329a:	f000 feb7 	bl	801400c <__any_on>
 801329e:	2800      	cmp	r0, #0
 80132a0:	d1ed      	bne.n	801327e <__gethex+0x2ca>
 80132a2:	ee18 0a10 	vmov	r0, s16
 80132a6:	4621      	mov	r1, r4
 80132a8:	f000 fa56 	bl	8013758 <_Bfree>
 80132ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80132ae:	2300      	movs	r3, #0
 80132b0:	6013      	str	r3, [r2, #0]
 80132b2:	2750      	movs	r7, #80	; 0x50
 80132b4:	e713      	b.n	80130de <__gethex+0x12a>
 80132b6:	bf00      	nop
 80132b8:	0801526c 	.word	0x0801526c
 80132bc:	0801518c 	.word	0x0801518c
 80132c0:	08015200 	.word	0x08015200
 80132c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d1eb      	bne.n	80132a2 <__gethex+0x2ee>
 80132ca:	e7d8      	b.n	801327e <__gethex+0x2ca>
 80132cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1d5      	bne.n	801327e <__gethex+0x2ca>
 80132d2:	e7e6      	b.n	80132a2 <__gethex+0x2ee>
 80132d4:	1e6f      	subs	r7, r5, #1
 80132d6:	f1ba 0f00 	cmp.w	sl, #0
 80132da:	d131      	bne.n	8013340 <__gethex+0x38c>
 80132dc:	b127      	cbz	r7, 80132e8 <__gethex+0x334>
 80132de:	4639      	mov	r1, r7
 80132e0:	4620      	mov	r0, r4
 80132e2:	f000 fe93 	bl	801400c <__any_on>
 80132e6:	4682      	mov	sl, r0
 80132e8:	117b      	asrs	r3, r7, #5
 80132ea:	2101      	movs	r1, #1
 80132ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80132f0:	f007 071f 	and.w	r7, r7, #31
 80132f4:	fa01 f707 	lsl.w	r7, r1, r7
 80132f8:	421f      	tst	r7, r3
 80132fa:	4629      	mov	r1, r5
 80132fc:	4620      	mov	r0, r4
 80132fe:	bf18      	it	ne
 8013300:	f04a 0a02 	orrne.w	sl, sl, #2
 8013304:	1b76      	subs	r6, r6, r5
 8013306:	f7ff fdee 	bl	8012ee6 <rshift>
 801330a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801330e:	2702      	movs	r7, #2
 8013310:	f1ba 0f00 	cmp.w	sl, #0
 8013314:	d048      	beq.n	80133a8 <__gethex+0x3f4>
 8013316:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801331a:	2b02      	cmp	r3, #2
 801331c:	d015      	beq.n	801334a <__gethex+0x396>
 801331e:	2b03      	cmp	r3, #3
 8013320:	d017      	beq.n	8013352 <__gethex+0x39e>
 8013322:	2b01      	cmp	r3, #1
 8013324:	d109      	bne.n	801333a <__gethex+0x386>
 8013326:	f01a 0f02 	tst.w	sl, #2
 801332a:	d006      	beq.n	801333a <__gethex+0x386>
 801332c:	f8d9 0000 	ldr.w	r0, [r9]
 8013330:	ea4a 0a00 	orr.w	sl, sl, r0
 8013334:	f01a 0f01 	tst.w	sl, #1
 8013338:	d10e      	bne.n	8013358 <__gethex+0x3a4>
 801333a:	f047 0710 	orr.w	r7, r7, #16
 801333e:	e033      	b.n	80133a8 <__gethex+0x3f4>
 8013340:	f04f 0a01 	mov.w	sl, #1
 8013344:	e7d0      	b.n	80132e8 <__gethex+0x334>
 8013346:	2701      	movs	r7, #1
 8013348:	e7e2      	b.n	8013310 <__gethex+0x35c>
 801334a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801334c:	f1c3 0301 	rsb	r3, r3, #1
 8013350:	9315      	str	r3, [sp, #84]	; 0x54
 8013352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013354:	2b00      	cmp	r3, #0
 8013356:	d0f0      	beq.n	801333a <__gethex+0x386>
 8013358:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801335c:	f104 0314 	add.w	r3, r4, #20
 8013360:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013364:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013368:	f04f 0c00 	mov.w	ip, #0
 801336c:	4618      	mov	r0, r3
 801336e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013372:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8013376:	d01c      	beq.n	80133b2 <__gethex+0x3fe>
 8013378:	3201      	adds	r2, #1
 801337a:	6002      	str	r2, [r0, #0]
 801337c:	2f02      	cmp	r7, #2
 801337e:	f104 0314 	add.w	r3, r4, #20
 8013382:	d13f      	bne.n	8013404 <__gethex+0x450>
 8013384:	f8d8 2000 	ldr.w	r2, [r8]
 8013388:	3a01      	subs	r2, #1
 801338a:	42b2      	cmp	r2, r6
 801338c:	d10a      	bne.n	80133a4 <__gethex+0x3f0>
 801338e:	1171      	asrs	r1, r6, #5
 8013390:	2201      	movs	r2, #1
 8013392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013396:	f006 061f 	and.w	r6, r6, #31
 801339a:	fa02 f606 	lsl.w	r6, r2, r6
 801339e:	421e      	tst	r6, r3
 80133a0:	bf18      	it	ne
 80133a2:	4617      	movne	r7, r2
 80133a4:	f047 0720 	orr.w	r7, r7, #32
 80133a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80133aa:	601c      	str	r4, [r3, #0]
 80133ac:	9b04      	ldr	r3, [sp, #16]
 80133ae:	601d      	str	r5, [r3, #0]
 80133b0:	e695      	b.n	80130de <__gethex+0x12a>
 80133b2:	4299      	cmp	r1, r3
 80133b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80133b8:	d8d8      	bhi.n	801336c <__gethex+0x3b8>
 80133ba:	68a3      	ldr	r3, [r4, #8]
 80133bc:	459b      	cmp	fp, r3
 80133be:	db19      	blt.n	80133f4 <__gethex+0x440>
 80133c0:	6861      	ldr	r1, [r4, #4]
 80133c2:	ee18 0a10 	vmov	r0, s16
 80133c6:	3101      	adds	r1, #1
 80133c8:	f000 f986 	bl	80136d8 <_Balloc>
 80133cc:	4681      	mov	r9, r0
 80133ce:	b918      	cbnz	r0, 80133d8 <__gethex+0x424>
 80133d0:	4b1a      	ldr	r3, [pc, #104]	; (801343c <__gethex+0x488>)
 80133d2:	4602      	mov	r2, r0
 80133d4:	2184      	movs	r1, #132	; 0x84
 80133d6:	e6a8      	b.n	801312a <__gethex+0x176>
 80133d8:	6922      	ldr	r2, [r4, #16]
 80133da:	3202      	adds	r2, #2
 80133dc:	f104 010c 	add.w	r1, r4, #12
 80133e0:	0092      	lsls	r2, r2, #2
 80133e2:	300c      	adds	r0, #12
 80133e4:	f7fc fd3a 	bl	800fe5c <memcpy>
 80133e8:	4621      	mov	r1, r4
 80133ea:	ee18 0a10 	vmov	r0, s16
 80133ee:	f000 f9b3 	bl	8013758 <_Bfree>
 80133f2:	464c      	mov	r4, r9
 80133f4:	6923      	ldr	r3, [r4, #16]
 80133f6:	1c5a      	adds	r2, r3, #1
 80133f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80133fc:	6122      	str	r2, [r4, #16]
 80133fe:	2201      	movs	r2, #1
 8013400:	615a      	str	r2, [r3, #20]
 8013402:	e7bb      	b.n	801337c <__gethex+0x3c8>
 8013404:	6922      	ldr	r2, [r4, #16]
 8013406:	455a      	cmp	r2, fp
 8013408:	dd0b      	ble.n	8013422 <__gethex+0x46e>
 801340a:	2101      	movs	r1, #1
 801340c:	4620      	mov	r0, r4
 801340e:	f7ff fd6a 	bl	8012ee6 <rshift>
 8013412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013416:	3501      	adds	r5, #1
 8013418:	42ab      	cmp	r3, r5
 801341a:	f6ff aed0 	blt.w	80131be <__gethex+0x20a>
 801341e:	2701      	movs	r7, #1
 8013420:	e7c0      	b.n	80133a4 <__gethex+0x3f0>
 8013422:	f016 061f 	ands.w	r6, r6, #31
 8013426:	d0fa      	beq.n	801341e <__gethex+0x46a>
 8013428:	449a      	add	sl, r3
 801342a:	f1c6 0620 	rsb	r6, r6, #32
 801342e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013432:	f000 fa47 	bl	80138c4 <__hi0bits>
 8013436:	42b0      	cmp	r0, r6
 8013438:	dbe7      	blt.n	801340a <__gethex+0x456>
 801343a:	e7f0      	b.n	801341e <__gethex+0x46a>
 801343c:	0801518c 	.word	0x0801518c

08013440 <L_shift>:
 8013440:	f1c2 0208 	rsb	r2, r2, #8
 8013444:	0092      	lsls	r2, r2, #2
 8013446:	b570      	push	{r4, r5, r6, lr}
 8013448:	f1c2 0620 	rsb	r6, r2, #32
 801344c:	6843      	ldr	r3, [r0, #4]
 801344e:	6804      	ldr	r4, [r0, #0]
 8013450:	fa03 f506 	lsl.w	r5, r3, r6
 8013454:	432c      	orrs	r4, r5
 8013456:	40d3      	lsrs	r3, r2
 8013458:	6004      	str	r4, [r0, #0]
 801345a:	f840 3f04 	str.w	r3, [r0, #4]!
 801345e:	4288      	cmp	r0, r1
 8013460:	d3f4      	bcc.n	801344c <L_shift+0xc>
 8013462:	bd70      	pop	{r4, r5, r6, pc}

08013464 <__match>:
 8013464:	b530      	push	{r4, r5, lr}
 8013466:	6803      	ldr	r3, [r0, #0]
 8013468:	3301      	adds	r3, #1
 801346a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801346e:	b914      	cbnz	r4, 8013476 <__match+0x12>
 8013470:	6003      	str	r3, [r0, #0]
 8013472:	2001      	movs	r0, #1
 8013474:	bd30      	pop	{r4, r5, pc}
 8013476:	f813 2b01 	ldrb.w	r2, [r3], #1
 801347a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801347e:	2d19      	cmp	r5, #25
 8013480:	bf98      	it	ls
 8013482:	3220      	addls	r2, #32
 8013484:	42a2      	cmp	r2, r4
 8013486:	d0f0      	beq.n	801346a <__match+0x6>
 8013488:	2000      	movs	r0, #0
 801348a:	e7f3      	b.n	8013474 <__match+0x10>

0801348c <__hexnan>:
 801348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013490:	680b      	ldr	r3, [r1, #0]
 8013492:	6801      	ldr	r1, [r0, #0]
 8013494:	115e      	asrs	r6, r3, #5
 8013496:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801349a:	f013 031f 	ands.w	r3, r3, #31
 801349e:	b087      	sub	sp, #28
 80134a0:	bf18      	it	ne
 80134a2:	3604      	addne	r6, #4
 80134a4:	2500      	movs	r5, #0
 80134a6:	1f37      	subs	r7, r6, #4
 80134a8:	4682      	mov	sl, r0
 80134aa:	4690      	mov	r8, r2
 80134ac:	9301      	str	r3, [sp, #4]
 80134ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80134b2:	46b9      	mov	r9, r7
 80134b4:	463c      	mov	r4, r7
 80134b6:	9502      	str	r5, [sp, #8]
 80134b8:	46ab      	mov	fp, r5
 80134ba:	784a      	ldrb	r2, [r1, #1]
 80134bc:	1c4b      	adds	r3, r1, #1
 80134be:	9303      	str	r3, [sp, #12]
 80134c0:	b342      	cbz	r2, 8013514 <__hexnan+0x88>
 80134c2:	4610      	mov	r0, r2
 80134c4:	9105      	str	r1, [sp, #20]
 80134c6:	9204      	str	r2, [sp, #16]
 80134c8:	f7ff fd5f 	bl	8012f8a <__hexdig_fun>
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d14f      	bne.n	8013570 <__hexnan+0xe4>
 80134d0:	9a04      	ldr	r2, [sp, #16]
 80134d2:	9905      	ldr	r1, [sp, #20]
 80134d4:	2a20      	cmp	r2, #32
 80134d6:	d818      	bhi.n	801350a <__hexnan+0x7e>
 80134d8:	9b02      	ldr	r3, [sp, #8]
 80134da:	459b      	cmp	fp, r3
 80134dc:	dd13      	ble.n	8013506 <__hexnan+0x7a>
 80134de:	454c      	cmp	r4, r9
 80134e0:	d206      	bcs.n	80134f0 <__hexnan+0x64>
 80134e2:	2d07      	cmp	r5, #7
 80134e4:	dc04      	bgt.n	80134f0 <__hexnan+0x64>
 80134e6:	462a      	mov	r2, r5
 80134e8:	4649      	mov	r1, r9
 80134ea:	4620      	mov	r0, r4
 80134ec:	f7ff ffa8 	bl	8013440 <L_shift>
 80134f0:	4544      	cmp	r4, r8
 80134f2:	d950      	bls.n	8013596 <__hexnan+0x10a>
 80134f4:	2300      	movs	r3, #0
 80134f6:	f1a4 0904 	sub.w	r9, r4, #4
 80134fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80134fe:	f8cd b008 	str.w	fp, [sp, #8]
 8013502:	464c      	mov	r4, r9
 8013504:	461d      	mov	r5, r3
 8013506:	9903      	ldr	r1, [sp, #12]
 8013508:	e7d7      	b.n	80134ba <__hexnan+0x2e>
 801350a:	2a29      	cmp	r2, #41	; 0x29
 801350c:	d156      	bne.n	80135bc <__hexnan+0x130>
 801350e:	3102      	adds	r1, #2
 8013510:	f8ca 1000 	str.w	r1, [sl]
 8013514:	f1bb 0f00 	cmp.w	fp, #0
 8013518:	d050      	beq.n	80135bc <__hexnan+0x130>
 801351a:	454c      	cmp	r4, r9
 801351c:	d206      	bcs.n	801352c <__hexnan+0xa0>
 801351e:	2d07      	cmp	r5, #7
 8013520:	dc04      	bgt.n	801352c <__hexnan+0xa0>
 8013522:	462a      	mov	r2, r5
 8013524:	4649      	mov	r1, r9
 8013526:	4620      	mov	r0, r4
 8013528:	f7ff ff8a 	bl	8013440 <L_shift>
 801352c:	4544      	cmp	r4, r8
 801352e:	d934      	bls.n	801359a <__hexnan+0x10e>
 8013530:	f1a8 0204 	sub.w	r2, r8, #4
 8013534:	4623      	mov	r3, r4
 8013536:	f853 1b04 	ldr.w	r1, [r3], #4
 801353a:	f842 1f04 	str.w	r1, [r2, #4]!
 801353e:	429f      	cmp	r7, r3
 8013540:	d2f9      	bcs.n	8013536 <__hexnan+0xaa>
 8013542:	1b3b      	subs	r3, r7, r4
 8013544:	f023 0303 	bic.w	r3, r3, #3
 8013548:	3304      	adds	r3, #4
 801354a:	3401      	adds	r4, #1
 801354c:	3e03      	subs	r6, #3
 801354e:	42b4      	cmp	r4, r6
 8013550:	bf88      	it	hi
 8013552:	2304      	movhi	r3, #4
 8013554:	4443      	add	r3, r8
 8013556:	2200      	movs	r2, #0
 8013558:	f843 2b04 	str.w	r2, [r3], #4
 801355c:	429f      	cmp	r7, r3
 801355e:	d2fb      	bcs.n	8013558 <__hexnan+0xcc>
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	b91b      	cbnz	r3, 801356c <__hexnan+0xe0>
 8013564:	4547      	cmp	r7, r8
 8013566:	d127      	bne.n	80135b8 <__hexnan+0x12c>
 8013568:	2301      	movs	r3, #1
 801356a:	603b      	str	r3, [r7, #0]
 801356c:	2005      	movs	r0, #5
 801356e:	e026      	b.n	80135be <__hexnan+0x132>
 8013570:	3501      	adds	r5, #1
 8013572:	2d08      	cmp	r5, #8
 8013574:	f10b 0b01 	add.w	fp, fp, #1
 8013578:	dd06      	ble.n	8013588 <__hexnan+0xfc>
 801357a:	4544      	cmp	r4, r8
 801357c:	d9c3      	bls.n	8013506 <__hexnan+0x7a>
 801357e:	2300      	movs	r3, #0
 8013580:	f844 3c04 	str.w	r3, [r4, #-4]
 8013584:	2501      	movs	r5, #1
 8013586:	3c04      	subs	r4, #4
 8013588:	6822      	ldr	r2, [r4, #0]
 801358a:	f000 000f 	and.w	r0, r0, #15
 801358e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013592:	6022      	str	r2, [r4, #0]
 8013594:	e7b7      	b.n	8013506 <__hexnan+0x7a>
 8013596:	2508      	movs	r5, #8
 8013598:	e7b5      	b.n	8013506 <__hexnan+0x7a>
 801359a:	9b01      	ldr	r3, [sp, #4]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d0df      	beq.n	8013560 <__hexnan+0xd4>
 80135a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135a4:	f1c3 0320 	rsb	r3, r3, #32
 80135a8:	fa22 f303 	lsr.w	r3, r2, r3
 80135ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80135b0:	401a      	ands	r2, r3
 80135b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80135b6:	e7d3      	b.n	8013560 <__hexnan+0xd4>
 80135b8:	3f04      	subs	r7, #4
 80135ba:	e7d1      	b.n	8013560 <__hexnan+0xd4>
 80135bc:	2004      	movs	r0, #4
 80135be:	b007      	add	sp, #28
 80135c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135c4 <_localeconv_r>:
 80135c4:	4800      	ldr	r0, [pc, #0]	; (80135c8 <_localeconv_r+0x4>)
 80135c6:	4770      	bx	lr
 80135c8:	200002e4 	.word	0x200002e4

080135cc <__retarget_lock_init_recursive>:
 80135cc:	4770      	bx	lr

080135ce <__retarget_lock_acquire_recursive>:
 80135ce:	4770      	bx	lr

080135d0 <__retarget_lock_release>:
 80135d0:	4770      	bx	lr

080135d2 <__retarget_lock_release_recursive>:
 80135d2:	4770      	bx	lr

080135d4 <__swhatbuf_r>:
 80135d4:	b570      	push	{r4, r5, r6, lr}
 80135d6:	460e      	mov	r6, r1
 80135d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135dc:	2900      	cmp	r1, #0
 80135de:	b096      	sub	sp, #88	; 0x58
 80135e0:	4614      	mov	r4, r2
 80135e2:	461d      	mov	r5, r3
 80135e4:	da07      	bge.n	80135f6 <__swhatbuf_r+0x22>
 80135e6:	2300      	movs	r3, #0
 80135e8:	602b      	str	r3, [r5, #0]
 80135ea:	89b3      	ldrh	r3, [r6, #12]
 80135ec:	061a      	lsls	r2, r3, #24
 80135ee:	d410      	bmi.n	8013612 <__swhatbuf_r+0x3e>
 80135f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135f4:	e00e      	b.n	8013614 <__swhatbuf_r+0x40>
 80135f6:	466a      	mov	r2, sp
 80135f8:	f001 f8aa 	bl	8014750 <_fstat_r>
 80135fc:	2800      	cmp	r0, #0
 80135fe:	dbf2      	blt.n	80135e6 <__swhatbuf_r+0x12>
 8013600:	9a01      	ldr	r2, [sp, #4]
 8013602:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013606:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801360a:	425a      	negs	r2, r3
 801360c:	415a      	adcs	r2, r3
 801360e:	602a      	str	r2, [r5, #0]
 8013610:	e7ee      	b.n	80135f0 <__swhatbuf_r+0x1c>
 8013612:	2340      	movs	r3, #64	; 0x40
 8013614:	2000      	movs	r0, #0
 8013616:	6023      	str	r3, [r4, #0]
 8013618:	b016      	add	sp, #88	; 0x58
 801361a:	bd70      	pop	{r4, r5, r6, pc}

0801361c <__smakebuf_r>:
 801361c:	898b      	ldrh	r3, [r1, #12]
 801361e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013620:	079d      	lsls	r5, r3, #30
 8013622:	4606      	mov	r6, r0
 8013624:	460c      	mov	r4, r1
 8013626:	d507      	bpl.n	8013638 <__smakebuf_r+0x1c>
 8013628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801362c:	6023      	str	r3, [r4, #0]
 801362e:	6123      	str	r3, [r4, #16]
 8013630:	2301      	movs	r3, #1
 8013632:	6163      	str	r3, [r4, #20]
 8013634:	b002      	add	sp, #8
 8013636:	bd70      	pop	{r4, r5, r6, pc}
 8013638:	ab01      	add	r3, sp, #4
 801363a:	466a      	mov	r2, sp
 801363c:	f7ff ffca 	bl	80135d4 <__swhatbuf_r>
 8013640:	9900      	ldr	r1, [sp, #0]
 8013642:	4605      	mov	r5, r0
 8013644:	4630      	mov	r0, r6
 8013646:	f7fc fc6f 	bl	800ff28 <_malloc_r>
 801364a:	b948      	cbnz	r0, 8013660 <__smakebuf_r+0x44>
 801364c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013650:	059a      	lsls	r2, r3, #22
 8013652:	d4ef      	bmi.n	8013634 <__smakebuf_r+0x18>
 8013654:	f023 0303 	bic.w	r3, r3, #3
 8013658:	f043 0302 	orr.w	r3, r3, #2
 801365c:	81a3      	strh	r3, [r4, #12]
 801365e:	e7e3      	b.n	8013628 <__smakebuf_r+0xc>
 8013660:	4b0d      	ldr	r3, [pc, #52]	; (8013698 <__smakebuf_r+0x7c>)
 8013662:	62b3      	str	r3, [r6, #40]	; 0x28
 8013664:	89a3      	ldrh	r3, [r4, #12]
 8013666:	6020      	str	r0, [r4, #0]
 8013668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801366c:	81a3      	strh	r3, [r4, #12]
 801366e:	9b00      	ldr	r3, [sp, #0]
 8013670:	6163      	str	r3, [r4, #20]
 8013672:	9b01      	ldr	r3, [sp, #4]
 8013674:	6120      	str	r0, [r4, #16]
 8013676:	b15b      	cbz	r3, 8013690 <__smakebuf_r+0x74>
 8013678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801367c:	4630      	mov	r0, r6
 801367e:	f001 f879 	bl	8014774 <_isatty_r>
 8013682:	b128      	cbz	r0, 8013690 <__smakebuf_r+0x74>
 8013684:	89a3      	ldrh	r3, [r4, #12]
 8013686:	f023 0303 	bic.w	r3, r3, #3
 801368a:	f043 0301 	orr.w	r3, r3, #1
 801368e:	81a3      	strh	r3, [r4, #12]
 8013690:	89a0      	ldrh	r0, [r4, #12]
 8013692:	4305      	orrs	r5, r0
 8013694:	81a5      	strh	r5, [r4, #12]
 8013696:	e7cd      	b.n	8013634 <__smakebuf_r+0x18>
 8013698:	08012d45 	.word	0x08012d45

0801369c <__ascii_mbtowc>:
 801369c:	b082      	sub	sp, #8
 801369e:	b901      	cbnz	r1, 80136a2 <__ascii_mbtowc+0x6>
 80136a0:	a901      	add	r1, sp, #4
 80136a2:	b142      	cbz	r2, 80136b6 <__ascii_mbtowc+0x1a>
 80136a4:	b14b      	cbz	r3, 80136ba <__ascii_mbtowc+0x1e>
 80136a6:	7813      	ldrb	r3, [r2, #0]
 80136a8:	600b      	str	r3, [r1, #0]
 80136aa:	7812      	ldrb	r2, [r2, #0]
 80136ac:	1e10      	subs	r0, r2, #0
 80136ae:	bf18      	it	ne
 80136b0:	2001      	movne	r0, #1
 80136b2:	b002      	add	sp, #8
 80136b4:	4770      	bx	lr
 80136b6:	4610      	mov	r0, r2
 80136b8:	e7fb      	b.n	80136b2 <__ascii_mbtowc+0x16>
 80136ba:	f06f 0001 	mvn.w	r0, #1
 80136be:	e7f8      	b.n	80136b2 <__ascii_mbtowc+0x16>

080136c0 <__malloc_lock>:
 80136c0:	4801      	ldr	r0, [pc, #4]	; (80136c8 <__malloc_lock+0x8>)
 80136c2:	f7ff bf84 	b.w	80135ce <__retarget_lock_acquire_recursive>
 80136c6:	bf00      	nop
 80136c8:	2000642c 	.word	0x2000642c

080136cc <__malloc_unlock>:
 80136cc:	4801      	ldr	r0, [pc, #4]	; (80136d4 <__malloc_unlock+0x8>)
 80136ce:	f7ff bf80 	b.w	80135d2 <__retarget_lock_release_recursive>
 80136d2:	bf00      	nop
 80136d4:	2000642c 	.word	0x2000642c

080136d8 <_Balloc>:
 80136d8:	b570      	push	{r4, r5, r6, lr}
 80136da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80136dc:	4604      	mov	r4, r0
 80136de:	460d      	mov	r5, r1
 80136e0:	b976      	cbnz	r6, 8013700 <_Balloc+0x28>
 80136e2:	2010      	movs	r0, #16
 80136e4:	f7fc fbaa 	bl	800fe3c <malloc>
 80136e8:	4602      	mov	r2, r0
 80136ea:	6260      	str	r0, [r4, #36]	; 0x24
 80136ec:	b920      	cbnz	r0, 80136f8 <_Balloc+0x20>
 80136ee:	4b18      	ldr	r3, [pc, #96]	; (8013750 <_Balloc+0x78>)
 80136f0:	4818      	ldr	r0, [pc, #96]	; (8013754 <_Balloc+0x7c>)
 80136f2:	2166      	movs	r1, #102	; 0x66
 80136f4:	f000 ffec 	bl	80146d0 <__assert_func>
 80136f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136fc:	6006      	str	r6, [r0, #0]
 80136fe:	60c6      	str	r6, [r0, #12]
 8013700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013702:	68f3      	ldr	r3, [r6, #12]
 8013704:	b183      	cbz	r3, 8013728 <_Balloc+0x50>
 8013706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013708:	68db      	ldr	r3, [r3, #12]
 801370a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801370e:	b9b8      	cbnz	r0, 8013740 <_Balloc+0x68>
 8013710:	2101      	movs	r1, #1
 8013712:	fa01 f605 	lsl.w	r6, r1, r5
 8013716:	1d72      	adds	r2, r6, #5
 8013718:	0092      	lsls	r2, r2, #2
 801371a:	4620      	mov	r0, r4
 801371c:	f000 fc97 	bl	801404e <_calloc_r>
 8013720:	b160      	cbz	r0, 801373c <_Balloc+0x64>
 8013722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013726:	e00e      	b.n	8013746 <_Balloc+0x6e>
 8013728:	2221      	movs	r2, #33	; 0x21
 801372a:	2104      	movs	r1, #4
 801372c:	4620      	mov	r0, r4
 801372e:	f000 fc8e 	bl	801404e <_calloc_r>
 8013732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013734:	60f0      	str	r0, [r6, #12]
 8013736:	68db      	ldr	r3, [r3, #12]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d1e4      	bne.n	8013706 <_Balloc+0x2e>
 801373c:	2000      	movs	r0, #0
 801373e:	bd70      	pop	{r4, r5, r6, pc}
 8013740:	6802      	ldr	r2, [r0, #0]
 8013742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013746:	2300      	movs	r3, #0
 8013748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801374c:	e7f7      	b.n	801373e <_Balloc+0x66>
 801374e:	bf00      	nop
 8013750:	08015116 	.word	0x08015116
 8013754:	08015280 	.word	0x08015280

08013758 <_Bfree>:
 8013758:	b570      	push	{r4, r5, r6, lr}
 801375a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801375c:	4605      	mov	r5, r0
 801375e:	460c      	mov	r4, r1
 8013760:	b976      	cbnz	r6, 8013780 <_Bfree+0x28>
 8013762:	2010      	movs	r0, #16
 8013764:	f7fc fb6a 	bl	800fe3c <malloc>
 8013768:	4602      	mov	r2, r0
 801376a:	6268      	str	r0, [r5, #36]	; 0x24
 801376c:	b920      	cbnz	r0, 8013778 <_Bfree+0x20>
 801376e:	4b09      	ldr	r3, [pc, #36]	; (8013794 <_Bfree+0x3c>)
 8013770:	4809      	ldr	r0, [pc, #36]	; (8013798 <_Bfree+0x40>)
 8013772:	218a      	movs	r1, #138	; 0x8a
 8013774:	f000 ffac 	bl	80146d0 <__assert_func>
 8013778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801377c:	6006      	str	r6, [r0, #0]
 801377e:	60c6      	str	r6, [r0, #12]
 8013780:	b13c      	cbz	r4, 8013792 <_Bfree+0x3a>
 8013782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013784:	6862      	ldr	r2, [r4, #4]
 8013786:	68db      	ldr	r3, [r3, #12]
 8013788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801378c:	6021      	str	r1, [r4, #0]
 801378e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013792:	bd70      	pop	{r4, r5, r6, pc}
 8013794:	08015116 	.word	0x08015116
 8013798:	08015280 	.word	0x08015280

0801379c <__multadd>:
 801379c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137a0:	690e      	ldr	r6, [r1, #16]
 80137a2:	4607      	mov	r7, r0
 80137a4:	4698      	mov	r8, r3
 80137a6:	460c      	mov	r4, r1
 80137a8:	f101 0014 	add.w	r0, r1, #20
 80137ac:	2300      	movs	r3, #0
 80137ae:	6805      	ldr	r5, [r0, #0]
 80137b0:	b2a9      	uxth	r1, r5
 80137b2:	fb02 8101 	mla	r1, r2, r1, r8
 80137b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80137ba:	0c2d      	lsrs	r5, r5, #16
 80137bc:	fb02 c505 	mla	r5, r2, r5, ip
 80137c0:	b289      	uxth	r1, r1
 80137c2:	3301      	adds	r3, #1
 80137c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80137c8:	429e      	cmp	r6, r3
 80137ca:	f840 1b04 	str.w	r1, [r0], #4
 80137ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80137d2:	dcec      	bgt.n	80137ae <__multadd+0x12>
 80137d4:	f1b8 0f00 	cmp.w	r8, #0
 80137d8:	d022      	beq.n	8013820 <__multadd+0x84>
 80137da:	68a3      	ldr	r3, [r4, #8]
 80137dc:	42b3      	cmp	r3, r6
 80137de:	dc19      	bgt.n	8013814 <__multadd+0x78>
 80137e0:	6861      	ldr	r1, [r4, #4]
 80137e2:	4638      	mov	r0, r7
 80137e4:	3101      	adds	r1, #1
 80137e6:	f7ff ff77 	bl	80136d8 <_Balloc>
 80137ea:	4605      	mov	r5, r0
 80137ec:	b928      	cbnz	r0, 80137fa <__multadd+0x5e>
 80137ee:	4602      	mov	r2, r0
 80137f0:	4b0d      	ldr	r3, [pc, #52]	; (8013828 <__multadd+0x8c>)
 80137f2:	480e      	ldr	r0, [pc, #56]	; (801382c <__multadd+0x90>)
 80137f4:	21b5      	movs	r1, #181	; 0xb5
 80137f6:	f000 ff6b 	bl	80146d0 <__assert_func>
 80137fa:	6922      	ldr	r2, [r4, #16]
 80137fc:	3202      	adds	r2, #2
 80137fe:	f104 010c 	add.w	r1, r4, #12
 8013802:	0092      	lsls	r2, r2, #2
 8013804:	300c      	adds	r0, #12
 8013806:	f7fc fb29 	bl	800fe5c <memcpy>
 801380a:	4621      	mov	r1, r4
 801380c:	4638      	mov	r0, r7
 801380e:	f7ff ffa3 	bl	8013758 <_Bfree>
 8013812:	462c      	mov	r4, r5
 8013814:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013818:	3601      	adds	r6, #1
 801381a:	f8c3 8014 	str.w	r8, [r3, #20]
 801381e:	6126      	str	r6, [r4, #16]
 8013820:	4620      	mov	r0, r4
 8013822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013826:	bf00      	nop
 8013828:	0801518c 	.word	0x0801518c
 801382c:	08015280 	.word	0x08015280

08013830 <__s2b>:
 8013830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013834:	460c      	mov	r4, r1
 8013836:	4615      	mov	r5, r2
 8013838:	461f      	mov	r7, r3
 801383a:	2209      	movs	r2, #9
 801383c:	3308      	adds	r3, #8
 801383e:	4606      	mov	r6, r0
 8013840:	fb93 f3f2 	sdiv	r3, r3, r2
 8013844:	2100      	movs	r1, #0
 8013846:	2201      	movs	r2, #1
 8013848:	429a      	cmp	r2, r3
 801384a:	db09      	blt.n	8013860 <__s2b+0x30>
 801384c:	4630      	mov	r0, r6
 801384e:	f7ff ff43 	bl	80136d8 <_Balloc>
 8013852:	b940      	cbnz	r0, 8013866 <__s2b+0x36>
 8013854:	4602      	mov	r2, r0
 8013856:	4b19      	ldr	r3, [pc, #100]	; (80138bc <__s2b+0x8c>)
 8013858:	4819      	ldr	r0, [pc, #100]	; (80138c0 <__s2b+0x90>)
 801385a:	21ce      	movs	r1, #206	; 0xce
 801385c:	f000 ff38 	bl	80146d0 <__assert_func>
 8013860:	0052      	lsls	r2, r2, #1
 8013862:	3101      	adds	r1, #1
 8013864:	e7f0      	b.n	8013848 <__s2b+0x18>
 8013866:	9b08      	ldr	r3, [sp, #32]
 8013868:	6143      	str	r3, [r0, #20]
 801386a:	2d09      	cmp	r5, #9
 801386c:	f04f 0301 	mov.w	r3, #1
 8013870:	6103      	str	r3, [r0, #16]
 8013872:	dd16      	ble.n	80138a2 <__s2b+0x72>
 8013874:	f104 0909 	add.w	r9, r4, #9
 8013878:	46c8      	mov	r8, r9
 801387a:	442c      	add	r4, r5
 801387c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013880:	4601      	mov	r1, r0
 8013882:	3b30      	subs	r3, #48	; 0x30
 8013884:	220a      	movs	r2, #10
 8013886:	4630      	mov	r0, r6
 8013888:	f7ff ff88 	bl	801379c <__multadd>
 801388c:	45a0      	cmp	r8, r4
 801388e:	d1f5      	bne.n	801387c <__s2b+0x4c>
 8013890:	f1a5 0408 	sub.w	r4, r5, #8
 8013894:	444c      	add	r4, r9
 8013896:	1b2d      	subs	r5, r5, r4
 8013898:	1963      	adds	r3, r4, r5
 801389a:	42bb      	cmp	r3, r7
 801389c:	db04      	blt.n	80138a8 <__s2b+0x78>
 801389e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138a2:	340a      	adds	r4, #10
 80138a4:	2509      	movs	r5, #9
 80138a6:	e7f6      	b.n	8013896 <__s2b+0x66>
 80138a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80138ac:	4601      	mov	r1, r0
 80138ae:	3b30      	subs	r3, #48	; 0x30
 80138b0:	220a      	movs	r2, #10
 80138b2:	4630      	mov	r0, r6
 80138b4:	f7ff ff72 	bl	801379c <__multadd>
 80138b8:	e7ee      	b.n	8013898 <__s2b+0x68>
 80138ba:	bf00      	nop
 80138bc:	0801518c 	.word	0x0801518c
 80138c0:	08015280 	.word	0x08015280

080138c4 <__hi0bits>:
 80138c4:	0c03      	lsrs	r3, r0, #16
 80138c6:	041b      	lsls	r3, r3, #16
 80138c8:	b9d3      	cbnz	r3, 8013900 <__hi0bits+0x3c>
 80138ca:	0400      	lsls	r0, r0, #16
 80138cc:	2310      	movs	r3, #16
 80138ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80138d2:	bf04      	itt	eq
 80138d4:	0200      	lsleq	r0, r0, #8
 80138d6:	3308      	addeq	r3, #8
 80138d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80138dc:	bf04      	itt	eq
 80138de:	0100      	lsleq	r0, r0, #4
 80138e0:	3304      	addeq	r3, #4
 80138e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80138e6:	bf04      	itt	eq
 80138e8:	0080      	lsleq	r0, r0, #2
 80138ea:	3302      	addeq	r3, #2
 80138ec:	2800      	cmp	r0, #0
 80138ee:	db05      	blt.n	80138fc <__hi0bits+0x38>
 80138f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80138f4:	f103 0301 	add.w	r3, r3, #1
 80138f8:	bf08      	it	eq
 80138fa:	2320      	moveq	r3, #32
 80138fc:	4618      	mov	r0, r3
 80138fe:	4770      	bx	lr
 8013900:	2300      	movs	r3, #0
 8013902:	e7e4      	b.n	80138ce <__hi0bits+0xa>

08013904 <__lo0bits>:
 8013904:	6803      	ldr	r3, [r0, #0]
 8013906:	f013 0207 	ands.w	r2, r3, #7
 801390a:	4601      	mov	r1, r0
 801390c:	d00b      	beq.n	8013926 <__lo0bits+0x22>
 801390e:	07da      	lsls	r2, r3, #31
 8013910:	d424      	bmi.n	801395c <__lo0bits+0x58>
 8013912:	0798      	lsls	r0, r3, #30
 8013914:	bf49      	itett	mi
 8013916:	085b      	lsrmi	r3, r3, #1
 8013918:	089b      	lsrpl	r3, r3, #2
 801391a:	2001      	movmi	r0, #1
 801391c:	600b      	strmi	r3, [r1, #0]
 801391e:	bf5c      	itt	pl
 8013920:	600b      	strpl	r3, [r1, #0]
 8013922:	2002      	movpl	r0, #2
 8013924:	4770      	bx	lr
 8013926:	b298      	uxth	r0, r3
 8013928:	b9b0      	cbnz	r0, 8013958 <__lo0bits+0x54>
 801392a:	0c1b      	lsrs	r3, r3, #16
 801392c:	2010      	movs	r0, #16
 801392e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013932:	bf04      	itt	eq
 8013934:	0a1b      	lsreq	r3, r3, #8
 8013936:	3008      	addeq	r0, #8
 8013938:	071a      	lsls	r2, r3, #28
 801393a:	bf04      	itt	eq
 801393c:	091b      	lsreq	r3, r3, #4
 801393e:	3004      	addeq	r0, #4
 8013940:	079a      	lsls	r2, r3, #30
 8013942:	bf04      	itt	eq
 8013944:	089b      	lsreq	r3, r3, #2
 8013946:	3002      	addeq	r0, #2
 8013948:	07da      	lsls	r2, r3, #31
 801394a:	d403      	bmi.n	8013954 <__lo0bits+0x50>
 801394c:	085b      	lsrs	r3, r3, #1
 801394e:	f100 0001 	add.w	r0, r0, #1
 8013952:	d005      	beq.n	8013960 <__lo0bits+0x5c>
 8013954:	600b      	str	r3, [r1, #0]
 8013956:	4770      	bx	lr
 8013958:	4610      	mov	r0, r2
 801395a:	e7e8      	b.n	801392e <__lo0bits+0x2a>
 801395c:	2000      	movs	r0, #0
 801395e:	4770      	bx	lr
 8013960:	2020      	movs	r0, #32
 8013962:	4770      	bx	lr

08013964 <__i2b>:
 8013964:	b510      	push	{r4, lr}
 8013966:	460c      	mov	r4, r1
 8013968:	2101      	movs	r1, #1
 801396a:	f7ff feb5 	bl	80136d8 <_Balloc>
 801396e:	4602      	mov	r2, r0
 8013970:	b928      	cbnz	r0, 801397e <__i2b+0x1a>
 8013972:	4b05      	ldr	r3, [pc, #20]	; (8013988 <__i2b+0x24>)
 8013974:	4805      	ldr	r0, [pc, #20]	; (801398c <__i2b+0x28>)
 8013976:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801397a:	f000 fea9 	bl	80146d0 <__assert_func>
 801397e:	2301      	movs	r3, #1
 8013980:	6144      	str	r4, [r0, #20]
 8013982:	6103      	str	r3, [r0, #16]
 8013984:	bd10      	pop	{r4, pc}
 8013986:	bf00      	nop
 8013988:	0801518c 	.word	0x0801518c
 801398c:	08015280 	.word	0x08015280

08013990 <__multiply>:
 8013990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013994:	4614      	mov	r4, r2
 8013996:	690a      	ldr	r2, [r1, #16]
 8013998:	6923      	ldr	r3, [r4, #16]
 801399a:	429a      	cmp	r2, r3
 801399c:	bfb8      	it	lt
 801399e:	460b      	movlt	r3, r1
 80139a0:	460d      	mov	r5, r1
 80139a2:	bfbc      	itt	lt
 80139a4:	4625      	movlt	r5, r4
 80139a6:	461c      	movlt	r4, r3
 80139a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80139ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80139b0:	68ab      	ldr	r3, [r5, #8]
 80139b2:	6869      	ldr	r1, [r5, #4]
 80139b4:	eb0a 0709 	add.w	r7, sl, r9
 80139b8:	42bb      	cmp	r3, r7
 80139ba:	b085      	sub	sp, #20
 80139bc:	bfb8      	it	lt
 80139be:	3101      	addlt	r1, #1
 80139c0:	f7ff fe8a 	bl	80136d8 <_Balloc>
 80139c4:	b930      	cbnz	r0, 80139d4 <__multiply+0x44>
 80139c6:	4602      	mov	r2, r0
 80139c8:	4b42      	ldr	r3, [pc, #264]	; (8013ad4 <__multiply+0x144>)
 80139ca:	4843      	ldr	r0, [pc, #268]	; (8013ad8 <__multiply+0x148>)
 80139cc:	f240 115d 	movw	r1, #349	; 0x15d
 80139d0:	f000 fe7e 	bl	80146d0 <__assert_func>
 80139d4:	f100 0614 	add.w	r6, r0, #20
 80139d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80139dc:	4633      	mov	r3, r6
 80139de:	2200      	movs	r2, #0
 80139e0:	4543      	cmp	r3, r8
 80139e2:	d31e      	bcc.n	8013a22 <__multiply+0x92>
 80139e4:	f105 0c14 	add.w	ip, r5, #20
 80139e8:	f104 0314 	add.w	r3, r4, #20
 80139ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80139f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80139f4:	9202      	str	r2, [sp, #8]
 80139f6:	ebac 0205 	sub.w	r2, ip, r5
 80139fa:	3a15      	subs	r2, #21
 80139fc:	f022 0203 	bic.w	r2, r2, #3
 8013a00:	3204      	adds	r2, #4
 8013a02:	f105 0115 	add.w	r1, r5, #21
 8013a06:	458c      	cmp	ip, r1
 8013a08:	bf38      	it	cc
 8013a0a:	2204      	movcc	r2, #4
 8013a0c:	9201      	str	r2, [sp, #4]
 8013a0e:	9a02      	ldr	r2, [sp, #8]
 8013a10:	9303      	str	r3, [sp, #12]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d808      	bhi.n	8013a28 <__multiply+0x98>
 8013a16:	2f00      	cmp	r7, #0
 8013a18:	dc55      	bgt.n	8013ac6 <__multiply+0x136>
 8013a1a:	6107      	str	r7, [r0, #16]
 8013a1c:	b005      	add	sp, #20
 8013a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a22:	f843 2b04 	str.w	r2, [r3], #4
 8013a26:	e7db      	b.n	80139e0 <__multiply+0x50>
 8013a28:	f8b3 a000 	ldrh.w	sl, [r3]
 8013a2c:	f1ba 0f00 	cmp.w	sl, #0
 8013a30:	d020      	beq.n	8013a74 <__multiply+0xe4>
 8013a32:	f105 0e14 	add.w	lr, r5, #20
 8013a36:	46b1      	mov	r9, r6
 8013a38:	2200      	movs	r2, #0
 8013a3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013a3e:	f8d9 b000 	ldr.w	fp, [r9]
 8013a42:	b2a1      	uxth	r1, r4
 8013a44:	fa1f fb8b 	uxth.w	fp, fp
 8013a48:	fb0a b101 	mla	r1, sl, r1, fp
 8013a4c:	4411      	add	r1, r2
 8013a4e:	f8d9 2000 	ldr.w	r2, [r9]
 8013a52:	0c24      	lsrs	r4, r4, #16
 8013a54:	0c12      	lsrs	r2, r2, #16
 8013a56:	fb0a 2404 	mla	r4, sl, r4, r2
 8013a5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013a5e:	b289      	uxth	r1, r1
 8013a60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013a64:	45f4      	cmp	ip, lr
 8013a66:	f849 1b04 	str.w	r1, [r9], #4
 8013a6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013a6e:	d8e4      	bhi.n	8013a3a <__multiply+0xaa>
 8013a70:	9901      	ldr	r1, [sp, #4]
 8013a72:	5072      	str	r2, [r6, r1]
 8013a74:	9a03      	ldr	r2, [sp, #12]
 8013a76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013a7a:	3304      	adds	r3, #4
 8013a7c:	f1b9 0f00 	cmp.w	r9, #0
 8013a80:	d01f      	beq.n	8013ac2 <__multiply+0x132>
 8013a82:	6834      	ldr	r4, [r6, #0]
 8013a84:	f105 0114 	add.w	r1, r5, #20
 8013a88:	46b6      	mov	lr, r6
 8013a8a:	f04f 0a00 	mov.w	sl, #0
 8013a8e:	880a      	ldrh	r2, [r1, #0]
 8013a90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013a94:	fb09 b202 	mla	r2, r9, r2, fp
 8013a98:	4492      	add	sl, r2
 8013a9a:	b2a4      	uxth	r4, r4
 8013a9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013aa0:	f84e 4b04 	str.w	r4, [lr], #4
 8013aa4:	f851 4b04 	ldr.w	r4, [r1], #4
 8013aa8:	f8be 2000 	ldrh.w	r2, [lr]
 8013aac:	0c24      	lsrs	r4, r4, #16
 8013aae:	fb09 2404 	mla	r4, r9, r4, r2
 8013ab2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013ab6:	458c      	cmp	ip, r1
 8013ab8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013abc:	d8e7      	bhi.n	8013a8e <__multiply+0xfe>
 8013abe:	9a01      	ldr	r2, [sp, #4]
 8013ac0:	50b4      	str	r4, [r6, r2]
 8013ac2:	3604      	adds	r6, #4
 8013ac4:	e7a3      	b.n	8013a0e <__multiply+0x7e>
 8013ac6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d1a5      	bne.n	8013a1a <__multiply+0x8a>
 8013ace:	3f01      	subs	r7, #1
 8013ad0:	e7a1      	b.n	8013a16 <__multiply+0x86>
 8013ad2:	bf00      	nop
 8013ad4:	0801518c 	.word	0x0801518c
 8013ad8:	08015280 	.word	0x08015280

08013adc <__pow5mult>:
 8013adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ae0:	4615      	mov	r5, r2
 8013ae2:	f012 0203 	ands.w	r2, r2, #3
 8013ae6:	4606      	mov	r6, r0
 8013ae8:	460f      	mov	r7, r1
 8013aea:	d007      	beq.n	8013afc <__pow5mult+0x20>
 8013aec:	4c25      	ldr	r4, [pc, #148]	; (8013b84 <__pow5mult+0xa8>)
 8013aee:	3a01      	subs	r2, #1
 8013af0:	2300      	movs	r3, #0
 8013af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013af6:	f7ff fe51 	bl	801379c <__multadd>
 8013afa:	4607      	mov	r7, r0
 8013afc:	10ad      	asrs	r5, r5, #2
 8013afe:	d03d      	beq.n	8013b7c <__pow5mult+0xa0>
 8013b00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013b02:	b97c      	cbnz	r4, 8013b24 <__pow5mult+0x48>
 8013b04:	2010      	movs	r0, #16
 8013b06:	f7fc f999 	bl	800fe3c <malloc>
 8013b0a:	4602      	mov	r2, r0
 8013b0c:	6270      	str	r0, [r6, #36]	; 0x24
 8013b0e:	b928      	cbnz	r0, 8013b1c <__pow5mult+0x40>
 8013b10:	4b1d      	ldr	r3, [pc, #116]	; (8013b88 <__pow5mult+0xac>)
 8013b12:	481e      	ldr	r0, [pc, #120]	; (8013b8c <__pow5mult+0xb0>)
 8013b14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013b18:	f000 fdda 	bl	80146d0 <__assert_func>
 8013b1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b20:	6004      	str	r4, [r0, #0]
 8013b22:	60c4      	str	r4, [r0, #12]
 8013b24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013b28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013b2c:	b94c      	cbnz	r4, 8013b42 <__pow5mult+0x66>
 8013b2e:	f240 2171 	movw	r1, #625	; 0x271
 8013b32:	4630      	mov	r0, r6
 8013b34:	f7ff ff16 	bl	8013964 <__i2b>
 8013b38:	2300      	movs	r3, #0
 8013b3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b3e:	4604      	mov	r4, r0
 8013b40:	6003      	str	r3, [r0, #0]
 8013b42:	f04f 0900 	mov.w	r9, #0
 8013b46:	07eb      	lsls	r3, r5, #31
 8013b48:	d50a      	bpl.n	8013b60 <__pow5mult+0x84>
 8013b4a:	4639      	mov	r1, r7
 8013b4c:	4622      	mov	r2, r4
 8013b4e:	4630      	mov	r0, r6
 8013b50:	f7ff ff1e 	bl	8013990 <__multiply>
 8013b54:	4639      	mov	r1, r7
 8013b56:	4680      	mov	r8, r0
 8013b58:	4630      	mov	r0, r6
 8013b5a:	f7ff fdfd 	bl	8013758 <_Bfree>
 8013b5e:	4647      	mov	r7, r8
 8013b60:	106d      	asrs	r5, r5, #1
 8013b62:	d00b      	beq.n	8013b7c <__pow5mult+0xa0>
 8013b64:	6820      	ldr	r0, [r4, #0]
 8013b66:	b938      	cbnz	r0, 8013b78 <__pow5mult+0x9c>
 8013b68:	4622      	mov	r2, r4
 8013b6a:	4621      	mov	r1, r4
 8013b6c:	4630      	mov	r0, r6
 8013b6e:	f7ff ff0f 	bl	8013990 <__multiply>
 8013b72:	6020      	str	r0, [r4, #0]
 8013b74:	f8c0 9000 	str.w	r9, [r0]
 8013b78:	4604      	mov	r4, r0
 8013b7a:	e7e4      	b.n	8013b46 <__pow5mult+0x6a>
 8013b7c:	4638      	mov	r0, r7
 8013b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b82:	bf00      	nop
 8013b84:	080153d0 	.word	0x080153d0
 8013b88:	08015116 	.word	0x08015116
 8013b8c:	08015280 	.word	0x08015280

08013b90 <__lshift>:
 8013b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b94:	460c      	mov	r4, r1
 8013b96:	6849      	ldr	r1, [r1, #4]
 8013b98:	6923      	ldr	r3, [r4, #16]
 8013b9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013b9e:	68a3      	ldr	r3, [r4, #8]
 8013ba0:	4607      	mov	r7, r0
 8013ba2:	4691      	mov	r9, r2
 8013ba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ba8:	f108 0601 	add.w	r6, r8, #1
 8013bac:	42b3      	cmp	r3, r6
 8013bae:	db0b      	blt.n	8013bc8 <__lshift+0x38>
 8013bb0:	4638      	mov	r0, r7
 8013bb2:	f7ff fd91 	bl	80136d8 <_Balloc>
 8013bb6:	4605      	mov	r5, r0
 8013bb8:	b948      	cbnz	r0, 8013bce <__lshift+0x3e>
 8013bba:	4602      	mov	r2, r0
 8013bbc:	4b28      	ldr	r3, [pc, #160]	; (8013c60 <__lshift+0xd0>)
 8013bbe:	4829      	ldr	r0, [pc, #164]	; (8013c64 <__lshift+0xd4>)
 8013bc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013bc4:	f000 fd84 	bl	80146d0 <__assert_func>
 8013bc8:	3101      	adds	r1, #1
 8013bca:	005b      	lsls	r3, r3, #1
 8013bcc:	e7ee      	b.n	8013bac <__lshift+0x1c>
 8013bce:	2300      	movs	r3, #0
 8013bd0:	f100 0114 	add.w	r1, r0, #20
 8013bd4:	f100 0210 	add.w	r2, r0, #16
 8013bd8:	4618      	mov	r0, r3
 8013bda:	4553      	cmp	r3, sl
 8013bdc:	db33      	blt.n	8013c46 <__lshift+0xb6>
 8013bde:	6920      	ldr	r0, [r4, #16]
 8013be0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013be4:	f104 0314 	add.w	r3, r4, #20
 8013be8:	f019 091f 	ands.w	r9, r9, #31
 8013bec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013bf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013bf4:	d02b      	beq.n	8013c4e <__lshift+0xbe>
 8013bf6:	f1c9 0e20 	rsb	lr, r9, #32
 8013bfa:	468a      	mov	sl, r1
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	6818      	ldr	r0, [r3, #0]
 8013c00:	fa00 f009 	lsl.w	r0, r0, r9
 8013c04:	4302      	orrs	r2, r0
 8013c06:	f84a 2b04 	str.w	r2, [sl], #4
 8013c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c0e:	459c      	cmp	ip, r3
 8013c10:	fa22 f20e 	lsr.w	r2, r2, lr
 8013c14:	d8f3      	bhi.n	8013bfe <__lshift+0x6e>
 8013c16:	ebac 0304 	sub.w	r3, ip, r4
 8013c1a:	3b15      	subs	r3, #21
 8013c1c:	f023 0303 	bic.w	r3, r3, #3
 8013c20:	3304      	adds	r3, #4
 8013c22:	f104 0015 	add.w	r0, r4, #21
 8013c26:	4584      	cmp	ip, r0
 8013c28:	bf38      	it	cc
 8013c2a:	2304      	movcc	r3, #4
 8013c2c:	50ca      	str	r2, [r1, r3]
 8013c2e:	b10a      	cbz	r2, 8013c34 <__lshift+0xa4>
 8013c30:	f108 0602 	add.w	r6, r8, #2
 8013c34:	3e01      	subs	r6, #1
 8013c36:	4638      	mov	r0, r7
 8013c38:	612e      	str	r6, [r5, #16]
 8013c3a:	4621      	mov	r1, r4
 8013c3c:	f7ff fd8c 	bl	8013758 <_Bfree>
 8013c40:	4628      	mov	r0, r5
 8013c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8013c4a:	3301      	adds	r3, #1
 8013c4c:	e7c5      	b.n	8013bda <__lshift+0x4a>
 8013c4e:	3904      	subs	r1, #4
 8013c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c54:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c58:	459c      	cmp	ip, r3
 8013c5a:	d8f9      	bhi.n	8013c50 <__lshift+0xc0>
 8013c5c:	e7ea      	b.n	8013c34 <__lshift+0xa4>
 8013c5e:	bf00      	nop
 8013c60:	0801518c 	.word	0x0801518c
 8013c64:	08015280 	.word	0x08015280

08013c68 <__mcmp>:
 8013c68:	b530      	push	{r4, r5, lr}
 8013c6a:	6902      	ldr	r2, [r0, #16]
 8013c6c:	690c      	ldr	r4, [r1, #16]
 8013c6e:	1b12      	subs	r2, r2, r4
 8013c70:	d10e      	bne.n	8013c90 <__mcmp+0x28>
 8013c72:	f100 0314 	add.w	r3, r0, #20
 8013c76:	3114      	adds	r1, #20
 8013c78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013c7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013c80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013c84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013c88:	42a5      	cmp	r5, r4
 8013c8a:	d003      	beq.n	8013c94 <__mcmp+0x2c>
 8013c8c:	d305      	bcc.n	8013c9a <__mcmp+0x32>
 8013c8e:	2201      	movs	r2, #1
 8013c90:	4610      	mov	r0, r2
 8013c92:	bd30      	pop	{r4, r5, pc}
 8013c94:	4283      	cmp	r3, r0
 8013c96:	d3f3      	bcc.n	8013c80 <__mcmp+0x18>
 8013c98:	e7fa      	b.n	8013c90 <__mcmp+0x28>
 8013c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c9e:	e7f7      	b.n	8013c90 <__mcmp+0x28>

08013ca0 <__mdiff>:
 8013ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ca4:	460c      	mov	r4, r1
 8013ca6:	4606      	mov	r6, r0
 8013ca8:	4611      	mov	r1, r2
 8013caa:	4620      	mov	r0, r4
 8013cac:	4617      	mov	r7, r2
 8013cae:	f7ff ffdb 	bl	8013c68 <__mcmp>
 8013cb2:	1e05      	subs	r5, r0, #0
 8013cb4:	d110      	bne.n	8013cd8 <__mdiff+0x38>
 8013cb6:	4629      	mov	r1, r5
 8013cb8:	4630      	mov	r0, r6
 8013cba:	f7ff fd0d 	bl	80136d8 <_Balloc>
 8013cbe:	b930      	cbnz	r0, 8013cce <__mdiff+0x2e>
 8013cc0:	4b39      	ldr	r3, [pc, #228]	; (8013da8 <__mdiff+0x108>)
 8013cc2:	4602      	mov	r2, r0
 8013cc4:	f240 2132 	movw	r1, #562	; 0x232
 8013cc8:	4838      	ldr	r0, [pc, #224]	; (8013dac <__mdiff+0x10c>)
 8013cca:	f000 fd01 	bl	80146d0 <__assert_func>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cd8:	bfa4      	itt	ge
 8013cda:	463b      	movge	r3, r7
 8013cdc:	4627      	movge	r7, r4
 8013cde:	4630      	mov	r0, r6
 8013ce0:	6879      	ldr	r1, [r7, #4]
 8013ce2:	bfa6      	itte	ge
 8013ce4:	461c      	movge	r4, r3
 8013ce6:	2500      	movge	r5, #0
 8013ce8:	2501      	movlt	r5, #1
 8013cea:	f7ff fcf5 	bl	80136d8 <_Balloc>
 8013cee:	b920      	cbnz	r0, 8013cfa <__mdiff+0x5a>
 8013cf0:	4b2d      	ldr	r3, [pc, #180]	; (8013da8 <__mdiff+0x108>)
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013cf8:	e7e6      	b.n	8013cc8 <__mdiff+0x28>
 8013cfa:	693e      	ldr	r6, [r7, #16]
 8013cfc:	60c5      	str	r5, [r0, #12]
 8013cfe:	6925      	ldr	r5, [r4, #16]
 8013d00:	f107 0114 	add.w	r1, r7, #20
 8013d04:	f104 0914 	add.w	r9, r4, #20
 8013d08:	f100 0e14 	add.w	lr, r0, #20
 8013d0c:	f107 0210 	add.w	r2, r7, #16
 8013d10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013d14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013d18:	46f2      	mov	sl, lr
 8013d1a:	2700      	movs	r7, #0
 8013d1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013d20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013d24:	fa1f f883 	uxth.w	r8, r3
 8013d28:	fa17 f78b 	uxtah	r7, r7, fp
 8013d2c:	0c1b      	lsrs	r3, r3, #16
 8013d2e:	eba7 0808 	sub.w	r8, r7, r8
 8013d32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013d36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013d3a:	fa1f f888 	uxth.w	r8, r8
 8013d3e:	141f      	asrs	r7, r3, #16
 8013d40:	454d      	cmp	r5, r9
 8013d42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013d46:	f84a 3b04 	str.w	r3, [sl], #4
 8013d4a:	d8e7      	bhi.n	8013d1c <__mdiff+0x7c>
 8013d4c:	1b2b      	subs	r3, r5, r4
 8013d4e:	3b15      	subs	r3, #21
 8013d50:	f023 0303 	bic.w	r3, r3, #3
 8013d54:	3304      	adds	r3, #4
 8013d56:	3415      	adds	r4, #21
 8013d58:	42a5      	cmp	r5, r4
 8013d5a:	bf38      	it	cc
 8013d5c:	2304      	movcc	r3, #4
 8013d5e:	4419      	add	r1, r3
 8013d60:	4473      	add	r3, lr
 8013d62:	469e      	mov	lr, r3
 8013d64:	460d      	mov	r5, r1
 8013d66:	4565      	cmp	r5, ip
 8013d68:	d30e      	bcc.n	8013d88 <__mdiff+0xe8>
 8013d6a:	f10c 0203 	add.w	r2, ip, #3
 8013d6e:	1a52      	subs	r2, r2, r1
 8013d70:	f022 0203 	bic.w	r2, r2, #3
 8013d74:	3903      	subs	r1, #3
 8013d76:	458c      	cmp	ip, r1
 8013d78:	bf38      	it	cc
 8013d7a:	2200      	movcc	r2, #0
 8013d7c:	441a      	add	r2, r3
 8013d7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013d82:	b17b      	cbz	r3, 8013da4 <__mdiff+0x104>
 8013d84:	6106      	str	r6, [r0, #16]
 8013d86:	e7a5      	b.n	8013cd4 <__mdiff+0x34>
 8013d88:	f855 8b04 	ldr.w	r8, [r5], #4
 8013d8c:	fa17 f488 	uxtah	r4, r7, r8
 8013d90:	1422      	asrs	r2, r4, #16
 8013d92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013d96:	b2a4      	uxth	r4, r4
 8013d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013d9c:	f84e 4b04 	str.w	r4, [lr], #4
 8013da0:	1417      	asrs	r7, r2, #16
 8013da2:	e7e0      	b.n	8013d66 <__mdiff+0xc6>
 8013da4:	3e01      	subs	r6, #1
 8013da6:	e7ea      	b.n	8013d7e <__mdiff+0xde>
 8013da8:	0801518c 	.word	0x0801518c
 8013dac:	08015280 	.word	0x08015280

08013db0 <__ulp>:
 8013db0:	b082      	sub	sp, #8
 8013db2:	ed8d 0b00 	vstr	d0, [sp]
 8013db6:	9b01      	ldr	r3, [sp, #4]
 8013db8:	4912      	ldr	r1, [pc, #72]	; (8013e04 <__ulp+0x54>)
 8013dba:	4019      	ands	r1, r3
 8013dbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013dc0:	2900      	cmp	r1, #0
 8013dc2:	dd05      	ble.n	8013dd0 <__ulp+0x20>
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	460b      	mov	r3, r1
 8013dc8:	ec43 2b10 	vmov	d0, r2, r3
 8013dcc:	b002      	add	sp, #8
 8013dce:	4770      	bx	lr
 8013dd0:	4249      	negs	r1, r1
 8013dd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013dd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013dda:	f04f 0200 	mov.w	r2, #0
 8013dde:	f04f 0300 	mov.w	r3, #0
 8013de2:	da04      	bge.n	8013dee <__ulp+0x3e>
 8013de4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013de8:	fa41 f300 	asr.w	r3, r1, r0
 8013dec:	e7ec      	b.n	8013dc8 <__ulp+0x18>
 8013dee:	f1a0 0114 	sub.w	r1, r0, #20
 8013df2:	291e      	cmp	r1, #30
 8013df4:	bfda      	itte	le
 8013df6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013dfa:	fa20 f101 	lsrle.w	r1, r0, r1
 8013dfe:	2101      	movgt	r1, #1
 8013e00:	460a      	mov	r2, r1
 8013e02:	e7e1      	b.n	8013dc8 <__ulp+0x18>
 8013e04:	7ff00000 	.word	0x7ff00000

08013e08 <__b2d>:
 8013e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e0a:	6905      	ldr	r5, [r0, #16]
 8013e0c:	f100 0714 	add.w	r7, r0, #20
 8013e10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013e14:	1f2e      	subs	r6, r5, #4
 8013e16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	f7ff fd52 	bl	80138c4 <__hi0bits>
 8013e20:	f1c0 0320 	rsb	r3, r0, #32
 8013e24:	280a      	cmp	r0, #10
 8013e26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013ea4 <__b2d+0x9c>
 8013e2a:	600b      	str	r3, [r1, #0]
 8013e2c:	dc14      	bgt.n	8013e58 <__b2d+0x50>
 8013e2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013e32:	fa24 f10e 	lsr.w	r1, r4, lr
 8013e36:	42b7      	cmp	r7, r6
 8013e38:	ea41 030c 	orr.w	r3, r1, ip
 8013e3c:	bf34      	ite	cc
 8013e3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013e42:	2100      	movcs	r1, #0
 8013e44:	3015      	adds	r0, #21
 8013e46:	fa04 f000 	lsl.w	r0, r4, r0
 8013e4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8013e4e:	ea40 0201 	orr.w	r2, r0, r1
 8013e52:	ec43 2b10 	vmov	d0, r2, r3
 8013e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e58:	42b7      	cmp	r7, r6
 8013e5a:	bf3a      	itte	cc
 8013e5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013e60:	f1a5 0608 	subcc.w	r6, r5, #8
 8013e64:	2100      	movcs	r1, #0
 8013e66:	380b      	subs	r0, #11
 8013e68:	d017      	beq.n	8013e9a <__b2d+0x92>
 8013e6a:	f1c0 0c20 	rsb	ip, r0, #32
 8013e6e:	fa04 f500 	lsl.w	r5, r4, r0
 8013e72:	42be      	cmp	r6, r7
 8013e74:	fa21 f40c 	lsr.w	r4, r1, ip
 8013e78:	ea45 0504 	orr.w	r5, r5, r4
 8013e7c:	bf8c      	ite	hi
 8013e7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013e82:	2400      	movls	r4, #0
 8013e84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013e88:	fa01 f000 	lsl.w	r0, r1, r0
 8013e8c:	fa24 f40c 	lsr.w	r4, r4, ip
 8013e90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013e94:	ea40 0204 	orr.w	r2, r0, r4
 8013e98:	e7db      	b.n	8013e52 <__b2d+0x4a>
 8013e9a:	ea44 030c 	orr.w	r3, r4, ip
 8013e9e:	460a      	mov	r2, r1
 8013ea0:	e7d7      	b.n	8013e52 <__b2d+0x4a>
 8013ea2:	bf00      	nop
 8013ea4:	3ff00000 	.word	0x3ff00000

08013ea8 <__d2b>:
 8013ea8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013eac:	4689      	mov	r9, r1
 8013eae:	2101      	movs	r1, #1
 8013eb0:	ec57 6b10 	vmov	r6, r7, d0
 8013eb4:	4690      	mov	r8, r2
 8013eb6:	f7ff fc0f 	bl	80136d8 <_Balloc>
 8013eba:	4604      	mov	r4, r0
 8013ebc:	b930      	cbnz	r0, 8013ecc <__d2b+0x24>
 8013ebe:	4602      	mov	r2, r0
 8013ec0:	4b25      	ldr	r3, [pc, #148]	; (8013f58 <__d2b+0xb0>)
 8013ec2:	4826      	ldr	r0, [pc, #152]	; (8013f5c <__d2b+0xb4>)
 8013ec4:	f240 310a 	movw	r1, #778	; 0x30a
 8013ec8:	f000 fc02 	bl	80146d0 <__assert_func>
 8013ecc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013ed0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013ed4:	bb35      	cbnz	r5, 8013f24 <__d2b+0x7c>
 8013ed6:	2e00      	cmp	r6, #0
 8013ed8:	9301      	str	r3, [sp, #4]
 8013eda:	d028      	beq.n	8013f2e <__d2b+0x86>
 8013edc:	4668      	mov	r0, sp
 8013ede:	9600      	str	r6, [sp, #0]
 8013ee0:	f7ff fd10 	bl	8013904 <__lo0bits>
 8013ee4:	9900      	ldr	r1, [sp, #0]
 8013ee6:	b300      	cbz	r0, 8013f2a <__d2b+0x82>
 8013ee8:	9a01      	ldr	r2, [sp, #4]
 8013eea:	f1c0 0320 	rsb	r3, r0, #32
 8013eee:	fa02 f303 	lsl.w	r3, r2, r3
 8013ef2:	430b      	orrs	r3, r1
 8013ef4:	40c2      	lsrs	r2, r0
 8013ef6:	6163      	str	r3, [r4, #20]
 8013ef8:	9201      	str	r2, [sp, #4]
 8013efa:	9b01      	ldr	r3, [sp, #4]
 8013efc:	61a3      	str	r3, [r4, #24]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	bf14      	ite	ne
 8013f02:	2202      	movne	r2, #2
 8013f04:	2201      	moveq	r2, #1
 8013f06:	6122      	str	r2, [r4, #16]
 8013f08:	b1d5      	cbz	r5, 8013f40 <__d2b+0x98>
 8013f0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013f0e:	4405      	add	r5, r0
 8013f10:	f8c9 5000 	str.w	r5, [r9]
 8013f14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013f18:	f8c8 0000 	str.w	r0, [r8]
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	b003      	add	sp, #12
 8013f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f28:	e7d5      	b.n	8013ed6 <__d2b+0x2e>
 8013f2a:	6161      	str	r1, [r4, #20]
 8013f2c:	e7e5      	b.n	8013efa <__d2b+0x52>
 8013f2e:	a801      	add	r0, sp, #4
 8013f30:	f7ff fce8 	bl	8013904 <__lo0bits>
 8013f34:	9b01      	ldr	r3, [sp, #4]
 8013f36:	6163      	str	r3, [r4, #20]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	6122      	str	r2, [r4, #16]
 8013f3c:	3020      	adds	r0, #32
 8013f3e:	e7e3      	b.n	8013f08 <__d2b+0x60>
 8013f40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013f44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013f48:	f8c9 0000 	str.w	r0, [r9]
 8013f4c:	6918      	ldr	r0, [r3, #16]
 8013f4e:	f7ff fcb9 	bl	80138c4 <__hi0bits>
 8013f52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013f56:	e7df      	b.n	8013f18 <__d2b+0x70>
 8013f58:	0801518c 	.word	0x0801518c
 8013f5c:	08015280 	.word	0x08015280

08013f60 <__ratio>:
 8013f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f64:	4688      	mov	r8, r1
 8013f66:	4669      	mov	r1, sp
 8013f68:	4681      	mov	r9, r0
 8013f6a:	f7ff ff4d 	bl	8013e08 <__b2d>
 8013f6e:	a901      	add	r1, sp, #4
 8013f70:	4640      	mov	r0, r8
 8013f72:	ec55 4b10 	vmov	r4, r5, d0
 8013f76:	f7ff ff47 	bl	8013e08 <__b2d>
 8013f7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013f82:	eba3 0c02 	sub.w	ip, r3, r2
 8013f86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013f8a:	1a9b      	subs	r3, r3, r2
 8013f8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013f90:	ec51 0b10 	vmov	r0, r1, d0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	bfd6      	itet	le
 8013f98:	460a      	movle	r2, r1
 8013f9a:	462a      	movgt	r2, r5
 8013f9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013fa0:	468b      	mov	fp, r1
 8013fa2:	462f      	mov	r7, r5
 8013fa4:	bfd4      	ite	le
 8013fa6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013faa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013fae:	4620      	mov	r0, r4
 8013fb0:	ee10 2a10 	vmov	r2, s0
 8013fb4:	465b      	mov	r3, fp
 8013fb6:	4639      	mov	r1, r7
 8013fb8:	f7ec fc58 	bl	800086c <__aeabi_ddiv>
 8013fbc:	ec41 0b10 	vmov	d0, r0, r1
 8013fc0:	b003      	add	sp, #12
 8013fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013fc6 <__copybits>:
 8013fc6:	3901      	subs	r1, #1
 8013fc8:	b570      	push	{r4, r5, r6, lr}
 8013fca:	1149      	asrs	r1, r1, #5
 8013fcc:	6914      	ldr	r4, [r2, #16]
 8013fce:	3101      	adds	r1, #1
 8013fd0:	f102 0314 	add.w	r3, r2, #20
 8013fd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013fd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013fdc:	1f05      	subs	r5, r0, #4
 8013fde:	42a3      	cmp	r3, r4
 8013fe0:	d30c      	bcc.n	8013ffc <__copybits+0x36>
 8013fe2:	1aa3      	subs	r3, r4, r2
 8013fe4:	3b11      	subs	r3, #17
 8013fe6:	f023 0303 	bic.w	r3, r3, #3
 8013fea:	3211      	adds	r2, #17
 8013fec:	42a2      	cmp	r2, r4
 8013fee:	bf88      	it	hi
 8013ff0:	2300      	movhi	r3, #0
 8013ff2:	4418      	add	r0, r3
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	4288      	cmp	r0, r1
 8013ff8:	d305      	bcc.n	8014006 <__copybits+0x40>
 8013ffa:	bd70      	pop	{r4, r5, r6, pc}
 8013ffc:	f853 6b04 	ldr.w	r6, [r3], #4
 8014000:	f845 6f04 	str.w	r6, [r5, #4]!
 8014004:	e7eb      	b.n	8013fde <__copybits+0x18>
 8014006:	f840 3b04 	str.w	r3, [r0], #4
 801400a:	e7f4      	b.n	8013ff6 <__copybits+0x30>

0801400c <__any_on>:
 801400c:	f100 0214 	add.w	r2, r0, #20
 8014010:	6900      	ldr	r0, [r0, #16]
 8014012:	114b      	asrs	r3, r1, #5
 8014014:	4298      	cmp	r0, r3
 8014016:	b510      	push	{r4, lr}
 8014018:	db11      	blt.n	801403e <__any_on+0x32>
 801401a:	dd0a      	ble.n	8014032 <__any_on+0x26>
 801401c:	f011 011f 	ands.w	r1, r1, #31
 8014020:	d007      	beq.n	8014032 <__any_on+0x26>
 8014022:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014026:	fa24 f001 	lsr.w	r0, r4, r1
 801402a:	fa00 f101 	lsl.w	r1, r0, r1
 801402e:	428c      	cmp	r4, r1
 8014030:	d10b      	bne.n	801404a <__any_on+0x3e>
 8014032:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014036:	4293      	cmp	r3, r2
 8014038:	d803      	bhi.n	8014042 <__any_on+0x36>
 801403a:	2000      	movs	r0, #0
 801403c:	bd10      	pop	{r4, pc}
 801403e:	4603      	mov	r3, r0
 8014040:	e7f7      	b.n	8014032 <__any_on+0x26>
 8014042:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014046:	2900      	cmp	r1, #0
 8014048:	d0f5      	beq.n	8014036 <__any_on+0x2a>
 801404a:	2001      	movs	r0, #1
 801404c:	e7f6      	b.n	801403c <__any_on+0x30>

0801404e <_calloc_r>:
 801404e:	b513      	push	{r0, r1, r4, lr}
 8014050:	434a      	muls	r2, r1
 8014052:	4611      	mov	r1, r2
 8014054:	9201      	str	r2, [sp, #4]
 8014056:	f7fb ff67 	bl	800ff28 <_malloc_r>
 801405a:	4604      	mov	r4, r0
 801405c:	b118      	cbz	r0, 8014066 <_calloc_r+0x18>
 801405e:	9a01      	ldr	r2, [sp, #4]
 8014060:	2100      	movs	r1, #0
 8014062:	f7fb ff09 	bl	800fe78 <memset>
 8014066:	4620      	mov	r0, r4
 8014068:	b002      	add	sp, #8
 801406a:	bd10      	pop	{r4, pc}

0801406c <__ssputs_r>:
 801406c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014070:	688e      	ldr	r6, [r1, #8]
 8014072:	429e      	cmp	r6, r3
 8014074:	4682      	mov	sl, r0
 8014076:	460c      	mov	r4, r1
 8014078:	4690      	mov	r8, r2
 801407a:	461f      	mov	r7, r3
 801407c:	d838      	bhi.n	80140f0 <__ssputs_r+0x84>
 801407e:	898a      	ldrh	r2, [r1, #12]
 8014080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014084:	d032      	beq.n	80140ec <__ssputs_r+0x80>
 8014086:	6825      	ldr	r5, [r4, #0]
 8014088:	6909      	ldr	r1, [r1, #16]
 801408a:	eba5 0901 	sub.w	r9, r5, r1
 801408e:	6965      	ldr	r5, [r4, #20]
 8014090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014098:	3301      	adds	r3, #1
 801409a:	444b      	add	r3, r9
 801409c:	106d      	asrs	r5, r5, #1
 801409e:	429d      	cmp	r5, r3
 80140a0:	bf38      	it	cc
 80140a2:	461d      	movcc	r5, r3
 80140a4:	0553      	lsls	r3, r2, #21
 80140a6:	d531      	bpl.n	801410c <__ssputs_r+0xa0>
 80140a8:	4629      	mov	r1, r5
 80140aa:	f7fb ff3d 	bl	800ff28 <_malloc_r>
 80140ae:	4606      	mov	r6, r0
 80140b0:	b950      	cbnz	r0, 80140c8 <__ssputs_r+0x5c>
 80140b2:	230c      	movs	r3, #12
 80140b4:	f8ca 3000 	str.w	r3, [sl]
 80140b8:	89a3      	ldrh	r3, [r4, #12]
 80140ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140be:	81a3      	strh	r3, [r4, #12]
 80140c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140c8:	6921      	ldr	r1, [r4, #16]
 80140ca:	464a      	mov	r2, r9
 80140cc:	f7fb fec6 	bl	800fe5c <memcpy>
 80140d0:	89a3      	ldrh	r3, [r4, #12]
 80140d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80140d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140da:	81a3      	strh	r3, [r4, #12]
 80140dc:	6126      	str	r6, [r4, #16]
 80140de:	6165      	str	r5, [r4, #20]
 80140e0:	444e      	add	r6, r9
 80140e2:	eba5 0509 	sub.w	r5, r5, r9
 80140e6:	6026      	str	r6, [r4, #0]
 80140e8:	60a5      	str	r5, [r4, #8]
 80140ea:	463e      	mov	r6, r7
 80140ec:	42be      	cmp	r6, r7
 80140ee:	d900      	bls.n	80140f2 <__ssputs_r+0x86>
 80140f0:	463e      	mov	r6, r7
 80140f2:	4632      	mov	r2, r6
 80140f4:	6820      	ldr	r0, [r4, #0]
 80140f6:	4641      	mov	r1, r8
 80140f8:	f000 fb5e 	bl	80147b8 <memmove>
 80140fc:	68a3      	ldr	r3, [r4, #8]
 80140fe:	6822      	ldr	r2, [r4, #0]
 8014100:	1b9b      	subs	r3, r3, r6
 8014102:	4432      	add	r2, r6
 8014104:	60a3      	str	r3, [r4, #8]
 8014106:	6022      	str	r2, [r4, #0]
 8014108:	2000      	movs	r0, #0
 801410a:	e7db      	b.n	80140c4 <__ssputs_r+0x58>
 801410c:	462a      	mov	r2, r5
 801410e:	f000 fb6d 	bl	80147ec <_realloc_r>
 8014112:	4606      	mov	r6, r0
 8014114:	2800      	cmp	r0, #0
 8014116:	d1e1      	bne.n	80140dc <__ssputs_r+0x70>
 8014118:	6921      	ldr	r1, [r4, #16]
 801411a:	4650      	mov	r0, sl
 801411c:	f7fb feb4 	bl	800fe88 <_free_r>
 8014120:	e7c7      	b.n	80140b2 <__ssputs_r+0x46>
	...

08014124 <_svfiprintf_r>:
 8014124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014128:	4698      	mov	r8, r3
 801412a:	898b      	ldrh	r3, [r1, #12]
 801412c:	061b      	lsls	r3, r3, #24
 801412e:	b09d      	sub	sp, #116	; 0x74
 8014130:	4607      	mov	r7, r0
 8014132:	460d      	mov	r5, r1
 8014134:	4614      	mov	r4, r2
 8014136:	d50e      	bpl.n	8014156 <_svfiprintf_r+0x32>
 8014138:	690b      	ldr	r3, [r1, #16]
 801413a:	b963      	cbnz	r3, 8014156 <_svfiprintf_r+0x32>
 801413c:	2140      	movs	r1, #64	; 0x40
 801413e:	f7fb fef3 	bl	800ff28 <_malloc_r>
 8014142:	6028      	str	r0, [r5, #0]
 8014144:	6128      	str	r0, [r5, #16]
 8014146:	b920      	cbnz	r0, 8014152 <_svfiprintf_r+0x2e>
 8014148:	230c      	movs	r3, #12
 801414a:	603b      	str	r3, [r7, #0]
 801414c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014150:	e0d1      	b.n	80142f6 <_svfiprintf_r+0x1d2>
 8014152:	2340      	movs	r3, #64	; 0x40
 8014154:	616b      	str	r3, [r5, #20]
 8014156:	2300      	movs	r3, #0
 8014158:	9309      	str	r3, [sp, #36]	; 0x24
 801415a:	2320      	movs	r3, #32
 801415c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014160:	f8cd 800c 	str.w	r8, [sp, #12]
 8014164:	2330      	movs	r3, #48	; 0x30
 8014166:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014310 <_svfiprintf_r+0x1ec>
 801416a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801416e:	f04f 0901 	mov.w	r9, #1
 8014172:	4623      	mov	r3, r4
 8014174:	469a      	mov	sl, r3
 8014176:	f813 2b01 	ldrb.w	r2, [r3], #1
 801417a:	b10a      	cbz	r2, 8014180 <_svfiprintf_r+0x5c>
 801417c:	2a25      	cmp	r2, #37	; 0x25
 801417e:	d1f9      	bne.n	8014174 <_svfiprintf_r+0x50>
 8014180:	ebba 0b04 	subs.w	fp, sl, r4
 8014184:	d00b      	beq.n	801419e <_svfiprintf_r+0x7a>
 8014186:	465b      	mov	r3, fp
 8014188:	4622      	mov	r2, r4
 801418a:	4629      	mov	r1, r5
 801418c:	4638      	mov	r0, r7
 801418e:	f7ff ff6d 	bl	801406c <__ssputs_r>
 8014192:	3001      	adds	r0, #1
 8014194:	f000 80aa 	beq.w	80142ec <_svfiprintf_r+0x1c8>
 8014198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801419a:	445a      	add	r2, fp
 801419c:	9209      	str	r2, [sp, #36]	; 0x24
 801419e:	f89a 3000 	ldrb.w	r3, [sl]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	f000 80a2 	beq.w	80142ec <_svfiprintf_r+0x1c8>
 80141a8:	2300      	movs	r3, #0
 80141aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141b2:	f10a 0a01 	add.w	sl, sl, #1
 80141b6:	9304      	str	r3, [sp, #16]
 80141b8:	9307      	str	r3, [sp, #28]
 80141ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141be:	931a      	str	r3, [sp, #104]	; 0x68
 80141c0:	4654      	mov	r4, sl
 80141c2:	2205      	movs	r2, #5
 80141c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141c8:	4851      	ldr	r0, [pc, #324]	; (8014310 <_svfiprintf_r+0x1ec>)
 80141ca:	f7ec f819 	bl	8000200 <memchr>
 80141ce:	9a04      	ldr	r2, [sp, #16]
 80141d0:	b9d8      	cbnz	r0, 801420a <_svfiprintf_r+0xe6>
 80141d2:	06d0      	lsls	r0, r2, #27
 80141d4:	bf44      	itt	mi
 80141d6:	2320      	movmi	r3, #32
 80141d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141dc:	0711      	lsls	r1, r2, #28
 80141de:	bf44      	itt	mi
 80141e0:	232b      	movmi	r3, #43	; 0x2b
 80141e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141e6:	f89a 3000 	ldrb.w	r3, [sl]
 80141ea:	2b2a      	cmp	r3, #42	; 0x2a
 80141ec:	d015      	beq.n	801421a <_svfiprintf_r+0xf6>
 80141ee:	9a07      	ldr	r2, [sp, #28]
 80141f0:	4654      	mov	r4, sl
 80141f2:	2000      	movs	r0, #0
 80141f4:	f04f 0c0a 	mov.w	ip, #10
 80141f8:	4621      	mov	r1, r4
 80141fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141fe:	3b30      	subs	r3, #48	; 0x30
 8014200:	2b09      	cmp	r3, #9
 8014202:	d94e      	bls.n	80142a2 <_svfiprintf_r+0x17e>
 8014204:	b1b0      	cbz	r0, 8014234 <_svfiprintf_r+0x110>
 8014206:	9207      	str	r2, [sp, #28]
 8014208:	e014      	b.n	8014234 <_svfiprintf_r+0x110>
 801420a:	eba0 0308 	sub.w	r3, r0, r8
 801420e:	fa09 f303 	lsl.w	r3, r9, r3
 8014212:	4313      	orrs	r3, r2
 8014214:	9304      	str	r3, [sp, #16]
 8014216:	46a2      	mov	sl, r4
 8014218:	e7d2      	b.n	80141c0 <_svfiprintf_r+0x9c>
 801421a:	9b03      	ldr	r3, [sp, #12]
 801421c:	1d19      	adds	r1, r3, #4
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	9103      	str	r1, [sp, #12]
 8014222:	2b00      	cmp	r3, #0
 8014224:	bfbb      	ittet	lt
 8014226:	425b      	neglt	r3, r3
 8014228:	f042 0202 	orrlt.w	r2, r2, #2
 801422c:	9307      	strge	r3, [sp, #28]
 801422e:	9307      	strlt	r3, [sp, #28]
 8014230:	bfb8      	it	lt
 8014232:	9204      	strlt	r2, [sp, #16]
 8014234:	7823      	ldrb	r3, [r4, #0]
 8014236:	2b2e      	cmp	r3, #46	; 0x2e
 8014238:	d10c      	bne.n	8014254 <_svfiprintf_r+0x130>
 801423a:	7863      	ldrb	r3, [r4, #1]
 801423c:	2b2a      	cmp	r3, #42	; 0x2a
 801423e:	d135      	bne.n	80142ac <_svfiprintf_r+0x188>
 8014240:	9b03      	ldr	r3, [sp, #12]
 8014242:	1d1a      	adds	r2, r3, #4
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	9203      	str	r2, [sp, #12]
 8014248:	2b00      	cmp	r3, #0
 801424a:	bfb8      	it	lt
 801424c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014250:	3402      	adds	r4, #2
 8014252:	9305      	str	r3, [sp, #20]
 8014254:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014320 <_svfiprintf_r+0x1fc>
 8014258:	7821      	ldrb	r1, [r4, #0]
 801425a:	2203      	movs	r2, #3
 801425c:	4650      	mov	r0, sl
 801425e:	f7eb ffcf 	bl	8000200 <memchr>
 8014262:	b140      	cbz	r0, 8014276 <_svfiprintf_r+0x152>
 8014264:	2340      	movs	r3, #64	; 0x40
 8014266:	eba0 000a 	sub.w	r0, r0, sl
 801426a:	fa03 f000 	lsl.w	r0, r3, r0
 801426e:	9b04      	ldr	r3, [sp, #16]
 8014270:	4303      	orrs	r3, r0
 8014272:	3401      	adds	r4, #1
 8014274:	9304      	str	r3, [sp, #16]
 8014276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801427a:	4826      	ldr	r0, [pc, #152]	; (8014314 <_svfiprintf_r+0x1f0>)
 801427c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014280:	2206      	movs	r2, #6
 8014282:	f7eb ffbd 	bl	8000200 <memchr>
 8014286:	2800      	cmp	r0, #0
 8014288:	d038      	beq.n	80142fc <_svfiprintf_r+0x1d8>
 801428a:	4b23      	ldr	r3, [pc, #140]	; (8014318 <_svfiprintf_r+0x1f4>)
 801428c:	bb1b      	cbnz	r3, 80142d6 <_svfiprintf_r+0x1b2>
 801428e:	9b03      	ldr	r3, [sp, #12]
 8014290:	3307      	adds	r3, #7
 8014292:	f023 0307 	bic.w	r3, r3, #7
 8014296:	3308      	adds	r3, #8
 8014298:	9303      	str	r3, [sp, #12]
 801429a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801429c:	4433      	add	r3, r6
 801429e:	9309      	str	r3, [sp, #36]	; 0x24
 80142a0:	e767      	b.n	8014172 <_svfiprintf_r+0x4e>
 80142a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80142a6:	460c      	mov	r4, r1
 80142a8:	2001      	movs	r0, #1
 80142aa:	e7a5      	b.n	80141f8 <_svfiprintf_r+0xd4>
 80142ac:	2300      	movs	r3, #0
 80142ae:	3401      	adds	r4, #1
 80142b0:	9305      	str	r3, [sp, #20]
 80142b2:	4619      	mov	r1, r3
 80142b4:	f04f 0c0a 	mov.w	ip, #10
 80142b8:	4620      	mov	r0, r4
 80142ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142be:	3a30      	subs	r2, #48	; 0x30
 80142c0:	2a09      	cmp	r2, #9
 80142c2:	d903      	bls.n	80142cc <_svfiprintf_r+0x1a8>
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d0c5      	beq.n	8014254 <_svfiprintf_r+0x130>
 80142c8:	9105      	str	r1, [sp, #20]
 80142ca:	e7c3      	b.n	8014254 <_svfiprintf_r+0x130>
 80142cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80142d0:	4604      	mov	r4, r0
 80142d2:	2301      	movs	r3, #1
 80142d4:	e7f0      	b.n	80142b8 <_svfiprintf_r+0x194>
 80142d6:	ab03      	add	r3, sp, #12
 80142d8:	9300      	str	r3, [sp, #0]
 80142da:	462a      	mov	r2, r5
 80142dc:	4b0f      	ldr	r3, [pc, #60]	; (801431c <_svfiprintf_r+0x1f8>)
 80142de:	a904      	add	r1, sp, #16
 80142e0:	4638      	mov	r0, r7
 80142e2:	f7fb ff1b 	bl	801011c <_printf_float>
 80142e6:	1c42      	adds	r2, r0, #1
 80142e8:	4606      	mov	r6, r0
 80142ea:	d1d6      	bne.n	801429a <_svfiprintf_r+0x176>
 80142ec:	89ab      	ldrh	r3, [r5, #12]
 80142ee:	065b      	lsls	r3, r3, #25
 80142f0:	f53f af2c 	bmi.w	801414c <_svfiprintf_r+0x28>
 80142f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142f6:	b01d      	add	sp, #116	; 0x74
 80142f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142fc:	ab03      	add	r3, sp, #12
 80142fe:	9300      	str	r3, [sp, #0]
 8014300:	462a      	mov	r2, r5
 8014302:	4b06      	ldr	r3, [pc, #24]	; (801431c <_svfiprintf_r+0x1f8>)
 8014304:	a904      	add	r1, sp, #16
 8014306:	4638      	mov	r0, r7
 8014308:	f7fc f9ac 	bl	8010664 <_printf_i>
 801430c:	e7eb      	b.n	80142e6 <_svfiprintf_r+0x1c2>
 801430e:	bf00      	nop
 8014310:	080153dc 	.word	0x080153dc
 8014314:	080153e6 	.word	0x080153e6
 8014318:	0801011d 	.word	0x0801011d
 801431c:	0801406d 	.word	0x0801406d
 8014320:	080153e2 	.word	0x080153e2

08014324 <__sfputc_r>:
 8014324:	6893      	ldr	r3, [r2, #8]
 8014326:	3b01      	subs	r3, #1
 8014328:	2b00      	cmp	r3, #0
 801432a:	b410      	push	{r4}
 801432c:	6093      	str	r3, [r2, #8]
 801432e:	da08      	bge.n	8014342 <__sfputc_r+0x1e>
 8014330:	6994      	ldr	r4, [r2, #24]
 8014332:	42a3      	cmp	r3, r4
 8014334:	db01      	blt.n	801433a <__sfputc_r+0x16>
 8014336:	290a      	cmp	r1, #10
 8014338:	d103      	bne.n	8014342 <__sfputc_r+0x1e>
 801433a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801433e:	f7fd bc81 	b.w	8011c44 <__swbuf_r>
 8014342:	6813      	ldr	r3, [r2, #0]
 8014344:	1c58      	adds	r0, r3, #1
 8014346:	6010      	str	r0, [r2, #0]
 8014348:	7019      	strb	r1, [r3, #0]
 801434a:	4608      	mov	r0, r1
 801434c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014350:	4770      	bx	lr

08014352 <__sfputs_r>:
 8014352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014354:	4606      	mov	r6, r0
 8014356:	460f      	mov	r7, r1
 8014358:	4614      	mov	r4, r2
 801435a:	18d5      	adds	r5, r2, r3
 801435c:	42ac      	cmp	r4, r5
 801435e:	d101      	bne.n	8014364 <__sfputs_r+0x12>
 8014360:	2000      	movs	r0, #0
 8014362:	e007      	b.n	8014374 <__sfputs_r+0x22>
 8014364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014368:	463a      	mov	r2, r7
 801436a:	4630      	mov	r0, r6
 801436c:	f7ff ffda 	bl	8014324 <__sfputc_r>
 8014370:	1c43      	adds	r3, r0, #1
 8014372:	d1f3      	bne.n	801435c <__sfputs_r+0xa>
 8014374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014378 <_vfiprintf_r>:
 8014378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801437c:	460d      	mov	r5, r1
 801437e:	b09d      	sub	sp, #116	; 0x74
 8014380:	4614      	mov	r4, r2
 8014382:	4698      	mov	r8, r3
 8014384:	4606      	mov	r6, r0
 8014386:	b118      	cbz	r0, 8014390 <_vfiprintf_r+0x18>
 8014388:	6983      	ldr	r3, [r0, #24]
 801438a:	b90b      	cbnz	r3, 8014390 <_vfiprintf_r+0x18>
 801438c:	f7fe fd0e 	bl	8012dac <__sinit>
 8014390:	4b89      	ldr	r3, [pc, #548]	; (80145b8 <_vfiprintf_r+0x240>)
 8014392:	429d      	cmp	r5, r3
 8014394:	d11b      	bne.n	80143ce <_vfiprintf_r+0x56>
 8014396:	6875      	ldr	r5, [r6, #4]
 8014398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801439a:	07d9      	lsls	r1, r3, #31
 801439c:	d405      	bmi.n	80143aa <_vfiprintf_r+0x32>
 801439e:	89ab      	ldrh	r3, [r5, #12]
 80143a0:	059a      	lsls	r2, r3, #22
 80143a2:	d402      	bmi.n	80143aa <_vfiprintf_r+0x32>
 80143a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143a6:	f7ff f912 	bl	80135ce <__retarget_lock_acquire_recursive>
 80143aa:	89ab      	ldrh	r3, [r5, #12]
 80143ac:	071b      	lsls	r3, r3, #28
 80143ae:	d501      	bpl.n	80143b4 <_vfiprintf_r+0x3c>
 80143b0:	692b      	ldr	r3, [r5, #16]
 80143b2:	b9eb      	cbnz	r3, 80143f0 <_vfiprintf_r+0x78>
 80143b4:	4629      	mov	r1, r5
 80143b6:	4630      	mov	r0, r6
 80143b8:	f7fd fc96 	bl	8011ce8 <__swsetup_r>
 80143bc:	b1c0      	cbz	r0, 80143f0 <_vfiprintf_r+0x78>
 80143be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143c0:	07dc      	lsls	r4, r3, #31
 80143c2:	d50e      	bpl.n	80143e2 <_vfiprintf_r+0x6a>
 80143c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80143c8:	b01d      	add	sp, #116	; 0x74
 80143ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ce:	4b7b      	ldr	r3, [pc, #492]	; (80145bc <_vfiprintf_r+0x244>)
 80143d0:	429d      	cmp	r5, r3
 80143d2:	d101      	bne.n	80143d8 <_vfiprintf_r+0x60>
 80143d4:	68b5      	ldr	r5, [r6, #8]
 80143d6:	e7df      	b.n	8014398 <_vfiprintf_r+0x20>
 80143d8:	4b79      	ldr	r3, [pc, #484]	; (80145c0 <_vfiprintf_r+0x248>)
 80143da:	429d      	cmp	r5, r3
 80143dc:	bf08      	it	eq
 80143de:	68f5      	ldreq	r5, [r6, #12]
 80143e0:	e7da      	b.n	8014398 <_vfiprintf_r+0x20>
 80143e2:	89ab      	ldrh	r3, [r5, #12]
 80143e4:	0598      	lsls	r0, r3, #22
 80143e6:	d4ed      	bmi.n	80143c4 <_vfiprintf_r+0x4c>
 80143e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143ea:	f7ff f8f2 	bl	80135d2 <__retarget_lock_release_recursive>
 80143ee:	e7e9      	b.n	80143c4 <_vfiprintf_r+0x4c>
 80143f0:	2300      	movs	r3, #0
 80143f2:	9309      	str	r3, [sp, #36]	; 0x24
 80143f4:	2320      	movs	r3, #32
 80143f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80143fe:	2330      	movs	r3, #48	; 0x30
 8014400:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80145c4 <_vfiprintf_r+0x24c>
 8014404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014408:	f04f 0901 	mov.w	r9, #1
 801440c:	4623      	mov	r3, r4
 801440e:	469a      	mov	sl, r3
 8014410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014414:	b10a      	cbz	r2, 801441a <_vfiprintf_r+0xa2>
 8014416:	2a25      	cmp	r2, #37	; 0x25
 8014418:	d1f9      	bne.n	801440e <_vfiprintf_r+0x96>
 801441a:	ebba 0b04 	subs.w	fp, sl, r4
 801441e:	d00b      	beq.n	8014438 <_vfiprintf_r+0xc0>
 8014420:	465b      	mov	r3, fp
 8014422:	4622      	mov	r2, r4
 8014424:	4629      	mov	r1, r5
 8014426:	4630      	mov	r0, r6
 8014428:	f7ff ff93 	bl	8014352 <__sfputs_r>
 801442c:	3001      	adds	r0, #1
 801442e:	f000 80aa 	beq.w	8014586 <_vfiprintf_r+0x20e>
 8014432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014434:	445a      	add	r2, fp
 8014436:	9209      	str	r2, [sp, #36]	; 0x24
 8014438:	f89a 3000 	ldrb.w	r3, [sl]
 801443c:	2b00      	cmp	r3, #0
 801443e:	f000 80a2 	beq.w	8014586 <_vfiprintf_r+0x20e>
 8014442:	2300      	movs	r3, #0
 8014444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801444c:	f10a 0a01 	add.w	sl, sl, #1
 8014450:	9304      	str	r3, [sp, #16]
 8014452:	9307      	str	r3, [sp, #28]
 8014454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014458:	931a      	str	r3, [sp, #104]	; 0x68
 801445a:	4654      	mov	r4, sl
 801445c:	2205      	movs	r2, #5
 801445e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014462:	4858      	ldr	r0, [pc, #352]	; (80145c4 <_vfiprintf_r+0x24c>)
 8014464:	f7eb fecc 	bl	8000200 <memchr>
 8014468:	9a04      	ldr	r2, [sp, #16]
 801446a:	b9d8      	cbnz	r0, 80144a4 <_vfiprintf_r+0x12c>
 801446c:	06d1      	lsls	r1, r2, #27
 801446e:	bf44      	itt	mi
 8014470:	2320      	movmi	r3, #32
 8014472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014476:	0713      	lsls	r3, r2, #28
 8014478:	bf44      	itt	mi
 801447a:	232b      	movmi	r3, #43	; 0x2b
 801447c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014480:	f89a 3000 	ldrb.w	r3, [sl]
 8014484:	2b2a      	cmp	r3, #42	; 0x2a
 8014486:	d015      	beq.n	80144b4 <_vfiprintf_r+0x13c>
 8014488:	9a07      	ldr	r2, [sp, #28]
 801448a:	4654      	mov	r4, sl
 801448c:	2000      	movs	r0, #0
 801448e:	f04f 0c0a 	mov.w	ip, #10
 8014492:	4621      	mov	r1, r4
 8014494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014498:	3b30      	subs	r3, #48	; 0x30
 801449a:	2b09      	cmp	r3, #9
 801449c:	d94e      	bls.n	801453c <_vfiprintf_r+0x1c4>
 801449e:	b1b0      	cbz	r0, 80144ce <_vfiprintf_r+0x156>
 80144a0:	9207      	str	r2, [sp, #28]
 80144a2:	e014      	b.n	80144ce <_vfiprintf_r+0x156>
 80144a4:	eba0 0308 	sub.w	r3, r0, r8
 80144a8:	fa09 f303 	lsl.w	r3, r9, r3
 80144ac:	4313      	orrs	r3, r2
 80144ae:	9304      	str	r3, [sp, #16]
 80144b0:	46a2      	mov	sl, r4
 80144b2:	e7d2      	b.n	801445a <_vfiprintf_r+0xe2>
 80144b4:	9b03      	ldr	r3, [sp, #12]
 80144b6:	1d19      	adds	r1, r3, #4
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	9103      	str	r1, [sp, #12]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	bfbb      	ittet	lt
 80144c0:	425b      	neglt	r3, r3
 80144c2:	f042 0202 	orrlt.w	r2, r2, #2
 80144c6:	9307      	strge	r3, [sp, #28]
 80144c8:	9307      	strlt	r3, [sp, #28]
 80144ca:	bfb8      	it	lt
 80144cc:	9204      	strlt	r2, [sp, #16]
 80144ce:	7823      	ldrb	r3, [r4, #0]
 80144d0:	2b2e      	cmp	r3, #46	; 0x2e
 80144d2:	d10c      	bne.n	80144ee <_vfiprintf_r+0x176>
 80144d4:	7863      	ldrb	r3, [r4, #1]
 80144d6:	2b2a      	cmp	r3, #42	; 0x2a
 80144d8:	d135      	bne.n	8014546 <_vfiprintf_r+0x1ce>
 80144da:	9b03      	ldr	r3, [sp, #12]
 80144dc:	1d1a      	adds	r2, r3, #4
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	9203      	str	r2, [sp, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	bfb8      	it	lt
 80144e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80144ea:	3402      	adds	r4, #2
 80144ec:	9305      	str	r3, [sp, #20]
 80144ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80145d4 <_vfiprintf_r+0x25c>
 80144f2:	7821      	ldrb	r1, [r4, #0]
 80144f4:	2203      	movs	r2, #3
 80144f6:	4650      	mov	r0, sl
 80144f8:	f7eb fe82 	bl	8000200 <memchr>
 80144fc:	b140      	cbz	r0, 8014510 <_vfiprintf_r+0x198>
 80144fe:	2340      	movs	r3, #64	; 0x40
 8014500:	eba0 000a 	sub.w	r0, r0, sl
 8014504:	fa03 f000 	lsl.w	r0, r3, r0
 8014508:	9b04      	ldr	r3, [sp, #16]
 801450a:	4303      	orrs	r3, r0
 801450c:	3401      	adds	r4, #1
 801450e:	9304      	str	r3, [sp, #16]
 8014510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014514:	482c      	ldr	r0, [pc, #176]	; (80145c8 <_vfiprintf_r+0x250>)
 8014516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801451a:	2206      	movs	r2, #6
 801451c:	f7eb fe70 	bl	8000200 <memchr>
 8014520:	2800      	cmp	r0, #0
 8014522:	d03f      	beq.n	80145a4 <_vfiprintf_r+0x22c>
 8014524:	4b29      	ldr	r3, [pc, #164]	; (80145cc <_vfiprintf_r+0x254>)
 8014526:	bb1b      	cbnz	r3, 8014570 <_vfiprintf_r+0x1f8>
 8014528:	9b03      	ldr	r3, [sp, #12]
 801452a:	3307      	adds	r3, #7
 801452c:	f023 0307 	bic.w	r3, r3, #7
 8014530:	3308      	adds	r3, #8
 8014532:	9303      	str	r3, [sp, #12]
 8014534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014536:	443b      	add	r3, r7
 8014538:	9309      	str	r3, [sp, #36]	; 0x24
 801453a:	e767      	b.n	801440c <_vfiprintf_r+0x94>
 801453c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014540:	460c      	mov	r4, r1
 8014542:	2001      	movs	r0, #1
 8014544:	e7a5      	b.n	8014492 <_vfiprintf_r+0x11a>
 8014546:	2300      	movs	r3, #0
 8014548:	3401      	adds	r4, #1
 801454a:	9305      	str	r3, [sp, #20]
 801454c:	4619      	mov	r1, r3
 801454e:	f04f 0c0a 	mov.w	ip, #10
 8014552:	4620      	mov	r0, r4
 8014554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014558:	3a30      	subs	r2, #48	; 0x30
 801455a:	2a09      	cmp	r2, #9
 801455c:	d903      	bls.n	8014566 <_vfiprintf_r+0x1ee>
 801455e:	2b00      	cmp	r3, #0
 8014560:	d0c5      	beq.n	80144ee <_vfiprintf_r+0x176>
 8014562:	9105      	str	r1, [sp, #20]
 8014564:	e7c3      	b.n	80144ee <_vfiprintf_r+0x176>
 8014566:	fb0c 2101 	mla	r1, ip, r1, r2
 801456a:	4604      	mov	r4, r0
 801456c:	2301      	movs	r3, #1
 801456e:	e7f0      	b.n	8014552 <_vfiprintf_r+0x1da>
 8014570:	ab03      	add	r3, sp, #12
 8014572:	9300      	str	r3, [sp, #0]
 8014574:	462a      	mov	r2, r5
 8014576:	4b16      	ldr	r3, [pc, #88]	; (80145d0 <_vfiprintf_r+0x258>)
 8014578:	a904      	add	r1, sp, #16
 801457a:	4630      	mov	r0, r6
 801457c:	f7fb fdce 	bl	801011c <_printf_float>
 8014580:	4607      	mov	r7, r0
 8014582:	1c78      	adds	r0, r7, #1
 8014584:	d1d6      	bne.n	8014534 <_vfiprintf_r+0x1bc>
 8014586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014588:	07d9      	lsls	r1, r3, #31
 801458a:	d405      	bmi.n	8014598 <_vfiprintf_r+0x220>
 801458c:	89ab      	ldrh	r3, [r5, #12]
 801458e:	059a      	lsls	r2, r3, #22
 8014590:	d402      	bmi.n	8014598 <_vfiprintf_r+0x220>
 8014592:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014594:	f7ff f81d 	bl	80135d2 <__retarget_lock_release_recursive>
 8014598:	89ab      	ldrh	r3, [r5, #12]
 801459a:	065b      	lsls	r3, r3, #25
 801459c:	f53f af12 	bmi.w	80143c4 <_vfiprintf_r+0x4c>
 80145a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145a2:	e711      	b.n	80143c8 <_vfiprintf_r+0x50>
 80145a4:	ab03      	add	r3, sp, #12
 80145a6:	9300      	str	r3, [sp, #0]
 80145a8:	462a      	mov	r2, r5
 80145aa:	4b09      	ldr	r3, [pc, #36]	; (80145d0 <_vfiprintf_r+0x258>)
 80145ac:	a904      	add	r1, sp, #16
 80145ae:	4630      	mov	r0, r6
 80145b0:	f7fc f858 	bl	8010664 <_printf_i>
 80145b4:	e7e4      	b.n	8014580 <_vfiprintf_r+0x208>
 80145b6:	bf00      	nop
 80145b8:	080151c0 	.word	0x080151c0
 80145bc:	080151e0 	.word	0x080151e0
 80145c0:	080151a0 	.word	0x080151a0
 80145c4:	080153dc 	.word	0x080153dc
 80145c8:	080153e6 	.word	0x080153e6
 80145cc:	0801011d 	.word	0x0801011d
 80145d0:	08014353 	.word	0x08014353
 80145d4:	080153e2 	.word	0x080153e2

080145d8 <nan>:
 80145d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80145e0 <nan+0x8>
 80145dc:	4770      	bx	lr
 80145de:	bf00      	nop
 80145e0:	00000000 	.word	0x00000000
 80145e4:	7ff80000 	.word	0x7ff80000

080145e8 <__sread>:
 80145e8:	b510      	push	{r4, lr}
 80145ea:	460c      	mov	r4, r1
 80145ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145f0:	f000 f922 	bl	8014838 <_read_r>
 80145f4:	2800      	cmp	r0, #0
 80145f6:	bfab      	itete	ge
 80145f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80145fa:	89a3      	ldrhlt	r3, [r4, #12]
 80145fc:	181b      	addge	r3, r3, r0
 80145fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014602:	bfac      	ite	ge
 8014604:	6563      	strge	r3, [r4, #84]	; 0x54
 8014606:	81a3      	strhlt	r3, [r4, #12]
 8014608:	bd10      	pop	{r4, pc}

0801460a <__swrite>:
 801460a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801460e:	461f      	mov	r7, r3
 8014610:	898b      	ldrh	r3, [r1, #12]
 8014612:	05db      	lsls	r3, r3, #23
 8014614:	4605      	mov	r5, r0
 8014616:	460c      	mov	r4, r1
 8014618:	4616      	mov	r6, r2
 801461a:	d505      	bpl.n	8014628 <__swrite+0x1e>
 801461c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014620:	2302      	movs	r3, #2
 8014622:	2200      	movs	r2, #0
 8014624:	f000 f8b6 	bl	8014794 <_lseek_r>
 8014628:	89a3      	ldrh	r3, [r4, #12]
 801462a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801462e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014632:	81a3      	strh	r3, [r4, #12]
 8014634:	4632      	mov	r2, r6
 8014636:	463b      	mov	r3, r7
 8014638:	4628      	mov	r0, r5
 801463a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801463e:	f000 b835 	b.w	80146ac <_write_r>

08014642 <__sseek>:
 8014642:	b510      	push	{r4, lr}
 8014644:	460c      	mov	r4, r1
 8014646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801464a:	f000 f8a3 	bl	8014794 <_lseek_r>
 801464e:	1c43      	adds	r3, r0, #1
 8014650:	89a3      	ldrh	r3, [r4, #12]
 8014652:	bf15      	itete	ne
 8014654:	6560      	strne	r0, [r4, #84]	; 0x54
 8014656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801465a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801465e:	81a3      	strheq	r3, [r4, #12]
 8014660:	bf18      	it	ne
 8014662:	81a3      	strhne	r3, [r4, #12]
 8014664:	bd10      	pop	{r4, pc}

08014666 <__sclose>:
 8014666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801466a:	f000 b84f 	b.w	801470c <_close_r>

0801466e <strncmp>:
 801466e:	b510      	push	{r4, lr}
 8014670:	b16a      	cbz	r2, 801468e <strncmp+0x20>
 8014672:	3901      	subs	r1, #1
 8014674:	1884      	adds	r4, r0, r2
 8014676:	f810 3b01 	ldrb.w	r3, [r0], #1
 801467a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801467e:	4293      	cmp	r3, r2
 8014680:	d103      	bne.n	801468a <strncmp+0x1c>
 8014682:	42a0      	cmp	r0, r4
 8014684:	d001      	beq.n	801468a <strncmp+0x1c>
 8014686:	2b00      	cmp	r3, #0
 8014688:	d1f5      	bne.n	8014676 <strncmp+0x8>
 801468a:	1a98      	subs	r0, r3, r2
 801468c:	bd10      	pop	{r4, pc}
 801468e:	4610      	mov	r0, r2
 8014690:	e7fc      	b.n	801468c <strncmp+0x1e>

08014692 <__ascii_wctomb>:
 8014692:	b149      	cbz	r1, 80146a8 <__ascii_wctomb+0x16>
 8014694:	2aff      	cmp	r2, #255	; 0xff
 8014696:	bf85      	ittet	hi
 8014698:	238a      	movhi	r3, #138	; 0x8a
 801469a:	6003      	strhi	r3, [r0, #0]
 801469c:	700a      	strbls	r2, [r1, #0]
 801469e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80146a2:	bf98      	it	ls
 80146a4:	2001      	movls	r0, #1
 80146a6:	4770      	bx	lr
 80146a8:	4608      	mov	r0, r1
 80146aa:	4770      	bx	lr

080146ac <_write_r>:
 80146ac:	b538      	push	{r3, r4, r5, lr}
 80146ae:	4d07      	ldr	r5, [pc, #28]	; (80146cc <_write_r+0x20>)
 80146b0:	4604      	mov	r4, r0
 80146b2:	4608      	mov	r0, r1
 80146b4:	4611      	mov	r1, r2
 80146b6:	2200      	movs	r2, #0
 80146b8:	602a      	str	r2, [r5, #0]
 80146ba:	461a      	mov	r2, r3
 80146bc:	f7ed fcbe 	bl	800203c <_write>
 80146c0:	1c43      	adds	r3, r0, #1
 80146c2:	d102      	bne.n	80146ca <_write_r+0x1e>
 80146c4:	682b      	ldr	r3, [r5, #0]
 80146c6:	b103      	cbz	r3, 80146ca <_write_r+0x1e>
 80146c8:	6023      	str	r3, [r4, #0]
 80146ca:	bd38      	pop	{r3, r4, r5, pc}
 80146cc:	20006434 	.word	0x20006434

080146d0 <__assert_func>:
 80146d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146d2:	4614      	mov	r4, r2
 80146d4:	461a      	mov	r2, r3
 80146d6:	4b09      	ldr	r3, [pc, #36]	; (80146fc <__assert_func+0x2c>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	4605      	mov	r5, r0
 80146dc:	68d8      	ldr	r0, [r3, #12]
 80146de:	b14c      	cbz	r4, 80146f4 <__assert_func+0x24>
 80146e0:	4b07      	ldr	r3, [pc, #28]	; (8014700 <__assert_func+0x30>)
 80146e2:	9100      	str	r1, [sp, #0]
 80146e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80146e8:	4906      	ldr	r1, [pc, #24]	; (8014704 <__assert_func+0x34>)
 80146ea:	462b      	mov	r3, r5
 80146ec:	f000 f81e 	bl	801472c <fiprintf>
 80146f0:	f7fb fb6c 	bl	800fdcc <abort>
 80146f4:	4b04      	ldr	r3, [pc, #16]	; (8014708 <__assert_func+0x38>)
 80146f6:	461c      	mov	r4, r3
 80146f8:	e7f3      	b.n	80146e2 <__assert_func+0x12>
 80146fa:	bf00      	nop
 80146fc:	20000188 	.word	0x20000188
 8014700:	080153ed 	.word	0x080153ed
 8014704:	080153fa 	.word	0x080153fa
 8014708:	08015428 	.word	0x08015428

0801470c <_close_r>:
 801470c:	b538      	push	{r3, r4, r5, lr}
 801470e:	4d06      	ldr	r5, [pc, #24]	; (8014728 <_close_r+0x1c>)
 8014710:	2300      	movs	r3, #0
 8014712:	4604      	mov	r4, r0
 8014714:	4608      	mov	r0, r1
 8014716:	602b      	str	r3, [r5, #0]
 8014718:	f7ee faaf 	bl	8002c7a <_close>
 801471c:	1c43      	adds	r3, r0, #1
 801471e:	d102      	bne.n	8014726 <_close_r+0x1a>
 8014720:	682b      	ldr	r3, [r5, #0]
 8014722:	b103      	cbz	r3, 8014726 <_close_r+0x1a>
 8014724:	6023      	str	r3, [r4, #0]
 8014726:	bd38      	pop	{r3, r4, r5, pc}
 8014728:	20006434 	.word	0x20006434

0801472c <fiprintf>:
 801472c:	b40e      	push	{r1, r2, r3}
 801472e:	b503      	push	{r0, r1, lr}
 8014730:	4601      	mov	r1, r0
 8014732:	ab03      	add	r3, sp, #12
 8014734:	4805      	ldr	r0, [pc, #20]	; (801474c <fiprintf+0x20>)
 8014736:	f853 2b04 	ldr.w	r2, [r3], #4
 801473a:	6800      	ldr	r0, [r0, #0]
 801473c:	9301      	str	r3, [sp, #4]
 801473e:	f7ff fe1b 	bl	8014378 <_vfiprintf_r>
 8014742:	b002      	add	sp, #8
 8014744:	f85d eb04 	ldr.w	lr, [sp], #4
 8014748:	b003      	add	sp, #12
 801474a:	4770      	bx	lr
 801474c:	20000188 	.word	0x20000188

08014750 <_fstat_r>:
 8014750:	b538      	push	{r3, r4, r5, lr}
 8014752:	4d07      	ldr	r5, [pc, #28]	; (8014770 <_fstat_r+0x20>)
 8014754:	2300      	movs	r3, #0
 8014756:	4604      	mov	r4, r0
 8014758:	4608      	mov	r0, r1
 801475a:	4611      	mov	r1, r2
 801475c:	602b      	str	r3, [r5, #0]
 801475e:	f7ee fa98 	bl	8002c92 <_fstat>
 8014762:	1c43      	adds	r3, r0, #1
 8014764:	d102      	bne.n	801476c <_fstat_r+0x1c>
 8014766:	682b      	ldr	r3, [r5, #0]
 8014768:	b103      	cbz	r3, 801476c <_fstat_r+0x1c>
 801476a:	6023      	str	r3, [r4, #0]
 801476c:	bd38      	pop	{r3, r4, r5, pc}
 801476e:	bf00      	nop
 8014770:	20006434 	.word	0x20006434

08014774 <_isatty_r>:
 8014774:	b538      	push	{r3, r4, r5, lr}
 8014776:	4d06      	ldr	r5, [pc, #24]	; (8014790 <_isatty_r+0x1c>)
 8014778:	2300      	movs	r3, #0
 801477a:	4604      	mov	r4, r0
 801477c:	4608      	mov	r0, r1
 801477e:	602b      	str	r3, [r5, #0]
 8014780:	f7ee fa97 	bl	8002cb2 <_isatty>
 8014784:	1c43      	adds	r3, r0, #1
 8014786:	d102      	bne.n	801478e <_isatty_r+0x1a>
 8014788:	682b      	ldr	r3, [r5, #0]
 801478a:	b103      	cbz	r3, 801478e <_isatty_r+0x1a>
 801478c:	6023      	str	r3, [r4, #0]
 801478e:	bd38      	pop	{r3, r4, r5, pc}
 8014790:	20006434 	.word	0x20006434

08014794 <_lseek_r>:
 8014794:	b538      	push	{r3, r4, r5, lr}
 8014796:	4d07      	ldr	r5, [pc, #28]	; (80147b4 <_lseek_r+0x20>)
 8014798:	4604      	mov	r4, r0
 801479a:	4608      	mov	r0, r1
 801479c:	4611      	mov	r1, r2
 801479e:	2200      	movs	r2, #0
 80147a0:	602a      	str	r2, [r5, #0]
 80147a2:	461a      	mov	r2, r3
 80147a4:	f7ee fa90 	bl	8002cc8 <_lseek>
 80147a8:	1c43      	adds	r3, r0, #1
 80147aa:	d102      	bne.n	80147b2 <_lseek_r+0x1e>
 80147ac:	682b      	ldr	r3, [r5, #0]
 80147ae:	b103      	cbz	r3, 80147b2 <_lseek_r+0x1e>
 80147b0:	6023      	str	r3, [r4, #0]
 80147b2:	bd38      	pop	{r3, r4, r5, pc}
 80147b4:	20006434 	.word	0x20006434

080147b8 <memmove>:
 80147b8:	4288      	cmp	r0, r1
 80147ba:	b510      	push	{r4, lr}
 80147bc:	eb01 0402 	add.w	r4, r1, r2
 80147c0:	d902      	bls.n	80147c8 <memmove+0x10>
 80147c2:	4284      	cmp	r4, r0
 80147c4:	4623      	mov	r3, r4
 80147c6:	d807      	bhi.n	80147d8 <memmove+0x20>
 80147c8:	1e43      	subs	r3, r0, #1
 80147ca:	42a1      	cmp	r1, r4
 80147cc:	d008      	beq.n	80147e0 <memmove+0x28>
 80147ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80147d6:	e7f8      	b.n	80147ca <memmove+0x12>
 80147d8:	4402      	add	r2, r0
 80147da:	4601      	mov	r1, r0
 80147dc:	428a      	cmp	r2, r1
 80147de:	d100      	bne.n	80147e2 <memmove+0x2a>
 80147e0:	bd10      	pop	{r4, pc}
 80147e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147ea:	e7f7      	b.n	80147dc <memmove+0x24>

080147ec <_realloc_r>:
 80147ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ee:	4607      	mov	r7, r0
 80147f0:	4614      	mov	r4, r2
 80147f2:	460e      	mov	r6, r1
 80147f4:	b921      	cbnz	r1, 8014800 <_realloc_r+0x14>
 80147f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80147fa:	4611      	mov	r1, r2
 80147fc:	f7fb bb94 	b.w	800ff28 <_malloc_r>
 8014800:	b922      	cbnz	r2, 801480c <_realloc_r+0x20>
 8014802:	f7fb fb41 	bl	800fe88 <_free_r>
 8014806:	4625      	mov	r5, r4
 8014808:	4628      	mov	r0, r5
 801480a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801480c:	f000 f826 	bl	801485c <_malloc_usable_size_r>
 8014810:	42a0      	cmp	r0, r4
 8014812:	d20f      	bcs.n	8014834 <_realloc_r+0x48>
 8014814:	4621      	mov	r1, r4
 8014816:	4638      	mov	r0, r7
 8014818:	f7fb fb86 	bl	800ff28 <_malloc_r>
 801481c:	4605      	mov	r5, r0
 801481e:	2800      	cmp	r0, #0
 8014820:	d0f2      	beq.n	8014808 <_realloc_r+0x1c>
 8014822:	4631      	mov	r1, r6
 8014824:	4622      	mov	r2, r4
 8014826:	f7fb fb19 	bl	800fe5c <memcpy>
 801482a:	4631      	mov	r1, r6
 801482c:	4638      	mov	r0, r7
 801482e:	f7fb fb2b 	bl	800fe88 <_free_r>
 8014832:	e7e9      	b.n	8014808 <_realloc_r+0x1c>
 8014834:	4635      	mov	r5, r6
 8014836:	e7e7      	b.n	8014808 <_realloc_r+0x1c>

08014838 <_read_r>:
 8014838:	b538      	push	{r3, r4, r5, lr}
 801483a:	4d07      	ldr	r5, [pc, #28]	; (8014858 <_read_r+0x20>)
 801483c:	4604      	mov	r4, r0
 801483e:	4608      	mov	r0, r1
 8014840:	4611      	mov	r1, r2
 8014842:	2200      	movs	r2, #0
 8014844:	602a      	str	r2, [r5, #0]
 8014846:	461a      	mov	r2, r3
 8014848:	f7ee f9fa 	bl	8002c40 <_read>
 801484c:	1c43      	adds	r3, r0, #1
 801484e:	d102      	bne.n	8014856 <_read_r+0x1e>
 8014850:	682b      	ldr	r3, [r5, #0]
 8014852:	b103      	cbz	r3, 8014856 <_read_r+0x1e>
 8014854:	6023      	str	r3, [r4, #0]
 8014856:	bd38      	pop	{r3, r4, r5, pc}
 8014858:	20006434 	.word	0x20006434

0801485c <_malloc_usable_size_r>:
 801485c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014860:	1f18      	subs	r0, r3, #4
 8014862:	2b00      	cmp	r3, #0
 8014864:	bfbc      	itt	lt
 8014866:	580b      	ldrlt	r3, [r1, r0]
 8014868:	18c0      	addlt	r0, r0, r3
 801486a:	4770      	bx	lr

0801486c <_init>:
 801486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801486e:	bf00      	nop
 8014870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014872:	bc08      	pop	{r3}
 8014874:	469e      	mov	lr, r3
 8014876:	4770      	bx	lr

08014878 <_fini>:
 8014878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801487a:	bf00      	nop
 801487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801487e:	bc08      	pop	{r3}
 8014880:	469e      	mov	lr, r3
 8014882:	4770      	bx	lr
