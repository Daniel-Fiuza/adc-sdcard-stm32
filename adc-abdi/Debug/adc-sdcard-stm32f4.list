
adc-sdcard-stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014714  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  080148a8  080148a8  000248a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015434  08015434  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  08015434  08015434  00025434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801543c  0801543c  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801543c  0801543c  0002543c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08015444  08015444  00025444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0801544c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000060d8  20000360  080157ac  00030360  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006438  080157ac  00036438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037ea6  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074b6  00000000  00000000  00068236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002158  00000000  00000000  0006f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee8  00000000  00000000  00071848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fb21  00000000  00000000  00073730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d600  00000000  00000000  000a3251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0a63  00000000  00000000  000d0851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c12b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a474  00000000  00000000  001c1308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801488c 	.word	0x0801488c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0801488c 	.word	0x0801488c

080001d0 <setjmp>:
 80001d0:	46ec      	mov	ip, sp
 80001d2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d6:	f04f 0000 	mov.w	r0, #0
 80001da:	4770      	bx	lr

080001dc <longjmp>:
 80001dc:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001e0:	46e5      	mov	sp, ip
 80001e2:	0008      	movs	r0, r1
 80001e4:	bf08      	it	eq
 80001e6:	2001      	moveq	r0, #1
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr
 80001fc:	0000      	movs	r0, r0
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm>:
 *      Author: daniel
 */

#include <ADC.h>

ADCManager::ADCManager(ADC_HandleTypeDef *hadc_, uint32_t flash_offset_) :
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
		adc_handle(hadc_), flash_offset(flash_offset_) {
 8001018:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm+0x4c>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001038:	829a      	strh	r2, [r3, #20]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm+0x50>)
 800103e:	619a      	str	r2, [r3, #24]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm+0x54>)
 8001044:	61da      	str	r2, [r3, #28]
	// Recebe valores da flash
	readFromMemory();
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 f886 	bl	8001158 <_ZN10ADCManager14readFromMemoryEv>
}
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	08014aec 	.word	0x08014aec
 800105c:	404e147b 	.word	0x404e147b
 8001060:	3dcccccd 	.word	0x3dcccccd

08001064 <_ZN10ADCManagerD1Ev>:

ADCManager::~ADCManager() {
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <_ZN10ADCManagerD1Ev+0x1c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	08014aec 	.word	0x08014aec

08001084 <_ZN10ADCManagerD0Ev>:
ADCManager::~ADCManager() {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
}
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffe9 	bl	8001064 <_ZN10ADCManagerD1Ev>
 8001092:	2124      	movs	r1, #36	; 0x24
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f00e fe75 	bl	800fd84 <_ZdlPvj>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZN10ADCManager7convertEv>:

/* Método para converter leitura e armazenar em variável da classe
 * Esse método deve ser chamado antes de qualquer outro que envolva o uso da leitura
 * i.e getVolts, getFiltered
 */
void ADCManager::convert() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc_handle);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 ff73 	bl	8002f9c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc_handle, 1);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 f83f 	bl	8003140 <HAL_ADC_PollForConversion>
	adc_last_raw_value = HAL_ADC_GetValue(adc_handle);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 f8c5 	bl	8003256 <HAL_ADC_GetValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	819a      	strh	r2, [r3, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZN10ADCManager8getVoltsEv>:
	last_conversion = (uint16_t) filtered;

}

// recebe saida em volts
float ADCManager::getVolts() {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	if (factor != 0.0) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80010ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d00b      	beq.n	800110c <_ZN10ADCManager8getVoltsEv+0x30>
		return (adc_last_filtered_value * factor);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	89db      	ldrh	r3, [r3, #14]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	edd3 7a04 	vldr	s15, [r3, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110a:	e012      	b.n	8001132 <_ZN10ADCManager8getVoltsEv+0x56>
	} else {
		return (adc_last_filtered_value * VMAX) / RESOLUTION;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	89db      	ldrh	r3, [r3, #14]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edd3 7a06 	vldr	s15, [r3, #24]
 800111e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	8a9b      	ldrh	r3, [r3, #20]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}
}
 8001132:	eeb0 0a67 	vmov.f32	s0, s15
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_ZN10ADCManager6getRawEv>:

uint16_t ADCManager::getRaw() {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	return adc_last_raw_value;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	899b      	ldrh	r3, [r3, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_ZN10ADCManager14readFromMemoryEv>:
/* Os dois métodos abaixo podem ser mudados, mas preservando a lógica de atualizar os valores min max
 * Podemos por exemplo usar a memória RAM do RTC em vez da flash
 */

// lê minmax da flash
void ADCManager::readFromMemory() {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

	FlashHelper::Read(flash_offset, min_val);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3322      	adds	r3, #34	; 0x22
 8001168:	4619      	mov	r1, r3
 800116a:	4610      	mov	r0, r2
 800116c:	f000 f80e 	bl	800118c <_ZN11FlashHelper4ReadEmRt>
	FlashHelper::Read(flash_offset + sizeof(uint16_t), max_val);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	1c9a      	adds	r2, r3, #2
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3320      	adds	r3, #32
 800117a:	4619      	mov	r1, r3
 800117c:	4610      	mov	r0, r2
 800117e:	f000 f805 	bl	800118c <_ZN11FlashHelper4ReadEmRt>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <_ZN11FlashHelper4ReadEmRt>:
//	HAL_FLASH_Lock();
//	return status;
}

// Funciona bem
HAL_StatusTypeDef FlashHelper::Read(const uint32_t offset, uint16_t &data) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
//
//
//
//	HAL_FLASH_OB_Lock();
//	HAL_FLASH_Lock();
	data = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1 + offset);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <_ZN11FlashHelper4ReadEmRt+0x28>)
 800119e:	f005 f9bf 	bl	8006520 <HAL_RTCEx_BKUPRead>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	801a      	strh	r2, [r3, #0]
	return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200029b8 	.word	0x200029b8

080011b8 <_ZN6SDCARDC1Ev>:
 *      Author: daniel
 */

#include <SDCARD.h>

SDCARD::SDCARD() {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <_ZN6SDCARDC1Ev+0x34>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80011cc:	3338      	adds	r3, #56	; 0x38
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
	fs = { 0 };
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3308      	adds	r3, #8
 80011d6:	f241 0238 	movw	r2, #4152	; 0x1038
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00e fe5b 	bl	800fe98 <memset>
}
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	08014afc 	.word	0x08014afc

080011f0 <_ZN6SDCARDD1Ev>:

SDCARD::~SDCARD() {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <_ZN6SDCARDD1Ev+0x1c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]

}
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	08014afc 	.word	0x08014afc

08001210 <_ZN6SDCARDD0Ev>:
SDCARD::~SDCARD() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
}
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ffe9 	bl	80011f0 <_ZN6SDCARDD1Ev>
 800121e:	f242 01b0 	movw	r1, #8368	; 0x20b0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f00e fdae 	bl	800fd84 <_ZdlPvj>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <_ZN6SDCARD11count_filesEPKcRi>:
FRESULT SDCARD::delete_file(const char *path) {
	fsres = f_unlink(path);
	return fsres;
}

FRESULT SDCARD::count_files(const char *path_dir, int &count) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b092      	sub	sp, #72	; 0x48
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	DIR dir;
	static FILINFO fno;
	numFiles = 0;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001246:	3338      	adds	r3, #56	; 0x38
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
	fsres = f_opendir(&dir, path_dir); /* Abre diretorio */
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	4618      	mov	r0, r3
 8001254:	f00d fd2e 	bl	800ecb4 <f_opendir>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001262:	3330      	adds	r3, #48	; 0x30
 8001264:	701a      	strb	r2, [r3, #0]
	if (fsres == FR_OK) {
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800126c:	3330      	adds	r3, #48	; 0x30
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d12a      	bne.n	80012ca <_ZN6SDCARD11count_filesEPKcRi+0x96>
		for (;;) {
			fsres = f_readdir(&dir, &fno); /* Ler um item do diretorio */
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	491b      	ldr	r1, [pc, #108]	; (80012e8 <_ZN6SDCARD11count_filesEPKcRi+0xb4>)
 800127a:	4618      	mov	r0, r3
 800127c:	f00d fdb3 	bl	800ede6 <f_readdir>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800128a:	3330      	adds	r3, #48	; 0x30
 800128c:	701a      	strb	r2, [r3, #0]
			if (fsres != FR_OK || fno.fname[0] == 0) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001294:	3330      	adds	r3, #48	; 0x30
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10f      	bne.n	80012bc <_ZN6SDCARD11count_filesEPKcRi+0x88>
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <_ZN6SDCARD11count_filesEPKcRi+0xb4>)
 800129e:	7d9b      	ldrb	r3, [r3, #22]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <_ZN6SDCARD11count_filesEPKcRi+0x88>
				break;
			} else {
				numFiles++;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80012aa:	3338      	adds	r3, #56	; 0x38
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80012b6:	3338      	adds	r3, #56	; 0x38
 80012b8:	601a      	str	r2, [r3, #0]
			fsres = f_readdir(&dir, &fno); /* Ler um item do diretorio */
 80012ba:	e7db      	b.n	8001274 <_ZN6SDCARD11count_filesEPKcRi+0x40>
//				break;
			}
		}
		count = numFiles;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80012c2:	3338      	adds	r3, #56	; 0x38
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
	}
	f_closedir(&dir);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00d fd63 	bl	800ed9a <f_closedir>
	return fsres; /* Retorna fsres */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80012da:	3330      	adds	r3, #48	; 0x30
 80012dc:	781b      	ldrb	r3, [r3, #0]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3748      	adds	r7, #72	; 0x48
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000037c 	.word	0x2000037c

080012ec <_ZN6SDCARD10write_fileEPKcS1_j>:
	}
	f_closedir(&dir);
	return fsres; /* Retorna fsres */
}

FRESULT SDCARD::write_file(const char *file_name, const char *text,unsigned int str_len) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]

	fsres = f_open(&arquivo, file_name, FA_WRITE | FA_CREATE_ALWAYS);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001300:	220a      	movs	r2, #10
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	4618      	mov	r0, r3
 8001306:	f00d f8cd 	bl	800e4a4 <f_open>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001314:	3330      	adds	r3, #48	; 0x30
 8001316:	701a      	strb	r2, [r3, #0]

	if (fsres == FR_NO_PATH) { // Cria pasta
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800131e:	3330      	adds	r3, #48	; 0x30
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b05      	cmp	r3, #5
 8001324:	d125      	bne.n	8001372 <_ZN6SDCARD10write_fileEPKcS1_j+0x86>
		fsres = f_mkdir("LOGS");
 8001326:	482b      	ldr	r0, [pc, #172]	; (80013d4 <_ZN6SDCARD10write_fileEPKcS1_j+0xe8>)
 8001328:	f00d fd9a 	bl	800ee60 <f_mkdir>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001336:	3330      	adds	r3, #48	; 0x30
 8001338:	701a      	strb	r2, [r3, #0]
		if (fsres != FR_OK)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001340:	3330      	adds	r3, #48	; 0x30
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <_ZN6SDCARD10write_fileEPKcS1_j+0x68>
			return fsres;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800134e:	3330      	adds	r3, #48	; 0x30
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	e03b      	b.n	80013cc <_ZN6SDCARD10write_fileEPKcS1_j+0xe0>
		else
			fsres = f_open(&arquivo, file_name, FA_WRITE | FA_CREATE_ALWAYS);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800135a:	220a      	movs	r2, #10
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	4618      	mov	r0, r3
 8001360:	f00d f8a0 	bl	800e4a4 <f_open>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800136e:	3330      	adds	r3, #48	; 0x30
 8001370:	701a      	strb	r2, [r3, #0]

	}

	fsres = f_write(&arquivo, text, str_len, &test_bytes);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f503 5082 	add.w	r0, r3, #4160	; 0x1040
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800137e:	3334      	adds	r3, #52	; 0x34
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f00d fa5a 	bl	800e83c <f_write>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001392:	3330      	adds	r3, #48	; 0x30
 8001394:	701a      	strb	r2, [r3, #0]

	if (fsres != FR_OK) { // avaliar isso aqui
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800139c:	3330      	adds	r3, #48	; 0x30
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <_ZN6SDCARD10write_fileEPKcS1_j+0xd0>
		f_close(&arquivo);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00d fc58 	bl	800ec60 <f_close>
		return fsres;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80013b6:	3330      	adds	r3, #48	; 0x30
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	e007      	b.n	80013cc <_ZN6SDCARD10write_fileEPKcS1_j+0xe0>
	}

//	numFiles++;

	return f_close(&arquivo);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00d fc4c 	bl	800ec60 <f_close>
 80013c8:	4603      	mov	r3, r0
 80013ca:	bf00      	nop
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	080148b0 	.word	0x080148b0

080013d8 <_ZN6SDCARD10mount_diskEPKc>:

	f_close(&arquivo);
	return fsres;
}

FRESULT SDCARD::mount_disk(const char *path) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]

	return f_mount(&fs, path, 1);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3308      	adds	r3, #8
 80013e6:	2201      	movs	r2, #1
 80013e8:	6839      	ldr	r1, [r7, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00d f814 	bl	800e418 <f_mount>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f805 	bl	800142a <_ZNSt8__detail17_List_node_header7_M_initEv>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
#endif
      }
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f928 	bl	80016b0 <_ZNSaISt10_List_nodeIN5MDDOs4TaskEEED1Ev>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f90b 	bl	8001690 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE10_List_implC1Ev>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ffeb 	bl	800146a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EEC1Ev>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f90d 	bl	80016c8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EED1Ev>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZN5MDDOsC1Ev>:

extern IWDG_HandleTypeDef hiwdg;

int state;

MDDOs::MDDOs() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <_ZN5MDDOsC1Ev+0x28>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3304      	adds	r3, #4
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffda 	bl	8001484 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EEC1Ev>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2202      	movs	r2, #2
 80014d4:	751a      	strb	r2, [r3, #20]
	// TODO Auto-generated constructor stub

}
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	08014b0c 	.word	0x08014b0c

080014e4 <_ZN5MDDOsD1Ev>:

MDDOs::~MDDOs() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <_ZN5MDDOsD1Ev+0x24>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3304      	adds	r3, #4
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ffd1 	bl	800149e <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EED1Ev>
	// TODO Auto-generated destructor stub
}
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	08014b0c 	.word	0x08014b0c

0800150c <_ZN5MDDOsD0Ev>:
MDDOs::~MDDOs() {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
}
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ffe5 	bl	80014e4 <_ZN5MDDOsD1Ev>
 800151a:	2174      	movs	r1, #116	; 0x74
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f00e fc31 	bl	800fd84 <_ZdlPvj>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZN5MDDOs12RegisterTaskEPFvvEPKci>:
// Registra tarefa com periodo de execução predefnido
MDDOs::OS_STATUS MDDOs::RegisterTask(MDDOs::FunPtr function, const char* function_name, int stack_size) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b0bc      	sub	sp, #240	; 0xf0
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
	Task t;
	t.funPtr = function;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	617b      	str	r3, [r7, #20]
	t.millis = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
	t.stack_size = stack_size; // align 32 ?
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	t.stack_bottom = malloc(t.stack_size); // para salvar contexto stack
 8001548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800154c:	4618      	mov	r0, r3
 800154e:	f00e fc85 	bl	800fe5c <malloc>
 8001552:	4603      	mov	r3, r0
 8001554:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (t.stack_top == nullptr){
 8001558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <_ZN5MDDOs12RegisterTaskEPFvvEPKci+0x38>
		return OS_STATUS::NO_MEMMORY;
 8001560:	2301      	movs	r3, #1
 8001562:	e01c      	b.n	800159e <_ZN5MDDOs12RegisterTaskEPFvvEPKci+0x72>
	}
	t.stack_top = t.stack_bottom + t.stack_size; // forma correta pois stack cresce para baixo
 8001564:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001568:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800156c:	4413      	add	r3, r2
 800156e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
//		t.stack_top = t.stack_bottom; // undefined behaviour
	t.ID = tarefas.size();
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3304      	adds	r3, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f8b6 	bl	80016e8 <_ZNKSt7__cxx114listIN5MDDOs4TaskESaIS2_EE4sizeEv>
 800157c:	4603      	mov	r3, r0
 800157e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	t.function_name = function_name;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
	t.status = STATUS::RUNNING;
 8001586:	2301      	movs	r3, #1
 8001588:	f887 3020 	strb.w	r3, [r7, #32]

//	t.context = 0;
	tarefas.push_back(t);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3304      	adds	r3, #4
 8001590:	f107 0214 	add.w	r2, r7, #20
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f8b2 	bl	8001700 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE9push_backERKS2_>
	return OS_STATUS::OK;
 800159c:	2300      	movs	r3, #0

}
 800159e:	4618      	mov	r0, r3
 80015a0:	37f0      	adds	r7, #240	; 0xf0
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <_ZN5MDDOs4spinEv>:

void MDDOs::spin() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	while (status == RUNNING) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7d1b      	ldrb	r3, [r3, #20]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d106      	bne.n	80015c6 <_ZN5MDDOs4spinEv+0x1e>
		HAL_IWDG_Refresh(&hiwdg);
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <_ZN5MDDOs4spinEv+0x28>)
 80015ba:	f002 fd7b 	bl	80040b4 <HAL_IWDG_Refresh>
		spinOnce();
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f808 	bl	80015d4 <_ZN5MDDOs8spinOnceEv>
	while (status == RUNNING) {
 80015c4:	e7f4      	b.n	80015b0 <_ZN5MDDOs4spinEv+0x8>
	}
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20002920 	.word	0x20002920

080015d4 <_ZN5MDDOs8spinOnceEv>:



void MDDOs::spinOnce() {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

//	for (size_t i = 0; i < tarefas.size(); ++i) {
//		for ( std::list<Task>::i)

	for (task_iterator it = tarefas.begin(); it != tarefas.end(); ++ it)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3304      	adds	r3, #4
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f89f 	bl	8001724 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE5beginEv>
 80015e6:	4603      	mov	r3, r0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3304      	adds	r3, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f8a9 	bl	8001746 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE3endEv>
 80015f4:	4603      	mov	r3, r0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	f107 020c 	add.w	r2, r7, #12
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f8af 	bl	8001766 <_ZStneRKSt14_List_iteratorIN5MDDOs4TaskEES4_>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d03a      	beq.n	8001684 <_ZN5MDDOs8spinOnceEv+0xb0>
	{

//		const Task &tarefa = (*it);
		current_task = &(*it);
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f8cb 	bl	80017ae <_ZNKSt14_List_iteratorIN5MDDOs4TaskEEdeEv>
 8001618:	4602      	mov	r2, r0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	611a      	str	r2, [r3, #16]

		state = setjmp(scheduler);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3318      	adds	r3, #24
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fdd4 	bl	80001d0 <setjmp>
 8001628:	4603      	mov	r3, r0
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <_ZN5MDDOs8spinOnceEv+0xb8>)
 800162c:	6013      	str	r3, [r2, #0]
//		state = setjmp(current_task->scheduler_);
		uint32_t currentTime = HAL_GetTick();
 800162e:	f001 fc41 	bl	8002eb4 <HAL_GetTick>
 8001632:	4603      	mov	r3, r0
 8001634:	617b      	str	r3, [r7, #20]
		uint32_t delta = currentTime - current_task->lastTime;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	613b      	str	r3, [r7, #16]

		if(delta > current_task->millis){
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	429a      	cmp	r2, r3
 800164c:	d914      	bls.n	8001678 <_ZN5MDDOs8spinOnceEv+0xa4>

			if(current_task->status == STATUS::DELAYED){
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	7b1b      	ldrb	r3, [r3, #12]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d106      	bne.n	8001666 <_ZN5MDDOs8spinOnceEv+0x92>
				// restore context
				longjmp(current_task->context, 1);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	3314      	adds	r3, #20
 800165e:	2101      	movs	r1, #1
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fdbb 	bl	80001dc <longjmp>
			} else {
				register void *sp asm ("sp");
				sp = current_task->stack_top; //para salvar o contexto
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800166e:	469d      	mov	sp, r3

				current_task->funPtr(); // executa normalmente
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4798      	blx	r3
	for (task_iterator it = tarefas.begin(); it != tarefas.end(); ++ it)
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f886 	bl	800178e <_ZNSt14_List_iteratorIN5MDDOs4TaskEEppEv>
 8001682:	e7b2      	b.n	80015ea <_ZN5MDDOs8spinOnceEv+0x16>



	}

}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200003c8 	.word	0x200003c8

08001690 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f896 	bl	80017ca <_ZNSaISt10_List_nodeIN5MDDOs4TaskEEEC1Ev>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff feb6 	bl	8001412 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZNSaISt10_List_nodeIN5MDDOs4TaskEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f892 	bl	80017e2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEED1Ev>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f891 	bl	80017f8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE8_M_clearEv>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff feba 	bl	8001452 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE10_List_implD1Ev>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_ZNKSt7__cxx114listIN5MDDOs4TaskESaIS2_EE4sizeEv>:
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }

      /**  Returns the number of elements in the %list.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f8a6 	bl	8001842 <_ZNKSt7__cxx114listIN5MDDOs4TaskESaIS2_EE13_M_node_countEv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE9push_backERKS2_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f81b 	bl	8001746 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE3endEv>
 8001710:	4603      	mov	r3, r0
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f8a0 	bl	800185c <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f8ae 	bl	8001898 <_ZNSt14_List_iteratorIN5MDDOs4TaskEEC1EPNSt8__detail15_List_node_baseE>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f89e 	bl	8001898 <_ZNSt14_List_iteratorIN5MDDOs4TaskEEC1EPNSt8__detail15_List_node_baseE>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_ZStneRKSt14_List_iteratorIN5MDDOs4TaskEES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_ZNSt14_List_iteratorIN5MDDOs4TaskEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	601a      	str	r2, [r3, #0]
	return *this;
 80017a0:	687b      	ldr	r3, [r7, #4]
      }
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_ZNKSt14_List_iteratorIN5MDDOs4TaskEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f87b 	bl	80018b6 <_ZNSt10_List_nodeIN5MDDOs4TaskEE9_M_valptrEv>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_ZNSaISt10_List_nodeIN5MDDOs4TaskEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f87d 	bl	80018d2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEEC1Ev>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	429a      	cmp	r2, r3
 800180c:	d015      	beq.n	800183a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE8_M_clearEv+0x42>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001818:	6938      	ldr	r0, [r7, #16]
 800181a:	f000 f84c 	bl	80018b6 <_ZNSt10_List_nodeIN5MDDOs4TaskEE9_M_valptrEv>
 800181e:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f861 	bl	80018e8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE21_M_get_Node_allocatorEv>
 8001826:	4603      	mov	r3, r0
 8001828:	68f9      	ldr	r1, [r7, #12]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f867 	bl	80018fe <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE7destroyIS2_EEvRS4_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 8001830:	6939      	ldr	r1, [r7, #16]
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f870 	bl	8001918 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 8001838:	e7e5      	b.n	8001806 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE8_M_clearEv+0xe>
	}
    }
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZNKSt7__cxx114listIN5MDDOs4TaskESaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f872 	bl	8001936 <_ZNKSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_get_sizeEv>
 8001852:	4603      	mov	r3, r0
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f870 	bl	800194e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 800186e:	4603      	mov	r3, r0
 8001870:	4619      	mov	r1, r3
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f876 	bl	8001964 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8001878:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f00e faa1 	bl	800fdc8 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2101      	movs	r1, #1
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f89e 	bl	80019cc <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_inc_sizeEj>
       }
 8001890:	bf00      	nop
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZNSt14_List_iteratorIN5MDDOs4TaskEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_ZNSt10_List_nodeIN5MDDOs4TaskEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3308      	adds	r3, #8
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f893 	bl	80019ee <_ZN9__gnu_cxx16__aligned_membufIN5MDDOs4TaskEE6_M_ptrEv>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f87b 	bl	8001a06 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE7destroyIS3_EEvPT_>
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f000 f877 	bl	8001a1c <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE10deallocateERS4_PS3_j>
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_ZNKSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_ZNSt7__cxx114listIN5MDDOs4TaskESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f862 	bl	8001a3a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_get_nodeEv>
 8001976:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ffb4 	bl	80018e8 <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE21_M_get_Node_allocatorEv>
 8001980:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	6939      	ldr	r1, [r7, #16]
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f863 	bl	8001a56 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8001990:	6978      	ldr	r0, [r7, #20]
 8001992:	f7ff ff90 	bl	80018b6 <_ZNSt10_List_nodeIN5MDDOs4TaskEE9_M_valptrEv>
 8001996:	4604      	mov	r4, r0
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7ff ffd8 	bl	800194e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4621      	mov	r1, r4
 80019a4:	6938      	ldr	r0, [r7, #16]
 80019a6:	f000 f87f 	bl	8001aa8 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f88c 	bl	8001ace <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEEaSEDn>
	  return __p;
 80019b6:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f85e 	bl	8001a7e <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEED1Ev>
	  return __p;
 80019c2:	4623      	mov	r3, r4
	}
 80019c4:	4618      	mov	r0, r3
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}

080019cc <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	441a      	add	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_ZN9__gnu_cxx16__aligned_membufIN5MDDOs4TaskEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f878 	bl	8001aec <_ZN9__gnu_cxx16__aligned_membufIN5MDDOs4TaskEE7_M_addrEv>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE7destroyIS3_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f868 	bl	8001b02 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE10deallocateEPS4_j>
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_ZNSt7__cxx1110_List_baseIN5MDDOs4TaskESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2101      	movs	r1, #1
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f868 	bl	8001b1c <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE8allocateERS4_j>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8001a62:	68b8      	ldr	r0, [r7, #8]
 8001a64:	f000 f869 	bl	8001b3a <_ZSt11__addressofISaISt10_List_nodeIN5MDDOs4TaskEEEEPT_RS5_>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]
      { }
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff ffbf 	bl	8001a1c <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE10deallocateERS4_PS3_j>
      }
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff4a 	bl	800194e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f845 	bl	8001b50 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_ZNSt15__allocated_ptrISaISt10_List_nodeIN5MDDOs4TaskEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
	return *this;
 8001ade:	687b      	ldr	r3, [r7, #4]
      }
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_ZN9__gnu_cxx16__aligned_membufIN5MDDOs4TaskEE7_M_addrEv>:
      _M_addr() noexcept
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001b0e:	68b8      	ldr	r0, [r7, #8]
 8001b10:	f00e f936 	bl	800fd80 <_ZdlPv>
      }
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZNSt16allocator_traitsISaISt10_List_nodeIN5MDDOs4TaskEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001b26:	2200      	movs	r2, #0
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f82a 	bl	8001b84 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8allocateEjPKv>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_ZSt11__addressofISaISt10_List_nodeIN5MDDOs4TaskEEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff fef6 	bl	800194e <_ZSt7forwardIRKN5MDDOs4TaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001b62:	4604      	mov	r4, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4619      	mov	r1, r3
 8001b68:	20dc      	movs	r0, #220	; 0xdc
 8001b6a:	f7ff fc46 	bl	80013fa <_ZnwjPv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4618      	mov	r0, r3
 8001b72:	4621      	mov	r1, r4
 8001b74:	23dc      	movs	r3, #220	; 0xdc
 8001b76:	461a      	mov	r2, r3
 8001b78:	f00e f980 	bl	800fe7c <memcpy>
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f817 	bl	8001bc4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8max_sizeEv>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	bf8c      	ite	hi
 8001b9e:	2301      	movhi	r3, #1
 8001ba0:	2300      	movls	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001ba8:	f00e f915 	bl	800fdd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	22e4      	movs	r2, #228	; 0xe4
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00e f8f6 	bl	800fda6 <_Znwj>
 8001bba:	4603      	mov	r3, r0
      }
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN5MDDOs4TaskEEE8max_sizeEv+0x18>)
      }
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	008fb823 	.word	0x008fb823

08001be0 <Run>:


};

// Wrapper para ser chamado via C
extern "C" void Run(Application* App){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
App->Run();
 8001be8:	f000 f9a6 	bl	8001f38 <_ZN11Application3RunEv>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZN5MDDOs5startEv>:
		current_task->lastTime = HAL_GetTick();
		current_task->millis = milis;
	}

	// start OS
	inline void start() {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
		status = STATUS::RUNNING;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	751a      	strb	r2, [r3, #20]
	}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_ZN5MDDOs5sleepEm>:
	// Stop OS
	inline void stop() {
		status = STATUS::STOPPED;
	}

	inline void sleep(uint32_t milis) {
 8001c0e:	b590      	push	{r4, r7, lr}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]

		// salva contexto
		int i = setjmp(current_task->context);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fad6 	bl	80001d0 <setjmp>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]
		if (i == 1) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d104      	bne.n	8001c38 <_ZN5MDDOs5sleepEm+0x2a>
			current_task->status = STATUS::RUNNING;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2201      	movs	r2, #1
 8001c34:	731a      	strb	r2, [r3, #12]

			//vem do scheduler após o delay
			return;
 8001c36:	e016      	b.n	8001c66 <_ZN5MDDOs5sleepEm+0x58>



		} else if (i == 0) { // estabelece delay
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d113      	bne.n	8001c66 <_ZN5MDDOs5sleepEm+0x58>
			// salva contexto
			current_task->status = STATUS::DELAYED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2203      	movs	r2, #3
 8001c44:	731a      	strb	r2, [r3, #12]
			current_task->millis = milis;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
			current_task->lastTime = HAL_GetTick();
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691c      	ldr	r4, [r3, #16]
 8001c52:	f001 f92f 	bl	8002eb4 <HAL_GetTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	60a3      	str	r3, [r4, #8]
//			longjmp(current_task->scheduler_, STATUS::DELAYED);
			longjmp(scheduler, STATUS::DELAYED);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3318      	adds	r3, #24
 8001c5e:	2103      	movs	r1, #3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fabb 	bl	80001dc <longjmp>
		} else {
			// ??

		}
//		tarefas
	}
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}

08001c6c <_ZN10ADCManager9setFactorEf>:
public:
	ADCManager(ADC_HandleTypeDef *hadc_, uint32_t flash_offset_);
	virtual ~ADCManager();

	// Fator de conversão
	inline void setFactor(float factor_val) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	ed87 0a00 	vstr	s0, [r7]
		factor = factor_val;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	611a      	str	r2, [r3, #16]
	}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <_Z8PiscaLEDv>:
bool g_saveSD = false; // armazenar dados no SD CARD
float g_vbat;
bool unlink_result = false; // gerencia unmount do sd card

// OS rodando.. Testa Malloc
void PiscaLED() {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
//	static int count = 0;
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c96:	480a      	ldr	r0, [pc, #40]	; (8001cc0 <_Z8PiscaLEDv+0x34>)
 8001c98:	f002 f848 	bl	8003d2c <HAL_GPIO_WritePin>
	OS.sleep(100);
 8001c9c:	2164      	movs	r1, #100	; 0x64
 8001c9e:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <_Z8PiscaLEDv+0x38>)
 8001ca0:	f7ff ffb5 	bl	8001c0e <_ZN5MDDOs5sleepEm>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <_Z8PiscaLEDv+0x34>)
 8001cac:	f002 f83e 	bl	8003d2c <HAL_GPIO_WritePin>
	OS.sleep(1000);
 8001cb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <_Z8PiscaLEDv+0x38>)
 8001cb6:	f7ff ffaa 	bl	8001c0e <_ZN5MDDOs5sleepEm>
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40021400 	.word	0x40021400
 8001cc4:	200003cc 	.word	0x200003cc

08001cc8 <_Z10SDCARDLoopv>:
//void PiscaLED2() {
//	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	OS.sleep(50);
//}

void SDCARDLoop() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0b4      	sub	sp, #208	; 0xd0
 8001ccc:	af00      	add	r7, sp, #0
	static FRESULT fres, fres_mount = FR_INVALID_DRIVE;
	char file_name[50] = "";
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001cd4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cd8:	222e      	movs	r2, #46	; 0x2e
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00e f8db 	bl	800fe98 <memset>
	char write_text[150] = "";
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	2292      	movs	r2, #146	; 0x92
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f00e f8d2 	bl	800fe98 <memset>
	static bool initSDCard = false;

	if (initSDCard == false) {
 8001cf4:	4b44      	ldr	r3, [pc, #272]	; (8001e08 <_Z10SDCARDLoopv+0x140>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d141      	bne.n	8001d80 <_Z10SDCARDLoopv+0xb8>
		if (unlink_result) {
 8001cfc:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <_Z10SDCARDLoopv+0x144>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <_Z10SDCARDLoopv+0x46>
			MX_FATFS_Init();
 8001d04:	f008 f9b4 	bl	800a070 <MX_FATFS_Init>
			unlink_result = false;
 8001d08:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <_Z10SDCARDLoopv+0x144>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
		}

		fres_mount = sdcard.mount_disk("0:/"); // TODO bloqueia se nao der certo
 8001d0e:	4940      	ldr	r1, [pc, #256]	; (8001e10 <_Z10SDCARDLoopv+0x148>)
 8001d10:	4840      	ldr	r0, [pc, #256]	; (8001e14 <_Z10SDCARDLoopv+0x14c>)
 8001d12:	f7ff fb61 	bl	80013d8 <_ZN6SDCARD10mount_diskEPKc>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <_Z10SDCARDLoopv+0x150>)
 8001d1c:	701a      	strb	r2, [r3, #0]

		if (fres_mount == FR_OK) {
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <_Z10SDCARDLoopv+0x150>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d110      	bne.n	8001d48 <_Z10SDCARDLoopv+0x80>
			int count_files = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
			sdcard.count_files("LOGS", count_files);
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	493b      	ldr	r1, [pc, #236]	; (8001e1c <_Z10SDCARDLoopv+0x154>)
 8001d30:	4838      	ldr	r0, [pc, #224]	; (8001e14 <_Z10SDCARDLoopv+0x14c>)
 8001d32:	f7ff fa7f 	bl	8001234 <_ZN6SDCARD11count_filesEPKcRi>
			printf("Montagem OK. # de arquivos: %d\r\n", count_files);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4839      	ldr	r0, [pc, #228]	; (8001e20 <_Z10SDCARDLoopv+0x158>)
 8001d3c:	f00e ffd8 	bl	8010cf0 <iprintf>
			initSDCard = true;
 8001d40:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <_Z10SDCARDLoopv+0x140>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e057      	b.n	8001df8 <_Z10SDCARDLoopv+0x130>
		} else {
			if (!unlink_result) {
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <_Z10SDCARDLoopv+0x144>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <_Z10SDCARDLoopv+0x9a>
				FATFS_UnLinkDriver("0:/");
 8001d56:	482e      	ldr	r0, [pc, #184]	; (8001e10 <_Z10SDCARDLoopv+0x148>)
 8001d58:	f00d fa24 	bl	800f1a4 <FATFS_UnLinkDriver>
				unlink_result = true;
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <_Z10SDCARDLoopv+0x144>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
			}

			printf("Problema ao montar SDCard. INFO: %d\r\n", fres_mount);
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <_Z10SDCARDLoopv+0x150>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	4619      	mov	r1, r3
 8001d68:	482e      	ldr	r0, [pc, #184]	; (8001e24 <_Z10SDCARDLoopv+0x15c>)
 8001d6a:	f00e ffc1 	bl	8010cf0 <iprintf>
			initSDCard = false;
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <_Z10SDCARDLoopv+0x140>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
			OS.sleep(5000);
 8001d74:	f241 3188 	movw	r1, #5000	; 0x1388
 8001d78:	482b      	ldr	r0, [pc, #172]	; (8001e28 <_Z10SDCARDLoopv+0x160>)
 8001d7a:	f7ff ff48 	bl	8001c0e <_ZN5MDDOs5sleepEm>
 8001d7e:	e040      	b.n	8001e02 <_Z10SDCARDLoopv+0x13a>
			return;
		}
	} else { // cartão OK aqui

		// Armazena buffer lora no SDCard
		if (g_saveSD) {
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <_Z10SDCARDLoopv+0x164>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d037      	beq.n	8001df8 <_Z10SDCARDLoopv+0x130>
			getNameFile(&hrtc, file_name);
 8001d88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4828      	ldr	r0, [pc, #160]	; (8001e30 <_Z10SDCARDLoopv+0x168>)
 8001d90:	f000 f8fe 	bl	8001f90 <_Z11getNameFileP17RTC_HandleTypeDefPc>
			sprintf(write_text, "%f", g_vbat);
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <_Z10SDCARDLoopv+0x16c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbe5 	bl	8000568 <__aeabi_f2d>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	1d38      	adds	r0, r7, #4
 8001da4:	4924      	ldr	r1, [pc, #144]	; (8001e38 <_Z10SDCARDLoopv+0x170>)
 8001da6:	f00f f88b 	bl	8010ec0 <siprintf>
			fres = sdcard.write_file(file_name, write_text,sizeof(write_text));
 8001daa:	1d3a      	adds	r2, r7, #4
 8001dac:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001db0:	2396      	movs	r3, #150	; 0x96
 8001db2:	4818      	ldr	r0, [pc, #96]	; (8001e14 <_Z10SDCARDLoopv+0x14c>)
 8001db4:	f7ff fa9a 	bl	80012ec <_ZN6SDCARD10write_fileEPKcS1_j>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <_Z10SDCARDLoopv+0x174>)
 8001dbe:	701a      	strb	r2, [r3, #0]
			if (fres != FR_OK) {
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <_Z10SDCARDLoopv+0x174>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00e      	beq.n	8001de6 <_Z10SDCARDLoopv+0x11e>
				f_mount(0, "", 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	491d      	ldr	r1, [pc, #116]	; (8001e40 <_Z10SDCARDLoopv+0x178>)
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f00c fb23 	bl	800e418 <f_mount>
				initSDCard = false;
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <_Z10SDCARDLoopv+0x140>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
				printf("Erro ao escrever arquivo: %s\r\n", file_name);
 8001dd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4819      	ldr	r0, [pc, #100]	; (8001e44 <_Z10SDCARDLoopv+0x17c>)
 8001de0:	f00e ff86 	bl	8010cf0 <iprintf>
 8001de4:	e005      	b.n	8001df2 <_Z10SDCARDLoopv+0x12a>
			} else {
				printf("Escrito com sucesso no arquivo: %s\r\n", file_name);
 8001de6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4816      	ldr	r0, [pc, #88]	; (8001e48 <_Z10SDCARDLoopv+0x180>)
 8001dee:	f00e ff7f 	bl	8010cf0 <iprintf>
			}
			g_saveSD = false;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <_Z10SDCARDLoopv+0x164>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
		}
	}

	OS.sleep(5000);
 8001df8:	f241 3188 	movw	r1, #5000	; 0x1388
 8001dfc:	480a      	ldr	r0, [pc, #40]	; (8001e28 <_Z10SDCARDLoopv+0x160>)
 8001dfe:	f7ff ff06 	bl	8001c0e <_ZN5MDDOs5sleepEm>
}
 8001e02:	37d0      	adds	r7, #208	; 0xd0
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200024fa 	.word	0x200024fa
 8001e0c:	200024f8 	.word	0x200024f8
 8001e10:	080148bc 	.word	0x080148bc
 8001e14:	20000440 	.word	0x20000440
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	080148c0 	.word	0x080148c0
 8001e20:	080148c8 	.word	0x080148c8
 8001e24:	080148ec 	.word	0x080148ec
 8001e28:	200003cc 	.word	0x200003cc
 8001e2c:	200024f0 	.word	0x200024f0
 8001e30:	200029b8 	.word	0x200029b8
 8001e34:	200024f4 	.word	0x200024f4
 8001e38:	08014914 	.word	0x08014914
 8001e3c:	200024f9 	.word	0x200024f9
 8001e40:	08014918 	.word	0x08014918
 8001e44:	0801491c 	.word	0x0801491c
 8001e48:	0801493c 	.word	0x0801493c

08001e4c <__tcf_0>:

void ADCLoop() {
	static ADCManager adc(&hadc1, 0); // memoria flash é lida aqui
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4801      	ldr	r0, [pc, #4]	; (8001e58 <__tcf_0+0xc>)
 8001e52:	f7ff f907 	bl	8001064 <_ZN10ADCManagerD1Ev>
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200024fc 	.word	0x200024fc

08001e5c <_Z7ADCLoopv>:
void ADCLoop() {
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
	static ADCManager adc(&hadc1, 0); // memoria flash é lida aqui
 8001e62:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <_Z7ADCLoopv+0xb8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	f3bf 8f5b 	dmb	ish
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <_Z7ADCLoopv+0x4e>
 8001e7e:	4825      	ldr	r0, [pc, #148]	; (8001f14 <_Z7ADCLoopv+0xb8>)
 8001e80:	f00d ff82 	bl	800fd88 <__cxa_guard_acquire>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <_Z7ADCLoopv+0x4e>
 8001e94:	2200      	movs	r2, #0
 8001e96:	4920      	ldr	r1, [pc, #128]	; (8001f18 <_Z7ADCLoopv+0xbc>)
 8001e98:	4820      	ldr	r0, [pc, #128]	; (8001f1c <_Z7ADCLoopv+0xc0>)
 8001e9a:	f7ff f8b7 	bl	800100c <_ZN10ADCManagerC1EP17ADC_HandleTypeDefm>
 8001e9e:	481d      	ldr	r0, [pc, #116]	; (8001f14 <_Z7ADCLoopv+0xb8>)
 8001ea0:	f00d ff7e 	bl	800fda0 <__cxa_guard_release>
 8001ea4:	481e      	ldr	r0, [pc, #120]	; (8001f20 <_Z7ADCLoopv+0xc4>)
 8001ea6:	f00d ffa8 	bl	800fdfa <atexit>
	static bool init = false;
	uint16_t adc_value;

	if(!init){
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <_Z7ADCLoopv+0xc8>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	f083 0301 	eor.w	r3, r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <_Z7ADCLoopv+0x62>
		init = true;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <_Z7ADCLoopv+0xc8>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
	}

//	adc.setChannel(ADC_CHANNEL_1, 1);
	adc.convert();
 8001ebe:	4817      	ldr	r0, [pc, #92]	; (8001f1c <_Z7ADCLoopv+0xc0>)
 8001ec0:	f7ff f8f0 	bl	80010a4 <_ZN10ADCManager7convertEv>
//	adc.filter();
	adc.setFactor((float) (12.6/4096));	// ADC_resolucao / (Vmax - Vmin)
 8001ec4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001f28 <_Z7ADCLoopv+0xcc>
 8001ec8:	4814      	ldr	r0, [pc, #80]	; (8001f1c <_Z7ADCLoopv+0xc0>)
 8001eca:	f7ff fecf 	bl	8001c6c <_ZN10ADCManager9setFactorEf>
	adc_value = adc.getRaw();
 8001ece:	4813      	ldr	r0, [pc, #76]	; (8001f1c <_Z7ADCLoopv+0xc0>)
 8001ed0:	f7ff f936 	bl	8001140 <_ZN10ADCManager6getRawEv>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	80fb      	strh	r3, [r7, #6]
	g_vbat = adc.getVolts();
 8001ed8:	4810      	ldr	r0, [pc, #64]	; (8001f1c <_Z7ADCLoopv+0xc0>)
 8001eda:	f7ff f8ff 	bl	80010dc <_ZN10ADCManager8getVoltsEv>
 8001ede:	eef0 7a40 	vmov.f32	s15, s0
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <_Z7ADCLoopv+0xd0>)
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
	printf("[ADC] value: %d, vbat: %f\r\n",adc_value, g_vbat);
 8001ee8:	88fc      	ldrh	r4, [r7, #6]
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <_Z7ADCLoopv+0xd0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb3a 	bl	8000568 <__aeabi_f2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4621      	mov	r1, r4
 8001efa:	480d      	ldr	r0, [pc, #52]	; (8001f30 <_Z7ADCLoopv+0xd4>)
 8001efc:	f00e fef8 	bl	8010cf0 <iprintf>

	OS.sleep(1000);
 8001f00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f04:	480b      	ldr	r0, [pc, #44]	; (8001f34 <_Z7ADCLoopv+0xd8>)
 8001f06:	f7ff fe82 	bl	8001c0e <_ZN5MDDOs5sleepEm>

}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20002520 	.word	0x20002520
 8001f18:	2000292c 	.word	0x2000292c
 8001f1c:	200024fc 	.word	0x200024fc
 8001f20:	08001e4d 	.word	0x08001e4d
 8001f24:	20002524 	.word	0x20002524
 8001f28:	3b49999a 	.word	0x3b49999a
 8001f2c:	200024f4 	.word	0x200024f4
 8001f30:	08014964 	.word	0x08014964
 8001f34:	200003cc 	.word	0x200003cc

08001f38 <_ZN11Application3RunEv>:

void Application::Run() {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0

	OS.RegisterTask(PiscaLED, "led", 4096);
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <_ZN11Application3RunEv+0x3c>)
 8001f42:	490d      	ldr	r1, [pc, #52]	; (8001f78 <_ZN11Application3RunEv+0x40>)
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <_ZN11Application3RunEv+0x44>)
 8001f46:	f7ff faf1 	bl	800152c <_ZN5MDDOs12RegisterTaskEPFvvEPKci>
//	OS.RegisterTask(PiscaLED2, "led2", 1024); // DEBUG
	OS.RegisterTask(SDCARDLoop, "sdcard", 8192);
 8001f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <_ZN11Application3RunEv+0x48>)
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <_ZN11Application3RunEv+0x4c>)
 8001f52:	480a      	ldr	r0, [pc, #40]	; (8001f7c <_ZN11Application3RunEv+0x44>)
 8001f54:	f7ff faea 	bl	800152c <_ZN5MDDOs12RegisterTaskEPFvvEPKci>
	OS.RegisterTask(ADCLoop, "adc", 1024);
 8001f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <_ZN11Application3RunEv+0x50>)
 8001f5e:	490b      	ldr	r1, [pc, #44]	; (8001f8c <_ZN11Application3RunEv+0x54>)
 8001f60:	4806      	ldr	r0, [pc, #24]	; (8001f7c <_ZN11Application3RunEv+0x44>)
 8001f62:	f7ff fae3 	bl	800152c <_ZN5MDDOs12RegisterTaskEPFvvEPKci>

	OS.start();
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <_ZN11Application3RunEv+0x44>)
 8001f68:	f7ff fe44 	bl	8001bf4 <_ZN5MDDOs5startEv>

	OS.spin();
 8001f6c:	4803      	ldr	r0, [pc, #12]	; (8001f7c <_ZN11Application3RunEv+0x44>)
 8001f6e:	f7ff fb1b 	bl	80015a8 <_ZN5MDDOs4spinEv>

	while (1)
 8001f72:	e7fe      	b.n	8001f72 <_ZN11Application3RunEv+0x3a>
 8001f74:	08014980 	.word	0x08014980
 8001f78:	08001c8d 	.word	0x08001c8d
 8001f7c:	200003cc 	.word	0x200003cc
 8001f80:	08014984 	.word	0x08014984
 8001f84:	08001cc9 	.word	0x08001cc9
 8001f88:	0801498c 	.word	0x0801498c
 8001f8c:	08001e5d 	.word	0x08001e5d

08001f90 <_Z11getNameFileP17RTC_HandleTypeDefPc>:
		;
}

void getNameFile(RTC_HandleTypeDef *hrtc, char *file_name) {
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af04      	add	r7, sp, #16
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

	HAL_RTC_GetTime(hrtc, &time, RTC_FORMAT_BIN);
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f004 f8be 	bl	8006124 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &date, RTC_FORMAT_BIN);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f004 f9bc 	bl	800632e <HAL_RTC_GetDate>

	sprintf(file_name, "LOGS/%d_%d_%d_%d_%d_%d.txt", date.Date, date.Month,
 8001fb6:	7fbb      	ldrb	r3, [r7, #30]
 8001fb8:	461c      	mov	r4, r3
 8001fba:	7f7b      	ldrb	r3, [r7, #29]
 8001fbc:	461d      	mov	r5, r3
			date.Year, time.Hours, time.Minutes, time.Seconds);
 8001fbe:	7ffb      	ldrb	r3, [r7, #31]
 8001fc0:	7a3a      	ldrb	r2, [r7, #8]
 8001fc2:	7a79      	ldrb	r1, [r7, #9]
 8001fc4:	7ab8      	ldrb	r0, [r7, #10]
	sprintf(file_name, "LOGS/%d_%d_%d_%d_%d_%d.txt", date.Date, date.Month,
 8001fc6:	9003      	str	r0, [sp, #12]
 8001fc8:	9102      	str	r1, [sp, #8]
 8001fca:	9201      	str	r2, [sp, #4]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	462b      	mov	r3, r5
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	4904      	ldr	r1, [pc, #16]	; (8001fe4 <_Z11getNameFileP17RTC_HandleTypeDefPc+0x54>)
 8001fd4:	6838      	ldr	r0, [r7, #0]
 8001fd6:	f00e ff73 	bl	8010ec0 <siprintf>
}
 8001fda:	bf00      	nop
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	08014990 	.word	0x08014990

08001fe8 <_Z41__static_initialization_and_destruction_0ii>:
void error_handle(int time) {
	while (1) {
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
		HAL_Delay(time);
	}
}
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10a      	bne.n	800200e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d105      	bne.n	800200e <_Z41__static_initialization_and_destruction_0ii+0x26>
MDDOs OS;
 8002002:	480c      	ldr	r0, [pc, #48]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002004:	f7ff fa58 	bl	80014b8 <_ZN5MDDOsC1Ev>
SDCARD sdcard;
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800200a:	f7ff f8d5 	bl	80011b8 <_ZN6SDCARDC1Ev>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10a      	bne.n	800202a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201a:	4293      	cmp	r3, r2
 800201c:	d105      	bne.n	800202a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800201e:	4806      	ldr	r0, [pc, #24]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002020:	f7ff f8e6 	bl	80011f0 <_ZN6SDCARDD1Ev>
MDDOs OS;
 8002024:	4803      	ldr	r0, [pc, #12]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002026:	f7ff fa5d 	bl	80014e4 <_ZN5MDDOsD1Ev>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200003cc 	.word	0x200003cc
 8002038:	20000440 	.word	0x20000440

0800203c <_GLOBAL__sub_I_Run>:
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
 8002040:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff ffcf 	bl	8001fe8 <_Z41__static_initialization_and_destruction_0ii>
 800204a:	bd80      	pop	{r7, pc}

0800204c <_GLOBAL__sub_D_Run>:
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
 8002050:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff ffc7 	bl	8001fe8 <_Z41__static_initialization_and_destruction_0ii>
 800205a:	bd80      	pop	{r7, pc}

0800205c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char *ptr, int len) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
//	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
	CDC_Transmit_FS((uint8_t*) ptr, len);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4619      	mov	r1, r3
 800206e:	68b8      	ldr	r0, [r7, #8]
 8002070:	f00d fa2a 	bl	800f4c8 <CDC_Transmit_FS>
	return len;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002086:	f000 feaf 	bl	8002de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208a:	f000 f88b 	bl	80021a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800208e:	f000 fa77 	bl	8002580 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002092:	f000 f90b 	bl	80022ac <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8002096:	f000 f9c9 	bl	800242c <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800209a:	f000 f959 	bl	8002350 <MX_I2C1_Init>
  MX_SPI1_Init();
 800209e:	f000 f9e5 	bl	800246c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80020a2:	f000 fa19 	bl	80024d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80020a6:	f000 fa41 	bl	800252c <MX_USART3_UART_Init>
  MX_RTC_Init();
 80020aa:	f000 f999 	bl	80023e0 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80020ae:	f00d f94d 	bl	800f34c <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80020b2:	f007 ffdd 	bl	800a070 <MX_FATFS_Init>
  MX_IWDG_Init();
 80020b6:	f000 f979 	bl	80023ac <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2500);
 80020ba:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80020be:	f000 ff05 	bl	8002ecc <HAL_Delay>

  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != RTC_KEY){
 80020c2:	2100      	movs	r1, #0
 80020c4:	482a      	ldr	r0, [pc, #168]	; (8002170 <main+0xf0>)
 80020c6:	f004 fa2b 	bl	8006520 <HAL_RTCEx_BKUPRead>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f64d 52d6 	movw	r2, #56790	; 0xddd6
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d03b      	beq.n	800214c <main+0xcc>
  	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_KEY);
 80020d4:	f64d 52d6 	movw	r2, #56790	; 0xddd6
 80020d8:	2100      	movs	r1, #0
 80020da:	4825      	ldr	r0, [pc, #148]	; (8002170 <main+0xf0>)
 80020dc:	f004 fa06 	bl	80064ec <HAL_RTCEx_BKUPWrite>
  	  time.Hours = hours;
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <main+0xf4>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	703b      	strb	r3, [r7, #0]
  	  time.Minutes = minutes;
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <main+0xf8>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	707b      	strb	r3, [r7, #1]
  	  time.Seconds = seconds;
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <main+0xfc>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	70bb      	strb	r3, [r7, #2]
  	  time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
  	  time.StoreOperation = RTC_STOREOPERATION_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
  	  if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK)
 80020fa:	463b      	mov	r3, r7
 80020fc:	2200      	movs	r2, #0
 80020fe:	4619      	mov	r1, r3
 8002100:	481b      	ldr	r0, [pc, #108]	; (8002170 <main+0xf0>)
 8002102:	f003 ff52 	bl	8005faa <HAL_RTC_SetTime>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <main+0x92>
  	  {
  		  printf("Definicao da hora falhou.\r\n");
 800210c:	481c      	ldr	r0, [pc, #112]	; (8002180 <main+0x100>)
 800210e:	f00e fe75 	bl	8010dfc <puts>
  	  }
  	  date.WeekDay = weekday;
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <main+0x104>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	753b      	strb	r3, [r7, #20]
  	  date.Month = month;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <main+0x108>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	757b      	strb	r3, [r7, #21]
  	  date.Date = day;
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <main+0x10c>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	75bb      	strb	r3, [r7, #22]
  	  date.Year = year;
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <main+0x110>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	75fb      	strb	r3, [r7, #23]

  	  if (HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK)
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	2200      	movs	r2, #0
 8002130:	4619      	mov	r1, r3
 8002132:	480f      	ldr	r0, [pc, #60]	; (8002170 <main+0xf0>)
 8002134:	f004 f854 	bl	80061e0 <HAL_RTC_SetDate>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <main+0xc4>
  	  {
  		  printf("Definicao da data falhou.\r\n");
 800213e:	4815      	ldr	r0, [pc, #84]	; (8002194 <main+0x114>)
 8002140:	f00e fe5c 	bl	8010dfc <puts>
  	  }
  	  printf("Memoria RTC definida com sucesso\r\n");
 8002144:	4814      	ldr	r0, [pc, #80]	; (8002198 <main+0x118>)
 8002146:	f00e fe59 	bl	8010dfc <puts>
 800214a:	e002      	b.n	8002152 <main+0xd2>
    } else {
  	  printf("RTC lido com sucesso\r\n");
 800214c:	4813      	ldr	r0, [pc, #76]	; (800219c <main+0x11c>)
 800214e:	f00e fe55 	bl	8010dfc <puts>
    }
    printf("Firmware adc-abdi. Ultima atualizacao: %d-%d-%d\r\n", day, month,
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <main+0x10c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <main+0x108>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <main+0x110>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	480f      	ldr	r0, [pc, #60]	; (80021a0 <main+0x120>)
 8002164:	f00e fdc4 	bl	8010cf0 <iprintf>
    		  year);
    Run();
 8002168:	f7ff fd3a 	bl	8001be0 <Run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800216c:	e7fe      	b.n	800216c <main+0xec>
 800216e:	bf00      	nop
 8002170:	200029b8 	.word	0x200029b8
 8002174:	20000005 	.word	0x20000005
 8002178:	20000006 	.word	0x20000006
 800217c:	20000007 	.word	0x20000007
 8002180:	080149ac 	.word	0x080149ac
 8002184:	20000004 	.word	0x20000004
 8002188:	20000002 	.word	0x20000002
 800218c:	20000001 	.word	0x20000001
 8002190:	20000003 	.word	0x20000003
 8002194:	080149c8 	.word	0x080149c8
 8002198:	080149e4 	.word	0x080149e4
 800219c:	08014a08 	.word	0x08014a08
 80021a0:	08014a20 	.word	0x08014a20

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b098      	sub	sp, #96	; 0x60
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ae:	2230      	movs	r2, #48	; 0x30
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f00d fe70 	bl	800fe98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <SystemClock_Config+0x100>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a31      	ldr	r2, [pc, #196]	; (80022a4 <SystemClock_Config+0x100>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <SystemClock_Config+0x100>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <SystemClock_Config+0x104>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <SystemClock_Config+0x104>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <SystemClock_Config+0x104>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 800220e:	230d      	movs	r3, #13
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002218:	2301      	movs	r3, #1
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800221c:	2301      	movs	r3, #1
 800221e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002220:	2302      	movs	r3, #2
 8002222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002224:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002228:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800222a:	2304      	movs	r3, #4
 800222c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800222e:	23a8      	movs	r3, #168	; 0xa8
 8002230:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002232:	2302      	movs	r3, #2
 8002234:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002236:	2307      	movs	r3, #7
 8002238:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800223e:	4618      	mov	r0, r3
 8002240:	f003 f8cc 	bl	80053dc <HAL_RCC_OscConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800224a:	f000 fa71 	bl	8002730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224e:	230f      	movs	r3, #15
 8002250:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002252:	2302      	movs	r3, #2
 8002254:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800225a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	2105      	movs	r1, #5
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fb2d 	bl	80058cc <HAL_RCC_ClockConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002278:	f000 fa5a 	bl	8002730 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800227c:	2302      	movs	r3, #2
 800227e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002284:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fd1a 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002296:	f000 fa4b 	bl	8002730 <Error_Handler>
  }
}
 800229a:	bf00      	nop
 800229c:	3760      	adds	r7, #96	; 0x60
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40007000 	.word	0x40007000

080022ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022b2:	463b      	mov	r3, r7
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <MX_ADC1_Init+0x98>)
 80022c0:	4a21      	ldr	r2, [pc, #132]	; (8002348 <MX_ADC1_Init+0x9c>)
 80022c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <MX_ADC1_Init+0x98>)
 80022c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <MX_ADC1_Init+0x98>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <MX_ADC1_Init+0x98>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <MX_ADC1_Init+0x98>)
 80022da:	2201      	movs	r2, #1
 80022dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <MX_ADC1_Init+0x98>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <MX_ADC1_Init+0x98>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <MX_ADC1_Init+0x98>)
 80022ee:	4a17      	ldr	r2, [pc, #92]	; (800234c <MX_ADC1_Init+0xa0>)
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_ADC1_Init+0x98>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_ADC1_Init+0x98>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_ADC1_Init+0x98>)
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_ADC1_Init+0x98>)
 8002308:	2201      	movs	r2, #1
 800230a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <MX_ADC1_Init+0x98>)
 800230e:	f000 fe01 	bl	8002f14 <HAL_ADC_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002318:	f000 fa0a 	bl	8002730 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800231c:	2301      	movs	r3, #1
 800231e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002320:	2301      	movs	r3, #1
 8002322:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002328:	463b      	mov	r3, r7
 800232a:	4619      	mov	r1, r3
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_ADC1_Init+0x98>)
 800232e:	f000 ff9f 	bl	8003270 <HAL_ADC_ConfigChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002338:	f000 f9fa 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	2000292c 	.word	0x2000292c
 8002348:	40012000 	.word	0x40012000
 800234c:	0f000001 	.word	0x0f000001

08002350 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <MX_I2C1_Init+0x54>)
 8002358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <MX_I2C1_Init+0x50>)
 800235c:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <MX_I2C1_Init+0x58>)
 800235e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <MX_I2C1_Init+0x50>)
 800236e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002374:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002376:	2200      	movs	r2, #0
 8002378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <MX_I2C1_Init+0x50>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800238c:	4804      	ldr	r0, [pc, #16]	; (80023a0 <MX_I2C1_Init+0x50>)
 800238e:	f001 fd0b 	bl	8003da8 <HAL_I2C_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002398:	f000 f9ca 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200028cc 	.word	0x200028cc
 80023a4:	40005400 	.word	0x40005400
 80023a8:	000186a0 	.word	0x000186a0

080023ac <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_IWDG_Init+0x2c>)
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <MX_IWDG_Init+0x30>)
 80023b4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <MX_IWDG_Init+0x2c>)
 80023b8:	2205      	movs	r2, #5
 80023ba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2999;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_IWDG_Init+0x2c>)
 80023be:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80023c2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <MX_IWDG_Init+0x2c>)
 80023c6:	f001 fe33 	bl	8004030 <HAL_IWDG_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80023d0:	f000 f9ae 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20002920 	.word	0x20002920
 80023dc:	40003000 	.word	0x40003000

080023e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MX_RTC_Init+0x44>)
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <MX_RTC_Init+0x48>)
 80023e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_RTC_Init+0x44>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_RTC_Init+0x44>)
 80023f2:	227f      	movs	r2, #127	; 0x7f
 80023f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_RTC_Init+0x44>)
 80023f8:	22ff      	movs	r2, #255	; 0xff
 80023fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_RTC_Init+0x44>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_RTC_Init+0x44>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_RTC_Init+0x44>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_RTC_Init+0x44>)
 8002410:	f003 fd3a 	bl	8005e88 <HAL_RTC_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800241a:	f000 f989 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200029b8 	.word	0x200029b8
 8002428:	40002800 	.word	0x40002800

0800242c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <MX_SDIO_SD_Init+0x38>)
 8002432:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <MX_SDIO_SD_Init+0x3c>)
 8002434:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <MX_SDIO_SD_Init+0x38>)
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <MX_SDIO_SD_Init+0x38>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <MX_SDIO_SD_Init+0x38>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <MX_SDIO_SD_Init+0x38>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <MX_SDIO_SD_Init+0x38>)
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <MX_SDIO_SD_Init+0x38>)
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	200029d8 	.word	0x200029d8
 8002468:	40012c00 	.word	0x40012c00

0800246c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <MX_SPI1_Init+0x64>)
 8002472:	4a18      	ldr	r2, [pc, #96]	; (80024d4 <MX_SPI1_Init+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_SPI1_Init+0x64>)
 8002478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800247c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MX_SPI1_Init+0x64>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_SPI1_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_SPI1_Init+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_SPI1_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_SPI1_Init+0x64>)
 8002498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_SPI1_Init+0x64>)
 80024a0:	2228      	movs	r2, #40	; 0x28
 80024a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <MX_SPI1_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_SPI1_Init+0x64>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_SPI1_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_SPI1_Init+0x64>)
 80024b8:	220a      	movs	r2, #10
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_SPI1_Init+0x64>)
 80024be:	f004 ffcb 	bl	8007458 <HAL_SPI_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024c8:	f000 f932 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20002a5c 	.word	0x20002a5c
 80024d4:	40013000 	.word	0x40013000

080024d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <MX_USART1_UART_Init+0x4c>)
 80024de:	4a12      	ldr	r2, [pc, #72]	; (8002528 <MX_USART1_UART_Init+0x50>)
 80024e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <MX_USART1_UART_Init+0x4c>)
 80024e4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80024e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <MX_USART1_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <MX_USART1_UART_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <MX_USART1_UART_Init+0x4c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <MX_USART1_UART_Init+0x4c>)
 80024fe:	220c      	movs	r2, #12
 8002500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <MX_USART1_UART_Init+0x4c>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_USART1_UART_Init+0x4c>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800250e:	4805      	ldr	r0, [pc, #20]	; (8002524 <MX_USART1_UART_Init+0x4c>)
 8002510:	f005 f82b 	bl	800756a <HAL_UART_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800251a:	f000 f909 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20002974 	.word	0x20002974
 8002528:	40011000 	.word	0x40011000

0800252c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_USART3_UART_Init+0x4c>)
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <MX_USART3_UART_Init+0x50>)
 8002534:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <MX_USART3_UART_Init+0x4c>)
 8002538:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800253c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_USART3_UART_Init+0x4c>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_USART3_UART_Init+0x4c>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_USART3_UART_Init+0x4c>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_USART3_UART_Init+0x4c>)
 8002552:	220c      	movs	r2, #12
 8002554:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_USART3_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_USART3_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_USART3_UART_Init+0x4c>)
 8002564:	f005 f801 	bl	800756a <HAL_UART_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800256e:	f000 f8df 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20002888 	.word	0x20002888
 800257c:	40004800 	.word	0x40004800

08002580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	; 0x30
 8002584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	4b5f      	ldr	r3, [pc, #380]	; (8002718 <MX_GPIO_Init+0x198>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a5e      	ldr	r2, [pc, #376]	; (8002718 <MX_GPIO_Init+0x198>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b5c      	ldr	r3, [pc, #368]	; (8002718 <MX_GPIO_Init+0x198>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	4b58      	ldr	r3, [pc, #352]	; (8002718 <MX_GPIO_Init+0x198>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a57      	ldr	r2, [pc, #348]	; (8002718 <MX_GPIO_Init+0x198>)
 80025bc:	f043 0320 	orr.w	r3, r3, #32
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b55      	ldr	r3, [pc, #340]	; (8002718 <MX_GPIO_Init+0x198>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	4b51      	ldr	r3, [pc, #324]	; (8002718 <MX_GPIO_Init+0x198>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a50      	ldr	r2, [pc, #320]	; (8002718 <MX_GPIO_Init+0x198>)
 80025d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <MX_GPIO_Init+0x198>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <MX_GPIO_Init+0x198>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a49      	ldr	r2, [pc, #292]	; (8002718 <MX_GPIO_Init+0x198>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <MX_GPIO_Init+0x198>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	4b43      	ldr	r3, [pc, #268]	; (8002718 <MX_GPIO_Init+0x198>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a42      	ldr	r2, [pc, #264]	; (8002718 <MX_GPIO_Init+0x198>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b40      	ldr	r3, [pc, #256]	; (8002718 <MX_GPIO_Init+0x198>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <MX_GPIO_Init+0x198>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a3b      	ldr	r2, [pc, #236]	; (8002718 <MX_GPIO_Init+0x198>)
 800262c:	f043 0308 	orr.w	r3, r3, #8
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <MX_GPIO_Init+0x198>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002644:	4835      	ldr	r0, [pc, #212]	; (800271c <MX_GPIO_Init+0x19c>)
 8002646:	f001 fb71 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_RESET);
 800264a:	2200      	movs	r2, #0
 800264c:	2118      	movs	r1, #24
 800264e:	4834      	ldr	r0, [pc, #208]	; (8002720 <MX_GPIO_Init+0x1a0>)
 8002650:	f001 fb6c 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8002654:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265a:	2301      	movs	r3, #1
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	482b      	ldr	r0, [pc, #172]	; (800271c <MX_GPIO_Init+0x19c>)
 800266e:	f001 f9c1 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin;
 8002672:	2318      	movs	r3, #24
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002676:	2301      	movs	r3, #1
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	2300      	movs	r3, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 031c 	add.w	r3, r7, #28
 8002686:	4619      	mov	r1, r3
 8002688:	4825      	ldr	r0, [pc, #148]	; (8002720 <MX_GPIO_Init+0x1a0>)
 800268a:	f001 f9b3 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 800268e:	2301      	movs	r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <MX_GPIO_Init+0x1a4>)
 8002694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 800269a:	f107 031c 	add.w	r3, r7, #28
 800269e:	4619      	mov	r1, r3
 80026a0:	4821      	ldr	r0, [pc, #132]	; (8002728 <MX_GPIO_Init+0x1a8>)
 80026a2:	f001 f9a7 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_INDUT_Pin */
  GPIO_InitStruct.Pin = SENSOR_INDUT_Pin;
 80026a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026b0:	2302      	movs	r3, #2
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SENSOR_INDUT_GPIO_Port, &GPIO_InitStruct);
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	4619      	mov	r1, r3
 80026ba:	4818      	ldr	r0, [pc, #96]	; (800271c <MX_GPIO_Init+0x19c>)
 80026bc:	f001 f99a 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOFT_RESET_Pin */
  GPIO_InitStruct.Pin = SOFT_RESET_Pin;
 80026c0:	2308      	movs	r3, #8
 80026c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <MX_GPIO_Init+0x1a4>)
 80026c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SOFT_RESET_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4816      	ldr	r0, [pc, #88]	; (800272c <MX_GPIO_Init+0x1ac>)
 80026d4:	f001 f98e 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_AUTOCALIB_Pin */
  GPIO_InitStruct.Pin = BUTTON_AUTOCALIB_Pin;
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026dc:	2300      	movs	r3, #0
 80026de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026e0:	2301      	movs	r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_AUTOCALIB_GPIO_Port, &GPIO_InitStruct);
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	4619      	mov	r1, r3
 80026ea:	4810      	ldr	r0, [pc, #64]	; (800272c <MX_GPIO_Init+0x1ac>)
 80026ec:	f001 f982 	bl	80039f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80026f0:	2200      	movs	r2, #0
 80026f2:	2100      	movs	r1, #0
 80026f4:	2006      	movs	r0, #6
 80026f6:	f001 f8b4 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80026fa:	2006      	movs	r0, #6
 80026fc:	f001 f8cd 	bl	800389a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2009      	movs	r0, #9
 8002706:	f001 f8ac 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800270a:	2009      	movs	r0, #9
 800270c:	f001 f8c5 	bl	800389a <HAL_NVIC_EnableIRQ>

}
 8002710:	bf00      	nop
 8002712:	3730      	adds	r7, #48	; 0x30
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	40021400 	.word	0x40021400
 8002720:	40020000 	.word	0x40020000
 8002724:	10110000 	.word	0x10110000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020c00 	.word	0x40020c00

08002730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002734:	b672      	cpsid	i
}
 8002736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002738:	e7fe      	b.n	8002738 <Error_Handler+0x8>
	...

0800273c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_MspInit+0x4c>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a0f      	ldr	r2, [pc, #60]	; (8002788 <HAL_MspInit+0x4c>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_MspInit+0x4c>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_MspInit+0x4c>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_MspInit+0x4c>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_MspInit+0x4c>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_ADC_MspInit+0x7c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d127      	bne.n	80027fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_ADC_MspInit+0x80>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <HAL_ADC_MspInit+0x80>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_ADC_MspInit+0x80>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_ADC_MspInit+0x80>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a0e      	ldr	r2, [pc, #56]	; (800280c <HAL_ADC_MspInit+0x80>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_ADC_MspInit+0x80>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80027e6:	2306      	movs	r3, #6
 80027e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ea:	2303      	movs	r3, #3
 80027ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	; (8002810 <HAL_ADC_MspInit+0x84>)
 80027fa:	f001 f8fb 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40012000 	.word	0x40012000
 800280c:	40023800 	.word	0x40023800
 8002810:	40020000 	.word	0x40020000

08002814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_I2C_MspInit+0x84>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d12b      	bne.n	800288e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_I2C_MspInit+0x88>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_I2C_MspInit+0x88>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_I2C_MspInit+0x88>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002856:	2312      	movs	r3, #18
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800285a:	2301      	movs	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002862:	2304      	movs	r3, #4
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	480c      	ldr	r0, [pc, #48]	; (80028a0 <HAL_I2C_MspInit+0x8c>)
 800286e:	f001 f8c1 	bl	80039f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_I2C_MspInit+0x88>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_I2C_MspInit+0x88>)
 800287c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_I2C_MspInit+0x88>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40005400 	.word	0x40005400
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020400 	.word	0x40020400

080028a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <HAL_RTC_MspInit+0x24>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d102      	bne.n	80028bc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RTC_MspInit+0x28>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40002800 	.word	0x40002800
 80028cc:	42470e3c 	.word	0x42470e3c

080028d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_SD_MspInit+0xc0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d14a      	bne.n	8002988 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b27      	ldr	r3, [pc, #156]	; (8002994 <HAL_SD_MspInit+0xc4>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <HAL_SD_MspInit+0xc4>)
 80028fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_SD_MspInit+0xc4>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_SD_MspInit+0xc4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_SD_MspInit+0xc4>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_SD_MspInit+0xc4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_SD_MspInit+0xc4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_SD_MspInit+0xc4>)
 8002934:	f043 0308 	orr.w	r3, r3, #8
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_SD_MspInit+0xc4>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002946:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800294a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002950:	2301      	movs	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002954:	2302      	movs	r3, #2
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002958:	230c      	movs	r3, #12
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <HAL_SD_MspInit+0xc8>)
 8002964:	f001 f846 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002968:	2304      	movs	r3, #4
 800296a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002970:	2301      	movs	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002974:	2302      	movs	r3, #2
 8002976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002978:	230c      	movs	r3, #12
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4619      	mov	r1, r3
 8002982:	4806      	ldr	r0, [pc, #24]	; (800299c <HAL_SD_MspInit+0xcc>)
 8002984:	f001 f836 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002988:	bf00      	nop
 800298a:	3728      	adds	r7, #40	; 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40023800 	.word	0x40023800
 8002998:	40020800 	.word	0x40020800
 800299c:	40020c00 	.word	0x40020c00

080029a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_SPI_MspInit+0xa4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d13b      	bne.n	8002a3a <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <HAL_SPI_MspInit+0xa8>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_SPI_MspInit+0xa8>)
 80029cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d0:	6453      	str	r3, [r2, #68]	; 0x44
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_SPI_MspInit+0xa8>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_SPI_MspInit+0xa8>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_SPI_MspInit+0xa8>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <HAL_SPI_MspInit+0xa8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 80029fa:	2320      	movs	r3, #32
 80029fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a06:	2302      	movs	r3, #2
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	480d      	ldr	r0, [pc, #52]	; (8002a4c <HAL_SPI_MspInit+0xac>)
 8002a16:	f000 ffed 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
 8002a1a:	23c0      	movs	r3, #192	; 0xc0
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_SPI_MspInit+0xac>)
 8002a36:	f000 ffdd 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a3a:	bf00      	nop
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40013000 	.word	0x40013000
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020000 	.word	0x40020000

08002a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	; 0x30
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 031c 	add.w	r3, r7, #28
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a3b      	ldr	r2, [pc, #236]	; (8002b5c <HAL_UART_MspInit+0x10c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d135      	bne.n	8002ade <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	4b3a      	ldr	r3, [pc, #232]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	4a39      	ldr	r2, [pc, #228]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002a7c:	f043 0310 	orr.w	r3, r3, #16
 8002a80:	6453      	str	r3, [r2, #68]	; 0x44
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a32      	ldr	r2, [pc, #200]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MAX232_TX_Pin|MAX232_RX_Pin;
 8002aaa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002abc:	2307      	movs	r3, #7
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4827      	ldr	r0, [pc, #156]	; (8002b64 <HAL_UART_MspInit+0x114>)
 8002ac8:	f000 ff94 	bl	80039f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2025      	movs	r0, #37	; 0x25
 8002ad2:	f000 fec6 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ad6:	2025      	movs	r0, #37	; 0x25
 8002ad8:	f000 fedf 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002adc:	e039      	b.n	8002b52 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <HAL_UART_MspInit+0x118>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d134      	bne.n	8002b52 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af6:	6413      	str	r3, [r2, #64]	; 0x40
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_UART_MspInit+0x110>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002b20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	2302      	movs	r3, #2
 8002b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b32:	2307      	movs	r3, #7
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	f107 031c 	add.w	r3, r7, #28
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	480b      	ldr	r0, [pc, #44]	; (8002b6c <HAL_UART_MspInit+0x11c>)
 8002b3e:	f000 ff59 	bl	80039f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	2027      	movs	r0, #39	; 0x27
 8002b48:	f000 fe8b 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b4c:	2027      	movs	r0, #39	; 0x27
 8002b4e:	f000 fea4 	bl	800389a <HAL_NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3730      	adds	r7, #48	; 0x30
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40020000 	.word	0x40020000
 8002b68:	40004800 	.word	0x40004800
 8002b6c:	40020400 	.word	0x40020400

08002b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <NMI_Handler+0x4>

08002b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <HardFault_Handler+0x4>

08002b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <MemManage_Handler+0x4>

08002b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <BusFault_Handler+0x4>

08002b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <UsageFault_Handler+0x4>

08002b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bbc:	f000 f966 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f001 f8c9 	bl	8003d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002bd6:	2008      	movs	r0, #8
 8002bd8:	f001 f8c2 	bl	8003d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <USART1_IRQHandler+0x10>)
 8002be6:	f004 fd0d 	bl	8007604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20002974 	.word	0x20002974

08002bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <USART3_IRQHandler+0x10>)
 8002bfa:	f004 fd03 	bl	8007604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20002888 	.word	0x20002888

08002c08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <OTG_FS_IRQHandler+0x10>)
 8002c0e:	f001 fbb1 	bl	8004374 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20006020 	.word	0x20006020

08002c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
	return 1;
 8002c20:	2301      	movs	r3, #1
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_kill>:

int _kill(int pid, int sig)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c36:	f00d f8e7 	bl	800fe08 <__errno>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2216      	movs	r2, #22
 8002c3e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_exit>:

void _exit (int status)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ffe7 	bl	8002c2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c5e:	e7fe      	b.n	8002c5e <_exit+0x12>

08002c60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	e00a      	b.n	8002c88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c72:	f3af 8000 	nop.w
 8002c76:	4601      	mov	r1, r0
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	60ba      	str	r2, [r7, #8]
 8002c7e:	b2ca      	uxtb	r2, r1
 8002c80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	dbf0      	blt.n	8002c72 <_read+0x12>
	}

return len;
 8002c90:	687b      	ldr	r3, [r7, #4]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_isatty>:

int _isatty(int file)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <_sbrk+0x5c>)
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <_sbrk+0x60>)
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <_sbrk+0x64>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <_sbrk+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d207      	bcs.n	8002d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d34:	f00d f868 	bl	800fe08 <__errno>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d42:	e009      	b.n	8002d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <_sbrk+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <_sbrk+0x64>)
 8002d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20020000 	.word	0x20020000
 8002d64:	00004000 	.word	0x00004000
 8002d68:	20002528 	.word	0x20002528
 8002d6c:	20006438 	.word	0x20006438

08002d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <SystemInit+0x20>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <SystemInit+0x20>)
 8002d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d98:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d9a:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da0:	e002      	b.n	8002da8 <LoopCopyDataInit>

08002da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da6:	3304      	adds	r3, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dac:	d3f9      	bcc.n	8002da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dae:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002db0:	4c0b      	ldr	r4, [pc, #44]	; (8002de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db4:	e001      	b.n	8002dba <LoopFillZerobss>

08002db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db8:	3204      	adds	r2, #4

08002dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dbc:	d3fb      	bcc.n	8002db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dbe:	f7ff ffd7 	bl	8002d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f00d f827 	bl	800fe14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc6:	f7ff f95b 	bl	8002080 <main>
  bx  lr    
 8002dca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd4:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8002dd8:	0801544c 	.word	0x0801544c
  ldr r2, =_sbss
 8002ddc:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8002de0:	20006438 	.word	0x20006438

08002de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC_IRQHandler>
	...

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_Init+0x40>)
 8002df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_Init+0x40>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <HAL_Init+0x40>)
 8002dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_Init+0x40>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f000 fd1b 	bl	800384c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f000 f808 	bl	8002e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1c:	f7ff fc8e 	bl	800273c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00

08002e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_InitTick+0x54>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x58>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fd33 	bl	80038b6 <HAL_SYSTICK_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00e      	b.n	8002e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d80a      	bhi.n	8002e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e60:	2200      	movs	r2, #0
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e68:	f000 fcfb 	bl	8003862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <HAL_InitTick+0x5c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000008 	.word	0x20000008
 8002e84:	20000010 	.word	0x20000010
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x20>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000010 	.word	0x20000010
 8002eb0:	20002adc 	.word	0x20002adc

08002eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_GetTick+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20002adc 	.word	0x20002adc

08002ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff ffee 	bl	8002eb4 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee4:	d005      	beq.n	8002ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_Delay+0x44>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ef2:	bf00      	nop
 8002ef4:	f7ff ffde 	bl	8002eb4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d8f7      	bhi.n	8002ef4 <HAL_Delay+0x28>
  {
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000010 	.word	0x20000010

08002f14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e033      	b.n	8002f92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fc2a 	bl	800278c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	f043 0202 	orr.w	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 faa4 	bl	80034b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
 8002f82:	e001      	b.n	8002f88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_Start+0x1a>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0b2      	b.n	800311c <HAL_ADC_Start+0x180>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d018      	beq.n	8002ffe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fdc:	4b52      	ldr	r3, [pc, #328]	; (8003128 <HAL_ADC_Start+0x18c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_ADC_Start+0x190>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0c9a      	lsrs	r2, r3, #18
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ff0:	e002      	b.n	8002ff8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f9      	bne.n	8002ff2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d17a      	bne.n	8003102 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003036:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304a:	d106      	bne.n	800305a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	f023 0206 	bic.w	r2, r3, #6
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	645a      	str	r2, [r3, #68]	; 0x44
 8003058:	e002      	b.n	8003060 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_ADC_Start+0x194>)
 800306a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003074:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2b00      	cmp	r3, #0
 8003080:	d12a      	bne.n	80030d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <HAL_ADC_Start+0x198>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d015      	beq.n	80030b8 <HAL_ADC_Start+0x11c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a29      	ldr	r2, [pc, #164]	; (8003138 <HAL_ADC_Start+0x19c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d105      	bne.n	80030a2 <HAL_ADC_Start+0x106>
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <HAL_ADC_Start+0x194>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a25      	ldr	r2, [pc, #148]	; (800313c <HAL_ADC_Start+0x1a0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d136      	bne.n	800311a <HAL_ADC_Start+0x17e>
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <HAL_ADC_Start+0x194>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d130      	bne.n	800311a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d129      	bne.n	800311a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	e020      	b.n	800311a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <HAL_ADC_Start+0x198>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d11b      	bne.n	800311a <HAL_ADC_Start+0x17e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d114      	bne.n	800311a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	e00b      	b.n	800311a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f043 0210 	orr.w	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	20000008 	.word	0x20000008
 800312c:	431bde83 	.word	0x431bde83
 8003130:	40012300 	.word	0x40012300
 8003134:	40012000 	.word	0x40012000
 8003138:	40012100 	.word	0x40012100
 800313c:	40012200 	.word	0x40012200

08003140 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	d113      	bne.n	8003186 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800316c:	d10b      	bne.n	8003186 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e063      	b.n	800324e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003186:	f7ff fe95 	bl	8002eb4 <HAL_GetTick>
 800318a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800318c:	e021      	b.n	80031d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003194:	d01d      	beq.n	80031d2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_ADC_PollForConversion+0x6c>
 800319c:	f7ff fe8a 	bl	8002eb4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d212      	bcs.n	80031d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d00b      	beq.n	80031d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e03d      	b.n	800324e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d1d6      	bne.n	800318e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0212 	mvn.w	r2, #18
 80031e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d123      	bne.n	800324c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11f      	bne.n	800324c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003224:	2b00      	cmp	r3, #0
 8003226:	d111      	bne.n	800324c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0201 	orr.w	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_ADC_ConfigChannel+0x1c>
 8003288:	2302      	movs	r3, #2
 800328a:	e105      	b.n	8003498 <HAL_ADC_ConfigChannel+0x228>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b09      	cmp	r3, #9
 800329a:	d925      	bls.n	80032e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68d9      	ldr	r1, [r3, #12]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	3b1e      	subs	r3, #30
 80032b2:	2207      	movs	r2, #7
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43da      	mvns	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	400a      	ands	r2, r1
 80032c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68d9      	ldr	r1, [r3, #12]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	4618      	mov	r0, r3
 80032d4:	4603      	mov	r3, r0
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4403      	add	r3, r0
 80032da:	3b1e      	subs	r3, #30
 80032dc:	409a      	lsls	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	e022      	b.n	800332e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6919      	ldr	r1, [r3, #16]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	2207      	movs	r2, #7
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43da      	mvns	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	400a      	ands	r2, r1
 800330a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6919      	ldr	r1, [r3, #16]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	4618      	mov	r0, r3
 800331e:	4603      	mov	r3, r0
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4403      	add	r3, r0
 8003324:	409a      	lsls	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b06      	cmp	r3, #6
 8003334:	d824      	bhi.n	8003380 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	3b05      	subs	r3, #5
 8003348:	221f      	movs	r2, #31
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	400a      	ands	r2, r1
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	4618      	mov	r0, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	3b05      	subs	r3, #5
 8003372:	fa00 f203 	lsl.w	r2, r0, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
 800337e:	e04c      	b.n	800341a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d824      	bhi.n	80033d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	3b23      	subs	r3, #35	; 0x23
 800339a:	221f      	movs	r2, #31
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43da      	mvns	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	400a      	ands	r2, r1
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	4618      	mov	r0, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3b23      	subs	r3, #35	; 0x23
 80033c4:	fa00 f203 	lsl.w	r2, r0, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
 80033d0:	e023      	b.n	800341a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	3b41      	subs	r3, #65	; 0x41
 80033e4:	221f      	movs	r2, #31
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	400a      	ands	r2, r1
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	4618      	mov	r0, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	3b41      	subs	r3, #65	; 0x41
 800340e:	fa00 f203 	lsl.w	r2, r0, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_ADC_ConfigChannel+0x234>)
 800341c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <HAL_ADC_ConfigChannel+0x238>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d109      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1cc>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b12      	cmp	r3, #18
 800342e:	d105      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a19      	ldr	r2, [pc, #100]	; (80034a8 <HAL_ADC_ConfigChannel+0x238>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d123      	bne.n	800348e <HAL_ADC_ConfigChannel+0x21e>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b10      	cmp	r3, #16
 800344c:	d003      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x1e6>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b11      	cmp	r3, #17
 8003454:	d11b      	bne.n	800348e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b10      	cmp	r3, #16
 8003468:	d111      	bne.n	800348e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_ADC_ConfigChannel+0x23c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <HAL_ADC_ConfigChannel+0x240>)
 8003470:	fba2 2303 	umull	r2, r3, r2, r3
 8003474:	0c9a      	lsrs	r2, r3, #18
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003480:	e002      	b.n	8003488 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3b01      	subs	r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f9      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40012300 	.word	0x40012300
 80034a8:	40012000 	.word	0x40012000
 80034ac:	20000008 	.word	0x20000008
 80034b0:	431bde83 	.word	0x431bde83

080034b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034bc:	4b79      	ldr	r3, [pc, #484]	; (80036a4 <ADC_Init+0x1f0>)
 80034be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	021a      	lsls	r2, r3, #8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800350c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <ADC_Init+0x1f4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d022      	beq.n	8003592 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800355a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800357c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6899      	ldr	r1, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	e00f      	b.n	80035b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0202 	bic.w	r2, r2, #2
 80035c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6899      	ldr	r1, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7e1b      	ldrb	r3, [r3, #24]
 80035cc:	005a      	lsls	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6859      	ldr	r1, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	3b01      	subs	r3, #1
 800360c:	035a      	lsls	r2, r3, #13
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	e007      	b.n	8003628 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003626:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	3b01      	subs	r3, #1
 8003644:	051a      	lsls	r2, r3, #20
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800365c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800366a:	025a      	lsls	r2, r3, #9
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6899      	ldr	r1, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	029a      	lsls	r2, r3, #10
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40012300 	.word	0x40012300
 80036a8:	0f000001 	.word	0x0f000001

080036ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	60d3      	str	r3, [r2, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <__NVIC_GetPriorityGrouping+0x18>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f003 0307 	and.w	r3, r3, #7
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	2b00      	cmp	r3, #0
 8003720:	db0b      	blt.n	800373a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	f003 021f 	and.w	r2, r3, #31
 8003728:	4907      	ldr	r1, [pc, #28]	; (8003748 <__NVIC_EnableIRQ+0x38>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2001      	movs	r0, #1
 8003732:	fa00 f202 	lsl.w	r2, r0, r2
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000e100 	.word	0xe000e100

0800374c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db0a      	blt.n	8003776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	490c      	ldr	r1, [pc, #48]	; (8003798 <__NVIC_SetPriority+0x4c>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	0112      	lsls	r2, r2, #4
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	440b      	add	r3, r1
 8003770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003774:	e00a      	b.n	800378c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4908      	ldr	r1, [pc, #32]	; (800379c <__NVIC_SetPriority+0x50>)
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	3b04      	subs	r3, #4
 8003784:	0112      	lsls	r2, r2, #4
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	440b      	add	r3, r1
 800378a:	761a      	strb	r2, [r3, #24]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000e100 	.word	0xe000e100
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f1c3 0307 	rsb	r3, r3, #7
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	bf28      	it	cs
 80037be:	2304      	movcs	r3, #4
 80037c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3304      	adds	r3, #4
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d902      	bls.n	80037d0 <NVIC_EncodePriority+0x30>
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3b03      	subs	r3, #3
 80037ce:	e000      	b.n	80037d2 <NVIC_EncodePriority+0x32>
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43da      	mvns	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	401a      	ands	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	43d9      	mvns	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f8:	4313      	orrs	r3, r2
         );
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3724      	adds	r7, #36	; 0x24
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3b01      	subs	r3, #1
 8003814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003818:	d301      	bcc.n	800381e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381a:	2301      	movs	r3, #1
 800381c:	e00f      	b.n	800383e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800381e:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <SysTick_Config+0x40>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3b01      	subs	r3, #1
 8003824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003826:	210f      	movs	r1, #15
 8003828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800382c:	f7ff ff8e 	bl	800374c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <SysTick_Config+0x40>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <SysTick_Config+0x40>)
 8003838:	2207      	movs	r2, #7
 800383a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	e000e010 	.word	0xe000e010

0800384c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff29 	bl	80036ac <__NVIC_SetPriorityGrouping>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003874:	f7ff ff3e 	bl	80036f4 <__NVIC_GetPriorityGrouping>
 8003878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	6978      	ldr	r0, [r7, #20]
 8003880:	f7ff ff8e 	bl	80037a0 <NVIC_EncodePriority>
 8003884:	4602      	mov	r2, r0
 8003886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff5d 	bl	800374c <__NVIC_SetPriority>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	4603      	mov	r3, r0
 80038a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff31 	bl	8003710 <__NVIC_EnableIRQ>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ffa2 	bl	8003808 <SysTick_Config>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7ff faea 	bl	8002eb4 <HAL_GetTick>
 80038e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d008      	beq.n	8003900 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2280      	movs	r2, #128	; 0x80
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e052      	b.n	80039a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0216 	bic.w	r2, r2, #22
 800390e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800391e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d103      	bne.n	8003930 <HAL_DMA_Abort+0x62>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0208 	bic.w	r2, r2, #8
 800393e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003950:	e013      	b.n	800397a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003952:	f7ff faaf 	bl	8002eb4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b05      	cmp	r3, #5
 800395e:	d90c      	bls.n	800397a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2203      	movs	r2, #3
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e015      	b.n	80039a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e4      	bne.n	8003952 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	223f      	movs	r2, #63	; 0x3f
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d004      	beq.n	80039cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2280      	movs	r2, #128	; 0x80
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e00c      	b.n	80039e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2205      	movs	r2, #5
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b089      	sub	sp, #36	; 0x24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	e16b      	b.n	8003ce8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a10:	2201      	movs	r2, #1
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	f040 815a 	bne.w	8003ce2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d005      	beq.n	8003a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d130      	bne.n	8003aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2203      	movs	r2, #3
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 0201 	and.w	r2, r3, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d017      	beq.n	8003ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d123      	bne.n	8003b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	08da      	lsrs	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3208      	adds	r2, #8
 8003af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	220f      	movs	r2, #15
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	08da      	lsrs	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3208      	adds	r2, #8
 8003b32:	69b9      	ldr	r1, [r7, #24]
 8003b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2203      	movs	r2, #3
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0203 	and.w	r2, r3, #3
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80b4 	beq.w	8003ce2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <HAL_GPIO_Init+0x30c>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	4a5f      	ldr	r2, [pc, #380]	; (8003d00 <HAL_GPIO_Init+0x30c>)
 8003b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b88:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <HAL_GPIO_Init+0x30c>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b96:	4a5b      	ldr	r2, [pc, #364]	; (8003d04 <HAL_GPIO_Init+0x310>)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	220f      	movs	r2, #15
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a52      	ldr	r2, [pc, #328]	; (8003d08 <HAL_GPIO_Init+0x314>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02b      	beq.n	8003c1a <HAL_GPIO_Init+0x226>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a51      	ldr	r2, [pc, #324]	; (8003d0c <HAL_GPIO_Init+0x318>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d025      	beq.n	8003c16 <HAL_GPIO_Init+0x222>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a50      	ldr	r2, [pc, #320]	; (8003d10 <HAL_GPIO_Init+0x31c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01f      	beq.n	8003c12 <HAL_GPIO_Init+0x21e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a4f      	ldr	r2, [pc, #316]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d019      	beq.n	8003c0e <HAL_GPIO_Init+0x21a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a4e      	ldr	r2, [pc, #312]	; (8003d18 <HAL_GPIO_Init+0x324>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_GPIO_Init+0x216>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4d      	ldr	r2, [pc, #308]	; (8003d1c <HAL_GPIO_Init+0x328>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00d      	beq.n	8003c06 <HAL_GPIO_Init+0x212>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4c      	ldr	r2, [pc, #304]	; (8003d20 <HAL_GPIO_Init+0x32c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <HAL_GPIO_Init+0x20e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4b      	ldr	r2, [pc, #300]	; (8003d24 <HAL_GPIO_Init+0x330>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_GPIO_Init+0x20a>
 8003bfa:	2307      	movs	r3, #7
 8003bfc:	e00e      	b.n	8003c1c <HAL_GPIO_Init+0x228>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	e00c      	b.n	8003c1c <HAL_GPIO_Init+0x228>
 8003c02:	2306      	movs	r3, #6
 8003c04:	e00a      	b.n	8003c1c <HAL_GPIO_Init+0x228>
 8003c06:	2305      	movs	r3, #5
 8003c08:	e008      	b.n	8003c1c <HAL_GPIO_Init+0x228>
 8003c0a:	2304      	movs	r3, #4
 8003c0c:	e006      	b.n	8003c1c <HAL_GPIO_Init+0x228>
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e004      	b.n	8003c1c <HAL_GPIO_Init+0x228>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e002      	b.n	8003c1c <HAL_GPIO_Init+0x228>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_GPIO_Init+0x228>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	f002 0203 	and.w	r2, r2, #3
 8003c22:	0092      	lsls	r2, r2, #2
 8003c24:	4093      	lsls	r3, r2
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c2c:	4935      	ldr	r1, [pc, #212]	; (8003d04 <HAL_GPIO_Init+0x310>)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	089b      	lsrs	r3, r3, #2
 8003c32:	3302      	adds	r3, #2
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <HAL_GPIO_Init+0x334>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c5e:	4a32      	ldr	r2, [pc, #200]	; (8003d28 <HAL_GPIO_Init+0x334>)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c64:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_GPIO_Init+0x334>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c88:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <HAL_GPIO_Init+0x334>)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <HAL_GPIO_Init+0x334>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <HAL_GPIO_Init+0x334>)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <HAL_GPIO_Init+0x334>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cdc:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <HAL_GPIO_Init+0x334>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	2b0f      	cmp	r3, #15
 8003cec:	f67f ae90 	bls.w	8003a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	3724      	adds	r7, #36	; 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40013800 	.word	0x40013800
 8003d08:	40020000 	.word	0x40020000
 8003d0c:	40020400 	.word	0x40020400
 8003d10:	40020800 	.word	0x40020800
 8003d14:	40020c00 	.word	0x40020c00
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40021400 	.word	0x40021400
 8003d20:	40021800 	.word	0x40021800
 8003d24:	40021c00 	.word	0x40021c00
 8003d28:	40013c00 	.word	0x40013c00

08003d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d3c:	787b      	ldrb	r3, [r7, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d48:	e003      	b.n	8003d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	041a      	lsls	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	619a      	str	r2, [r3, #24]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d76:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f806 	bl	8003d90 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40013c00 	.word	0x40013c00

08003d90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e12b      	b.n	8004012 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fe fd20 	bl	8002814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	; 0x24
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f001 ff32 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8003e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4a81      	ldr	r2, [pc, #516]	; (800401c <HAL_I2C_Init+0x274>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d807      	bhi.n	8003e2c <HAL_I2C_Init+0x84>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a80      	ldr	r2, [pc, #512]	; (8004020 <HAL_I2C_Init+0x278>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	bf94      	ite	ls
 8003e24:	2301      	movls	r3, #1
 8003e26:	2300      	movhi	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e006      	b.n	8003e3a <HAL_I2C_Init+0x92>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a7d      	ldr	r2, [pc, #500]	; (8004024 <HAL_I2C_Init+0x27c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	bf94      	ite	ls
 8003e34:	2301      	movls	r3, #1
 8003e36:	2300      	movhi	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0e7      	b.n	8004012 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a78      	ldr	r2, [pc, #480]	; (8004028 <HAL_I2C_Init+0x280>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	0c9b      	lsrs	r3, r3, #18
 8003e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4a6a      	ldr	r2, [pc, #424]	; (800401c <HAL_I2C_Init+0x274>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d802      	bhi.n	8003e7c <HAL_I2C_Init+0xd4>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	e009      	b.n	8003e90 <HAL_I2C_Init+0xe8>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	4a69      	ldr	r2, [pc, #420]	; (800402c <HAL_I2C_Init+0x284>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	3301      	adds	r3, #1
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ea2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	495c      	ldr	r1, [pc, #368]	; (800401c <HAL_I2C_Init+0x274>)
 8003eac:	428b      	cmp	r3, r1
 8003eae:	d819      	bhi.n	8003ee4 <HAL_I2C_Init+0x13c>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e59      	subs	r1, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_I2C_Init+0x138>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1e59      	subs	r1, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	e051      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	e04f      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d111      	bne.n	8003f10 <HAL_I2C_Init+0x168>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e58      	subs	r0, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	440b      	add	r3, r1
 8003efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e012      	b.n	8003f36 <HAL_I2C_Init+0x18e>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e58      	subs	r0, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	0099      	lsls	r1, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Init+0x196>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e022      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10e      	bne.n	8003f64 <HAL_I2C_Init+0x1bc>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1e58      	subs	r0, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	440b      	add	r3, r1
 8003f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f62:	e00f      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1e58      	subs	r0, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	0099      	lsls	r1, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	6809      	ldr	r1, [r1, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6911      	ldr	r1, [r2, #16]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68d2      	ldr	r2, [r2, #12]
 8003fbe:	4311      	orrs	r1, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	000186a0 	.word	0x000186a0
 8004020:	001e847f 	.word	0x001e847f
 8004024:	003d08ff 	.word	0x003d08ff
 8004028:	431bde83 	.word	0x431bde83
 800402c:	10624dd3 	.word	0x10624dd3

08004030 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e034      	b.n	80040ac <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800404a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f245 5255 	movw	r2, #21845	; 0x5555
 8004054:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6852      	ldr	r2, [r2, #4]
 800405e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6892      	ldr	r2, [r2, #8]
 8004068:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800406a:	f7fe ff23 	bl	8002eb4 <HAL_GetTick>
 800406e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004070:	e00f      	b.n	8004092 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004072:	f7fe ff1f 	bl	8002eb4 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b30      	cmp	r3, #48	; 0x30
 800407e:	d908      	bls.n	8004092 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e00c      	b.n	80040ac <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e8      	bne.n	8004072 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80040a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80040c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d6:	b08f      	sub	sp, #60	; 0x3c
 80040d8:	af0a      	add	r7, sp, #40	; 0x28
 80040da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e10f      	b.n	8004306 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f00b fb29 	bl	800f758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2203      	movs	r2, #3
 800410a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f004 fd92 	bl	8008c4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	687e      	ldr	r6, [r7, #4]
 8004132:	466d      	mov	r5, sp
 8004134:	f106 0410 	add.w	r4, r6, #16
 8004138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800413c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004140:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004144:	e885 0003 	stmia.w	r5, {r0, r1}
 8004148:	1d33      	adds	r3, r6, #4
 800414a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800414c:	6838      	ldr	r0, [r7, #0]
 800414e:	f004 fc69 	bl	8008a24 <USB_CoreInit>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0d0      	b.n	8004306 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f004 fd80 	bl	8008c70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004170:	2300      	movs	r3, #0
 8004172:	73fb      	strb	r3, [r7, #15]
 8004174:	e04a      	b.n	800420c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	333d      	adds	r3, #61	; 0x3d
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800418a:	7bfa      	ldrb	r2, [r7, #15]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	333c      	adds	r3, #60	; 0x3c
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	b298      	uxth	r0, r3
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	3342      	adds	r3, #66	; 0x42
 80041b2:	4602      	mov	r2, r0
 80041b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	333f      	adds	r3, #63	; 0x3f
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	3344      	adds	r3, #68	; 0x44
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041de:	7bfa      	ldrb	r2, [r7, #15]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	3348      	adds	r3, #72	; 0x48
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041f2:	7bfa      	ldrb	r2, [r7, #15]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3350      	adds	r3, #80	; 0x50
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	3301      	adds	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d3af      	bcc.n	8004176 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
 800421a:	e044      	b.n	80042a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004244:	7bfa      	ldrb	r2, [r7, #15]
 8004246:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800425e:	7bfa      	ldrb	r2, [r7, #15]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800428a:	7bfa      	ldrb	r2, [r7, #15]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	3301      	adds	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d3b5      	bcc.n	800421c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	603b      	str	r3, [r7, #0]
 80042b6:	687e      	ldr	r6, [r7, #4]
 80042b8:	466d      	mov	r5, sp
 80042ba:	f106 0410 	add.w	r4, r6, #16
 80042be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ce:	1d33      	adds	r3, r6, #4
 80042d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042d2:	6838      	ldr	r0, [r7, #0]
 80042d4:	f004 fcf6 	bl	8008cc4 <USB_DevInit>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e00d      	b.n	8004306 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f005 fd3e 	bl	8009d80 <USB_DevDisconnect>

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800430e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_PCD_Start+0x1c>
 8004326:	2302      	movs	r3, #2
 8004328:	e020      	b.n	800436c <HAL_PCD_Start+0x5e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	2b01      	cmp	r3, #1
 8004338:	d109      	bne.n	800434e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800433e:	2b01      	cmp	r3, #1
 8004340:	d005      	beq.n	800434e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f004 fc6a 	bl	8008c2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f005 fcee 	bl	8009d3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b08d      	sub	sp, #52	; 0x34
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f005 fdac 	bl	8009ee8 <USB_GetMode>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 839d 	bne.w	8004ad2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f005 fd10 	bl	8009dc2 <USB_ReadInterrupts>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8393 	beq.w	8004ad0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f005 fd07 	bl	8009dc2 <USB_ReadInterrupts>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d107      	bne.n	80043ce <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f002 0202 	and.w	r2, r2, #2
 80043cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f005 fcf5 	bl	8009dc2 <USB_ReadInterrupts>
 80043d8:	4603      	mov	r3, r0
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d161      	bne.n	80044a6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0210 	bic.w	r2, r2, #16
 80043f0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f003 020f 	and.w	r2, r3, #15
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3304      	adds	r3, #4
 8004410:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	0c5b      	lsrs	r3, r3, #17
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	2b02      	cmp	r3, #2
 800441c:	d124      	bne.n	8004468 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d035      	beq.n	8004496 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	6a38      	ldr	r0, [r7, #32]
 800443e:	f005 fb5b 	bl	8009af8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800444e:	441a      	add	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004460:	441a      	add	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	619a      	str	r2, [r3, #24]
 8004466:	e016      	b.n	8004496 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	0c5b      	lsrs	r3, r3, #17
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	2b06      	cmp	r3, #6
 8004472:	d110      	bne.n	8004496 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800447a:	2208      	movs	r2, #8
 800447c:	4619      	mov	r1, r3
 800447e:	6a38      	ldr	r0, [r7, #32]
 8004480:	f005 fb3a 	bl	8009af8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004490:	441a      	add	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0210 	orr.w	r2, r2, #16
 80044a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f005 fc89 	bl	8009dc2 <USB_ReadInterrupts>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044ba:	d16e      	bne.n	800459a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f005 fc8f 	bl	8009de8 <USB_ReadDevAllOutEpInterrupt>
 80044ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80044cc:	e062      	b.n	8004594 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d057      	beq.n	8004588 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f005 fcb4 	bl	8009e50 <USB_ReadDevOutEPInterrupt>
 80044e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00c      	beq.n	800450e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004500:	461a      	mov	r2, r3
 8004502:	2301      	movs	r3, #1
 8004504:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fdb1 	bl	8005070 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00c      	beq.n	8004532 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	461a      	mov	r2, r3
 8004526:	2308      	movs	r3, #8
 8004528:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800452a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 feab 	bl	8005288 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004548:	461a      	mov	r2, r3
 800454a:	2310      	movs	r3, #16
 800454c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	2320      	movs	r3, #32
 8004568:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d009      	beq.n	8004588 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	461a      	mov	r2, r3
 8004582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004586:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	3301      	adds	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d199      	bne.n	80044ce <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f005 fc0f 	bl	8009dc2 <USB_ReadInterrupts>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045ae:	f040 80c0 	bne.w	8004732 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f005 fc30 	bl	8009e1c <USB_ReadDevAllInEpInterrupt>
 80045bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045c2:	e0b2      	b.n	800472a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80a7 	beq.w	800471e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f005 fc56 	bl	8009e8c <USB_ReadDevInEPInterrupt>
 80045e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d057      	beq.n	800469c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	2201      	movs	r2, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	43db      	mvns	r3, r3
 8004606:	69f9      	ldr	r1, [r7, #28]
 8004608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800460c:	4013      	ands	r3, r2
 800460e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	461a      	mov	r2, r3
 800461e:	2301      	movs	r3, #1
 8004620:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d132      	bne.n	8004690 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	3348      	adds	r3, #72	; 0x48
 800463a:	6819      	ldr	r1, [r3, #0]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4403      	add	r3, r0
 800464a:	3344      	adds	r3, #68	; 0x44
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4419      	add	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4403      	add	r3, r0
 800465e:	3348      	adds	r3, #72	; 0x48
 8004660:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d113      	bne.n	8004690 <HAL_PCD_IRQHandler+0x31c>
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3350      	adds	r3, #80	; 0x50
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d108      	bne.n	8004690 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004688:	461a      	mov	r2, r3
 800468a:	2101      	movs	r1, #1
 800468c:	f005 fc5e 	bl	8009f4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	b2db      	uxtb	r3, r3
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f00b f8df 	bl	800f85a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b2:	461a      	mov	r2, r3
 80046b4:	2308      	movs	r3, #8
 80046b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	461a      	mov	r2, r3
 80046d0:	2310      	movs	r3, #16
 80046d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	461a      	mov	r2, r3
 80046ec:	2340      	movs	r3, #64	; 0x40
 80046ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004706:	461a      	mov	r2, r3
 8004708:	2302      	movs	r3, #2
 800470a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fc1b 	bl	8004f54 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	3301      	adds	r3, #1
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f af49 	bne.w	80045c4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f005 fb43 	bl	8009dc2 <USB_ReadInterrupts>
 800473c:	4603      	mov	r3, r0
 800473e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004746:	d122      	bne.n	800478e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004762:	2b01      	cmp	r3, #1
 8004764:	d108      	bne.n	8004778 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800476e:	2100      	movs	r1, #0
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fe27 	bl	80053c4 <HAL_PCDEx_LPM_Callback>
 8004776:	e002      	b.n	800477e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f00b f8e5 	bl	800f948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800478c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f005 fb15 	bl	8009dc2 <USB_ReadInterrupts>
 8004798:	4603      	mov	r3, r0
 800479a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a2:	d112      	bne.n	80047ca <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d102      	bne.n	80047ba <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f00b f8a1 	bl	800f8fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047c8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f005 faf7 	bl	8009dc2 <USB_ReadInterrupts>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	f040 80c7 	bne.w	8004970 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2110      	movs	r1, #16
 80047fc:	4618      	mov	r0, r3
 80047fe:	f004 fbc5 	bl	8008f8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004802:	2300      	movs	r3, #0
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004806:	e056      	b.n	80048b6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	461a      	mov	r2, r3
 8004816:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800481a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800483a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800485a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004868:	461a      	mov	r2, r3
 800486a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800486e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800488e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	3301      	adds	r3, #1
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048bc:	429a      	cmp	r2, r3
 80048be:	d3a3      	bcc.n	8004808 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80048d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d016      	beq.n	800490a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ec:	f043 030b 	orr.w	r3, r3, #11
 80048f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004902:	f043 030b 	orr.w	r3, r3, #11
 8004906:	6453      	str	r3, [r2, #68]	; 0x44
 8004908:	e015      	b.n	8004936 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004918:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800491c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004920:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004930:	f043 030b 	orr.w	r3, r3, #11
 8004934:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004944:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004948:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800495a:	461a      	mov	r2, r3
 800495c:	f005 faf6 	bl	8009f4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800496e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f005 fa24 	bl	8009dc2 <USB_ReadInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004984:	d124      	bne.n	80049d0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f005 faba 	bl	8009f04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f004 fb5a 	bl	800904e <USB_GetDevSpeed>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681c      	ldr	r4, [r3, #0]
 80049a6:	f001 f959 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 80049aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	4620      	mov	r0, r4
 80049b6:	f004 f897 	bl	8008ae8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f00a ff75 	bl	800f8aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80049ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f005 f9f4 	bl	8009dc2 <USB_ReadInterrupts>
 80049da:	4603      	mov	r3, r0
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d10a      	bne.n	80049fa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f00a ff52 	bl	800f88e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f002 0208 	and.w	r2, r2, #8
 80049f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f005 f9df 	bl	8009dc2 <USB_ReadInterrupts>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0e:	d10f      	bne.n	8004a30 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f00a ffb4 	bl	800f988 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f005 f9c4 	bl	8009dc2 <USB_ReadInterrupts>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a44:	d10f      	bne.n	8004a66 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f00a ff87 	bl	800f964 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f005 f9a9 	bl	8009dc2 <USB_ReadInterrupts>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7a:	d10a      	bne.n	8004a92 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f00a ff95 	bl	800f9ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f005 f993 	bl	8009dc2 <USB_ReadInterrupts>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d115      	bne.n	8004ad2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f00a ff85 	bl	800f9c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	e000      	b.n	8004ad2 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004ad0:	bf00      	nop
    }
  }
}
 8004ad2:	3734      	adds	r7, #52	; 0x34
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd90      	pop	{r4, r7, pc}

08004ad8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_PCD_SetAddress+0x1a>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e013      	b.n	8004b1a <HAL_PCD_SetAddress+0x42>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f005 f8f1 	bl	8009cf2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	4608      	mov	r0, r1
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4603      	mov	r3, r0
 8004b32:	70fb      	strb	r3, [r7, #3]
 8004b34:	460b      	mov	r3, r1
 8004b36:	803b      	strh	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	da0f      	bge.n	8004b68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	3338      	adds	r3, #56	; 0x38
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	705a      	strb	r2, [r3, #1]
 8004b66:	e00f      	b.n	8004b88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	f003 020f 	and.w	r2, r3, #15
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3304      	adds	r3, #4
 8004b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b94:	883a      	ldrh	r2, [r7, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	78ba      	ldrb	r2, [r7, #2]
 8004b9e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bb2:	78bb      	ldrb	r3, [r7, #2]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d102      	bne.n	8004bbe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_PCD_EP_Open+0xaa>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e00e      	b.n	8004bea <HAL_PCD_EP_Open+0xc8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68f9      	ldr	r1, [r7, #12]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f004 fa5c 	bl	8009098 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004be8:	7afb      	ldrb	r3, [r7, #11]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da0f      	bge.n	8004c26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	f003 020f 	and.w	r2, r3, #15
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	3338      	adds	r3, #56	; 0x38
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4413      	add	r3, r2
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	705a      	strb	r2, [r3, #1]
 8004c24:	e00f      	b.n	8004c46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	f003 020f 	and.w	r2, r3, #15
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_PCD_EP_Close+0x6e>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e00e      	b.n	8004c7e <HAL_PCD_EP_Close+0x8c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f004 fa9a 	bl	80091a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	460b      	mov	r3, r1
 8004c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c96:	7afb      	ldrb	r3, [r7, #11]
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	3304      	adds	r3, #4
 8004cae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc8:	7afb      	ldrb	r3, [r7, #11]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d102      	bne.n	8004ce2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ce2:	7afb      	ldrb	r3, [r7, #11]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	f004 fd75 	bl	80097e8 <USB_EP0StartXfer>
 8004cfe:	e008      	b.n	8004d12 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	6979      	ldr	r1, [r7, #20]
 8004d0e:	f004 fb27 	bl	8009360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	f003 020f 	and.w	r2, r3, #15
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d5c:	7afb      	ldrb	r3, [r7, #11]
 8004d5e:	f003 020f 	and.w	r2, r3, #15
 8004d62:	4613      	mov	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	3338      	adds	r3, #56	; 0x38
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	3304      	adds	r3, #4
 8004d72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2200      	movs	r2, #0
 8004d84:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d8c:	7afb      	ldrb	r3, [r7, #11]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004da6:	7afb      	ldrb	r3, [r7, #11]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6979      	ldr	r1, [r7, #20]
 8004dbe:	f004 fd13 	bl	80097e8 <USB_EP0StartXfer>
 8004dc2:	e008      	b.n	8004dd6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6979      	ldr	r1, [r7, #20]
 8004dd2:	f004 fac5 	bl	8009360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	f003 020f 	and.w	r2, r3, #15
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d901      	bls.n	8004dfe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e050      	b.n	8004ea0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	da0f      	bge.n	8004e26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	f003 020f 	and.w	r2, r3, #15
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	3338      	adds	r3, #56	; 0x38
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4413      	add	r3, r2
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	705a      	strb	r2, [r3, #1]
 8004e24:	e00d      	b.n	8004e42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e26:	78fa      	ldrb	r2, [r7, #3]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	3304      	adds	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_PCD_EP_SetStall+0x82>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e01e      	b.n	8004ea0 <HAL_PCD_EP_SetStall+0xc0>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68f9      	ldr	r1, [r7, #12]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f004 fe6a 	bl	8009b4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	b2d9      	uxtb	r1, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e90:	461a      	mov	r2, r3
 8004e92:	f005 f85b 	bl	8009f4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	f003 020f 	and.w	r2, r3, #15
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d901      	bls.n	8004ec6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e042      	b.n	8004f4c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	da0f      	bge.n	8004eee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	3338      	adds	r3, #56	; 0x38
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	705a      	strb	r2, [r3, #1]
 8004eec:	e00f      	b.n	8004f0e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	4413      	add	r3, r2
 8004f04:	3304      	adds	r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_PCD_EP_ClrStall+0x86>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e00e      	b.n	8004f4c <HAL_PCD_EP_ClrStall+0xa4>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f004 fe72 	bl	8009c26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	3338      	adds	r3, #56	; 0x38
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	4413      	add	r3, r2
 8004f78:	3304      	adds	r3, #4
 8004f7a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d901      	bls.n	8004f8c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e06c      	b.n	8005066 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d902      	bls.n	8004fa8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	3303      	adds	r3, #3
 8004fac:	089b      	lsrs	r3, r3, #2
 8004fae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fb0:	e02b      	b.n	800500a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d902      	bls.n	8004fce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3303      	adds	r3, #3
 8004fd2:	089b      	lsrs	r3, r3, #2
 8004fd4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68d9      	ldr	r1, [r3, #12]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	4603      	mov	r3, r0
 8004fec:	6978      	ldr	r0, [r7, #20]
 8004fee:	f004 fd4e 	bl	8009a8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	441a      	add	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	441a      	add	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	b29b      	uxth	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	429a      	cmp	r2, r3
 800501e:	d809      	bhi.n	8005034 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005028:	429a      	cmp	r2, r3
 800502a:	d203      	bcs.n	8005034 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1be      	bne.n	8004fb2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	429a      	cmp	r2, r3
 800503e:	d811      	bhi.n	8005064 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	2201      	movs	r2, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	43db      	mvns	r3, r3
 800505a:	6939      	ldr	r1, [r7, #16]
 800505c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005060:	4013      	ands	r3, r2
 8005062:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	333c      	adds	r3, #60	; 0x3c
 8005088:	3304      	adds	r3, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	f040 80a0 	bne.w	80051e8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d015      	beq.n	80050de <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a72      	ldr	r2, [pc, #456]	; (8005280 <PCD_EP_OutXfrComplete_int+0x210>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	f240 80dd 	bls.w	8005276 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80d7 	beq.w	8005276 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	461a      	mov	r2, r3
 80050d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050da:	6093      	str	r3, [r2, #8]
 80050dc:	e0cb      	b.n	8005276 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d009      	beq.n	80050fc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	2320      	movs	r3, #32
 80050f8:	6093      	str	r3, [r2, #8]
 80050fa:	e0bc      	b.n	8005276 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	f040 80b7 	bne.w	8005276 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a5d      	ldr	r2, [pc, #372]	; (8005280 <PCD_EP_OutXfrComplete_int+0x210>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d90f      	bls.n	8005130 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	461a      	mov	r2, r3
 8005128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512c:	6093      	str	r3, [r2, #8]
 800512e:	e0a2      	b.n	8005276 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005142:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	0159      	lsls	r1, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	440b      	add	r3, r1
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005156:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4403      	add	r3, r0
 8005166:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800516a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4403      	add	r3, r0
 800518e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4419      	add	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4403      	add	r3, r0
 80051a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80051a8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d114      	bne.n	80051da <PCD_EP_OutXfrComplete_int+0x16a>
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d108      	bne.n	80051da <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051d2:	461a      	mov	r2, r3
 80051d4:	2101      	movs	r1, #1
 80051d6:	f004 feb9 	bl	8009f4c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f00a fb1f 	bl	800f824 <HAL_PCD_DataOutStageCallback>
 80051e6:	e046      	b.n	8005276 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a26      	ldr	r2, [pc, #152]	; (8005284 <PCD_EP_OutXfrComplete_int+0x214>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d124      	bne.n	800523a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	461a      	mov	r2, r3
 8005208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520c:	6093      	str	r3, [r2, #8]
 800520e:	e032      	b.n	8005276 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	461a      	mov	r2, r3
 8005228:	2320      	movs	r3, #32
 800522a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f00a faf6 	bl	800f824 <HAL_PCD_DataOutStageCallback>
 8005238:	e01d      	b.n	8005276 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d114      	bne.n	800526a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d108      	bne.n	800526a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005262:	461a      	mov	r2, r3
 8005264:	2100      	movs	r1, #0
 8005266:	f004 fe71 	bl	8009f4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f00a fad7 	bl	800f824 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	4f54300a 	.word	0x4f54300a
 8005284:	4f54310a 	.word	0x4f54310a

08005288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	333c      	adds	r3, #60	; 0x3c
 80052a0:	3304      	adds	r3, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <PCD_EP_OutSetupPacket_int+0x88>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d90e      	bls.n	80052dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	461a      	mov	r2, r3
 80052d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f00a fa8f 	bl	800f800 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <PCD_EP_OutSetupPacket_int+0x88>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d90c      	bls.n	8005304 <PCD_EP_OutSetupPacket_int+0x7c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d108      	bne.n	8005304 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052fc:	461a      	mov	r2, r3
 80052fe:	2101      	movs	r1, #1
 8005300:	f004 fe24 	bl	8009f4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	4f54300a 	.word	0x4f54300a

08005314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
 8005320:	4613      	mov	r3, r2
 8005322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d107      	bne.n	8005342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005332:	883b      	ldrh	r3, [r7, #0]
 8005334:	0419      	lsls	r1, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	430a      	orrs	r2, r1
 800533e:	629a      	str	r2, [r3, #40]	; 0x28
 8005340:	e028      	b.n	8005394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	0c1b      	lsrs	r3, r3, #16
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005350:	2300      	movs	r3, #0
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	e00d      	b.n	8005372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	3340      	adds	r3, #64	; 0x40
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4413      	add	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	3301      	adds	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	3b01      	subs	r3, #1
 8005378:	429a      	cmp	r2, r3
 800537a:	d3ec      	bcc.n	8005356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800537c:	883b      	ldrh	r3, [r7, #0]
 800537e:	0418      	lsls	r0, r3, #16
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	3b01      	subs	r3, #1
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	4302      	orrs	r2, r0
 800538c:	3340      	adds	r3, #64	; 0x40
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	887a      	ldrh	r2, [r7, #2]
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e264      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d075      	beq.n	80054e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053fa:	4ba3      	ldr	r3, [pc, #652]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
 8005402:	2b04      	cmp	r3, #4
 8005404:	d00c      	beq.n	8005420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005406:	4ba0      	ldr	r3, [pc, #640]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800540e:	2b08      	cmp	r3, #8
 8005410:	d112      	bne.n	8005438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005412:	4b9d      	ldr	r3, [pc, #628]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800541e:	d10b      	bne.n	8005438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005420:	4b99      	ldr	r3, [pc, #612]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d05b      	beq.n	80054e4 <HAL_RCC_OscConfig+0x108>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d157      	bne.n	80054e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e23f      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d106      	bne.n	8005450 <HAL_RCC_OscConfig+0x74>
 8005442:	4b91      	ldr	r3, [pc, #580]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a90      	ldr	r2, [pc, #576]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e01d      	b.n	800548c <HAL_RCC_OscConfig+0xb0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005458:	d10c      	bne.n	8005474 <HAL_RCC_OscConfig+0x98>
 800545a:	4b8b      	ldr	r3, [pc, #556]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a8a      	ldr	r2, [pc, #552]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	4b88      	ldr	r3, [pc, #544]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a87      	ldr	r2, [pc, #540]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800546c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e00b      	b.n	800548c <HAL_RCC_OscConfig+0xb0>
 8005474:	4b84      	ldr	r3, [pc, #528]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a83      	ldr	r2, [pc, #524]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800547a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b81      	ldr	r3, [pc, #516]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a80      	ldr	r2, [pc, #512]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d013      	beq.n	80054bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fd fd0e 	bl	8002eb4 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800549c:	f7fd fd0a 	bl	8002eb4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	; 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e204      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	4b76      	ldr	r3, [pc, #472]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0xc0>
 80054ba:	e014      	b.n	80054e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fd fcfa 	bl	8002eb4 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c4:	f7fd fcf6 	bl	8002eb4 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b64      	cmp	r3, #100	; 0x64
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e1f0      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d6:	4b6c      	ldr	r3, [pc, #432]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0xe8>
 80054e2:	e000      	b.n	80054e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d063      	beq.n	80055ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054f2:	4b65      	ldr	r3, [pc, #404]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054fe:	4b62      	ldr	r3, [pc, #392]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005506:	2b08      	cmp	r3, #8
 8005508:	d11c      	bne.n	8005544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800550a:	4b5f      	ldr	r3, [pc, #380]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d116      	bne.n	8005544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005516:	4b5c      	ldr	r3, [pc, #368]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_RCC_OscConfig+0x152>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d001      	beq.n	800552e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e1c4      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552e:	4b56      	ldr	r3, [pc, #344]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4952      	ldr	r1, [pc, #328]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005542:	e03a      	b.n	80055ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800554c:	4b4f      	ldr	r3, [pc, #316]	; (800568c <HAL_RCC_OscConfig+0x2b0>)
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fd fcaf 	bl	8002eb4 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800555a:	f7fd fcab 	bl	8002eb4 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e1a5      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	4b46      	ldr	r3, [pc, #280]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005578:	4b43      	ldr	r3, [pc, #268]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4940      	ldr	r1, [pc, #256]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005588:	4313      	orrs	r3, r2
 800558a:	600b      	str	r3, [r1, #0]
 800558c:	e015      	b.n	80055ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800558e:	4b3f      	ldr	r3, [pc, #252]	; (800568c <HAL_RCC_OscConfig+0x2b0>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fd fc8e 	bl	8002eb4 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800559c:	f7fd fc8a 	bl	8002eb4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e184      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	4b36      	ldr	r3, [pc, #216]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d030      	beq.n	8005628 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ce:	4b30      	ldr	r3, [pc, #192]	; (8005690 <HAL_RCC_OscConfig+0x2b4>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d4:	f7fd fc6e 	bl	8002eb4 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055dc:	f7fd fc6a 	bl	8002eb4 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e164      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	4b26      	ldr	r3, [pc, #152]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 80055f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x200>
 80055fa:	e015      	b.n	8005628 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055fc:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCC_OscConfig+0x2b4>)
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005602:	f7fd fc57 	bl	8002eb4 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800560a:	f7fd fc53 	bl	8002eb4 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e14d      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800561e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f0      	bne.n	800560a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80a0 	beq.w	8005776 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005636:	2300      	movs	r3, #0
 8005638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10f      	bne.n	8005666 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005646:	2300      	movs	r3, #0
 8005648:	60bb      	str	r3, [r7, #8]
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	4a0e      	ldr	r2, [pc, #56]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005654:	6413      	str	r3, [r2, #64]	; 0x40
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <HAL_RCC_OscConfig+0x2ac>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005662:	2301      	movs	r3, #1
 8005664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCC_OscConfig+0x2b8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d121      	bne.n	80056b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005672:	4b08      	ldr	r3, [pc, #32]	; (8005694 <HAL_RCC_OscConfig+0x2b8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a07      	ldr	r2, [pc, #28]	; (8005694 <HAL_RCC_OscConfig+0x2b8>)
 8005678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567e:	f7fd fc19 	bl	8002eb4 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005684:	e011      	b.n	80056aa <HAL_RCC_OscConfig+0x2ce>
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800
 800568c:	42470000 	.word	0x42470000
 8005690:	42470e80 	.word	0x42470e80
 8005694:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005698:	f7fd fc0c 	bl	8002eb4 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e106      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056aa:	4b85      	ldr	r3, [pc, #532]	; (80058c0 <HAL_RCC_OscConfig+0x4e4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d106      	bne.n	80056cc <HAL_RCC_OscConfig+0x2f0>
 80056be:	4b81      	ldr	r3, [pc, #516]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a80      	ldr	r2, [pc, #512]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ca:	e01c      	b.n	8005706 <HAL_RCC_OscConfig+0x32a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d10c      	bne.n	80056ee <HAL_RCC_OscConfig+0x312>
 80056d4:	4b7b      	ldr	r3, [pc, #492]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	4a7a      	ldr	r2, [pc, #488]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80056da:	f043 0304 	orr.w	r3, r3, #4
 80056de:	6713      	str	r3, [r2, #112]	; 0x70
 80056e0:	4b78      	ldr	r3, [pc, #480]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a77      	ldr	r2, [pc, #476]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
 80056ec:	e00b      	b.n	8005706 <HAL_RCC_OscConfig+0x32a>
 80056ee:	4b75      	ldr	r3, [pc, #468]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a74      	ldr	r2, [pc, #464]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
 80056fa:	4b72      	ldr	r3, [pc, #456]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a71      	ldr	r2, [pc, #452]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 8005700:	f023 0304 	bic.w	r3, r3, #4
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d015      	beq.n	800573a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570e:	f7fd fbd1 	bl	8002eb4 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005714:	e00a      	b.n	800572c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005716:	f7fd fbcd 	bl	8002eb4 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f241 3288 	movw	r2, #5000	; 0x1388
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e0c5      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572c:	4b65      	ldr	r3, [pc, #404]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 800572e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ee      	beq.n	8005716 <HAL_RCC_OscConfig+0x33a>
 8005738:	e014      	b.n	8005764 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573a:	f7fd fbbb 	bl	8002eb4 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005740:	e00a      	b.n	8005758 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005742:	f7fd fbb7 	bl	8002eb4 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e0af      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005758:	4b5a      	ldr	r3, [pc, #360]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ee      	bne.n	8005742 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d105      	bne.n	8005776 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576a:	4b56      	ldr	r3, [pc, #344]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	4a55      	ldr	r2, [pc, #340]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 8005770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005774:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 809b 	beq.w	80058b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005780:	4b50      	ldr	r3, [pc, #320]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 030c 	and.w	r3, r3, #12
 8005788:	2b08      	cmp	r3, #8
 800578a:	d05c      	beq.n	8005846 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d141      	bne.n	8005818 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005794:	4b4c      	ldr	r3, [pc, #304]	; (80058c8 <HAL_RCC_OscConfig+0x4ec>)
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579a:	f7fd fb8b 	bl	8002eb4 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a2:	f7fd fb87 	bl	8002eb4 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e081      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b4:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f0      	bne.n	80057a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	019b      	lsls	r3, r3, #6
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	3b01      	subs	r3, #1
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	061b      	lsls	r3, r3, #24
 80057e4:	4937      	ldr	r1, [pc, #220]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ea:	4b37      	ldr	r3, [pc, #220]	; (80058c8 <HAL_RCC_OscConfig+0x4ec>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fd fb60 	bl	8002eb4 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fd fb5c 	bl	8002eb4 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e056      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580a:	4b2e      	ldr	r3, [pc, #184]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0f0      	beq.n	80057f8 <HAL_RCC_OscConfig+0x41c>
 8005816:	e04e      	b.n	80058b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005818:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <HAL_RCC_OscConfig+0x4ec>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581e:	f7fd fb49 	bl	8002eb4 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005826:	f7fd fb45 	bl	8002eb4 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e03f      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005838:	4b22      	ldr	r3, [pc, #136]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <HAL_RCC_OscConfig+0x44a>
 8005844:	e037      	b.n	80058b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e032      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005852:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <HAL_RCC_OscConfig+0x4e8>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d028      	beq.n	80058b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800586a:	429a      	cmp	r2, r3
 800586c:	d121      	bne.n	80058b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005878:	429a      	cmp	r2, r3
 800587a:	d11a      	bne.n	80058b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005882:	4013      	ands	r3, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005888:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800588a:	4293      	cmp	r3, r2
 800588c:	d111      	bne.n	80058b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	3b01      	subs	r3, #1
 800589c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d107      	bne.n	80058b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40007000 	.word	0x40007000
 80058c4:	40023800 	.word	0x40023800
 80058c8:	42470060 	.word	0x42470060

080058cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0cc      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058e0:	4b68      	ldr	r3, [pc, #416]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d90c      	bls.n	8005908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ee:	4b65      	ldr	r3, [pc, #404]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b63      	ldr	r3, [pc, #396]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d001      	beq.n	8005908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0b8      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d020      	beq.n	8005956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005920:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4a58      	ldr	r2, [pc, #352]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800592a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005938:	4b53      	ldr	r3, [pc, #332]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a52      	ldr	r2, [pc, #328]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005944:	4b50      	ldr	r3, [pc, #320]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	494d      	ldr	r1, [pc, #308]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d044      	beq.n	80059ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596a:	4b47      	ldr	r3, [pc, #284]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d119      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e07f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d003      	beq.n	800598a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005986:	2b03      	cmp	r3, #3
 8005988:	d107      	bne.n	800599a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598a:	4b3f      	ldr	r3, [pc, #252]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e06f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599a:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e067      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059aa:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 0203 	bic.w	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	4934      	ldr	r1, [pc, #208]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059bc:	f7fd fa7a 	bl	8002eb4 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c2:	e00a      	b.n	80059da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c4:	f7fd fa76 	bl	8002eb4 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e04f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059da:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 020c 	and.w	r2, r3, #12
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d1eb      	bne.n	80059c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d20c      	bcs.n	8005a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e032      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4916      	ldr	r1, [pc, #88]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	490e      	ldr	r1, [pc, #56]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a52:	f000 f821 	bl	8005a98 <HAL_RCC_GetSysClockFreq>
 8005a56:	4602      	mov	r2, r0
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	490a      	ldr	r1, [pc, #40]	; (8005a8c <HAL_RCC_ClockConfig+0x1c0>)
 8005a64:	5ccb      	ldrb	r3, [r1, r3]
 8005a66:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6a:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_RCC_ClockConfig+0x1c8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fd f9da 	bl	8002e2c <HAL_InitTick>

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40023c00 	.word	0x40023c00
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	08014b14 	.word	0x08014b14
 8005a90:	20000008 	.word	0x20000008
 8005a94:	2000000c 	.word	0x2000000c

08005a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab0:	4b67      	ldr	r3, [pc, #412]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 030c 	and.w	r3, r3, #12
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d00d      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	f200 80bd 	bhi.w	8005c3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0x34>
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d003      	beq.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aca:	e0b7      	b.n	8005c3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005acc:	4b61      	ldr	r3, [pc, #388]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ace:	60bb      	str	r3, [r7, #8]
       break;
 8005ad0:	e0b7      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ad2:	4b61      	ldr	r3, [pc, #388]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ad4:	60bb      	str	r3, [r7, #8]
      break;
 8005ad6:	e0b4      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ad8:	4b5d      	ldr	r3, [pc, #372]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ae2:	4b5b      	ldr	r3, [pc, #364]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d04d      	beq.n	8005b8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aee:	4b58      	ldr	r3, [pc, #352]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	099b      	lsrs	r3, r3, #6
 8005af4:	461a      	mov	r2, r3
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005afe:	f04f 0100 	mov.w	r1, #0
 8005b02:	ea02 0800 	and.w	r8, r2, r0
 8005b06:	ea03 0901 	and.w	r9, r3, r1
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	014b      	lsls	r3, r1, #5
 8005b18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b1c:	0142      	lsls	r2, r0, #5
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	ebb0 0008 	subs.w	r0, r0, r8
 8005b26:	eb61 0109 	sbc.w	r1, r1, r9
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	018b      	lsls	r3, r1, #6
 8005b34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b38:	0182      	lsls	r2, r0, #6
 8005b3a:	1a12      	subs	r2, r2, r0
 8005b3c:	eb63 0301 	sbc.w	r3, r3, r1
 8005b40:	f04f 0000 	mov.w	r0, #0
 8005b44:	f04f 0100 	mov.w	r1, #0
 8005b48:	00d9      	lsls	r1, r3, #3
 8005b4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b4e:	00d0      	lsls	r0, r2, #3
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	eb12 0208 	adds.w	r2, r2, r8
 8005b58:	eb43 0309 	adc.w	r3, r3, r9
 8005b5c:	f04f 0000 	mov.w	r0, #0
 8005b60:	f04f 0100 	mov.w	r1, #0
 8005b64:	0259      	lsls	r1, r3, #9
 8005b66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b6a:	0250      	lsls	r0, r2, #9
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4610      	mov	r0, r2
 8005b72:	4619      	mov	r1, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	f7fb f894 	bl	8000ca8 <__aeabi_uldivmod>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4613      	mov	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	e04a      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	099b      	lsrs	r3, r3, #6
 8005b90:	461a      	mov	r2, r3
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b9a:	f04f 0100 	mov.w	r1, #0
 8005b9e:	ea02 0400 	and.w	r4, r2, r0
 8005ba2:	ea03 0501 	and.w	r5, r3, r1
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	4629      	mov	r1, r5
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	014b      	lsls	r3, r1, #5
 8005bb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bb8:	0142      	lsls	r2, r0, #5
 8005bba:	4610      	mov	r0, r2
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	1b00      	subs	r0, r0, r4
 8005bc0:	eb61 0105 	sbc.w	r1, r1, r5
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	018b      	lsls	r3, r1, #6
 8005bce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bd2:	0182      	lsls	r2, r0, #6
 8005bd4:	1a12      	subs	r2, r2, r0
 8005bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8005bda:	f04f 0000 	mov.w	r0, #0
 8005bde:	f04f 0100 	mov.w	r1, #0
 8005be2:	00d9      	lsls	r1, r3, #3
 8005be4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005be8:	00d0      	lsls	r0, r2, #3
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	1912      	adds	r2, r2, r4
 8005bf0:	eb45 0303 	adc.w	r3, r5, r3
 8005bf4:	f04f 0000 	mov.w	r0, #0
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	0299      	lsls	r1, r3, #10
 8005bfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c02:	0290      	lsls	r0, r2, #10
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	f7fb f848 	bl	8000ca8 <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	60bb      	str	r3, [r7, #8]
      break;
 8005c3a:	e002      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c3c:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c3e:	60bb      	str	r3, [r7, #8]
      break;
 8005c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c42:	68bb      	ldr	r3, [r7, #8]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800
 8005c54:	00f42400 	.word	0x00f42400
 8005c58:	007a1200 	.word	0x007a1200

08005c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000008 	.word	0x20000008

08005c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c78:	f7ff fff0 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	0a9b      	lsrs	r3, r3, #10
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4903      	ldr	r1, [pc, #12]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c8a:	5ccb      	ldrb	r3, [r1, r3]
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40023800 	.word	0x40023800
 8005c98:	08014b24 	.word	0x08014b24

08005c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ca0:	f7ff ffdc 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0b5b      	lsrs	r3, r3, #13
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	08014b24 	.word	0x08014b24

08005cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d035      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cec:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf2:	f7fd f8df 	bl	8002eb4 <HAL_GetTick>
 8005cf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cfa:	f7fd f8db 	bl	8002eb4 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e0b0      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d0c:	4b5b      	ldr	r3, [pc, #364]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	019a      	lsls	r2, r3, #6
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	071b      	lsls	r3, r3, #28
 8005d24:	4955      	ldr	r1, [pc, #340]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d2c:	4b52      	ldr	r3, [pc, #328]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d32:	f7fd f8bf 	bl	8002eb4 <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d38:	e008      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d3a:	f7fd f8bb 	bl	8002eb4 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e090      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d4c:	4b4b      	ldr	r3, [pc, #300]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8083 	beq.w	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	4b44      	ldr	r3, [pc, #272]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	4a43      	ldr	r2, [pc, #268]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d74:	6413      	str	r3, [r2, #64]	; 0x40
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d82:	4b3f      	ldr	r3, [pc, #252]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a3e      	ldr	r2, [pc, #248]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d8e:	f7fd f891 	bl	8002eb4 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d96:	f7fd f88d 	bl	8002eb4 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e062      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005da8:	4b35      	ldr	r3, [pc, #212]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02f      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dd2:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ddc:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005de2:	4b28      	ldr	r3, [pc, #160]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005de8:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dee:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d114      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dfa:	f7fd f85b 	bl	8002eb4 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fd f857 	bl	8002eb4 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e02a      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0ee      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e30:	d10d      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e46:	490d      	ldr	r1, [pc, #52]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]
 8005e4c:	e005      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e58:	6093      	str	r3, [r2, #8]
 8005e5a:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e66:	4905      	ldr	r1, [pc, #20]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	42470068 	.word	0x42470068
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40007000 	.word	0x40007000
 8005e84:	42470e40 	.word	0x42470e40

08005e88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e083      	b.n	8005fa2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	7f5b      	ldrb	r3, [r3, #29]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d105      	bne.n	8005eb0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fc fcfa 	bl	80028a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	22ca      	movs	r2, #202	; 0xca
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2253      	movs	r2, #83	; 0x53
 8005ec4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 faa8 	bl	800641c <RTC_EnterInitMode>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	22ff      	movs	r2, #255	; 0xff
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2204      	movs	r2, #4
 8005ede:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e05e      	b.n	8005fa2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6899      	ldr	r1, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68d2      	ldr	r2, [r2, #12]
 8005f1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6919      	ldr	r1, [r3, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	041a      	lsls	r2, r3, #16
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10e      	bne.n	8005f70 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa3a 	bl	80063cc <HAL_RTC_WaitForSynchro>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	22ff      	movs	r2, #255	; 0xff
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e018      	b.n	8005fa2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	22ff      	movs	r2, #255	; 0xff
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
  }
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005faa:	b590      	push	{r4, r7, lr}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	7f1b      	ldrb	r3, [r3, #28]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_RTC_SetTime+0x1c>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e0aa      	b.n	800611c <HAL_RTC_SetTime+0x172>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d126      	bne.n	8006026 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fa3f 	bl	8006474 <RTC_ByteToBcd2>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fa38 	bl	8006474 <RTC_ByteToBcd2>
 8006004:	4603      	mov	r3, r0
 8006006:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006008:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	789b      	ldrb	r3, [r3, #2]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fa30 	bl	8006474 <RTC_ByteToBcd2>
 8006014:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006016:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	78db      	ldrb	r3, [r3, #3]
 800601e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e018      	b.n	8006058 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006046:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800604c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	78db      	ldrb	r3, [r3, #3]
 8006052:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	22ca      	movs	r2, #202	; 0xca
 800605e:	625a      	str	r2, [r3, #36]	; 0x24
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2253      	movs	r2, #83	; 0x53
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f9d7 	bl	800641c <RTC_EnterInitMode>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00b      	beq.n	800608c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	22ff      	movs	r2, #255	; 0xff
 800607a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2204      	movs	r2, #4
 8006080:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e047      	b.n	800611c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006096:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800609a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060aa:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6899      	ldr	r1, [r3, #8]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d111      	bne.n	8006106 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f972 	bl	80063cc <HAL_RTC_WaitForSynchro>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	22ff      	movs	r2, #255	; 0xff
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2204      	movs	r2, #4
 80060fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e00a      	b.n	800611c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	22ff      	movs	r2, #255	; 0xff
 800610c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800611a:	2300      	movs	r3, #0
  }
}
 800611c:	4618      	mov	r0, r3
 800611e:	371c      	adds	r7, #28
 8006120:	46bd      	mov	sp, r7
 8006122:	bd90      	pop	{r4, r7, pc}

08006124 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006156:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800615a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006166:	b2da      	uxtb	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	0a1b      	lsrs	r3, r3, #8
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006176:	b2da      	uxtb	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	b2db      	uxtb	r3, r3
 8006190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006194:	b2da      	uxtb	r2, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d11a      	bne.n	80061d6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 f983 	bl	80064b0 <RTC_Bcd2ToByte>
 80061aa:	4603      	mov	r3, r0
 80061ac:	461a      	mov	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	785b      	ldrb	r3, [r3, #1]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 f97a 	bl	80064b0 <RTC_Bcd2ToByte>
 80061bc:	4603      	mov	r3, r0
 80061be:	461a      	mov	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	789b      	ldrb	r3, [r3, #2]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f971 	bl	80064b0 <RTC_Bcd2ToByte>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	7f1b      	ldrb	r3, [r3, #28]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_RTC_SetDate+0x1c>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e094      	b.n	8006326 <HAL_RTC_SetDate+0x146>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2202      	movs	r2, #2
 8006206:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10e      	bne.n	800622c <HAL_RTC_SetDate+0x4c>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	f003 0310 	and.w	r3, r3, #16
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	f023 0310 	bic.w	r3, r3, #16
 8006222:	b2db      	uxtb	r3, r3
 8006224:	330a      	adds	r3, #10
 8006226:	b2da      	uxtb	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d11c      	bne.n	800626c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	78db      	ldrb	r3, [r3, #3]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f91c 	bl	8006474 <RTC_ByteToBcd2>
 800623c:	4603      	mov	r3, r0
 800623e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 f915 	bl	8006474 <RTC_ByteToBcd2>
 800624a:	4603      	mov	r3, r0
 800624c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800624e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	789b      	ldrb	r3, [r3, #2]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 f90d 	bl	8006474 <RTC_ByteToBcd2>
 800625a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800625c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	e00e      	b.n	800628a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	78db      	ldrb	r3, [r3, #3]
 8006270:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	785b      	ldrb	r3, [r3, #1]
 8006276:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006278:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800627e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	22ca      	movs	r2, #202	; 0xca
 8006290:	625a      	str	r2, [r3, #36]	; 0x24
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2253      	movs	r2, #83	; 0x53
 8006298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f8be 	bl	800641c <RTC_EnterInitMode>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	22ff      	movs	r2, #255	; 0xff
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2204      	movs	r2, #4
 80062b2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e033      	b.n	8006326 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062dc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d111      	bne.n	8006310 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f86d 	bl	80063cc <HAL_RTC_WaitForSynchro>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	22ff      	movs	r2, #255	; 0xff
 80062fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2204      	movs	r2, #4
 8006304:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e00a      	b.n	8006326 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	22ff      	movs	r2, #255	; 0xff
 8006316:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006324:	2300      	movs	r3, #0
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	bd90      	pop	{r4, r7, pc}

0800632e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006348:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800634c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	0a1b      	lsrs	r3, r3, #8
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	b2da      	uxtb	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	0b5b      	lsrs	r3, r3, #13
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	b2da      	uxtb	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d11a      	bne.n	80063c2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	78db      	ldrb	r3, [r3, #3]
 8006390:	4618      	mov	r0, r3
 8006392:	f000 f88d 	bl	80064b0 <RTC_Bcd2ToByte>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f884 	bl	80064b0 <RTC_Bcd2ToByte>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	789b      	ldrb	r3, [r3, #2]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f87b 	bl	80064b0 <RTC_Bcd2ToByte>
 80063ba:	4603      	mov	r3, r0
 80063bc:	461a      	mov	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063e8:	f7fc fd64 	bl	8002eb4 <HAL_GetTick>
 80063ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80063ee:	e009      	b.n	8006404 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063f0:	f7fc fd60 	bl	8002eb4 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063fe:	d901      	bls.n	8006404 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e007      	b.n	8006414 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ee      	beq.n	80063f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d119      	bne.n	800646a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800643e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006440:	f7fc fd38 	bl	8002eb4 <HAL_GetTick>
 8006444:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006446:	e009      	b.n	800645c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006448:	f7fc fd34 	bl	8002eb4 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006456:	d901      	bls.n	800645c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e007      	b.n	800646c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0ee      	beq.n	8006448 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006482:	e005      	b.n	8006490 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3301      	adds	r3, #1
 8006488:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	3b0a      	subs	r3, #10
 800648e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	2b09      	cmp	r3, #9
 8006494:	d8f6      	bhi.n	8006484 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	b2da      	uxtb	r2, r3
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	b2db      	uxtb	r3, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	4413      	add	r3, r2
 80064de:	b2db      	uxtb	r3, r3
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3350      	adds	r3, #80	; 0x50
 8006502:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4413      	add	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	601a      	str	r2, [r3, #0]
}
 8006514:	bf00      	nop
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3350      	adds	r3, #80	; 0x50
 8006534:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e022      	b.n	80065a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fc f9ab 	bl	80028d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2203      	movs	r2, #3
 800657e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f814 	bl	80065b0 <HAL_SD_InitCard>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e00a      	b.n	80065a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065b0:	b5b0      	push	{r4, r5, r7, lr}
 80065b2:	b08e      	sub	sp, #56	; 0x38
 80065b4:	af04      	add	r7, sp, #16
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80065cc:	2376      	movs	r3, #118	; 0x76
 80065ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681d      	ldr	r5, [r3, #0]
 80065d4:	466c      	mov	r4, sp
 80065d6:	f107 0314 	add.w	r3, r7, #20
 80065da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80065e2:	f107 0308 	add.w	r3, r7, #8
 80065e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065e8:	4628      	mov	r0, r5
 80065ea:	f001 fce9 	bl	8007fc0 <SDIO_Init>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80065f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e04c      	b.n	800669a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006600:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <HAL_SD_InitCard+0xf4>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f001 fd21 	bl	8008052 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006610:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <HAL_SD_InitCard+0xf4>)
 8006612:	2201      	movs	r2, #1
 8006614:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fe68 	bl	80072ec <SD_PowerON>
 800661c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e02e      	b.n	800669a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fd89 	bl	8007154 <SD_InitCard>
 8006642:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e01b      	b.n	800669a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fd84 	bl	8008178 <SDMMC_CmdBlockLength>
 8006670:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00f      	beq.n	8006698 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a0a      	ldr	r2, [pc, #40]	; (80066a8 <HAL_SD_InitCard+0xf8>)
 800667e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3728      	adds	r7, #40	; 0x28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bdb0      	pop	{r4, r5, r7, pc}
 80066a2:	bf00      	nop
 80066a4:	422580a0 	.word	0x422580a0
 80066a8:	004005ff 	.word	0x004005ff

080066ac <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b092      	sub	sp, #72	; 0x48
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80066ba:	f7fc fbfb 	bl	8002eb4 <HAL_GetTick>
 80066be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d107      	bne.n	80066de <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e1bd      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	f040 81b0 	bne.w	8006a4c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80066f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	441a      	add	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d907      	bls.n	8006710 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e1a4      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2203      	movs	r2, #3
 8006714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006724:	2b01      	cmp	r3, #1
 8006726:	d002      	beq.n	800672e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	025b      	lsls	r3, r3, #9
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800672e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006732:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	025b      	lsls	r3, r3, #9
 8006738:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800673a:	2390      	movs	r3, #144	; 0x90
 800673c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800673e:	2302      	movs	r3, #2
 8006740:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006746:	2301      	movs	r3, #1
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f107 0214 	add.w	r2, r7, #20
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f001 fce3 	bl	8008120 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d90a      	bls.n	8006776 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2202      	movs	r2, #2
 8006764:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fd47 	bl	8008200 <SDMMC_CmdReadMultiBlock>
 8006772:	6478      	str	r0, [r7, #68]	; 0x44
 8006774:	e009      	b.n	800678a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006782:	4618      	mov	r0, r3
 8006784:	f001 fd1a 	bl	80081bc <SDMMC_CmdReadSingleBlock>
 8006788:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800678a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800678c:	2b00      	cmp	r3, #0
 800678e:	d012      	beq.n	80067b6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a7a      	ldr	r2, [pc, #488]	; (8006980 <HAL_SD_ReadBlocks+0x2d4>)
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800679e:	431a      	orrs	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e151      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80067ba:	e061      	b.n	8006880 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d03c      	beq.n	8006844 <HAL_SD_ReadBlocks+0x198>
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d039      	beq.n	8006844 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	643b      	str	r3, [r7, #64]	; 0x40
 80067d4:	e033      	b.n	800683e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 fc1b 	bl	8008016 <SDIO_ReadFIFO>
 80067e0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80067ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ec:	3301      	adds	r3, #1
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	3b01      	subs	r3, #1
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	0a1b      	lsrs	r3, r3, #8
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	3301      	adds	r3, #1
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006808:	3b01      	subs	r3, #1
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	0c1b      	lsrs	r3, r3, #16
 8006810:	b2da      	uxtb	r2, r3
 8006812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006814:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	3301      	adds	r3, #1
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681e:	3b01      	subs	r3, #1
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	0e1b      	lsrs	r3, r3, #24
 8006826:	b2da      	uxtb	r2, r3
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682e:	3301      	adds	r3, #1
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006834:	3b01      	subs	r3, #1
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683a:	3301      	adds	r3, #1
 800683c:	643b      	str	r3, [r7, #64]	; 0x40
 800683e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006840:	2b07      	cmp	r3, #7
 8006842:	d9c8      	bls.n	80067d6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006844:	f7fc fb36 	bl	8002eb4 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006850:	429a      	cmp	r2, r3
 8006852:	d902      	bls.n	800685a <HAL_SD_ReadBlocks+0x1ae>
 8006854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006856:	2b00      	cmp	r3, #0
 8006858:	d112      	bne.n	8006880 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a48      	ldr	r2, [pc, #288]	; (8006980 <HAL_SD_ReadBlocks+0x2d4>)
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e0ec      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006886:	f240 332a 	movw	r3, #810	; 0x32a
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d095      	beq.n	80067bc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d022      	beq.n	80068e4 <HAL_SD_ReadBlocks+0x238>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d91f      	bls.n	80068e4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d01b      	beq.n	80068e4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 fd0b 	bl	80082cc <SDMMC_CmdStopTransfer>
 80068b6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80068b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d012      	beq.n	80068e4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2f      	ldr	r2, [pc, #188]	; (8006980 <HAL_SD_ReadBlocks+0x2d4>)
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068cc:	431a      	orrs	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0ba      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d012      	beq.n	8006918 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a22      	ldr	r2, [pc, #136]	; (8006980 <HAL_SD_ReadBlocks+0x2d4>)
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	f043 0208 	orr.w	r2, r3, #8
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e0a0      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d012      	beq.n	800694c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a15      	ldr	r2, [pc, #84]	; (8006980 <HAL_SD_ReadBlocks+0x2d4>)
 800692c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	f043 0202 	orr.w	r2, r3, #2
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e086      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d063      	beq.n	8006a22 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a08      	ldr	r2, [pc, #32]	; (8006980 <HAL_SD_ReadBlocks+0x2d4>)
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	f043 0220 	orr.w	r2, r3, #32
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e06c      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
 8006980:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f001 fb44 	bl	8008016 <SDIO_ReadFIFO>
 800698e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	b2da      	uxtb	r2, r3
 8006994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006996:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	3301      	adds	r3, #1
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800699e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a0:	3b01      	subs	r3, #1
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	0a1b      	lsrs	r3, r3, #8
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80069ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b0:	3301      	adds	r3, #1
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b6:	3b01      	subs	r3, #1
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	3301      	adds	r3, #1
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	3b01      	subs	r3, #1
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	0e1b      	lsrs	r3, r3, #24
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80069da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069dc:	3301      	adds	r3, #1
 80069de:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80069e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e2:	3b01      	subs	r3, #1
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80069e6:	f7fc fa65 	bl	8002eb4 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d902      	bls.n	80069fc <HAL_SD_ReadBlocks+0x350>
 80069f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d112      	bne.n	8006a22 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a18      	ldr	r2, [pc, #96]	; (8006a64 <HAL_SD_ReadBlocks+0x3b8>)
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e01b      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <HAL_SD_ReadBlocks+0x38a>
 8006a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1a6      	bne.n	8006984 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a3e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e006      	b.n	8006a5a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
  }
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3748      	adds	r7, #72	; 0x48
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	004005ff 	.word	0x004005ff

08006a68 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b092      	sub	sp, #72	; 0x48
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006a76:	f7fc fa1d 	bl	8002eb4 <HAL_GetTick>
 8006a7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d107      	bne.n	8006a9a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e166      	b.n	8006d68 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	f040 8159 	bne.w	8006d5a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	441a      	add	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d907      	bls.n	8006acc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e14d      	b.n	8006d68 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2203      	movs	r2, #3
 8006ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d002      	beq.n	8006aea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	025b      	lsls	r3, r3, #9
 8006ae8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	025b      	lsls	r3, r3, #9
 8006af4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006af6:	2390      	movs	r3, #144	; 0x90
 8006af8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006afa:	2300      	movs	r3, #0
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006b02:	2301      	movs	r3, #1
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f107 0218 	add.w	r2, r7, #24
 8006b0e:	4611      	mov	r1, r2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 fb05 	bl	8008120 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d90a      	bls.n	8006b32 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f001 fbad 	bl	8008288 <SDMMC_CmdWriteMultiBlock>
 8006b2e:	6478      	str	r0, [r7, #68]	; 0x44
 8006b30:	e009      	b.n	8006b46 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2210      	movs	r2, #16
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 fb80 	bl	8008244 <SDMMC_CmdWriteSingleBlock>
 8006b44:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d012      	beq.n	8006b72 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a87      	ldr	r2, [pc, #540]	; (8006d70 <HAL_SD_WriteBlocks+0x308>)
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e0fa      	b.n	8006d68 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006b76:	e065      	b.n	8006c44 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d040      	beq.n	8006c08 <HAL_SD_WriteBlocks+0x1a0>
 8006b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d03d      	beq.n	8006c08 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b90:	e037      	b.n	8006c02 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	021a      	lsls	r2, r3, #8
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	041a      	lsls	r2, r3, #16
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bca:	3301      	adds	r3, #1
 8006bcc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	061a      	lsls	r2, r3, #24
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be2:	3301      	adds	r3, #1
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be8:	3b01      	subs	r3, #1
 8006bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f107 0214 	add.w	r2, r7, #20
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f001 fa1a 	bl	8008030 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfe:	3301      	adds	r3, #1
 8006c00:	643b      	str	r3, [r7, #64]	; 0x40
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	2b07      	cmp	r3, #7
 8006c06:	d9c4      	bls.n	8006b92 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c08:	f7fc f954 	bl	8002eb4 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d902      	bls.n	8006c1e <HAL_SD_WriteBlocks+0x1b6>
 8006c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d112      	bne.n	8006c44 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a53      	ldr	r2, [pc, #332]	; (8006d70 <HAL_SD_WriteBlocks+0x308>)
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e091      	b.n	8006d68 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c4a:	f240 331a 	movw	r3, #794	; 0x31a
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d091      	beq.n	8006b78 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d022      	beq.n	8006ca8 <HAL_SD_WriteBlocks+0x240>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d91f      	bls.n	8006ca8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d01b      	beq.n	8006ca8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 fb29 	bl	80082cc <SDMMC_CmdStopTransfer>
 8006c7a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d012      	beq.n	8006ca8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a3a      	ldr	r2, [pc, #232]	; (8006d70 <HAL_SD_WriteBlocks+0x308>)
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c90:	431a      	orrs	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e05f      	b.n	8006d68 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d012      	beq.n	8006cdc <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a2d      	ldr	r2, [pc, #180]	; (8006d70 <HAL_SD_WriteBlocks+0x308>)
 8006cbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	f043 0208 	orr.w	r2, r3, #8
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e045      	b.n	8006d68 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d012      	beq.n	8006d10 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a20      	ldr	r2, [pc, #128]	; (8006d70 <HAL_SD_WriteBlocks+0x308>)
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	f043 0202 	orr.w	r2, r3, #2
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e02b      	b.n	8006d68 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	f003 0310 	and.w	r3, r3, #16
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d012      	beq.n	8006d44 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <HAL_SD_WriteBlocks+0x308>)
 8006d24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	f043 0210 	orr.w	r2, r3, #16
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e011      	b.n	8006d68 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e006      	b.n	8006d68 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
  }
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3748      	adds	r7, #72	; 0x48
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	004005ff 	.word	0x004005ff

08006d74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d82:	0f9b      	lsrs	r3, r3, #30
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d8e:	0e9b      	lsrs	r3, r3, #26
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da0:	0e1b      	lsrs	r3, r3, #24
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd4:	0d1b      	lsrs	r3, r3, #20
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006df2:	0bdb      	lsrs	r3, r3, #15
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e04:	0b9b      	lsrs	r3, r3, #14
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e16:	0b5b      	lsrs	r3, r3, #13
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e28:	0b1b      	lsrs	r3, r3, #12
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d163      	bne.n	8006f0c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e48:	009a      	lsls	r2, r3, #2
 8006e4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e4e:	4013      	ands	r3, r2
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006e54:	0f92      	lsrs	r2, r2, #30
 8006e56:	431a      	orrs	r2, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e60:	0edb      	lsrs	r3, r3, #27
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e72:	0e1b      	lsrs	r3, r3, #24
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e84:	0d5b      	lsrs	r3, r3, #21
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e96:	0c9b      	lsrs	r3, r3, #18
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea8:	0bdb      	lsrs	r3, r3, #15
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	7e1b      	ldrb	r3, [r3, #24]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	3302      	adds	r3, #2
 8006ecc:	2201      	movs	r2, #1
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006ed6:	fb02 f203 	mul.w	r2, r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	7a1b      	ldrb	r3, [r3, #8]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	2201      	movs	r2, #1
 8006eea:	409a      	lsls	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006ef8:	0a52      	lsrs	r2, r2, #9
 8006efa:	fb02 f203 	mul.w	r2, r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f08:	661a      	str	r2, [r3, #96]	; 0x60
 8006f0a:	e031      	b.n	8006f70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d11d      	bne.n	8006f50 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	431a      	orrs	r2, r3
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	029a      	lsls	r2, r3, #10
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f44:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	661a      	str	r2, [r3, #96]	; 0x60
 8006f4e:	e00f      	b.n	8006f70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a58      	ldr	r2, [pc, #352]	; (80070b8 <HAL_SD_GetCardCSD+0x344>)
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e09d      	b.n	80070ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f74:	0b9b      	lsrs	r3, r3, #14
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f86:	09db      	lsrs	r3, r3, #7
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa8:	0fdb      	lsrs	r3, r3, #31
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb4:	0f5b      	lsrs	r3, r3, #29
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	0e9b      	lsrs	r3, r3, #26
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd8:	0d9b      	lsrs	r3, r3, #22
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	0d5b      	lsrs	r3, r3, #21
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007006:	0c1b      	lsrs	r3, r3, #16
 8007008:	b2db      	uxtb	r3, r3
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	b2da      	uxtb	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	0bdb      	lsrs	r3, r3, #15
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	0b9b      	lsrs	r3, r3, #14
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	0b5b      	lsrs	r3, r3, #13
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	b2da      	uxtb	r2, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007056:	0b1b      	lsrs	r3, r3, #12
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	b2da      	uxtb	r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706a:	0a9b      	lsrs	r3, r3, #10
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	b2da      	uxtb	r2, r3
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707e:	0a1b      	lsrs	r3, r3, #8
 8007080:	b2db      	uxtb	r3, r3
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	b2da      	uxtb	r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800709a:	b2da      	uxtb	r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	004005ff 	.word	0x004005ff

080070bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007120:	f107 030c 	add.w	r3, r7, #12
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f96e 	bl	8007408 <SD_SendStatus>
 800712c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	0a5b      	lsrs	r3, r3, #9
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800714a:	693b      	ldr	r3, [r7, #16]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007154:	b5b0      	push	{r4, r5, r7, lr}
 8007156:	b094      	sub	sp, #80	; 0x50
 8007158:	af04      	add	r7, sp, #16
 800715a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800715c:	2301      	movs	r3, #1
 800715e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 ff83 	bl	8008070 <SDIO_GetPowerState>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007170:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007174:	e0b6      	b.n	80072e4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717a:	2b03      	cmp	r3, #3
 800717c:	d02f      	beq.n	80071de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f001 f969 	bl	800845a <SDMMC_CmdSendCID>
 8007188:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800718a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <SD_InitCard+0x40>
    {
      return errorstate;
 8007190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007192:	e0a7      	b.n	80072e4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f000 ffad 	bl	80080fa <SDIO_GetResponse>
 80071a0:	4602      	mov	r2, r0
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2104      	movs	r1, #4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 ffa4 	bl	80080fa <SDIO_GetResponse>
 80071b2:	4602      	mov	r2, r0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2108      	movs	r1, #8
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 ff9b 	bl	80080fa <SDIO_GetResponse>
 80071c4:	4602      	mov	r2, r0
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	210c      	movs	r1, #12
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 ff92 	bl	80080fa <SDIO_GetResponse>
 80071d6:	4602      	mov	r2, r0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d00d      	beq.n	8007202 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f107 020e 	add.w	r2, r7, #14
 80071ee:	4611      	mov	r1, r2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f001 f96f 	bl	80084d4 <SDMMC_CmdSetRelAdd>
 80071f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <SD_InitCard+0xae>
    {
      return errorstate;
 80071fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007200:	e070      	b.n	80072e4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	2b03      	cmp	r3, #3
 8007208:	d036      	beq.n	8007278 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800720a:	89fb      	ldrh	r3, [r7, #14]
 800720c:	461a      	mov	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f001 f939 	bl	8008496 <SDMMC_CmdSendCSD>
 8007224:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <SD_InitCard+0xdc>
    {
      return errorstate;
 800722c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722e:	e059      	b.n	80072e4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2100      	movs	r1, #0
 8007236:	4618      	mov	r0, r3
 8007238:	f000 ff5f 	bl	80080fa <SDIO_GetResponse>
 800723c:	4602      	mov	r2, r0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2104      	movs	r1, #4
 8007248:	4618      	mov	r0, r3
 800724a:	f000 ff56 	bl	80080fa <SDIO_GetResponse>
 800724e:	4602      	mov	r2, r0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2108      	movs	r1, #8
 800725a:	4618      	mov	r0, r3
 800725c:	f000 ff4d 	bl	80080fa <SDIO_GetResponse>
 8007260:	4602      	mov	r2, r0
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	210c      	movs	r1, #12
 800726c:	4618      	mov	r0, r3
 800726e:	f000 ff44 	bl	80080fa <SDIO_GetResponse>
 8007272:	4602      	mov	r2, r0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2104      	movs	r1, #4
 800727e:	4618      	mov	r0, r3
 8007280:	f000 ff3b 	bl	80080fa <SDIO_GetResponse>
 8007284:	4603      	mov	r3, r0
 8007286:	0d1a      	lsrs	r2, r3, #20
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800728c:	f107 0310 	add.w	r3, r7, #16
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff fd6e 	bl	8006d74 <HAL_SD_GetCardCSD>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800729e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072a2:	e01f      	b.n	80072e4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6819      	ldr	r1, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ac:	041b      	lsls	r3, r3, #16
 80072ae:	461a      	mov	r2, r3
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	4608      	mov	r0, r1
 80072b6:	f001 f82b 	bl	8008310 <SDMMC_CmdSelDesel>
 80072ba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80072bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <SD_InitCard+0x172>
  {
    return errorstate;
 80072c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c4:	e00e      	b.n	80072e4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681d      	ldr	r5, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	466c      	mov	r4, sp
 80072ce:	f103 0210 	add.w	r2, r3, #16
 80072d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80072d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072d8:	3304      	adds	r3, #4
 80072da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 fe6f 	bl	8007fc0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3740      	adds	r7, #64	; 0x40
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bdb0      	pop	{r4, r5, r7, pc}

080072ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	2300      	movs	r3, #0
 80072fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4618      	mov	r0, r3
 8007306:	f001 f826 	bl	8008356 <SDMMC_CmdGoIdleState>
 800730a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	e072      	b.n	80073fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f001 f839 	bl	8008392 <SDMMC_CmdOperCond>
 8007320:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00d      	beq.n	8007344 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f001 f80f 	bl	8008356 <SDMMC_CmdGoIdleState>
 8007338:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	e05b      	b.n	80073fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734e:	2b01      	cmp	r3, #1
 8007350:	d137      	bne.n	80073c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2100      	movs	r1, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f001 f839 	bl	80083d0 <SDMMC_CmdAppCommand>
 800735e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d02d      	beq.n	80073c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007366:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800736a:	e047      	b.n	80073fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f001 f82c 	bl	80083d0 <SDMMC_CmdAppCommand>
 8007378:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <SD_PowerON+0x98>
    {
      return errorstate;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	e03b      	b.n	80073fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	491e      	ldr	r1, [pc, #120]	; (8007404 <SD_PowerON+0x118>)
 800738a:	4618      	mov	r0, r3
 800738c:	f001 f842 	bl	8008414 <SDMMC_CmdAppOperCommand>
 8007390:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007398:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800739c:	e02e      	b.n	80073fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2100      	movs	r1, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fea8 	bl	80080fa <SDIO_GetResponse>
 80073aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	0fdb      	lsrs	r3, r3, #31
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d101      	bne.n	80073b8 <SD_PowerON+0xcc>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <SD_PowerON+0xce>
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]

    count++;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	3301      	adds	r3, #1
 80073c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d802      	bhi.n	80073d2 <SD_PowerON+0xe6>
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0cc      	beq.n	800736c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073d8:	4293      	cmp	r3, r2
 80073da:	d902      	bls.n	80073e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80073dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073e0:	e00c      	b.n	80073fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	645a      	str	r2, [r3, #68]	; 0x44
 80073f2:	e002      	b.n	80073fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	c1100000 	.word	0xc1100000

08007408 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007418:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800741c:	e018      	b.n	8007450 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007426:	041b      	lsls	r3, r3, #16
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f001 f873 	bl	8008516 <SDMMC_CmdSendStatus>
 8007430:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	e009      	b.n	8007450 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fe59 	bl	80080fa <SDIO_GetResponse>
 8007448:	4602      	mov	r2, r0
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e07b      	b.n	8007562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b00      	cmp	r3, #0
 8007470:	d108      	bne.n	8007484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800747a:	d009      	beq.n	8007490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	61da      	str	r2, [r3, #28]
 8007482:	e005      	b.n	8007490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fb fa78 	bl	80029a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007514:	ea42 0103 	orr.w	r1, r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	0c1b      	lsrs	r3, r3, #16
 800752e:	f003 0104 	and.w	r1, r3, #4
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	f003 0210 	and.w	r2, r3, #16
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69da      	ldr	r2, [r3, #28]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e03f      	b.n	80075fc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7fb fa5d 	bl	8002a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2224      	movs	r2, #36	; 0x24
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fb3e 	bl	8007c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695a      	ldr	r2, [r3, #20]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b08a      	sub	sp, #40	; 0x28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007624:	2300      	movs	r3, #0
 8007626:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10d      	bne.n	8007656 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <HAL_UART_IRQHandler+0x52>
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa57 	bl	8007b02 <UART_Receive_IT>
      return;
 8007654:	e17c      	b.n	8007950 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80b1 	beq.w	80077c0 <HAL_UART_IRQHandler+0x1bc>
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	d105      	bne.n	8007674 <HAL_UART_IRQHandler+0x70>
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 80a6 	beq.w	80077c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <HAL_UART_IRQHandler+0x90>
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	f043 0201 	orr.w	r2, r3, #1
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <HAL_UART_IRQHandler+0xb0>
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	f043 0202 	orr.w	r2, r3, #2
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <HAL_UART_IRQHandler+0xd0>
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	f043 0204 	orr.w	r2, r3, #4
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00f      	beq.n	80076fe <HAL_UART_IRQHandler+0xfa>
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f003 0320 	and.w	r3, r3, #32
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <HAL_UART_IRQHandler+0xee>
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f043 0208 	orr.w	r2, r3, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 811f 	beq.w	8007946 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <HAL_UART_IRQHandler+0x11e>
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	f003 0320 	and.w	r3, r3, #32
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9f0 	bl	8007b02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	bf0c      	ite	eq
 8007730:	2301      	moveq	r3, #1
 8007732:	2300      	movne	r3, #0
 8007734:	b2db      	uxtb	r3, r3
 8007736:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <HAL_UART_IRQHandler+0x146>
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d031      	beq.n	80077ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f930 	bl	80079b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d123      	bne.n	80077a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	2b00      	cmp	r3, #0
 8007774:	d013      	beq.n	800779e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	4a77      	ldr	r2, [pc, #476]	; (8007958 <HAL_UART_IRQHandler+0x354>)
 800777c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	4618      	mov	r0, r3
 8007784:	f7fc f913 	bl	80039ae <HAL_DMA_Abort_IT>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d016      	beq.n	80077bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779c:	e00e      	b.n	80077bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f8f0 	bl	8007984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a4:	e00a      	b.n	80077bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f8ec 	bl	8007984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ac:	e006      	b.n	80077bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f8e8 	bl	8007984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077ba:	e0c4      	b.n	8007946 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077bc:	bf00      	nop
    return;
 80077be:	e0c2      	b.n	8007946 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	f040 80a2 	bne.w	800790e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 809c 	beq.w	800790e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8096 	beq.w	800790e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	d14f      	bne.n	80078a6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007810:	8a3b      	ldrh	r3, [r7, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 8099 	beq.w	800794a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800781c:	8a3a      	ldrh	r2, [r7, #16]
 800781e:	429a      	cmp	r2, r3
 8007820:	f080 8093 	bcs.w	800794a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8a3a      	ldrh	r2, [r7, #16]
 8007828:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007834:	d02b      	beq.n	800788e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007844:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695a      	ldr	r2, [r3, #20]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0201 	bic.w	r2, r2, #1
 8007854:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695a      	ldr	r2, [r3, #20]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007864:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0210 	bic.w	r2, r2, #16
 8007882:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	4618      	mov	r0, r3
 800788a:	f7fc f820 	bl	80038ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007896:	b29b      	uxth	r3, r3
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	b29b      	uxth	r3, r3
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f87a 	bl	8007998 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80078a4:	e051      	b.n	800794a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d047      	beq.n	800794e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80078be:	8a7b      	ldrh	r3, [r7, #18]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d044      	beq.n	800794e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078d2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695a      	ldr	r2, [r3, #20]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0201 	bic.w	r2, r2, #1
 80078e2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0210 	bic.w	r2, r2, #16
 8007900:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007902:	8a7b      	ldrh	r3, [r7, #18]
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f846 	bl	8007998 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800790c:	e01f      	b.n	800794e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <HAL_UART_IRQHandler+0x326>
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f885 	bl	8007a32 <UART_Transmit_IT>
    return;
 8007928:	e012      	b.n	8007950 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00d      	beq.n	8007950 <HAL_UART_IRQHandler+0x34c>
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d008      	beq.n	8007950 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f8c7 	bl	8007ad2 <UART_EndTransmit_IT>
    return;
 8007944:	e004      	b.n	8007950 <HAL_UART_IRQHandler+0x34c>
    return;
 8007946:	bf00      	nop
 8007948:	e002      	b.n	8007950 <HAL_UART_IRQHandler+0x34c>
      return;
 800794a:	bf00      	nop
 800794c:	e000      	b.n	8007950 <HAL_UART_IRQHandler+0x34c>
      return;
 800794e:	bf00      	nop
  }
}
 8007950:	3728      	adds	r7, #40	; 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	08007a0b 	.word	0x08007a0b

0800795c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695a      	ldr	r2, [r3, #20]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0201 	bic.w	r2, r2, #1
 80079d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d107      	bne.n	80079f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0210 	bic.w	r2, r2, #16
 80079ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7ff ffad 	bl	8007984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b21      	cmp	r3, #33	; 0x21
 8007a44:	d13e      	bne.n	8007ac4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4e:	d114      	bne.n	8007a7a <UART_Transmit_IT+0x48>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d110      	bne.n	8007a7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	1c9a      	adds	r2, r3, #2
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	621a      	str	r2, [r3, #32]
 8007a78:	e008      	b.n	8007a8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	1c59      	adds	r1, r3, #1
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6211      	str	r1, [r2, #32]
 8007a84:	781a      	ldrb	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10f      	bne.n	8007ac0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007abe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e000      	b.n	8007ac6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ac4:	2302      	movs	r3, #2
  }
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff ff32 	bl	800795c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b22      	cmp	r3, #34	; 0x22
 8007b14:	f040 8087 	bne.w	8007c26 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b20:	d117      	bne.n	8007b52 <UART_Receive_IT+0x50>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d113      	bne.n	8007b52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	1c9a      	adds	r2, r3, #2
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8007b50:	e026      	b.n	8007ba0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b56:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b64:	d007      	beq.n	8007b76 <UART_Receive_IT+0x74>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10a      	bne.n	8007b84 <UART_Receive_IT+0x82>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d106      	bne.n	8007b84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	701a      	strb	r2, [r3, #0]
 8007b82:	e008      	b.n	8007b96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	4619      	mov	r1, r3
 8007bae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d136      	bne.n	8007c22 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0220 	bic.w	r2, r2, #32
 8007bc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695a      	ldr	r2, [r3, #20]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0201 	bic.w	r2, r2, #1
 8007be2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d10e      	bne.n	8007c12 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0210 	bic.w	r2, r2, #16
 8007c02:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff fec4 	bl	8007998 <HAL_UARTEx_RxEventCallback>
 8007c10:	e002      	b.n	8007c18 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff feac 	bl	8007970 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e002      	b.n	8007c28 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	e000      	b.n	8007c28 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007c26:	2302      	movs	r3, #2
  }
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	b09f      	sub	sp, #124	; 0x7c
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c46:	68d9      	ldr	r1, [r3, #12]
 8007c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	ea40 0301 	orr.w	r3, r0, r1
 8007c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	431a      	orrs	r2, r3
 8007c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c74:	f021 010c 	bic.w	r1, r1, #12
 8007c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8e:	6999      	ldr	r1, [r3, #24]
 8007c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	ea40 0301 	orr.w	r3, r0, r1
 8007c98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4bc5      	ldr	r3, [pc, #788]	; (8007fb4 <UART_SetConfig+0x384>)
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d004      	beq.n	8007cae <UART_SetConfig+0x7e>
 8007ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	4bc3      	ldr	r3, [pc, #780]	; (8007fb8 <UART_SetConfig+0x388>)
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d103      	bne.n	8007cb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cae:	f7fd fff5 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 8007cb2:	6778      	str	r0, [r7, #116]	; 0x74
 8007cb4:	e002      	b.n	8007cbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cb6:	f7fd ffdd 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8007cba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc4:	f040 80b6 	bne.w	8007e34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cca:	461c      	mov	r4, r3
 8007ccc:	f04f 0500 	mov.w	r5, #0
 8007cd0:	4622      	mov	r2, r4
 8007cd2:	462b      	mov	r3, r5
 8007cd4:	1891      	adds	r1, r2, r2
 8007cd6:	6439      	str	r1, [r7, #64]	; 0x40
 8007cd8:	415b      	adcs	r3, r3
 8007cda:	647b      	str	r3, [r7, #68]	; 0x44
 8007cdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ce0:	1912      	adds	r2, r2, r4
 8007ce2:	eb45 0303 	adc.w	r3, r5, r3
 8007ce6:	f04f 0000 	mov.w	r0, #0
 8007cea:	f04f 0100 	mov.w	r1, #0
 8007cee:	00d9      	lsls	r1, r3, #3
 8007cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cf4:	00d0      	lsls	r0, r2, #3
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	1911      	adds	r1, r2, r4
 8007cfc:	6639      	str	r1, [r7, #96]	; 0x60
 8007cfe:	416b      	adcs	r3, r5
 8007d00:	667b      	str	r3, [r7, #100]	; 0x64
 8007d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f04f 0300 	mov.w	r3, #0
 8007d0c:	1891      	adds	r1, r2, r2
 8007d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d10:	415b      	adcs	r3, r3
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007d1c:	f7f8 ffc4 	bl	8000ca8 <__aeabi_uldivmod>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4ba5      	ldr	r3, [pc, #660]	; (8007fbc <UART_SetConfig+0x38c>)
 8007d26:	fba3 2302 	umull	r2, r3, r3, r2
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	011e      	lsls	r6, r3, #4
 8007d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d30:	461c      	mov	r4, r3
 8007d32:	f04f 0500 	mov.w	r5, #0
 8007d36:	4622      	mov	r2, r4
 8007d38:	462b      	mov	r3, r5
 8007d3a:	1891      	adds	r1, r2, r2
 8007d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8007d3e:	415b      	adcs	r3, r3
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
 8007d42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d46:	1912      	adds	r2, r2, r4
 8007d48:	eb45 0303 	adc.w	r3, r5, r3
 8007d4c:	f04f 0000 	mov.w	r0, #0
 8007d50:	f04f 0100 	mov.w	r1, #0
 8007d54:	00d9      	lsls	r1, r3, #3
 8007d56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d5a:	00d0      	lsls	r0, r2, #3
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	1911      	adds	r1, r2, r4
 8007d62:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d64:	416b      	adcs	r3, r5
 8007d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	1891      	adds	r1, r2, r2
 8007d74:	62b9      	str	r1, [r7, #40]	; 0x28
 8007d76:	415b      	adcs	r3, r3
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007d82:	f7f8 ff91 	bl	8000ca8 <__aeabi_uldivmod>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4b8c      	ldr	r3, [pc, #560]	; (8007fbc <UART_SetConfig+0x38c>)
 8007d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d90:	095b      	lsrs	r3, r3, #5
 8007d92:	2164      	movs	r1, #100	; 0x64
 8007d94:	fb01 f303 	mul.w	r3, r1, r3
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	3332      	adds	r3, #50	; 0x32
 8007d9e:	4a87      	ldr	r2, [pc, #540]	; (8007fbc <UART_SetConfig+0x38c>)
 8007da0:	fba2 2303 	umull	r2, r3, r2, r3
 8007da4:	095b      	lsrs	r3, r3, #5
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007dac:	441e      	add	r6, r3
 8007dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007db0:	4618      	mov	r0, r3
 8007db2:	f04f 0100 	mov.w	r1, #0
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	1894      	adds	r4, r2, r2
 8007dbc:	623c      	str	r4, [r7, #32]
 8007dbe:	415b      	adcs	r3, r3
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dc6:	1812      	adds	r2, r2, r0
 8007dc8:	eb41 0303 	adc.w	r3, r1, r3
 8007dcc:	f04f 0400 	mov.w	r4, #0
 8007dd0:	f04f 0500 	mov.w	r5, #0
 8007dd4:	00dd      	lsls	r5, r3, #3
 8007dd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dda:	00d4      	lsls	r4, r2, #3
 8007ddc:	4622      	mov	r2, r4
 8007dde:	462b      	mov	r3, r5
 8007de0:	1814      	adds	r4, r2, r0
 8007de2:	653c      	str	r4, [r7, #80]	; 0x50
 8007de4:	414b      	adcs	r3, r1
 8007de6:	657b      	str	r3, [r7, #84]	; 0x54
 8007de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	461a      	mov	r2, r3
 8007dee:	f04f 0300 	mov.w	r3, #0
 8007df2:	1891      	adds	r1, r2, r2
 8007df4:	61b9      	str	r1, [r7, #24]
 8007df6:	415b      	adcs	r3, r3
 8007df8:	61fb      	str	r3, [r7, #28]
 8007dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e02:	f7f8 ff51 	bl	8000ca8 <__aeabi_uldivmod>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4b6c      	ldr	r3, [pc, #432]	; (8007fbc <UART_SetConfig+0x38c>)
 8007e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e10:	095b      	lsrs	r3, r3, #5
 8007e12:	2164      	movs	r1, #100	; 0x64
 8007e14:	fb01 f303 	mul.w	r3, r1, r3
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	3332      	adds	r3, #50	; 0x32
 8007e1e:	4a67      	ldr	r2, [pc, #412]	; (8007fbc <UART_SetConfig+0x38c>)
 8007e20:	fba2 2303 	umull	r2, r3, r2, r3
 8007e24:	095b      	lsrs	r3, r3, #5
 8007e26:	f003 0207 	and.w	r2, r3, #7
 8007e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4432      	add	r2, r6
 8007e30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e32:	e0b9      	b.n	8007fa8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e36:	461c      	mov	r4, r3
 8007e38:	f04f 0500 	mov.w	r5, #0
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	462b      	mov	r3, r5
 8007e40:	1891      	adds	r1, r2, r2
 8007e42:	6139      	str	r1, [r7, #16]
 8007e44:	415b      	adcs	r3, r3
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007e4c:	1912      	adds	r2, r2, r4
 8007e4e:	eb45 0303 	adc.w	r3, r5, r3
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	00d9      	lsls	r1, r3, #3
 8007e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e60:	00d0      	lsls	r0, r2, #3
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	eb12 0804 	adds.w	r8, r2, r4
 8007e6a:	eb43 0905 	adc.w	r9, r3, r5
 8007e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f04f 0100 	mov.w	r1, #0
 8007e78:	f04f 0200 	mov.w	r2, #0
 8007e7c:	f04f 0300 	mov.w	r3, #0
 8007e80:	008b      	lsls	r3, r1, #2
 8007e82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e86:	0082      	lsls	r2, r0, #2
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	f7f8 ff0c 	bl	8000ca8 <__aeabi_uldivmod>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4b49      	ldr	r3, [pc, #292]	; (8007fbc <UART_SetConfig+0x38c>)
 8007e96:	fba3 2302 	umull	r2, r3, r3, r2
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	011e      	lsls	r6, r3, #4
 8007e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f04f 0100 	mov.w	r1, #0
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	1894      	adds	r4, r2, r2
 8007eac:	60bc      	str	r4, [r7, #8]
 8007eae:	415b      	adcs	r3, r3
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eb6:	1812      	adds	r2, r2, r0
 8007eb8:	eb41 0303 	adc.w	r3, r1, r3
 8007ebc:	f04f 0400 	mov.w	r4, #0
 8007ec0:	f04f 0500 	mov.w	r5, #0
 8007ec4:	00dd      	lsls	r5, r3, #3
 8007ec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007eca:	00d4      	lsls	r4, r2, #3
 8007ecc:	4622      	mov	r2, r4
 8007ece:	462b      	mov	r3, r5
 8007ed0:	1814      	adds	r4, r2, r0
 8007ed2:	64bc      	str	r4, [r7, #72]	; 0x48
 8007ed4:	414b      	adcs	r3, r1
 8007ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f04f 0100 	mov.w	r1, #0
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	008b      	lsls	r3, r1, #2
 8007eec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ef0:	0082      	lsls	r2, r0, #2
 8007ef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007ef6:	f7f8 fed7 	bl	8000ca8 <__aeabi_uldivmod>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4b2f      	ldr	r3, [pc, #188]	; (8007fbc <UART_SetConfig+0x38c>)
 8007f00:	fba3 1302 	umull	r1, r3, r3, r2
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	2164      	movs	r1, #100	; 0x64
 8007f08:	fb01 f303 	mul.w	r3, r1, r3
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	3332      	adds	r3, #50	; 0x32
 8007f12:	4a2a      	ldr	r2, [pc, #168]	; (8007fbc <UART_SetConfig+0x38c>)
 8007f14:	fba2 2303 	umull	r2, r3, r2, r3
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f1e:	441e      	add	r6, r3
 8007f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f22:	4618      	mov	r0, r3
 8007f24:	f04f 0100 	mov.w	r1, #0
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	1894      	adds	r4, r2, r2
 8007f2e:	603c      	str	r4, [r7, #0]
 8007f30:	415b      	adcs	r3, r3
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f38:	1812      	adds	r2, r2, r0
 8007f3a:	eb41 0303 	adc.w	r3, r1, r3
 8007f3e:	f04f 0400 	mov.w	r4, #0
 8007f42:	f04f 0500 	mov.w	r5, #0
 8007f46:	00dd      	lsls	r5, r3, #3
 8007f48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f4c:	00d4      	lsls	r4, r2, #3
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	eb12 0a00 	adds.w	sl, r2, r0
 8007f56:	eb43 0b01 	adc.w	fp, r3, r1
 8007f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f04f 0100 	mov.w	r1, #0
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	008b      	lsls	r3, r1, #2
 8007f6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f72:	0082      	lsls	r2, r0, #2
 8007f74:	4650      	mov	r0, sl
 8007f76:	4659      	mov	r1, fp
 8007f78:	f7f8 fe96 	bl	8000ca8 <__aeabi_uldivmod>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <UART_SetConfig+0x38c>)
 8007f82:	fba3 1302 	umull	r1, r3, r3, r2
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	2164      	movs	r1, #100	; 0x64
 8007f8a:	fb01 f303 	mul.w	r3, r1, r3
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	3332      	adds	r3, #50	; 0x32
 8007f94:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <UART_SetConfig+0x38c>)
 8007f96:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	f003 020f 	and.w	r2, r3, #15
 8007fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4432      	add	r2, r6
 8007fa6:	609a      	str	r2, [r3, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	377c      	adds	r7, #124	; 0x7c
 8007fac:	46bd      	mov	sp, r7
 8007fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40011000 	.word	0x40011000
 8007fb8:	40011400 	.word	0x40011400
 8007fbc:	51eb851f 	.word	0x51eb851f

08007fc0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	b480      	push	{r7}
 8007fc4:	b085      	sub	sp, #20
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	f107 001c 	add.w	r0, r7, #28
 8007fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007fd6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007fda:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007fde:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007fe2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007fe6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007fea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007ffa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	431a      	orrs	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	b004      	add	sp, #16
 8008014:	4770      	bx	lr

08008016 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2203      	movs	r2, #3
 800805e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008060:	2002      	movs	r0, #2
 8008062:	f7fa ff33 	bl	8002ecc <HAL_Delay>
  
  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0303 	and.w	r3, r3, #3
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80080aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80080b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80080b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80080c6:	f023 030f 	bic.w	r3, r3, #15
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	431a      	orrs	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	b2db      	uxtb	r3, r3
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3314      	adds	r3, #20
 8008108:	461a      	mov	r2, r3
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	4413      	add	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
}  
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008146:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800814c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008152:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800816a:	2300      	movs	r3, #0

}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008186:	2310      	movs	r3, #16
 8008188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800818a:	2340      	movs	r3, #64	; 0x40
 800818c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800818e:	2300      	movs	r3, #0
 8008190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008196:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008198:	f107 0308 	add.w	r3, r7, #8
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff ff74 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80081a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a8:	2110      	movs	r1, #16
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa02 	bl	80085b4 <SDMMC_GetCmdResp1>
 80081b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081b2:	69fb      	ldr	r3, [r7, #28]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3720      	adds	r7, #32
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80081ca:	2311      	movs	r3, #17
 80081cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081ce:	2340      	movs	r3, #64	; 0x40
 80081d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081dc:	f107 0308 	add.w	r3, r7, #8
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff ff52 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80081e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ec:	2111      	movs	r1, #17
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f9e0 	bl	80085b4 <SDMMC_GetCmdResp1>
 80081f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081f6:	69fb      	ldr	r3, [r7, #28]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800820e:	2312      	movs	r3, #18
 8008210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008212:	2340      	movs	r3, #64	; 0x40
 8008214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800821a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800821e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008220:	f107 0308 	add.w	r3, r7, #8
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff ff30 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800822c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008230:	2112      	movs	r1, #18
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f9be 	bl	80085b4 <SDMMC_GetCmdResp1>
 8008238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800823a:	69fb      	ldr	r3, [r7, #28]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3720      	adds	r7, #32
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008252:	2318      	movs	r3, #24
 8008254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008256:	2340      	movs	r3, #64	; 0x40
 8008258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800825e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008262:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008264:	f107 0308 	add.w	r3, r7, #8
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff ff0e 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008270:	f241 3288 	movw	r2, #5000	; 0x1388
 8008274:	2118      	movs	r1, #24
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f99c 	bl	80085b4 <SDMMC_GetCmdResp1>
 800827c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800827e:	69fb      	ldr	r3, [r7, #28]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3720      	adds	r7, #32
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008296:	2319      	movs	r3, #25
 8008298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800829a:	2340      	movs	r3, #64	; 0x40
 800829c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082a8:	f107 0308 	add.w	r3, r7, #8
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff feec 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80082b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b8:	2119      	movs	r1, #25
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f97a 	bl	80085b4 <SDMMC_GetCmdResp1>
 80082c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082c2:	69fb      	ldr	r3, [r7, #28]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3720      	adds	r7, #32
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80082d8:	230c      	movs	r3, #12
 80082da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082dc:	2340      	movs	r3, #64	; 0x40
 80082de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082ea:	f107 0308 	add.w	r3, r7, #8
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff fecb 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80082f6:	4a05      	ldr	r2, [pc, #20]	; (800830c <SDMMC_CmdStopTransfer+0x40>)
 80082f8:	210c      	movs	r1, #12
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f95a 	bl	80085b4 <SDMMC_GetCmdResp1>
 8008300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008302:	69fb      	ldr	r3, [r7, #28]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	05f5e100 	.word	0x05f5e100

08008310 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08a      	sub	sp, #40	; 0x28
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008320:	2307      	movs	r3, #7
 8008322:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008324:	2340      	movs	r3, #64	; 0x40
 8008326:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800832c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008330:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008332:	f107 0310 	add.w	r3, r7, #16
 8008336:	4619      	mov	r1, r3
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7ff fea7 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800833e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008342:	2107      	movs	r1, #7
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 f935 	bl	80085b4 <SDMMC_GetCmdResp1>
 800834a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800834e:	4618      	mov	r0, r3
 8008350:	3728      	adds	r7, #40	; 0x28
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b088      	sub	sp, #32
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800836a:	2300      	movs	r3, #0
 800836c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800836e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008372:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7ff fe86 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f8eb 	bl	800855c <SDMMC_GetCmdError>
 8008386:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008388:	69fb      	ldr	r3, [r7, #28]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3720      	adds	r7, #32
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b088      	sub	sp, #32
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800839a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800839e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80083a0:	2308      	movs	r3, #8
 80083a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083b2:	f107 0308 	add.w	r3, r7, #8
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff fe67 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fae2 	bl	8008988 <SDMMC_GetCmdResp7>
 80083c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083c6:	69fb      	ldr	r3, [r7, #28]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3720      	adds	r7, #32
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80083de:	2337      	movs	r3, #55	; 0x37
 80083e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083e2:	2340      	movs	r3, #64	; 0x40
 80083e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083f0:	f107 0308 	add.w	r3, r7, #8
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff fe48 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80083fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008400:	2137      	movs	r1, #55	; 0x37
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8d6 	bl	80085b4 <SDMMC_GetCmdResp1>
 8008408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800840a:	69fb      	ldr	r3, [r7, #28]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3720      	adds	r7, #32
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800842a:	2329      	movs	r3, #41	; 0x29
 800842c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800842e:	2340      	movs	r3, #64	; 0x40
 8008430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008432:	2300      	movs	r3, #0
 8008434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800843a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800843c:	f107 0308 	add.w	r3, r7, #8
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fe22 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f9e9 	bl	8008820 <SDMMC_GetCmdResp3>
 800844e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008450:	69fb      	ldr	r3, [r7, #28]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3720      	adds	r7, #32
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b088      	sub	sp, #32
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008466:	2302      	movs	r3, #2
 8008468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800846a:	23c0      	movs	r3, #192	; 0xc0
 800846c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008476:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008478:	f107 0308 	add.w	r3, r7, #8
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fe04 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f983 	bl	8008790 <SDMMC_GetCmdResp2>
 800848a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800848c:	69fb      	ldr	r3, [r7, #28]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3720      	adds	r7, #32
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b088      	sub	sp, #32
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80084a4:	2309      	movs	r3, #9
 80084a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80084a8:	23c0      	movs	r3, #192	; 0xc0
 80084aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084b6:	f107 0308 	add.w	r3, r7, #8
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff fde5 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f964 	bl	8008790 <SDMMC_GetCmdResp2>
 80084c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084ca:	69fb      	ldr	r3, [r7, #28]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3720      	adds	r7, #32
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80084e2:	2303      	movs	r3, #3
 80084e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084e6:	2340      	movs	r3, #64	; 0x40
 80084e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084f4:	f107 0308 	add.w	r3, r7, #8
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff fdc6 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	2103      	movs	r1, #3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f9c9 	bl	800889c <SDMMC_GetCmdResp6>
 800850a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800850c:	69fb      	ldr	r3, [r7, #28]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3720      	adds	r7, #32
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b088      	sub	sp, #32
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008524:	230d      	movs	r3, #13
 8008526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008528:	2340      	movs	r3, #64	; 0x40
 800852a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800852c:	2300      	movs	r3, #0
 800852e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008534:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008536:	f107 0308 	add.w	r3, r7, #8
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff fda5 	bl	800808c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008542:	f241 3288 	movw	r2, #5000	; 0x1388
 8008546:	210d      	movs	r1, #13
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f833 	bl	80085b4 <SDMMC_GetCmdResp1>
 800854e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008550:	69fb      	ldr	r3, [r7, #28]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3720      	adds	r7, #32
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008564:	4b11      	ldr	r3, [pc, #68]	; (80085ac <SDMMC_GetCmdError+0x50>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a11      	ldr	r2, [pc, #68]	; (80085b0 <SDMMC_GetCmdError+0x54>)
 800856a:	fba2 2303 	umull	r2, r3, r2, r3
 800856e:	0a5b      	lsrs	r3, r3, #9
 8008570:	f241 3288 	movw	r2, #5000	; 0x1388
 8008574:	fb02 f303 	mul.w	r3, r2, r3
 8008578:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1e5a      	subs	r2, r3, #1
 800857e:	60fa      	str	r2, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d102      	bne.n	800858a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008584:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008588:	e009      	b.n	800859e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0f1      	beq.n	800857a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	22c5      	movs	r2, #197	; 0xc5
 800859a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20000008 	.word	0x20000008
 80085b0:	10624dd3 	.word	0x10624dd3

080085b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	460b      	mov	r3, r1
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80085c2:	4b70      	ldr	r3, [pc, #448]	; (8008784 <SDMMC_GetCmdResp1+0x1d0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a70      	ldr	r2, [pc, #448]	; (8008788 <SDMMC_GetCmdResp1+0x1d4>)
 80085c8:	fba2 2303 	umull	r2, r3, r2, r3
 80085cc:	0a5a      	lsrs	r2, r3, #9
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	fb02 f303 	mul.w	r3, r2, r3
 80085d4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	1e5a      	subs	r2, r3, #1
 80085da:	61fa      	str	r2, [r7, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085e4:	e0c9      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0ef      	beq.n	80085d6 <SDMMC_GetCmdResp1+0x22>
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1ea      	bne.n	80085d6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2204      	movs	r2, #4
 8008610:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008612:	2304      	movs	r3, #4
 8008614:	e0b1      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2201      	movs	r2, #1
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008628:	2301      	movs	r3, #1
 800862a:	e0a6      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	22c5      	movs	r2, #197	; 0xc5
 8008630:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff fd54 	bl	80080e0 <SDIO_GetCommandResponse>
 8008638:	4603      	mov	r3, r0
 800863a:	461a      	mov	r2, r3
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	4293      	cmp	r3, r2
 8008640:	d001      	beq.n	8008646 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008642:	2301      	movs	r3, #1
 8008644:	e099      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008646:	2100      	movs	r1, #0
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7ff fd56 	bl	80080fa <SDIO_GetResponse>
 800864e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	4b4e      	ldr	r3, [pc, #312]	; (800878c <SDMMC_GetCmdResp1+0x1d8>)
 8008654:	4013      	ands	r3, r2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800865a:	2300      	movs	r3, #0
 800865c:	e08d      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	da02      	bge.n	800866a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008668:	e087      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008674:	2340      	movs	r3, #64	; 0x40
 8008676:	e080      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008682:	2380      	movs	r3, #128	; 0x80
 8008684:	e079      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008694:	e071      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80086a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086a4:	e069      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80086b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086b4:	e061      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80086c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086c4:	e059      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80086d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086d4:	e051      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80086e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086e4:	e049      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80086f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086f4:	e041      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008704:	e039      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008714:	e031      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008720:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008724:	e029      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008730:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008734:	e021      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008740:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008744:	e019      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008750:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008754:	e011      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008760:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008764:	e009      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f003 0308 	and.w	r3, r3, #8
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008770:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008774:	e001      	b.n	800877a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800877a:	4618      	mov	r0, r3
 800877c:	3720      	adds	r7, #32
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20000008 	.word	0x20000008
 8008788:	10624dd3 	.word	0x10624dd3
 800878c:	fdffe008 	.word	0xfdffe008

08008790 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008798:	4b1f      	ldr	r3, [pc, #124]	; (8008818 <SDMMC_GetCmdResp2+0x88>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a1f      	ldr	r2, [pc, #124]	; (800881c <SDMMC_GetCmdResp2+0x8c>)
 800879e:	fba2 2303 	umull	r2, r3, r2, r3
 80087a2:	0a5b      	lsrs	r3, r3, #9
 80087a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a8:	fb02 f303 	mul.w	r3, r2, r3
 80087ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	1e5a      	subs	r2, r3, #1
 80087b2:	60fa      	str	r2, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087bc:	e026      	b.n	800880c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0ef      	beq.n	80087ae <SDMMC_GetCmdResp2+0x1e>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1ea      	bne.n	80087ae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2204      	movs	r2, #4
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087ea:	2304      	movs	r3, #4
 80087ec:	e00e      	b.n	800880c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d004      	beq.n	8008804 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008800:	2301      	movs	r3, #1
 8008802:	e003      	b.n	800880c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	22c5      	movs	r2, #197	; 0xc5
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	20000008 	.word	0x20000008
 800881c:	10624dd3 	.word	0x10624dd3

08008820 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008828:	4b1a      	ldr	r3, [pc, #104]	; (8008894 <SDMMC_GetCmdResp3+0x74>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a1a      	ldr	r2, [pc, #104]	; (8008898 <SDMMC_GetCmdResp3+0x78>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	0a5b      	lsrs	r3, r3, #9
 8008834:	f241 3288 	movw	r2, #5000	; 0x1388
 8008838:	fb02 f303 	mul.w	r3, r2, r3
 800883c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1e5a      	subs	r2, r3, #1
 8008842:	60fa      	str	r2, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d102      	bne.n	800884e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008848:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800884c:	e01b      	b.n	8008886 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008852:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0ef      	beq.n	800883e <SDMMC_GetCmdResp3+0x1e>
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1ea      	bne.n	800883e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d004      	beq.n	800887e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2204      	movs	r2, #4
 8008878:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800887a:	2304      	movs	r3, #4
 800887c:	e003      	b.n	8008886 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	22c5      	movs	r2, #197	; 0xc5
 8008882:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	20000008 	.word	0x20000008
 8008898:	10624dd3 	.word	0x10624dd3

0800889c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b088      	sub	sp, #32
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	460b      	mov	r3, r1
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088aa:	4b35      	ldr	r3, [pc, #212]	; (8008980 <SDMMC_GetCmdResp6+0xe4>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a35      	ldr	r2, [pc, #212]	; (8008984 <SDMMC_GetCmdResp6+0xe8>)
 80088b0:	fba2 2303 	umull	r2, r3, r2, r3
 80088b4:	0a5b      	lsrs	r3, r3, #9
 80088b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ba:	fb02 f303 	mul.w	r3, r2, r3
 80088be:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	1e5a      	subs	r2, r3, #1
 80088c4:	61fa      	str	r2, [r7, #28]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d102      	bne.n	80088d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ce:	e052      	b.n	8008976 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0ef      	beq.n	80088c0 <SDMMC_GetCmdResp6+0x24>
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1ea      	bne.n	80088c0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2204      	movs	r2, #4
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088fc:	2304      	movs	r3, #4
 80088fe:	e03a      	b.n	8008976 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d004      	beq.n	8008916 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2201      	movs	r2, #1
 8008910:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008912:	2301      	movs	r3, #1
 8008914:	e02f      	b.n	8008976 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f7ff fbe2 	bl	80080e0 <SDIO_GetCommandResponse>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	4293      	cmp	r3, r2
 8008924:	d001      	beq.n	800892a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008926:	2301      	movs	r3, #1
 8008928:	e025      	b.n	8008976 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	22c5      	movs	r2, #197	; 0xc5
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008930:	2100      	movs	r1, #0
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f7ff fbe1 	bl	80080fa <SDIO_GetResponse>
 8008938:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d106      	bne.n	8008952 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	0c1b      	lsrs	r3, r3, #16
 8008948:	b29a      	uxth	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800894e:	2300      	movs	r3, #0
 8008950:	e011      	b.n	8008976 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800895c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008960:	e009      	b.n	8008976 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800896c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008970:	e001      	b.n	8008976 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008976:	4618      	mov	r0, r3
 8008978:	3720      	adds	r7, #32
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20000008 	.word	0x20000008
 8008984:	10624dd3 	.word	0x10624dd3

08008988 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008990:	4b22      	ldr	r3, [pc, #136]	; (8008a1c <SDMMC_GetCmdResp7+0x94>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <SDMMC_GetCmdResp7+0x98>)
 8008996:	fba2 2303 	umull	r2, r3, r2, r3
 800899a:	0a5b      	lsrs	r3, r3, #9
 800899c:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a0:	fb02 f303 	mul.w	r3, r2, r3
 80089a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	1e5a      	subs	r2, r3, #1
 80089aa:	60fa      	str	r2, [r7, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089b4:	e02c      	b.n	8008a10 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0ef      	beq.n	80089a6 <SDMMC_GetCmdResp7+0x1e>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1ea      	bne.n	80089a6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d004      	beq.n	80089e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2204      	movs	r2, #4
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089e2:	2304      	movs	r3, #4
 80089e4:	e014      	b.n	8008a10 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d004      	beq.n	80089fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e009      	b.n	8008a10 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2240      	movs	r2, #64	; 0x40
 8008a0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008a0e:	2300      	movs	r3, #0
  
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	20000008 	.word	0x20000008
 8008a20:	10624dd3 	.word	0x10624dd3

08008a24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a24:	b084      	sub	sp, #16
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	f107 001c 	add.w	r0, r7, #28
 8008a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d122      	bne.n	8008a82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d105      	bne.n	8008a76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 fac6 	bl	800a008 <USB_CoreReset>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	e01a      	b.n	8008ab8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 faba 	bl	800a008 <USB_CoreReset>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8008aaa:	e005      	b.n	8008ab8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d10b      	bne.n	8008ad6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f043 0206 	orr.w	r2, r3, #6
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f043 0220 	orr.w	r2, r3, #32
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ae2:	b004      	add	sp, #16
 8008ae4:	4770      	bx	lr
	...

08008ae8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d165      	bne.n	8008bc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4a41      	ldr	r2, [pc, #260]	; (8008c04 <USB_SetTurnaroundTime+0x11c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d906      	bls.n	8008b12 <USB_SetTurnaroundTime+0x2a>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4a40      	ldr	r2, [pc, #256]	; (8008c08 <USB_SetTurnaroundTime+0x120>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d202      	bcs.n	8008b12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b0c:	230f      	movs	r3, #15
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e062      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	4a3c      	ldr	r2, [pc, #240]	; (8008c08 <USB_SetTurnaroundTime+0x120>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d306      	bcc.n	8008b28 <USB_SetTurnaroundTime+0x40>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4a3b      	ldr	r2, [pc, #236]	; (8008c0c <USB_SetTurnaroundTime+0x124>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d202      	bcs.n	8008b28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b22:	230e      	movs	r3, #14
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	e057      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	4a38      	ldr	r2, [pc, #224]	; (8008c0c <USB_SetTurnaroundTime+0x124>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d306      	bcc.n	8008b3e <USB_SetTurnaroundTime+0x56>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4a37      	ldr	r2, [pc, #220]	; (8008c10 <USB_SetTurnaroundTime+0x128>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d202      	bcs.n	8008b3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b38:	230d      	movs	r3, #13
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	e04c      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	4a33      	ldr	r2, [pc, #204]	; (8008c10 <USB_SetTurnaroundTime+0x128>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d306      	bcc.n	8008b54 <USB_SetTurnaroundTime+0x6c>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	4a32      	ldr	r2, [pc, #200]	; (8008c14 <USB_SetTurnaroundTime+0x12c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d802      	bhi.n	8008b54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b4e:	230c      	movs	r3, #12
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e041      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4a2f      	ldr	r2, [pc, #188]	; (8008c14 <USB_SetTurnaroundTime+0x12c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d906      	bls.n	8008b6a <USB_SetTurnaroundTime+0x82>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	4a2e      	ldr	r2, [pc, #184]	; (8008c18 <USB_SetTurnaroundTime+0x130>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d802      	bhi.n	8008b6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b64:	230b      	movs	r3, #11
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	e036      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4a2a      	ldr	r2, [pc, #168]	; (8008c18 <USB_SetTurnaroundTime+0x130>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d906      	bls.n	8008b80 <USB_SetTurnaroundTime+0x98>
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	4a29      	ldr	r2, [pc, #164]	; (8008c1c <USB_SetTurnaroundTime+0x134>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d802      	bhi.n	8008b80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b7a:	230a      	movs	r3, #10
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e02b      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	4a26      	ldr	r2, [pc, #152]	; (8008c1c <USB_SetTurnaroundTime+0x134>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d906      	bls.n	8008b96 <USB_SetTurnaroundTime+0xae>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4a25      	ldr	r2, [pc, #148]	; (8008c20 <USB_SetTurnaroundTime+0x138>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d202      	bcs.n	8008b96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b90:	2309      	movs	r3, #9
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	e020      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4a21      	ldr	r2, [pc, #132]	; (8008c20 <USB_SetTurnaroundTime+0x138>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d306      	bcc.n	8008bac <USB_SetTurnaroundTime+0xc4>
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	4a20      	ldr	r2, [pc, #128]	; (8008c24 <USB_SetTurnaroundTime+0x13c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d802      	bhi.n	8008bac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	e015      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	4a1d      	ldr	r2, [pc, #116]	; (8008c24 <USB_SetTurnaroundTime+0x13c>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d906      	bls.n	8008bc2 <USB_SetTurnaroundTime+0xda>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	4a1c      	ldr	r2, [pc, #112]	; (8008c28 <USB_SetTurnaroundTime+0x140>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d202      	bcs.n	8008bc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008bbc:	2307      	movs	r3, #7
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	e00a      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008bc2:	2306      	movs	r3, #6
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	e007      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bce:	2309      	movs	r3, #9
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	e001      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bd4:	2309      	movs	r3, #9
 8008bd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	029b      	lsls	r3, r3, #10
 8008bec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	371c      	adds	r7, #28
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	00d8acbf 	.word	0x00d8acbf
 8008c08:	00e4e1c0 	.word	0x00e4e1c0
 8008c0c:	00f42400 	.word	0x00f42400
 8008c10:	01067380 	.word	0x01067380
 8008c14:	011a499f 	.word	0x011a499f
 8008c18:	01312cff 	.word	0x01312cff
 8008c1c:	014ca43f 	.word	0x014ca43f
 8008c20:	016e3600 	.word	0x016e3600
 8008c24:	01a6ab1f 	.word	0x01a6ab1f
 8008c28:	01e84800 	.word	0x01e84800

08008c2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f043 0201 	orr.w	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f023 0201 	bic.w	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d106      	bne.n	8008c9c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60da      	str	r2, [r3, #12]
 8008c9a:	e00b      	b.n	8008cb4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c9c:	78fb      	ldrb	r3, [r7, #3]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d106      	bne.n	8008cb0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	60da      	str	r2, [r3, #12]
 8008cae:	e001      	b.n	8008cb4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e003      	b.n	8008cbc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008cb4:	2032      	movs	r0, #50	; 0x32
 8008cb6:	f7fa f909 	bl	8002ecc <HAL_Delay>

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b086      	sub	sp, #24
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cde:	2300      	movs	r3, #0
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	e009      	b.n	8008cf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3340      	adds	r3, #64	; 0x40
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	2200      	movs	r2, #0
 8008cf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b0e      	cmp	r3, #14
 8008cfc:	d9f2      	bls.n	8008ce4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d11c      	bne.n	8008d3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d12:	f043 0302 	orr.w	r3, r3, #2
 8008d16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8008d3c:	e00b      	b.n	8008d56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	2300      	movs	r3, #0
 8008d60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d68:	4619      	mov	r1, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d70:	461a      	mov	r2, r3
 8008d72:	680b      	ldr	r3, [r1, #0]
 8008d74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d10c      	bne.n	8008d96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d104      	bne.n	8008d8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d82:	2100      	movs	r1, #0
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f949 	bl	800901c <USB_SetDevSpeed>
 8008d8a:	e008      	b.n	8008d9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f944 	bl	800901c <USB_SetDevSpeed>
 8008d94:	e003      	b.n	8008d9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d96:	2103      	movs	r1, #3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f93f 	bl	800901c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d9e:	2110      	movs	r1, #16
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f8f3 	bl	8008f8c <USB_FlushTxFifo>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f911 	bl	8008fd8 <USB_FlushRxFifo>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	2300      	movs	r3, #0
 8008dca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dde:	461a      	mov	r2, r3
 8008de0:	2300      	movs	r3, #0
 8008de2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008de4:	2300      	movs	r3, #0
 8008de6:	613b      	str	r3, [r7, #16]
 8008de8:	e043      	b.n	8008e72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e00:	d118      	bne.n	8008e34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	015a      	lsls	r2, r3, #5
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e14:	461a      	mov	r2, r3
 8008e16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e1a:	6013      	str	r3, [r2, #0]
 8008e1c:	e013      	b.n	8008e46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	e008      	b.n	8008e46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e40:	461a      	mov	r2, r3
 8008e42:	2300      	movs	r3, #0
 8008e44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e52:	461a      	mov	r2, r3
 8008e54:	2300      	movs	r3, #0
 8008e56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e64:	461a      	mov	r2, r3
 8008e66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	613b      	str	r3, [r7, #16]
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d3b7      	bcc.n	8008dea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	613b      	str	r3, [r7, #16]
 8008e7e:	e043      	b.n	8008f08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e96:	d118      	bne.n	8008eca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	e013      	b.n	8008edc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	e008      	b.n	8008edc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	2300      	movs	r3, #0
 8008eda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2300      	movs	r3, #0
 8008eec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efa:	461a      	mov	r2, r3
 8008efc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	3301      	adds	r3, #1
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d3b7      	bcc.n	8008e80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	f043 0210 	orr.w	r2, r3, #16
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	699a      	ldr	r2, [r3, #24]
 8008f48:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <USB_DevInit+0x2c4>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	f043 0208 	orr.w	r2, r3, #8
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d107      	bne.n	8008f78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f70:	f043 0304 	orr.w	r3, r3, #4
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f84:	b004      	add	sp, #16
 8008f86:	4770      	bx	lr
 8008f88:	803c3800 	.word	0x803c3800

08008f8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	019b      	lsls	r3, r3, #6
 8008f9e:	f043 0220 	orr.w	r2, r3, #32
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4a09      	ldr	r2, [pc, #36]	; (8008fd4 <USB_FlushTxFifo+0x48>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d901      	bls.n	8008fb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e006      	b.n	8008fc6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	f003 0320 	and.w	r3, r3, #32
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d0f0      	beq.n	8008fa6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	00030d40 	.word	0x00030d40

08008fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2210      	movs	r2, #16
 8008fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3301      	adds	r3, #1
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a09      	ldr	r2, [pc, #36]	; (8009018 <USB_FlushRxFifo+0x40>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d901      	bls.n	8008ffc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e006      	b.n	800900a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f003 0310 	and.w	r3, r3, #16
 8009004:	2b10      	cmp	r3, #16
 8009006:	d0f0      	beq.n	8008fea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	00030d40 	.word	0x00030d40

0800901c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	78fb      	ldrb	r3, [r7, #3]
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800903c:	4313      	orrs	r3, r2
 800903e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800904e:	b480      	push	{r7}
 8009050:	b087      	sub	sp, #28
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f003 0306 	and.w	r3, r3, #6
 8009066:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800906e:	2300      	movs	r3, #0
 8009070:	75fb      	strb	r3, [r7, #23]
 8009072:	e00a      	b.n	800908a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b02      	cmp	r3, #2
 8009078:	d002      	beq.n	8009080 <USB_GetDevSpeed+0x32>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b06      	cmp	r3, #6
 800907e:	d102      	bne.n	8009086 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009080:	2302      	movs	r3, #2
 8009082:	75fb      	strb	r3, [r7, #23]
 8009084:	e001      	b.n	800908a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009086:	230f      	movs	r3, #15
 8009088:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
}
 800908c:	4618      	mov	r0, r3
 800908e:	371c      	adds	r7, #28
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d13a      	bne.n	800912a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ba:	69da      	ldr	r2, [r3, #28]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	f003 030f 	and.w	r3, r3, #15
 80090c4:	2101      	movs	r1, #1
 80090c6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	68f9      	ldr	r1, [r7, #12]
 80090ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090d2:	4313      	orrs	r3, r2
 80090d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d155      	bne.n	8009198 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	78db      	ldrb	r3, [r3, #3]
 8009106:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009108:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	059b      	lsls	r3, r3, #22
 800910e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009110:	4313      	orrs	r3, r2
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	e036      	b.n	8009198 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009130:	69da      	ldr	r2, [r3, #28]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	2101      	movs	r1, #1
 800913c:	fa01 f303 	lsl.w	r3, r1, r3
 8009140:	041b      	lsls	r3, r3, #16
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009148:	4313      	orrs	r3, r2
 800914a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d11a      	bne.n	8009198 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	78db      	ldrb	r3, [r3, #3]
 800917c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800917e:	430b      	orrs	r3, r1
 8009180:	4313      	orrs	r3, r2
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	0151      	lsls	r1, r2, #5
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	440a      	add	r2, r1
 800918a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800918e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009196:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
	...

080091a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d161      	bne.n	8009288 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091da:	d11f      	bne.n	800921c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	0151      	lsls	r1, r2, #5
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	440a      	add	r2, r1
 80091f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	440a      	add	r2, r1
 8009212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800921a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	f003 030f 	and.w	r3, r3, #15
 800922c:	2101      	movs	r1, #1
 800922e:	fa01 f303 	lsl.w	r3, r1, r3
 8009232:	b29b      	uxth	r3, r3
 8009234:	43db      	mvns	r3, r3
 8009236:	68f9      	ldr	r1, [r7, #12]
 8009238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800923c:	4013      	ands	r3, r2
 800923e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009246:	69da      	ldr	r2, [r3, #28]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	2101      	movs	r1, #1
 8009252:	fa01 f303 	lsl.w	r3, r1, r3
 8009256:	b29b      	uxth	r3, r3
 8009258:	43db      	mvns	r3, r3
 800925a:	68f9      	ldr	r1, [r7, #12]
 800925c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009260:	4013      	ands	r3, r2
 8009262:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	0159      	lsls	r1, r3, #5
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	440b      	add	r3, r1
 800927a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927e:	4619      	mov	r1, r3
 8009280:	4b35      	ldr	r3, [pc, #212]	; (8009358 <USB_DeactivateEndpoint+0x1b0>)
 8009282:	4013      	ands	r3, r2
 8009284:	600b      	str	r3, [r1, #0]
 8009286:	e060      	b.n	800934a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800929a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800929e:	d11f      	bne.n	80092e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	0151      	lsls	r1, r2, #5
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	440a      	add	r2, r1
 80092b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	0151      	lsls	r1, r2, #5
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	440a      	add	r2, r1
 80092d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	f003 030f 	and.w	r3, r3, #15
 80092f0:	2101      	movs	r1, #1
 80092f2:	fa01 f303 	lsl.w	r3, r1, r3
 80092f6:	041b      	lsls	r3, r3, #16
 80092f8:	43db      	mvns	r3, r3
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009300:	4013      	ands	r3, r2
 8009302:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930a:	69da      	ldr	r2, [r3, #28]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	2101      	movs	r1, #1
 8009316:	fa01 f303 	lsl.w	r3, r1, r3
 800931a:	041b      	lsls	r3, r3, #16
 800931c:	43db      	mvns	r3, r3
 800931e:	68f9      	ldr	r1, [r7, #12]
 8009320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009324:	4013      	ands	r3, r2
 8009326:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	0159      	lsls	r1, r3, #5
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	440b      	add	r3, r1
 800933e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009342:	4619      	mov	r1, r3
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <USB_DeactivateEndpoint+0x1b4>)
 8009346:	4013      	ands	r3, r2
 8009348:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	ec337800 	.word	0xec337800
 800935c:	eff37800 	.word	0xeff37800

08009360 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08a      	sub	sp, #40	; 0x28
 8009364:	af02      	add	r7, sp, #8
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	4613      	mov	r3, r2
 800936c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	2b01      	cmp	r3, #1
 800937e:	f040 815c 	bne.w	800963a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d132      	bne.n	80093f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	69ba      	ldr	r2, [r7, #24]
 800939a:	0151      	lsls	r1, r2, #5
 800939c:	69fa      	ldr	r2, [r7, #28]
 800939e:	440a      	add	r2, r1
 80093a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	0151      	lsls	r1, r2, #5
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	440a      	add	r2, r1
 80093c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	0151      	lsls	r1, r2, #5
 80093e0:	69fa      	ldr	r2, [r7, #28]
 80093e2:	440a      	add	r2, r1
 80093e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093e8:	0cdb      	lsrs	r3, r3, #19
 80093ea:	04db      	lsls	r3, r3, #19
 80093ec:	6113      	str	r3, [r2, #16]
 80093ee:	e074      	b.n	80094da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	0151      	lsls	r1, r2, #5
 8009402:	69fa      	ldr	r2, [r7, #28]
 8009404:	440a      	add	r2, r1
 8009406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940a:	0cdb      	lsrs	r3, r3, #19
 800940c:	04db      	lsls	r3, r3, #19
 800940e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	440a      	add	r2, r1
 8009426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800942a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800942e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009440:	691a      	ldr	r2, [r3, #16]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	6959      	ldr	r1, [r3, #20]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	440b      	add	r3, r1
 800944c:	1e59      	subs	r1, r3, #1
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	fbb1 f3f3 	udiv	r3, r1, r3
 8009456:	04d9      	lsls	r1, r3, #19
 8009458:	4b9d      	ldr	r3, [pc, #628]	; (80096d0 <USB_EPStartXfer+0x370>)
 800945a:	400b      	ands	r3, r1
 800945c:	69b9      	ldr	r1, [r7, #24]
 800945e:	0148      	lsls	r0, r1, #5
 8009460:	69f9      	ldr	r1, [r7, #28]
 8009462:	4401      	add	r1, r0
 8009464:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009468:	4313      	orrs	r3, r2
 800946a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009482:	69b9      	ldr	r1, [r7, #24]
 8009484:	0148      	lsls	r0, r1, #5
 8009486:	69f9      	ldr	r1, [r7, #28]
 8009488:	4401      	add	r1, r0
 800948a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800948e:	4313      	orrs	r3, r2
 8009490:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	78db      	ldrb	r3, [r3, #3]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d11f      	bne.n	80094da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	0151      	lsls	r1, r2, #5
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	440a      	add	r2, r1
 80094b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80094b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	0151      	lsls	r1, r2, #5
 80094cc:	69fa      	ldr	r2, [r7, #28]
 80094ce:	440a      	add	r2, r1
 80094d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d14b      	bne.n	8009578 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d009      	beq.n	80094fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f4:	461a      	mov	r2, r3
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	78db      	ldrb	r3, [r3, #3]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d128      	bne.n	8009556 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009510:	2b00      	cmp	r3, #0
 8009512:	d110      	bne.n	8009536 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	440a      	add	r2, r1
 800952a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800952e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	e00f      	b.n	8009556 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	0151      	lsls	r1, r2, #5
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	440a      	add	r2, r1
 800954c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009554:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	0151      	lsls	r1, r2, #5
 8009568:	69fa      	ldr	r2, [r7, #28]
 800956a:	440a      	add	r2, r1
 800956c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	e12f      	b.n	80097d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	0151      	lsls	r1, r2, #5
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	440a      	add	r2, r1
 800958e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009596:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	78db      	ldrb	r3, [r3, #3]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d015      	beq.n	80095cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	695b      	ldr	r3, [r3, #20]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 8117 	beq.w	80097d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	2101      	movs	r1, #1
 80095bc:	fa01 f303 	lsl.w	r3, r1, r3
 80095c0:	69f9      	ldr	r1, [r7, #28]
 80095c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095c6:	4313      	orrs	r3, r2
 80095c8:	634b      	str	r3, [r1, #52]	; 0x34
 80095ca:	e105      	b.n	80097d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d110      	bne.n	80095fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	0151      	lsls	r1, r2, #5
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	440a      	add	r2, r1
 80095f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	e00f      	b.n	800961e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	0151      	lsls	r1, r2, #5
 8009610:	69fa      	ldr	r2, [r7, #28]
 8009612:	440a      	add	r2, r1
 8009614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800961c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	68d9      	ldr	r1, [r3, #12]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	781a      	ldrb	r2, [r3, #0]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	b298      	uxth	r0, r3
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	4603      	mov	r3, r0
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 fa2b 	bl	8009a8e <USB_WritePacket>
 8009638:	e0ce      	b.n	80097d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	69fa      	ldr	r2, [r7, #28]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009654:	0cdb      	lsrs	r3, r3, #19
 8009656:	04db      	lsls	r3, r3, #19
 8009658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	0151      	lsls	r1, r2, #5
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	440a      	add	r2, r1
 8009670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800967c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d126      	bne.n	80096d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800969c:	69b9      	ldr	r1, [r7, #24]
 800969e:	0148      	lsls	r0, r1, #5
 80096a0:	69f9      	ldr	r1, [r7, #28]
 80096a2:	4401      	add	r1, r0
 80096a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096a8:	4313      	orrs	r3, r2
 80096aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	69ba      	ldr	r2, [r7, #24]
 80096bc:	0151      	lsls	r1, r2, #5
 80096be:	69fa      	ldr	r2, [r7, #28]
 80096c0:	440a      	add	r2, r1
 80096c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096ca:	6113      	str	r3, [r2, #16]
 80096cc:	e036      	b.n	800973c <USB_EPStartXfer+0x3dc>
 80096ce:	bf00      	nop
 80096d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	695a      	ldr	r2, [r3, #20]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	4413      	add	r3, r2
 80096de:	1e5a      	subs	r2, r3, #1
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	8afb      	ldrh	r3, [r7, #22]
 80096fa:	04d9      	lsls	r1, r3, #19
 80096fc:	4b39      	ldr	r3, [pc, #228]	; (80097e4 <USB_EPStartXfer+0x484>)
 80096fe:	400b      	ands	r3, r1
 8009700:	69b9      	ldr	r1, [r7, #24]
 8009702:	0148      	lsls	r0, r1, #5
 8009704:	69f9      	ldr	r1, [r7, #28]
 8009706:	4401      	add	r1, r0
 8009708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800970c:	4313      	orrs	r3, r2
 800970e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971c:	691a      	ldr	r2, [r3, #16]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	8af9      	ldrh	r1, [r7, #22]
 8009724:	fb01 f303 	mul.w	r3, r1, r3
 8009728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800972c:	69b9      	ldr	r1, [r7, #24]
 800972e:	0148      	lsls	r0, r1, #5
 8009730:	69f9      	ldr	r1, [r7, #28]
 8009732:	4401      	add	r1, r0
 8009734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009738:	4313      	orrs	r3, r2
 800973a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d10d      	bne.n	800975e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	68d9      	ldr	r1, [r3, #12]
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975a:	460a      	mov	r2, r1
 800975c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	78db      	ldrb	r3, [r3, #3]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d128      	bne.n	80097b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009772:	2b00      	cmp	r3, #0
 8009774:	d110      	bne.n	8009798 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	0151      	lsls	r1, r2, #5
 8009788:	69fa      	ldr	r2, [r7, #28]
 800978a:	440a      	add	r2, r1
 800978c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	e00f      	b.n	80097b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	0151      	lsls	r1, r2, #5
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	440a      	add	r2, r1
 80097ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	1ff80000 	.word	0x1ff80000

080097e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	4613      	mov	r3, r2
 80097f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	785b      	ldrb	r3, [r3, #1]
 8009804:	2b01      	cmp	r3, #1
 8009806:	f040 80cd 	bne.w	80099a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d132      	bne.n	8009878 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	4413      	add	r3, r2
 800981a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	0151      	lsls	r1, r2, #5
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	440a      	add	r2, r1
 8009828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	440a      	add	r2, r1
 800984c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	4413      	add	r3, r2
 800985e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	0151      	lsls	r1, r2, #5
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	440a      	add	r2, r1
 800986c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009870:	0cdb      	lsrs	r3, r3, #19
 8009872:	04db      	lsls	r3, r3, #19
 8009874:	6113      	str	r3, [r2, #16]
 8009876:	e04e      	b.n	8009916 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	0151      	lsls	r1, r2, #5
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	440a      	add	r2, r1
 800988e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009892:	0cdb      	lsrs	r3, r3, #19
 8009894:	04db      	lsls	r3, r3, #19
 8009896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	0151      	lsls	r1, r2, #5
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	440a      	add	r2, r1
 80098ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	695a      	ldr	r2, [r3, #20]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d903      	bls.n	80098d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	0151      	lsls	r1, r2, #5
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	440a      	add	r2, r1
 80098e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	691a      	ldr	r2, [r3, #16]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009906:	6939      	ldr	r1, [r7, #16]
 8009908:	0148      	lsls	r0, r1, #5
 800990a:	6979      	ldr	r1, [r7, #20]
 800990c:	4401      	add	r1, r0
 800990e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009912:	4313      	orrs	r3, r2
 8009914:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d11e      	bne.n	800995a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d009      	beq.n	8009938 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	461a      	mov	r2, r3
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	440a      	add	r2, r1
 800994e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	e092      	b.n	8009a80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	0151      	lsls	r1, r2, #5
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	440a      	add	r2, r1
 8009970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009978:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d07e      	beq.n	8009a80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	f003 030f 	and.w	r3, r3, #15
 8009992:	2101      	movs	r1, #1
 8009994:	fa01 f303 	lsl.w	r3, r1, r3
 8009998:	6979      	ldr	r1, [r7, #20]
 800999a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800999e:	4313      	orrs	r3, r2
 80099a0:	634b      	str	r3, [r1, #52]	; 0x34
 80099a2:	e06d      	b.n	8009a80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099be:	0cdb      	lsrs	r3, r3, #19
 80099c0:	04db      	lsls	r3, r3, #19
 80099c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	0151      	lsls	r1, r2, #5
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	440a      	add	r2, r1
 80099da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	0151      	lsls	r1, r2, #5
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	440a      	add	r2, r1
 8009a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a2e:	6939      	ldr	r1, [r7, #16]
 8009a30:	0148      	lsls	r0, r1, #5
 8009a32:	6979      	ldr	r1, [r7, #20]
 8009a34:	4401      	add	r1, r0
 8009a36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d10d      	bne.n	8009a60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d009      	beq.n	8009a60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	68d9      	ldr	r1, [r3, #12]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5c:	460a      	mov	r2, r1
 8009a5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	371c      	adds	r7, #28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b089      	sub	sp, #36	; 0x24
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	60b9      	str	r1, [r7, #8]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	71fb      	strb	r3, [r7, #7]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d11a      	bne.n	8009aea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ab4:	88bb      	ldrh	r3, [r7, #4]
 8009ab6:	3303      	adds	r3, #3
 8009ab8:	089b      	lsrs	r3, r3, #2
 8009aba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009abc:	2300      	movs	r3, #0
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	e00f      	b.n	8009ae2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009ac2:	79fb      	ldrb	r3, [r7, #7]
 8009ac4:	031a      	lsls	r2, r3, #12
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ace:	461a      	mov	r2, r3
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	61bb      	str	r3, [r7, #24]
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d3eb      	bcc.n	8009ac2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3724      	adds	r7, #36	; 0x24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b089      	sub	sp, #36	; 0x24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	4613      	mov	r3, r2
 8009b04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009b0e:	88fb      	ldrh	r3, [r7, #6]
 8009b10:	3303      	adds	r3, #3
 8009b12:	089b      	lsrs	r3, r3, #2
 8009b14:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	61bb      	str	r3, [r7, #24]
 8009b1a:	e00b      	b.n	8009b34 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	3301      	adds	r3, #1
 8009b32:	61bb      	str	r3, [r7, #24]
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d3ef      	bcc.n	8009b1c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009b3c:	69fb      	ldr	r3, [r7, #28]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3724      	adds	r7, #36	; 0x24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b085      	sub	sp, #20
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	785b      	ldrb	r3, [r3, #1]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d12c      	bne.n	8009bc0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	015a      	lsls	r2, r3, #5
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	db12      	blt.n	8009b9e <USB_EPSetStall+0x54>
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00f      	beq.n	8009b9e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	015a      	lsls	r2, r3, #5
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	0151      	lsls	r1, r2, #5
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	440a      	add	r2, r1
 8009b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b9c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	0151      	lsls	r1, r2, #5
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	440a      	add	r2, r1
 8009bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bbc:	6013      	str	r3, [r2, #0]
 8009bbe:	e02b      	b.n	8009c18 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	db12      	blt.n	8009bf8 <USB_EPSetStall+0xae>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00f      	beq.n	8009bf8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	0151      	lsls	r1, r2, #5
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	440a      	add	r2, r1
 8009bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bf6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	0151      	lsls	r1, r2, #5
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	440a      	add	r2, r1
 8009c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b085      	sub	sp, #20
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d128      	bne.n	8009c94 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	015a      	lsls	r2, r3, #5
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	0151      	lsls	r1, r2, #5
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	440a      	add	r2, r1
 8009c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	78db      	ldrb	r3, [r3, #3]
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d003      	beq.n	8009c72 <USB_EPClearStall+0x4c>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	78db      	ldrb	r3, [r3, #3]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d138      	bne.n	8009ce4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	0151      	lsls	r1, r2, #5
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	440a      	add	r2, r1
 8009c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	e027      	b.n	8009ce4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	0151      	lsls	r1, r2, #5
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	440a      	add	r2, r1
 8009caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	78db      	ldrb	r3, [r3, #3]
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d003      	beq.n	8009cc4 <USB_EPClearStall+0x9e>
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	78db      	ldrb	r3, [r3, #3]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d10f      	bne.n	8009ce4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b085      	sub	sp, #20
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d14:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	78fb      	ldrb	r3, [r7, #3]
 8009d20:	011b      	lsls	r3, r3, #4
 8009d22:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d26:	68f9      	ldr	r1, [r7, #12]
 8009d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d58:	f023 0303 	bic.w	r3, r3, #3
 8009d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d6c:	f023 0302 	bic.w	r3, r3, #2
 8009d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d9a:	f023 0303 	bic.w	r3, r3, #3
 8009d9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dae:	f043 0302 	orr.w	r3, r3, #2
 8009db2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009dda:	68fb      	ldr	r3, [r7, #12]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	0c1b      	lsrs	r3, r3, #16
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	b29b      	uxth	r3, r3
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009eb0:	78fb      	ldrb	r3, [r7, #3]
 8009eb2:	f003 030f 	and.w	r3, r3, #15
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ebc:	01db      	lsls	r3, r3, #7
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ec6:	78fb      	ldrb	r3, [r7, #3]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009eda:	68bb      	ldr	r3, [r7, #8]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	371c      	adds	r7, #28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	f003 0301 	and.w	r3, r3, #1
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f22:	f023 0307 	bic.w	r3, r3, #7
 8009f26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
	...

08009f4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	460b      	mov	r3, r1
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	333c      	adds	r3, #60	; 0x3c
 8009f62:	3304      	adds	r3, #4
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4a26      	ldr	r2, [pc, #152]	; (800a004 <USB_EP0_OutStart+0xb8>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d90a      	bls.n	8009f86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f80:	d101      	bne.n	8009f86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	e037      	b.n	8009ff6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	2300      	movs	r3, #0
 8009f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb4:	f043 0318 	orr.w	r3, r3, #24
 8009fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d10f      	bne.n	8009ff4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fda:	461a      	mov	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	4f54300a 	.word	0x4f54300a

0800a008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a010:	2300      	movs	r3, #0
 800a012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3301      	adds	r3, #1
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4a13      	ldr	r2, [pc, #76]	; (800a06c <USB_CoreReset+0x64>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d901      	bls.n	800a026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e01b      	b.n	800a05e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	daf2      	bge.n	800a014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	f043 0201 	orr.w	r2, r3, #1
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3301      	adds	r3, #1
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4a09      	ldr	r2, [pc, #36]	; (800a06c <USB_CoreReset+0x64>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d901      	bls.n	800a050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a04c:	2303      	movs	r3, #3
 800a04e:	e006      	b.n	800a05e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d0f0      	beq.n	800a03e <USB_CoreReset+0x36>

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	00030d40 	.word	0x00030d40

0800a070 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a074:	4904      	ldr	r1, [pc, #16]	; (800a088 <MX_FATFS_Init+0x18>)
 800a076:	4805      	ldr	r0, [pc, #20]	; (800a08c <MX_FATFS_Init+0x1c>)
 800a078:	f005 f84c 	bl	800f114 <FATFS_LinkDriver>
 800a07c:	4603      	mov	r3, r0
 800a07e:	461a      	mov	r2, r3
 800a080:	4b03      	ldr	r3, [pc, #12]	; (800a090 <MX_FATFS_Init+0x20>)
 800a082:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a084:	bf00      	nop
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20002ae4 	.word	0x20002ae4
 800a08c:	08014b2c 	.word	0x08014b2c
 800a090:	20002ae0 	.word	0x20002ae0

0800a094 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a094:	b480      	push	{r7}
 800a096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a098:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a0ae:	f000 f86b 	bl	800a188 <BSP_SD_IsDetected>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d001      	beq.n	800a0bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e005      	b.n	800a0c8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a0bc:	4804      	ldr	r0, [pc, #16]	; (800a0d0 <BSP_SD_Init+0x2c>)
 800a0be:	f7fc fa47 	bl	8006550 <HAL_SD_Init>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a0c6:	79fb      	ldrb	r3, [r7, #7]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	200029d8 	.word	0x200029d8

0800a0d4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	68f9      	ldr	r1, [r7, #12]
 800a0f0:	4806      	ldr	r0, [pc, #24]	; (800a10c <BSP_SD_ReadBlocks+0x38>)
 800a0f2:	f7fc fadb 	bl	80066ac <HAL_SD_ReadBlocks>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	200029d8 	.word	0x200029d8

0800a110 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b088      	sub	sp, #32
 800a114:	af02      	add	r7, sp, #8
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	68f9      	ldr	r1, [r7, #12]
 800a12c:	4806      	ldr	r0, [pc, #24]	; (800a148 <BSP_SD_WriteBlocks+0x38>)
 800a12e:	f7fc fc9b 	bl	8006a68 <HAL_SD_WriteBlocks>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	200029d8 	.word	0x200029d8

0800a14c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a150:	4805      	ldr	r0, [pc, #20]	; (800a168 <BSP_SD_GetCardState+0x1c>)
 800a152:	f7fc ffdf 	bl	8007114 <HAL_SD_GetCardState>
 800a156:	4603      	mov	r3, r0
 800a158:	2b04      	cmp	r3, #4
 800a15a:	bf14      	ite	ne
 800a15c:	2301      	movne	r3, #1
 800a15e:	2300      	moveq	r3, #0
 800a160:	b2db      	uxtb	r3, r3
}
 800a162:	4618      	mov	r0, r3
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	200029d8 	.word	0x200029d8

0800a16c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	4803      	ldr	r0, [pc, #12]	; (800a184 <BSP_SD_GetCardInfo+0x18>)
 800a178:	f7fc ffa0 	bl	80070bc <HAL_SD_GetCardInfo>
}
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	200029d8 	.word	0x200029d8

0800a188 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a18e:	2301      	movs	r3, #1
 800a190:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	b2db      	uxtb	r3, r3
}
 800a196:	4618      	mov	r0, r3
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
	...

0800a1a4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a1ae:	4b0b      	ldr	r3, [pc, #44]	; (800a1dc <SD_CheckStatus+0x38>)
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a1b4:	f7ff ffca 	bl	800a14c <BSP_SD_GetCardState>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d107      	bne.n	800a1ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a1be:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <SD_CheckStatus+0x38>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f023 0301 	bic.w	r3, r3, #1
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <SD_CheckStatus+0x38>)
 800a1cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a1ce:	4b03      	ldr	r3, [pc, #12]	; (800a1dc <SD_CheckStatus+0x38>)
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	b2db      	uxtb	r3, r3
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20000011 	.word	0x20000011

0800a1e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a1ea:	4b0b      	ldr	r3, [pc, #44]	; (800a218 <SD_initialize+0x38>)
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a1f0:	f7ff ff58 	bl	800a0a4 <BSP_SD_Init>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d107      	bne.n	800a20a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a1fa:	79fb      	ldrb	r3, [r7, #7]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff ffd1 	bl	800a1a4 <SD_CheckStatus>
 800a202:	4603      	mov	r3, r0
 800a204:	461a      	mov	r2, r3
 800a206:	4b04      	ldr	r3, [pc, #16]	; (800a218 <SD_initialize+0x38>)
 800a208:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a20a:	4b03      	ldr	r3, [pc, #12]	; (800a218 <SD_initialize+0x38>)
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	b2db      	uxtb	r3, r3
}
 800a210:	4618      	mov	r0, r3
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000011 	.word	0x20000011

0800a21c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff ffbb 	bl	800a1a4 <SD_CheckStatus>
 800a22e:	4603      	mov	r3, r0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	4603      	mov	r3, r0
 800a246:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a24c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	68b8      	ldr	r0, [r7, #8]
 800a256:	f7ff ff3d 	bl	800a0d4 <BSP_SD_ReadBlocks>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d107      	bne.n	800a270 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a260:	bf00      	nop
 800a262:	f7ff ff73 	bl	800a14c <BSP_SD_GetCardState>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1fa      	bne.n	800a262 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a270:	7dfb      	ldrb	r3, [r7, #23]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b086      	sub	sp, #24
 800a27e:	af00      	add	r7, sp, #0
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	603b      	str	r3, [r7, #0]
 800a286:	4603      	mov	r3, r0
 800a288:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	6879      	ldr	r1, [r7, #4]
 800a296:	68b8      	ldr	r0, [r7, #8]
 800a298:	f7ff ff3a 	bl	800a110 <BSP_SD_WriteBlocks>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d107      	bne.n	800a2b2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a2a2:	bf00      	nop
 800a2a4:	f7ff ff52 	bl	800a14c <BSP_SD_GetCardState>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1fa      	bne.n	800a2a4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08c      	sub	sp, #48	; 0x30
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	603a      	str	r2, [r7, #0]
 800a2c6:	71fb      	strb	r3, [r7, #7]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a2d2:	4b25      	ldr	r3, [pc, #148]	; (800a368 <SD_ioctl+0xac>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <SD_ioctl+0x28>
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e03c      	b.n	800a35e <SD_ioctl+0xa2>

  switch (cmd)
 800a2e4:	79bb      	ldrb	r3, [r7, #6]
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d834      	bhi.n	800a354 <SD_ioctl+0x98>
 800a2ea:	a201      	add	r2, pc, #4	; (adr r2, 800a2f0 <SD_ioctl+0x34>)
 800a2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f0:	0800a301 	.word	0x0800a301
 800a2f4:	0800a309 	.word	0x0800a309
 800a2f8:	0800a321 	.word	0x0800a321
 800a2fc:	0800a33b 	.word	0x0800a33b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a306:	e028      	b.n	800a35a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a308:	f107 030c 	add.w	r3, r7, #12
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff ff2d 	bl	800a16c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a31e:	e01c      	b.n	800a35a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a320:	f107 030c 	add.w	r3, r7, #12
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff ff21 	bl	800a16c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a338:	e00f      	b.n	800a35a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a33a:	f107 030c 	add.w	r3, r7, #12
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff ff14 	bl	800a16c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	0a5a      	lsrs	r2, r3, #9
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a352:	e002      	b.n	800a35a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a354:	2304      	movs	r3, #4
 800a356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a35a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3730      	adds	r7, #48	; 0x30
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20000011 	.word	0x20000011

0800a36c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	460b      	mov	r3, r1
 800a376:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a378:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a37c:	f005 fcbc 	bl	800fcf8 <USBD_static_malloc>
 800a380:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d105      	bne.n	800a394 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a390:	2302      	movs	r3, #2
 800a392:	e066      	b.n	800a462 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	7c1b      	ldrb	r3, [r3, #16]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d119      	bne.n	800a3d8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	2181      	movs	r1, #129	; 0x81
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f005 fb80 	bl	800fab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3bc:	2202      	movs	r2, #2
 800a3be:	2101      	movs	r1, #1
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f005 fb76 	bl	800fab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2210      	movs	r2, #16
 800a3d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a3d6:	e016      	b.n	800a406 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3d8:	2340      	movs	r3, #64	; 0x40
 800a3da:	2202      	movs	r2, #2
 800a3dc:	2181      	movs	r1, #129	; 0x81
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f005 fb67 	bl	800fab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3ea:	2340      	movs	r3, #64	; 0x40
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f005 fb5e 	bl	800fab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2210      	movs	r2, #16
 800a402:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a406:	2308      	movs	r3, #8
 800a408:	2203      	movs	r2, #3
 800a40a:	2182      	movs	r1, #130	; 0x82
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f005 fb50 	bl	800fab2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	7c1b      	ldrb	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d109      	bne.n	800a450 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a442:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a446:	2101      	movs	r1, #1
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f005 fc21 	bl	800fc90 <USBD_LL_PrepareReceive>
 800a44e:	e007      	b.n	800a460 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a456:	2340      	movs	r3, #64	; 0x40
 800a458:	2101      	movs	r1, #1
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f005 fc18 	bl	800fc90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b082      	sub	sp, #8
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	460b      	mov	r3, r1
 800a474:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a476:	2181      	movs	r1, #129	; 0x81
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f005 fb40 	bl	800fafe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a484:	2101      	movs	r1, #1
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f005 fb39 	bl	800fafe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a494:	2182      	movs	r1, #130	; 0x82
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f005 fb31 	bl	800fafe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00e      	beq.n	800a4d4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f005 fc24 	bl	800fd14 <USBD_static_free>
    pdev->pClassData = NULL;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a504:	2303      	movs	r3, #3
 800a506:	e0af      	b.n	800a668 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a510:	2b00      	cmp	r3, #0
 800a512:	d03f      	beq.n	800a594 <USBD_CDC_Setup+0xb4>
 800a514:	2b20      	cmp	r3, #32
 800a516:	f040 809f 	bne.w	800a658 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	88db      	ldrh	r3, [r3, #6]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d02e      	beq.n	800a580 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	b25b      	sxtb	r3, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	da16      	bge.n	800a55a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	683a      	ldr	r2, [r7, #0]
 800a536:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a538:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	88d2      	ldrh	r2, [r2, #6]
 800a53e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	88db      	ldrh	r3, [r3, #6]
 800a544:	2b07      	cmp	r3, #7
 800a546:	bf28      	it	cs
 800a548:	2307      	movcs	r3, #7
 800a54a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	89fa      	ldrh	r2, [r7, #14]
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f001 fb19 	bl	800bb8a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a558:	e085      	b.n	800a666 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	785a      	ldrb	r2, [r3, #1]
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	88db      	ldrh	r3, [r3, #6]
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a570:	6939      	ldr	r1, [r7, #16]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	88db      	ldrh	r3, [r3, #6]
 800a576:	461a      	mov	r2, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 fb32 	bl	800bbe2 <USBD_CtlPrepareRx>
      break;
 800a57e:	e072      	b.n	800a666 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	7850      	ldrb	r0, [r2, #1]
 800a58c:	2200      	movs	r2, #0
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	4798      	blx	r3
      break;
 800a592:	e068      	b.n	800a666 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	785b      	ldrb	r3, [r3, #1]
 800a598:	2b0b      	cmp	r3, #11
 800a59a:	d852      	bhi.n	800a642 <USBD_CDC_Setup+0x162>
 800a59c:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <USBD_CDC_Setup+0xc4>)
 800a59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a2:	bf00      	nop
 800a5a4:	0800a5d5 	.word	0x0800a5d5
 800a5a8:	0800a651 	.word	0x0800a651
 800a5ac:	0800a643 	.word	0x0800a643
 800a5b0:	0800a643 	.word	0x0800a643
 800a5b4:	0800a643 	.word	0x0800a643
 800a5b8:	0800a643 	.word	0x0800a643
 800a5bc:	0800a643 	.word	0x0800a643
 800a5c0:	0800a643 	.word	0x0800a643
 800a5c4:	0800a643 	.word	0x0800a643
 800a5c8:	0800a643 	.word	0x0800a643
 800a5cc:	0800a5ff 	.word	0x0800a5ff
 800a5d0:	0800a629 	.word	0x0800a629
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b03      	cmp	r3, #3
 800a5de:	d107      	bne.n	800a5f0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5e0:	f107 030a 	add.w	r3, r7, #10
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 face 	bl	800bb8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5ee:	e032      	b.n	800a656 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 fa58 	bl	800baa8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	75fb      	strb	r3, [r7, #23]
          break;
 800a5fc:	e02b      	b.n	800a656 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b03      	cmp	r3, #3
 800a608:	d107      	bne.n	800a61a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a60a:	f107 030d 	add.w	r3, r7, #13
 800a60e:	2201      	movs	r2, #1
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f001 fab9 	bl	800bb8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a618:	e01d      	b.n	800a656 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f001 fa43 	bl	800baa8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a622:	2303      	movs	r3, #3
 800a624:	75fb      	strb	r3, [r7, #23]
          break;
 800a626:	e016      	b.n	800a656 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b03      	cmp	r3, #3
 800a632:	d00f      	beq.n	800a654 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f001 fa36 	bl	800baa8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a63c:	2303      	movs	r3, #3
 800a63e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a640:	e008      	b.n	800a654 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 fa2f 	bl	800baa8 <USBD_CtlError>
          ret = USBD_FAIL;
 800a64a:	2303      	movs	r3, #3
 800a64c:	75fb      	strb	r3, [r7, #23]
          break;
 800a64e:	e002      	b.n	800a656 <USBD_CDC_Setup+0x176>
          break;
 800a650:	bf00      	nop
 800a652:	e008      	b.n	800a666 <USBD_CDC_Setup+0x186>
          break;
 800a654:	bf00      	nop
      }
      break;
 800a656:	e006      	b.n	800a666 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a658:	6839      	ldr	r1, [r7, #0]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f001 fa24 	bl	800baa8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a660:	2303      	movs	r3, #3
 800a662:	75fb      	strb	r3, [r7, #23]
      break;
 800a664:	bf00      	nop
  }

  return (uint8_t)ret;
 800a666:	7dfb      	ldrb	r3, [r7, #23]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a682:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a68e:	2303      	movs	r3, #3
 800a690:	e04f      	b.n	800a732 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a698:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	3318      	adds	r3, #24
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d029      	beq.n	800a704 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a6b0:	78fa      	ldrb	r2, [r7, #3]
 800a6b2:	6879      	ldr	r1, [r7, #4]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	440b      	add	r3, r1
 800a6be:	3318      	adds	r3, #24
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	78f9      	ldrb	r1, [r7, #3]
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	1a5b      	subs	r3, r3, r1
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4403      	add	r3, r0
 800a6d0:	3344      	adds	r3, #68	; 0x44
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a6d8:	fb03 f301 	mul.w	r3, r3, r1
 800a6dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d110      	bne.n	800a704 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a6e2:	78fa      	ldrb	r2, [r7, #3]
 800a6e4:	6879      	ldr	r1, [r7, #4]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	440b      	add	r3, r1
 800a6f0:	3318      	adds	r3, #24
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a6f6:	78f9      	ldrb	r1, [r7, #3]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f005 faa6 	bl	800fc4e <USBD_LL_Transmit>
 800a702:	e015      	b.n	800a730 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00b      	beq.n	800a730 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	460b      	mov	r3, r1
 800a744:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a74c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	e015      	b.n	800a788 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a75c:	78fb      	ldrb	r3, [r7, #3]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f005 fab6 	bl	800fcd2 <USBD_LL_GetRxDataSize>
 800a766:	4602      	mov	r2, r0
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a782:	4611      	mov	r1, r2
 800a784:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a79e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e01b      	b.n	800a7e2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d015      	beq.n	800a7e0 <USBD_CDC_EP0_RxReady+0x50>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a7ba:	2bff      	cmp	r3, #255	; 0xff
 800a7bc:	d010      	beq.n	800a7e0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a7cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7d4:	b292      	uxth	r2, r2
 800a7d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	22ff      	movs	r2, #255	; 0xff
 800a7dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2243      	movs	r2, #67	; 0x43
 800a7f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a7fa:	4b03      	ldr	r3, [pc, #12]	; (800a808 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	2000009c 	.word	0x2000009c

0800a80c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2243      	movs	r2, #67	; 0x43
 800a818:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a81a:	4b03      	ldr	r3, [pc, #12]	; (800a828 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	20000058 	.word	0x20000058

0800a82c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2243      	movs	r2, #67	; 0x43
 800a838:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a83a:	4b03      	ldr	r3, [pc, #12]	; (800a848 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	200000e0 	.word	0x200000e0

0800a84c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	220a      	movs	r2, #10
 800a858:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a85a:	4b03      	ldr	r3, [pc, #12]	; (800a868 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	20000014 	.word	0x20000014

0800a86c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e004      	b.n	800a88a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a896:	b480      	push	{r7}
 800a898:	b087      	sub	sp, #28
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8a8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e008      	b.n	800a8c6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e004      	b.n	800a8f8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a912:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a914:	2301      	movs	r3, #1
 800a916:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a922:	2303      	movs	r3, #3
 800a924:	e01a      	b.n	800a95c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d114      	bne.n	800a95a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2201      	movs	r2, #1
 800a934:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a94e:	2181      	movs	r1, #129	; 0x81
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f005 f97c 	bl	800fc4e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a972:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d101      	bne.n	800a982 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a97e:	2303      	movs	r3, #3
 800a980:	e016      	b.n	800a9b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7c1b      	ldrb	r3, [r3, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d109      	bne.n	800a99e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a990:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a994:	2101      	movs	r1, #1
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f005 f97a 	bl	800fc90 <USBD_LL_PrepareReceive>
 800a99c:	e007      	b.n	800a9ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9a4:	2340      	movs	r3, #64	; 0x40
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f005 f971 	bl	800fc90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e01f      	b.n	800aa10 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	79fa      	ldrb	r2, [r7, #7]
 800aa02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f004 ffed 	bl	800f9e4 <USBD_LL_Init>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3718      	adds	r7, #24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e016      	b.n	800aa5e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	f107 020e 	add.w	r2, r7, #14
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
 800aa54:	4602      	mov	r2, r0
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f005 f804 	bl	800fa7c <USBD_LL_Start>
 800aa74:	4603      	mov	r3, r0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d009      	beq.n	800aac2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	78fa      	ldrb	r2, [r7, #3]
 800aab8:	4611      	mov	r1, r2
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	4798      	blx	r3
 800aabe:	4603      	mov	r3, r0
 800aac0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d007      	beq.n	800aaf2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	78fa      	ldrb	r2, [r7, #3]
 800aaec:	4611      	mov	r1, r2
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	4798      	blx	r3
  }

  return USBD_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 ff90 	bl	800ba34 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab22:	461a      	mov	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab30:	f003 031f 	and.w	r3, r3, #31
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d01a      	beq.n	800ab6e <USBD_LL_SetupStage+0x72>
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d822      	bhi.n	800ab82 <USBD_LL_SetupStage+0x86>
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <USBD_LL_SetupStage+0x4a>
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d00a      	beq.n	800ab5a <USBD_LL_SetupStage+0x5e>
 800ab44:	e01d      	b.n	800ab82 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fa62 	bl	800b018 <USBD_StdDevReq>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]
      break;
 800ab58:	e020      	b.n	800ab9c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fac6 	bl	800b0f4 <USBD_StdItfReq>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab6c:	e016      	b.n	800ab9c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fb05 	bl	800b186 <USBD_StdEPReq>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab80:	e00c      	b.n	800ab9c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f004 ffd3 	bl	800fb3c <USBD_LL_StallEP>
 800ab96:	4603      	mov	r3, r0
 800ab98:	73fb      	strb	r3, [r7, #15]
      break;
 800ab9a:	bf00      	nop
  }

  return ret;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b086      	sub	sp, #24
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	460b      	mov	r3, r1
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800abb4:	7afb      	ldrb	r3, [r7, #11]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d138      	bne.n	800ac2c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800abc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d14a      	bne.n	800ac62 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	689a      	ldr	r2, [r3, #8]
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d913      	bls.n	800ac00 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	689a      	ldr	r2, [r3, #8]
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	1ad2      	subs	r2, r2, r3
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	4293      	cmp	r3, r2
 800abf0:	bf28      	it	cs
 800abf2:	4613      	movcs	r3, r2
 800abf4:	461a      	mov	r2, r3
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f001 f80f 	bl	800bc1c <USBD_CtlContinueRx>
 800abfe:	e030      	b.n	800ac62 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d10b      	bne.n	800ac24 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d005      	beq.n	800ac24 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f001 f80a 	bl	800bc3e <USBD_CtlSendStatus>
 800ac2a:	e01a      	b.n	800ac62 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d114      	bne.n	800ac62 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00e      	beq.n	800ac62 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	7afa      	ldrb	r2, [r7, #11]
 800ac4e:	4611      	mov	r1, r2
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	4798      	blx	r3
 800ac54:	4603      	mov	r3, r0
 800ac56:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	e000      	b.n	800ac64 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	460b      	mov	r3, r1
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac7a:	7afb      	ldrb	r3, [r7, #11]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d16b      	bne.n	800ad58 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3314      	adds	r3, #20
 800ac84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d156      	bne.n	800ad3e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	689a      	ldr	r2, [r3, #8]
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d914      	bls.n	800acc6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	689a      	ldr	r2, [r3, #8]
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	1ad2      	subs	r2, r2, r3
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	461a      	mov	r2, r3
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 ff84 	bl	800bbc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acb8:	2300      	movs	r3, #0
 800acba:	2200      	movs	r2, #0
 800acbc:	2100      	movs	r1, #0
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f004 ffe6 	bl	800fc90 <USBD_LL_PrepareReceive>
 800acc4:	e03b      	b.n	800ad3e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	68da      	ldr	r2, [r3, #12]
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d11c      	bne.n	800ad0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800acda:	429a      	cmp	r2, r3
 800acdc:	d316      	bcc.n	800ad0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ace8:	429a      	cmp	r2, r3
 800acea:	d20f      	bcs.n	800ad0c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acec:	2200      	movs	r2, #0
 800acee:	2100      	movs	r1, #0
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 ff65 	bl	800bbc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acfe:	2300      	movs	r3, #0
 800ad00:	2200      	movs	r2, #0
 800ad02:	2100      	movs	r1, #0
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f004 ffc3 	bl	800fc90 <USBD_LL_PrepareReceive>
 800ad0a:	e018      	b.n	800ad3e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	d10b      	bne.n	800ad30 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d005      	beq.n	800ad30 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad30:	2180      	movs	r1, #128	; 0x80
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f004 ff02 	bl	800fb3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 ff93 	bl	800bc64 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d122      	bne.n	800ad8e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f7ff fe98 	bl	800aa7e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ad56:	e01a      	b.n	800ad8e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d114      	bne.n	800ad8e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00e      	beq.n	800ad8e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad76:	695b      	ldr	r3, [r3, #20]
 800ad78:	7afa      	ldrb	r2, [r7, #11]
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	4798      	blx	r3
 800ad80:	4603      	mov	r3, r0
 800ad82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	e000      	b.n	800ad90 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800adc8:	2303      	movs	r3, #3
 800adca:	e02f      	b.n	800ae2c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00f      	beq.n	800adf6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d009      	beq.n	800adf6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	6852      	ldr	r2, [r2, #4]
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	4611      	mov	r1, r2
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adf6:	2340      	movs	r3, #64	; 0x40
 800adf8:	2200      	movs	r2, #0
 800adfa:	2100      	movs	r1, #0
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f004 fe58 	bl	800fab2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2240      	movs	r2, #64	; 0x40
 800ae0e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae12:	2340      	movs	r3, #64	; 0x40
 800ae14:	2200      	movs	r2, #0
 800ae16:	2180      	movs	r1, #128	; 0x80
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f004 fe4a 	bl	800fab2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2240      	movs	r2, #64	; 0x40
 800ae28:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	78fa      	ldrb	r2, [r7, #3]
 800ae44:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d106      	bne.n	800aea2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e012      	b.n	800aeec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d10b      	bne.n	800aeea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800af0a:	2303      	movs	r3, #3
 800af0c:	e014      	b.n	800af38 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b03      	cmp	r3, #3
 800af18:	d10d      	bne.n	800af36 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d007      	beq.n	800af36 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	78fa      	ldrb	r2, [r7, #3]
 800af30:	4611      	mov	r1, r2
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800af56:	2303      	movs	r3, #3
 800af58:	e014      	b.n	800af84 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b03      	cmp	r3, #3
 800af64:	d10d      	bne.n	800af82 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d007      	beq.n	800af82 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7a:	78fa      	ldrb	r2, [r7, #3]
 800af7c:	4611      	mov	r1, r2
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b082      	sub	sp, #8
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d009      	beq.n	800afd0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	6852      	ldr	r2, [r2, #4]
 800afc8:	b2d2      	uxtb	r2, r2
 800afca:	4611      	mov	r1, r2
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	4798      	blx	r3
  }

  return USBD_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800afda:	b480      	push	{r7}
 800afdc:	b087      	sub	sp, #28
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	3301      	adds	r3, #1
 800aff0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aff8:	8a3b      	ldrh	r3, [r7, #16]
 800affa:	021b      	lsls	r3, r3, #8
 800affc:	b21a      	sxth	r2, r3
 800affe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b002:	4313      	orrs	r3, r2
 800b004:	b21b      	sxth	r3, r3
 800b006:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b008:	89fb      	ldrh	r3, [r7, #14]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
	...

0800b018 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b02e:	2b40      	cmp	r3, #64	; 0x40
 800b030:	d005      	beq.n	800b03e <USBD_StdDevReq+0x26>
 800b032:	2b40      	cmp	r3, #64	; 0x40
 800b034:	d853      	bhi.n	800b0de <USBD_StdDevReq+0xc6>
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00b      	beq.n	800b052 <USBD_StdDevReq+0x3a>
 800b03a:	2b20      	cmp	r3, #32
 800b03c:	d14f      	bne.n	800b0de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	4798      	blx	r3
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]
      break;
 800b050:	e04a      	b.n	800b0e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	785b      	ldrb	r3, [r3, #1]
 800b056:	2b09      	cmp	r3, #9
 800b058:	d83b      	bhi.n	800b0d2 <USBD_StdDevReq+0xba>
 800b05a:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <USBD_StdDevReq+0x48>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b0b5 	.word	0x0800b0b5
 800b064:	0800b0c9 	.word	0x0800b0c9
 800b068:	0800b0d3 	.word	0x0800b0d3
 800b06c:	0800b0bf 	.word	0x0800b0bf
 800b070:	0800b0d3 	.word	0x0800b0d3
 800b074:	0800b093 	.word	0x0800b093
 800b078:	0800b089 	.word	0x0800b089
 800b07c:	0800b0d3 	.word	0x0800b0d3
 800b080:	0800b0ab 	.word	0x0800b0ab
 800b084:	0800b09d 	.word	0x0800b09d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f9de 	bl	800b44c <USBD_GetDescriptor>
          break;
 800b090:	e024      	b.n	800b0dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fb43 	bl	800b720 <USBD_SetAddress>
          break;
 800b09a:	e01f      	b.n	800b0dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fb82 	bl	800b7a8 <USBD_SetConfig>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]
          break;
 800b0a8:	e018      	b.n	800b0dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fc21 	bl	800b8f4 <USBD_GetConfig>
          break;
 800b0b2:	e013      	b.n	800b0dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fc52 	bl	800b960 <USBD_GetStatus>
          break;
 800b0bc:	e00e      	b.n	800b0dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fc81 	bl	800b9c8 <USBD_SetFeature>
          break;
 800b0c6:	e009      	b.n	800b0dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fc90 	bl	800b9f0 <USBD_ClrFeature>
          break;
 800b0d0:	e004      	b.n	800b0dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fce7 	bl	800baa8 <USBD_CtlError>
          break;
 800b0da:	bf00      	nop
      }
      break;
 800b0dc:	e004      	b.n	800b0e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fce1 	bl	800baa8 <USBD_CtlError>
      break;
 800b0e6:	bf00      	nop
  }

  return ret;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop

0800b0f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b10a:	2b40      	cmp	r3, #64	; 0x40
 800b10c:	d005      	beq.n	800b11a <USBD_StdItfReq+0x26>
 800b10e:	2b40      	cmp	r3, #64	; 0x40
 800b110:	d82f      	bhi.n	800b172 <USBD_StdItfReq+0x7e>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <USBD_StdItfReq+0x26>
 800b116:	2b20      	cmp	r3, #32
 800b118:	d12b      	bne.n	800b172 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b120:	b2db      	uxtb	r3, r3
 800b122:	3b01      	subs	r3, #1
 800b124:	2b02      	cmp	r3, #2
 800b126:	d81d      	bhi.n	800b164 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	889b      	ldrh	r3, [r3, #4]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d813      	bhi.n	800b15a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	4798      	blx	r3
 800b140:	4603      	mov	r3, r0
 800b142:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	88db      	ldrh	r3, [r3, #6]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d110      	bne.n	800b16e <USBD_StdItfReq+0x7a>
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10d      	bne.n	800b16e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fd73 	bl	800bc3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b158:	e009      	b.n	800b16e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fca3 	bl	800baa8 <USBD_CtlError>
          break;
 800b162:	e004      	b.n	800b16e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fc9e 	bl	800baa8 <USBD_CtlError>
          break;
 800b16c:	e000      	b.n	800b170 <USBD_StdItfReq+0x7c>
          break;
 800b16e:	bf00      	nop
      }
      break;
 800b170:	e004      	b.n	800b17c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fc97 	bl	800baa8 <USBD_CtlError>
      break;
 800b17a:	bf00      	nop
  }

  return ret;
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	889b      	ldrh	r3, [r3, #4]
 800b198:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1a2:	2b40      	cmp	r3, #64	; 0x40
 800b1a4:	d007      	beq.n	800b1b6 <USBD_StdEPReq+0x30>
 800b1a6:	2b40      	cmp	r3, #64	; 0x40
 800b1a8:	f200 8145 	bhi.w	800b436 <USBD_StdEPReq+0x2b0>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00c      	beq.n	800b1ca <USBD_StdEPReq+0x44>
 800b1b0:	2b20      	cmp	r3, #32
 800b1b2:	f040 8140 	bne.w	800b436 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	4798      	blx	r3
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c8:	e13a      	b.n	800b440 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	785b      	ldrb	r3, [r3, #1]
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d007      	beq.n	800b1e2 <USBD_StdEPReq+0x5c>
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	f300 8129 	bgt.w	800b42a <USBD_StdEPReq+0x2a4>
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d07f      	beq.n	800b2dc <USBD_StdEPReq+0x156>
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d03c      	beq.n	800b25a <USBD_StdEPReq+0xd4>
 800b1e0:	e123      	b.n	800b42a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d002      	beq.n	800b1f4 <USBD_StdEPReq+0x6e>
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d016      	beq.n	800b220 <USBD_StdEPReq+0x9a>
 800b1f2:	e02c      	b.n	800b24e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00d      	beq.n	800b216 <USBD_StdEPReq+0x90>
 800b1fa:	7bbb      	ldrb	r3, [r7, #14]
 800b1fc:	2b80      	cmp	r3, #128	; 0x80
 800b1fe:	d00a      	beq.n	800b216 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b200:	7bbb      	ldrb	r3, [r7, #14]
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f004 fc99 	bl	800fb3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b20a:	2180      	movs	r1, #128	; 0x80
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f004 fc95 	bl	800fb3c <USBD_LL_StallEP>
 800b212:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b214:	e020      	b.n	800b258 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fc45 	bl	800baa8 <USBD_CtlError>
              break;
 800b21e:	e01b      	b.n	800b258 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	885b      	ldrh	r3, [r3, #2]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10e      	bne.n	800b246 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b228:	7bbb      	ldrb	r3, [r7, #14]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00b      	beq.n	800b246 <USBD_StdEPReq+0xc0>
 800b22e:	7bbb      	ldrb	r3, [r7, #14]
 800b230:	2b80      	cmp	r3, #128	; 0x80
 800b232:	d008      	beq.n	800b246 <USBD_StdEPReq+0xc0>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	88db      	ldrh	r3, [r3, #6]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d104      	bne.n	800b246 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f004 fc7b 	bl	800fb3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fcf9 	bl	800bc3e <USBD_CtlSendStatus>

              break;
 800b24c:	e004      	b.n	800b258 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fc29 	bl	800baa8 <USBD_CtlError>
              break;
 800b256:	bf00      	nop
          }
          break;
 800b258:	e0ec      	b.n	800b434 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b02      	cmp	r3, #2
 800b264:	d002      	beq.n	800b26c <USBD_StdEPReq+0xe6>
 800b266:	2b03      	cmp	r3, #3
 800b268:	d016      	beq.n	800b298 <USBD_StdEPReq+0x112>
 800b26a:	e030      	b.n	800b2ce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00d      	beq.n	800b28e <USBD_StdEPReq+0x108>
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	2b80      	cmp	r3, #128	; 0x80
 800b276:	d00a      	beq.n	800b28e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f004 fc5d 	bl	800fb3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b282:	2180      	movs	r1, #128	; 0x80
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f004 fc59 	bl	800fb3c <USBD_LL_StallEP>
 800b28a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b28c:	e025      	b.n	800b2da <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fc09 	bl	800baa8 <USBD_CtlError>
              break;
 800b296:	e020      	b.n	800b2da <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	885b      	ldrh	r3, [r3, #2]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d11b      	bne.n	800b2d8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d004      	beq.n	800b2b4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f004 fc63 	bl	800fb7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fcc2 	bl	800bc3e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	4798      	blx	r3
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b2cc:	e004      	b.n	800b2d8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fbe9 	bl	800baa8 <USBD_CtlError>
              break;
 800b2d6:	e000      	b.n	800b2da <USBD_StdEPReq+0x154>
              break;
 800b2d8:	bf00      	nop
          }
          break;
 800b2da:	e0ab      	b.n	800b434 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d002      	beq.n	800b2ee <USBD_StdEPReq+0x168>
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d032      	beq.n	800b352 <USBD_StdEPReq+0x1cc>
 800b2ec:	e097      	b.n	800b41e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d007      	beq.n	800b304 <USBD_StdEPReq+0x17e>
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	2b80      	cmp	r3, #128	; 0x80
 800b2f8:	d004      	beq.n	800b304 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fbd3 	bl	800baa8 <USBD_CtlError>
                break;
 800b302:	e091      	b.n	800b428 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	da0b      	bge.n	800b324 <USBD_StdEPReq+0x19e>
 800b30c:	7bbb      	ldrb	r3, [r7, #14]
 800b30e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b312:	4613      	mov	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	3310      	adds	r3, #16
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	4413      	add	r3, r2
 800b320:	3304      	adds	r3, #4
 800b322:	e00b      	b.n	800b33c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b324:	7bbb      	ldrb	r3, [r7, #14]
 800b326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b32a:	4613      	mov	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	4413      	add	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	4413      	add	r3, r2
 800b33a:	3304      	adds	r3, #4
 800b33c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2200      	movs	r2, #0
 800b342:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	2202      	movs	r2, #2
 800b348:	4619      	mov	r1, r3
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fc1d 	bl	800bb8a <USBD_CtlSendData>
              break;
 800b350:	e06a      	b.n	800b428 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b356:	2b00      	cmp	r3, #0
 800b358:	da11      	bge.n	800b37e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	f003 020f 	and.w	r2, r3, #15
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	440b      	add	r3, r1
 800b36c:	3324      	adds	r3, #36	; 0x24
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d117      	bne.n	800b3a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fb96 	bl	800baa8 <USBD_CtlError>
                  break;
 800b37c:	e054      	b.n	800b428 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	f003 020f 	and.w	r2, r3, #15
 800b384:	6879      	ldr	r1, [r7, #4]
 800b386:	4613      	mov	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	440b      	add	r3, r1
 800b390:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d104      	bne.n	800b3a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fb83 	bl	800baa8 <USBD_CtlError>
                  break;
 800b3a2:	e041      	b.n	800b428 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	da0b      	bge.n	800b3c4 <USBD_StdEPReq+0x23e>
 800b3ac:	7bbb      	ldrb	r3, [r7, #14]
 800b3ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	3310      	adds	r3, #16
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	4413      	add	r3, r2
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	e00b      	b.n	800b3dc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	4413      	add	r3, r2
 800b3da:	3304      	adds	r3, #4
 800b3dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3de:	7bbb      	ldrb	r3, [r7, #14]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <USBD_StdEPReq+0x264>
 800b3e4:	7bbb      	ldrb	r3, [r7, #14]
 800b3e6:	2b80      	cmp	r3, #128	; 0x80
 800b3e8:	d103      	bne.n	800b3f2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	e00e      	b.n	800b410 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3f2:	7bbb      	ldrb	r3, [r7, #14]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f004 fbde 	bl	800fbb8 <USBD_LL_IsStallEP>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d003      	beq.n	800b40a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	2201      	movs	r2, #1
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	e002      	b.n	800b410 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2200      	movs	r2, #0
 800b40e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2202      	movs	r2, #2
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fbb7 	bl	800bb8a <USBD_CtlSendData>
              break;
 800b41c:	e004      	b.n	800b428 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fb41 	bl	800baa8 <USBD_CtlError>
              break;
 800b426:	bf00      	nop
          }
          break;
 800b428:	e004      	b.n	800b434 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fb3b 	bl	800baa8 <USBD_CtlError>
          break;
 800b432:	bf00      	nop
      }
      break;
 800b434:	e004      	b.n	800b440 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fb35 	bl	800baa8 <USBD_CtlError>
      break;
 800b43e:	bf00      	nop
  }

  return ret;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b45e:	2300      	movs	r3, #0
 800b460:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	885b      	ldrh	r3, [r3, #2]
 800b466:	0a1b      	lsrs	r3, r3, #8
 800b468:	b29b      	uxth	r3, r3
 800b46a:	3b01      	subs	r3, #1
 800b46c:	2b06      	cmp	r3, #6
 800b46e:	f200 8128 	bhi.w	800b6c2 <USBD_GetDescriptor+0x276>
 800b472:	a201      	add	r2, pc, #4	; (adr r2, 800b478 <USBD_GetDescriptor+0x2c>)
 800b474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b478:	0800b495 	.word	0x0800b495
 800b47c:	0800b4ad 	.word	0x0800b4ad
 800b480:	0800b4ed 	.word	0x0800b4ed
 800b484:	0800b6c3 	.word	0x0800b6c3
 800b488:	0800b6c3 	.word	0x0800b6c3
 800b48c:	0800b663 	.word	0x0800b663
 800b490:	0800b68f 	.word	0x0800b68f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	7c12      	ldrb	r2, [r2, #16]
 800b4a0:	f107 0108 	add.w	r1, r7, #8
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	4798      	blx	r3
 800b4a8:	60f8      	str	r0, [r7, #12]
      break;
 800b4aa:	e112      	b.n	800b6d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	7c1b      	ldrb	r3, [r3, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10d      	bne.n	800b4d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4bc:	f107 0208 	add.w	r2, r7, #8
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	4798      	blx	r3
 800b4c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4ce:	e100      	b.n	800b6d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d8:	f107 0208 	add.w	r2, r7, #8
 800b4dc:	4610      	mov	r0, r2
 800b4de:	4798      	blx	r3
 800b4e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	701a      	strb	r2, [r3, #0]
      break;
 800b4ea:	e0f2      	b.n	800b6d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	885b      	ldrh	r3, [r3, #2]
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b05      	cmp	r3, #5
 800b4f4:	f200 80ac 	bhi.w	800b650 <USBD_GetDescriptor+0x204>
 800b4f8:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <USBD_GetDescriptor+0xb4>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b519 	.word	0x0800b519
 800b504:	0800b54d 	.word	0x0800b54d
 800b508:	0800b581 	.word	0x0800b581
 800b50c:	0800b5b5 	.word	0x0800b5b5
 800b510:	0800b5e9 	.word	0x0800b5e9
 800b514:	0800b61d 	.word	0x0800b61d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00b      	beq.n	800b53c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	7c12      	ldrb	r2, [r2, #16]
 800b530:	f107 0108 	add.w	r1, r7, #8
 800b534:	4610      	mov	r0, r2
 800b536:	4798      	blx	r3
 800b538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b53a:	e091      	b.n	800b660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fab2 	bl	800baa8 <USBD_CtlError>
            err++;
 800b544:	7afb      	ldrb	r3, [r7, #11]
 800b546:	3301      	adds	r3, #1
 800b548:	72fb      	strb	r3, [r7, #11]
          break;
 800b54a:	e089      	b.n	800b660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00b      	beq.n	800b570 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	7c12      	ldrb	r2, [r2, #16]
 800b564:	f107 0108 	add.w	r1, r7, #8
 800b568:	4610      	mov	r0, r2
 800b56a:	4798      	blx	r3
 800b56c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b56e:	e077      	b.n	800b660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fa98 	bl	800baa8 <USBD_CtlError>
            err++;
 800b578:	7afb      	ldrb	r3, [r7, #11]
 800b57a:	3301      	adds	r3, #1
 800b57c:	72fb      	strb	r3, [r7, #11]
          break;
 800b57e:	e06f      	b.n	800b660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00b      	beq.n	800b5a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	7c12      	ldrb	r2, [r2, #16]
 800b598:	f107 0108 	add.w	r1, r7, #8
 800b59c:	4610      	mov	r0, r2
 800b59e:	4798      	blx	r3
 800b5a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5a2:	e05d      	b.n	800b660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fa7e 	bl	800baa8 <USBD_CtlError>
            err++;
 800b5ac:	7afb      	ldrb	r3, [r7, #11]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5b2:	e055      	b.n	800b660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00b      	beq.n	800b5d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	7c12      	ldrb	r2, [r2, #16]
 800b5cc:	f107 0108 	add.w	r1, r7, #8
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	4798      	blx	r3
 800b5d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5d6:	e043      	b.n	800b660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fa64 	bl	800baa8 <USBD_CtlError>
            err++;
 800b5e0:	7afb      	ldrb	r3, [r7, #11]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5e6:	e03b      	b.n	800b660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00b      	beq.n	800b60c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	7c12      	ldrb	r2, [r2, #16]
 800b600:	f107 0108 	add.w	r1, r7, #8
 800b604:	4610      	mov	r0, r2
 800b606:	4798      	blx	r3
 800b608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b60a:	e029      	b.n	800b660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fa4a 	bl	800baa8 <USBD_CtlError>
            err++;
 800b614:	7afb      	ldrb	r3, [r7, #11]
 800b616:	3301      	adds	r3, #1
 800b618:	72fb      	strb	r3, [r7, #11]
          break;
 800b61a:	e021      	b.n	800b660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00b      	beq.n	800b640 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	7c12      	ldrb	r2, [r2, #16]
 800b634:	f107 0108 	add.w	r1, r7, #8
 800b638:	4610      	mov	r0, r2
 800b63a:	4798      	blx	r3
 800b63c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b63e:	e00f      	b.n	800b660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fa30 	bl	800baa8 <USBD_CtlError>
            err++;
 800b648:	7afb      	ldrb	r3, [r7, #11]
 800b64a:	3301      	adds	r3, #1
 800b64c:	72fb      	strb	r3, [r7, #11]
          break;
 800b64e:	e007      	b.n	800b660 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fa28 	bl	800baa8 <USBD_CtlError>
          err++;
 800b658:	7afb      	ldrb	r3, [r7, #11]
 800b65a:	3301      	adds	r3, #1
 800b65c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b65e:	bf00      	nop
      }
      break;
 800b660:	e037      	b.n	800b6d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	7c1b      	ldrb	r3, [r3, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d109      	bne.n	800b67e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b672:	f107 0208 	add.w	r2, r7, #8
 800b676:	4610      	mov	r0, r2
 800b678:	4798      	blx	r3
 800b67a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b67c:	e029      	b.n	800b6d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fa11 	bl	800baa8 <USBD_CtlError>
        err++;
 800b686:	7afb      	ldrb	r3, [r7, #11]
 800b688:	3301      	adds	r3, #1
 800b68a:	72fb      	strb	r3, [r7, #11]
      break;
 800b68c:	e021      	b.n	800b6d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	7c1b      	ldrb	r3, [r3, #16]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10d      	bne.n	800b6b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69e:	f107 0208 	add.w	r2, r7, #8
 800b6a2:	4610      	mov	r0, r2
 800b6a4:	4798      	blx	r3
 800b6a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	2207      	movs	r2, #7
 800b6ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6b0:	e00f      	b.n	800b6d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f9f7 	bl	800baa8 <USBD_CtlError>
        err++;
 800b6ba:	7afb      	ldrb	r3, [r7, #11]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	72fb      	strb	r3, [r7, #11]
      break;
 800b6c0:	e007      	b.n	800b6d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f9ef 	bl	800baa8 <USBD_CtlError>
      err++;
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b6d0:	bf00      	nop
  }

  if (err != 0U)
 800b6d2:	7afb      	ldrb	r3, [r7, #11]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d11e      	bne.n	800b716 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	88db      	ldrh	r3, [r3, #6]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d016      	beq.n	800b70e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b6e0:	893b      	ldrh	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00e      	beq.n	800b704 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	88da      	ldrh	r2, [r3, #6]
 800b6ea:	893b      	ldrh	r3, [r7, #8]
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	bf28      	it	cs
 800b6f0:	4613      	movcs	r3, r2
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6f6:	893b      	ldrh	r3, [r7, #8]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	68f9      	ldr	r1, [r7, #12]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fa44 	bl	800bb8a <USBD_CtlSendData>
 800b702:	e009      	b.n	800b718 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f9ce 	bl	800baa8 <USBD_CtlError>
 800b70c:	e004      	b.n	800b718 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fa95 	bl	800bc3e <USBD_CtlSendStatus>
 800b714:	e000      	b.n	800b718 <USBD_GetDescriptor+0x2cc>
    return;
 800b716:	bf00      	nop
  }
}
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop

0800b720 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	889b      	ldrh	r3, [r3, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d131      	bne.n	800b796 <USBD_SetAddress+0x76>
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	88db      	ldrh	r3, [r3, #6]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d12d      	bne.n	800b796 <USBD_SetAddress+0x76>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	885b      	ldrh	r3, [r3, #2]
 800b73e:	2b7f      	cmp	r3, #127	; 0x7f
 800b740:	d829      	bhi.n	800b796 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	885b      	ldrh	r3, [r3, #2]
 800b746:	b2db      	uxtb	r3, r3
 800b748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b74c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b03      	cmp	r3, #3
 800b758:	d104      	bne.n	800b764 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b75a:	6839      	ldr	r1, [r7, #0]
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 f9a3 	bl	800baa8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b762:	e01d      	b.n	800b7a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	7bfa      	ldrb	r2, [r7, #15]
 800b768:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f004 fa4d 	bl	800fc10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 fa61 	bl	800bc3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d004      	beq.n	800b78c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2202      	movs	r2, #2
 800b786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78a:	e009      	b.n	800b7a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b794:	e004      	b.n	800b7a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f985 	bl	800baa8 <USBD_CtlError>
  }
}
 800b79e:	bf00      	nop
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	885b      	ldrh	r3, [r3, #2]
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	4b4c      	ldr	r3, [pc, #304]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b7be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7c0:	4b4b      	ldr	r3, [pc, #300]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d905      	bls.n	800b7d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f96c 	bl	800baa8 <USBD_CtlError>
    return USBD_FAIL;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e088      	b.n	800b8e6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d002      	beq.n	800b7e6 <USBD_SetConfig+0x3e>
 800b7e0:	2b03      	cmp	r3, #3
 800b7e2:	d025      	beq.n	800b830 <USBD_SetConfig+0x88>
 800b7e4:	e071      	b.n	800b8ca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7e6:	4b42      	ldr	r3, [pc, #264]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d01c      	beq.n	800b828 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b7ee:	4b40      	ldr	r3, [pc, #256]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7f8:	4b3d      	ldr	r3, [pc, #244]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff f948 	bl	800aa94 <USBD_SetClassConfig>
 800b804:	4603      	mov	r3, r0
 800b806:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d004      	beq.n	800b818 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b80e:	6839      	ldr	r1, [r7, #0]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f949 	bl	800baa8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b816:	e065      	b.n	800b8e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fa10 	bl	800bc3e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2203      	movs	r2, #3
 800b822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b826:	e05d      	b.n	800b8e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 fa08 	bl	800bc3e <USBD_CtlSendStatus>
      break;
 800b82e:	e059      	b.n	800b8e4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b830:	4b2f      	ldr	r3, [pc, #188]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d112      	bne.n	800b85e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2202      	movs	r2, #2
 800b83c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b840:	4b2b      	ldr	r3, [pc, #172]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	461a      	mov	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b84a:	4b29      	ldr	r3, [pc, #164]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7ff f93b 	bl	800aacc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f9f1 	bl	800bc3e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b85c:	e042      	b.n	800b8e4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b85e:	4b24      	ldr	r3, [pc, #144]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d02a      	beq.n	800b8c2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	b2db      	uxtb	r3, r3
 800b872:	4619      	mov	r1, r3
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f7ff f929 	bl	800aacc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b87a:	4b1d      	ldr	r3, [pc, #116]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b884:	4b1a      	ldr	r3, [pc, #104]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	4619      	mov	r1, r3
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff f902 	bl	800aa94 <USBD_SetClassConfig>
 800b890:	4603      	mov	r3, r0
 800b892:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b894:	7bfb      	ldrb	r3, [r7, #15]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00f      	beq.n	800b8ba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f903 	bl	800baa8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff f90e 	bl	800aacc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8b8:	e014      	b.n	800b8e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f9bf 	bl	800bc3e <USBD_CtlSendStatus>
      break;
 800b8c0:	e010      	b.n	800b8e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f9bb 	bl	800bc3e <USBD_CtlSendStatus>
      break;
 800b8c8:	e00c      	b.n	800b8e4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f8eb 	bl	800baa8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8d2:	4b07      	ldr	r3, [pc, #28]	; (800b8f0 <USBD_SetConfig+0x148>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7ff f8f7 	bl	800aacc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e2:	bf00      	nop
  }

  return ret;
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	2000252c 	.word	0x2000252c

0800b8f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	88db      	ldrh	r3, [r3, #6]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d004      	beq.n	800b910 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f8cd 	bl	800baa8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b90e:	e023      	b.n	800b958 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b916:	b2db      	uxtb	r3, r3
 800b918:	2b02      	cmp	r3, #2
 800b91a:	dc02      	bgt.n	800b922 <USBD_GetConfig+0x2e>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	dc03      	bgt.n	800b928 <USBD_GetConfig+0x34>
 800b920:	e015      	b.n	800b94e <USBD_GetConfig+0x5a>
 800b922:	2b03      	cmp	r3, #3
 800b924:	d00b      	beq.n	800b93e <USBD_GetConfig+0x4a>
 800b926:	e012      	b.n	800b94e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	3308      	adds	r3, #8
 800b932:	2201      	movs	r2, #1
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f927 	bl	800bb8a <USBD_CtlSendData>
        break;
 800b93c:	e00c      	b.n	800b958 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	3304      	adds	r3, #4
 800b942:	2201      	movs	r2, #1
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f91f 	bl	800bb8a <USBD_CtlSendData>
        break;
 800b94c:	e004      	b.n	800b958 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f8a9 	bl	800baa8 <USBD_CtlError>
        break;
 800b956:	bf00      	nop
}
 800b958:	bf00      	nop
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b970:	b2db      	uxtb	r3, r3
 800b972:	3b01      	subs	r3, #1
 800b974:	2b02      	cmp	r3, #2
 800b976:	d81e      	bhi.n	800b9b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	88db      	ldrh	r3, [r3, #6]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d004      	beq.n	800b98a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f890 	bl	800baa8 <USBD_CtlError>
        break;
 800b988:	e01a      	b.n	800b9c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b996:	2b00      	cmp	r3, #0
 800b998:	d005      	beq.n	800b9a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	f043 0202 	orr.w	r2, r3, #2
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	330c      	adds	r3, #12
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f8eb 	bl	800bb8a <USBD_CtlSendData>
      break;
 800b9b4:	e004      	b.n	800b9c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f875 	bl	800baa8 <USBD_CtlError>
      break;
 800b9be:	bf00      	nop
  }
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	885b      	ldrh	r3, [r3, #2]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d106      	bne.n	800b9e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f92b 	bl	800bc3e <USBD_CtlSendStatus>
  }
}
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	3b01      	subs	r3, #1
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d80b      	bhi.n	800ba20 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	885b      	ldrh	r3, [r3, #2]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d10c      	bne.n	800ba2a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f910 	bl	800bc3e <USBD_CtlSendStatus>
      }
      break;
 800ba1e:	e004      	b.n	800ba2a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f840 	bl	800baa8 <USBD_CtlError>
      break;
 800ba28:	e000      	b.n	800ba2c <USBD_ClrFeature+0x3c>
      break;
 800ba2a:	bf00      	nop
  }
}
 800ba2c:	bf00      	nop
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	781a      	ldrb	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	781a      	ldrb	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7ff fabb 	bl	800afda <SWAPBYTE>
 800ba64:	4603      	mov	r3, r0
 800ba66:	461a      	mov	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3301      	adds	r3, #1
 800ba76:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f7ff faae 	bl	800afda <SWAPBYTE>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	461a      	mov	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f7ff faa1 	bl	800afda <SWAPBYTE>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	80da      	strh	r2, [r3, #6]
}
 800baa0:	bf00      	nop
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bab2:	2180      	movs	r1, #128	; 0x80
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f004 f841 	bl	800fb3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800baba:	2100      	movs	r1, #0
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f004 f83d 	bl	800fb3c <USBD_LL_StallEP>
}
 800bac2:	bf00      	nop
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b086      	sub	sp, #24
 800bace:	af00      	add	r7, sp, #0
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bad6:	2300      	movs	r3, #0
 800bad8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d036      	beq.n	800bb4e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bae4:	6938      	ldr	r0, [r7, #16]
 800bae6:	f000 f836 	bl	800bb56 <USBD_GetLen>
 800baea:	4603      	mov	r3, r0
 800baec:	3301      	adds	r3, #1
 800baee:	b29b      	uxth	r3, r3
 800baf0:	005b      	lsls	r3, r3, #1
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	4413      	add	r3, r2
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	7812      	ldrb	r2, [r2, #0]
 800bb02:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb04:	7dfb      	ldrb	r3, [r7, #23]
 800bb06:	3301      	adds	r3, #1
 800bb08:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	4413      	add	r3, r2
 800bb10:	2203      	movs	r2, #3
 800bb12:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
 800bb16:	3301      	adds	r3, #1
 800bb18:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb1a:	e013      	b.n	800bb44 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb1c:	7dfb      	ldrb	r3, [r7, #23]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	4413      	add	r3, r2
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	7812      	ldrb	r2, [r2, #0]
 800bb26:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	613b      	str	r3, [r7, #16]
    idx++;
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	3301      	adds	r3, #1
 800bb32:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	4413      	add	r3, r2
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	3301      	adds	r3, #1
 800bb42:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1e7      	bne.n	800bb1c <USBD_GetString+0x52>
 800bb4c:	e000      	b.n	800bb50 <USBD_GetString+0x86>
    return;
 800bb4e:	bf00      	nop
  }
}
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b085      	sub	sp, #20
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb66:	e005      	b.n	800bb74 <USBD_GetLen+0x1e>
  {
    len++;
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	3301      	adds	r3, #1
 800bb72:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1f5      	bne.n	800bb68 <USBD_GetLen+0x12>
  }

  return len;
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2202      	movs	r2, #2
 800bb9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	2100      	movs	r1, #0
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f004 f84c 	bl	800fc4e <USBD_LL_Transmit>

  return USBD_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f004 f83b 	bl	800fc4e <USBD_LL_Transmit>

  return USBD_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2203      	movs	r2, #3
 800bbf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f004 f83f 	bl	800fc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f004 f82e 	bl	800fc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2204      	movs	r2, #4
 800bc4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2200      	movs	r2, #0
 800bc52:	2100      	movs	r1, #0
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f003 fffa 	bl	800fc4e <USBD_LL_Transmit>

  return USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2205      	movs	r2, #5
 800bc70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc74:	2300      	movs	r3, #0
 800bc76:	2200      	movs	r2, #0
 800bc78:	2100      	movs	r1, #0
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f004 f808 	bl	800fc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bc96:	79fb      	ldrb	r3, [r7, #7]
 800bc98:	4a08      	ldr	r2, [pc, #32]	; (800bcbc <disk_status+0x30>)
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4413      	add	r3, r2
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	79fa      	ldrb	r2, [r7, #7]
 800bca4:	4905      	ldr	r1, [pc, #20]	; (800bcbc <disk_status+0x30>)
 800bca6:	440a      	add	r2, r1
 800bca8:	7a12      	ldrb	r2, [r2, #8]
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4798      	blx	r3
 800bcae:	4603      	mov	r3, r0
 800bcb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	200025c0 	.word	0x200025c0

0800bcc0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	4a0d      	ldr	r2, [pc, #52]	; (800bd08 <disk_initialize+0x48>)
 800bcd2:	5cd3      	ldrb	r3, [r2, r3]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d111      	bne.n	800bcfc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bcd8:	79fb      	ldrb	r3, [r7, #7]
 800bcda:	4a0b      	ldr	r2, [pc, #44]	; (800bd08 <disk_initialize+0x48>)
 800bcdc:	2101      	movs	r1, #1
 800bcde:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	4a09      	ldr	r2, [pc, #36]	; (800bd08 <disk_initialize+0x48>)
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4413      	add	r3, r2
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	79fa      	ldrb	r2, [r7, #7]
 800bcee:	4906      	ldr	r1, [pc, #24]	; (800bd08 <disk_initialize+0x48>)
 800bcf0:	440a      	add	r2, r1
 800bcf2:	7a12      	ldrb	r2, [r2, #8]
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	4798      	blx	r3
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	200025c0 	.word	0x200025c0

0800bd0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bd0c:	b590      	push	{r4, r7, lr}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	607a      	str	r2, [r7, #4]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	4a0a      	ldr	r2, [pc, #40]	; (800bd48 <disk_read+0x3c>)
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	689c      	ldr	r4, [r3, #8]
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	4a07      	ldr	r2, [pc, #28]	; (800bd48 <disk_read+0x3c>)
 800bd2c:	4413      	add	r3, r2
 800bd2e:	7a18      	ldrb	r0, [r3, #8]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	68b9      	ldr	r1, [r7, #8]
 800bd36:	47a0      	blx	r4
 800bd38:	4603      	mov	r3, r0
 800bd3a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	371c      	adds	r7, #28
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd90      	pop	{r4, r7, pc}
 800bd46:	bf00      	nop
 800bd48:	200025c0 	.word	0x200025c0

0800bd4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bd4c:	b590      	push	{r4, r7, lr}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60b9      	str	r1, [r7, #8]
 800bd54:	607a      	str	r2, [r7, #4]
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	4603      	mov	r3, r0
 800bd5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
 800bd5e:	4a0a      	ldr	r2, [pc, #40]	; (800bd88 <disk_write+0x3c>)
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	68dc      	ldr	r4, [r3, #12]
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	4a07      	ldr	r2, [pc, #28]	; (800bd88 <disk_write+0x3c>)
 800bd6c:	4413      	add	r3, r2
 800bd6e:	7a18      	ldrb	r0, [r3, #8]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	68b9      	ldr	r1, [r7, #8]
 800bd76:	47a0      	blx	r4
 800bd78:	4603      	mov	r3, r0
 800bd7a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	371c      	adds	r7, #28
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd90      	pop	{r4, r7, pc}
 800bd86:	bf00      	nop
 800bd88:	200025c0 	.word	0x200025c0

0800bd8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	603a      	str	r2, [r7, #0]
 800bd96:	71fb      	strb	r3, [r7, #7]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
 800bd9e:	4a09      	ldr	r2, [pc, #36]	; (800bdc4 <disk_ioctl+0x38>)
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	79fa      	ldrb	r2, [r7, #7]
 800bdaa:	4906      	ldr	r1, [pc, #24]	; (800bdc4 <disk_ioctl+0x38>)
 800bdac:	440a      	add	r2, r1
 800bdae:	7a10      	ldrb	r0, [r2, #8]
 800bdb0:	79b9      	ldrb	r1, [r7, #6]
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	4798      	blx	r3
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73fb      	strb	r3, [r7, #15]
  return res;
 800bdba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	200025c0 	.word	0x200025c0

0800bdc8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bdd8:	89fb      	ldrh	r3, [r7, #14]
 800bdda:	021b      	lsls	r3, r3, #8
 800bddc:	b21a      	sxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	b21b      	sxth	r3, r3
 800bde4:	4313      	orrs	r3, r2
 800bde6:	b21b      	sxth	r3, r3
 800bde8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bdea:	89fb      	ldrh	r3, [r7, #14]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	3303      	adds	r3, #3
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	021b      	lsls	r3, r3, #8
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	3202      	adds	r2, #2
 800be10:	7812      	ldrb	r2, [r2, #0]
 800be12:	4313      	orrs	r3, r2
 800be14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	021b      	lsls	r3, r3, #8
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	3201      	adds	r2, #1
 800be1e:	7812      	ldrb	r2, [r2, #0]
 800be20:	4313      	orrs	r3, r2
 800be22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	021b      	lsls	r3, r3, #8
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	7812      	ldrb	r2, [r2, #0]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	60fb      	str	r3, [r7, #12]
	return rv;
 800be30:	68fb      	ldr	r3, [r7, #12]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800be3e:	b480      	push	{r7}
 800be40:	b083      	sub	sp, #12
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	460b      	mov	r3, r1
 800be48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	1c5a      	adds	r2, r3, #1
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	887a      	ldrh	r2, [r7, #2]
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	887b      	ldrh	r3, [r7, #2]
 800be58:	0a1b      	lsrs	r3, r3, #8
 800be5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	607a      	str	r2, [r7, #4]
 800be62:	887a      	ldrh	r2, [r7, #2]
 800be64:	b2d2      	uxtb	r2, r2
 800be66:	701a      	strb	r2, [r3, #0]
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	607a      	str	r2, [r7, #4]
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	b2d2      	uxtb	r2, r2
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	0a1b      	lsrs	r3, r3, #8
 800be8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	607a      	str	r2, [r7, #4]
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	b2d2      	uxtb	r2, r2
 800be9a:	701a      	strb	r2, [r3, #0]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	0a1b      	lsrs	r3, r3, #8
 800bea0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	1c5a      	adds	r2, r3, #1
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	b2d2      	uxtb	r2, r2
 800beac:	701a      	strb	r2, [r3, #0]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	0a1b      	lsrs	r3, r3, #8
 800beb2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	1c5a      	adds	r2, r3, #1
 800beb8:	607a      	str	r2, [r7, #4]
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	b2d2      	uxtb	r2, r2
 800bebe:	701a      	strb	r2, [r3, #0]
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800becc:	b480      	push	{r7}
 800bece:	b087      	sub	sp, #28
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00d      	beq.n	800bf02 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	1c53      	adds	r3, r2, #1
 800beea:	613b      	str	r3, [r7, #16]
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	1c59      	adds	r1, r3, #1
 800bef0:	6179      	str	r1, [r7, #20]
 800bef2:	7812      	ldrb	r2, [r2, #0]
 800bef4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3b01      	subs	r3, #1
 800befa:	607b      	str	r3, [r7, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1f1      	bne.n	800bee6 <mem_cpy+0x1a>
	}
}
 800bf02:	bf00      	nop
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bf0e:	b480      	push	{r7}
 800bf10:	b087      	sub	sp, #28
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	1c5a      	adds	r2, r3, #1
 800bf22:	617a      	str	r2, [r7, #20]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	b2d2      	uxtb	r2, r2
 800bf28:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	607b      	str	r3, [r7, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1f3      	bne.n	800bf1e <mem_set+0x10>
}
 800bf36:	bf00      	nop
 800bf38:	bf00      	nop
 800bf3a:	371c      	adds	r7, #28
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bf44:	b480      	push	{r7}
 800bf46:	b089      	sub	sp, #36	; 0x24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	61fb      	str	r3, [r7, #28]
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	61fa      	str	r2, [r7, #28]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	4619      	mov	r1, r3
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	1c5a      	adds	r2, r3, #1
 800bf6a:	61ba      	str	r2, [r7, #24]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	1acb      	subs	r3, r1, r3
 800bf70:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	607b      	str	r3, [r7, #4]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d002      	beq.n	800bf84 <mem_cmp+0x40>
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d0eb      	beq.n	800bf5c <mem_cmp+0x18>

	return r;
 800bf84:	697b      	ldr	r3, [r7, #20]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3724      	adds	r7, #36	; 0x24
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bf9c:	e002      	b.n	800bfa4 <chk_chr+0x12>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	607b      	str	r3, [r7, #4]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d005      	beq.n	800bfb8 <chk_chr+0x26>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d1f2      	bne.n	800bf9e <chk_chr+0xc>
	return *str;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	781b      	ldrb	r3, [r3, #0]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60bb      	str	r3, [r7, #8]
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	60fb      	str	r3, [r7, #12]
 800bfda:	e029      	b.n	800c030 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bfdc:	4a27      	ldr	r2, [pc, #156]	; (800c07c <chk_lock+0xb4>)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	011b      	lsls	r3, r3, #4
 800bfe2:	4413      	add	r3, r2
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d01d      	beq.n	800c026 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bfea:	4a24      	ldr	r2, [pc, #144]	; (800c07c <chk_lock+0xb4>)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	011b      	lsls	r3, r3, #4
 800bff0:	4413      	add	r3, r2
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d116      	bne.n	800c02a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bffc:	4a1f      	ldr	r2, [pc, #124]	; (800c07c <chk_lock+0xb4>)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	011b      	lsls	r3, r3, #4
 800c002:	4413      	add	r3, r2
 800c004:	3304      	adds	r3, #4
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d10c      	bne.n	800c02a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c010:	4a1a      	ldr	r2, [pc, #104]	; (800c07c <chk_lock+0xb4>)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	011b      	lsls	r3, r3, #4
 800c016:	4413      	add	r3, r2
 800c018:	3308      	adds	r3, #8
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c020:	429a      	cmp	r2, r3
 800c022:	d102      	bne.n	800c02a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c024:	e007      	b.n	800c036 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c026:	2301      	movs	r3, #1
 800c028:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3301      	adds	r3, #1
 800c02e:	60fb      	str	r3, [r7, #12]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d9d2      	bls.n	800bfdc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d109      	bne.n	800c050 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d102      	bne.n	800c048 <chk_lock+0x80>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b02      	cmp	r3, #2
 800c046:	d101      	bne.n	800c04c <chk_lock+0x84>
 800c048:	2300      	movs	r3, #0
 800c04a:	e010      	b.n	800c06e <chk_lock+0xa6>
 800c04c:	2312      	movs	r3, #18
 800c04e:	e00e      	b.n	800c06e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d108      	bne.n	800c068 <chk_lock+0xa0>
 800c056:	4a09      	ldr	r2, [pc, #36]	; (800c07c <chk_lock+0xb4>)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	011b      	lsls	r3, r3, #4
 800c05c:	4413      	add	r3, r2
 800c05e:	330c      	adds	r3, #12
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c066:	d101      	bne.n	800c06c <chk_lock+0xa4>
 800c068:	2310      	movs	r3, #16
 800c06a:	e000      	b.n	800c06e <chk_lock+0xa6>
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	20002538 	.word	0x20002538

0800c080 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c086:	2300      	movs	r3, #0
 800c088:	607b      	str	r3, [r7, #4]
 800c08a:	e002      	b.n	800c092 <enq_lock+0x12>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	3301      	adds	r3, #1
 800c090:	607b      	str	r3, [r7, #4]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d806      	bhi.n	800c0a6 <enq_lock+0x26>
 800c098:	4a09      	ldr	r2, [pc, #36]	; (800c0c0 <enq_lock+0x40>)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	011b      	lsls	r3, r3, #4
 800c09e:	4413      	add	r3, r2
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1f2      	bne.n	800c08c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	bf14      	ite	ne
 800c0ac:	2301      	movne	r3, #1
 800c0ae:	2300      	moveq	r3, #0
 800c0b0:	b2db      	uxtb	r3, r3
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	20002538 	.word	0x20002538

0800c0c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	60fb      	str	r3, [r7, #12]
 800c0d2:	e01f      	b.n	800c114 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c0d4:	4a41      	ldr	r2, [pc, #260]	; (800c1dc <inc_lock+0x118>)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	011b      	lsls	r3, r3, #4
 800c0da:	4413      	add	r3, r2
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d113      	bne.n	800c10e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c0e6:	4a3d      	ldr	r2, [pc, #244]	; (800c1dc <inc_lock+0x118>)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	011b      	lsls	r3, r3, #4
 800c0ec:	4413      	add	r3, r2
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d109      	bne.n	800c10e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c0fa:	4a38      	ldr	r2, [pc, #224]	; (800c1dc <inc_lock+0x118>)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	011b      	lsls	r3, r3, #4
 800c100:	4413      	add	r3, r2
 800c102:	3308      	adds	r3, #8
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d006      	beq.n	800c11c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3301      	adds	r3, #1
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d9dc      	bls.n	800c0d4 <inc_lock+0x10>
 800c11a:	e000      	b.n	800c11e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c11c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b02      	cmp	r3, #2
 800c122:	d132      	bne.n	800c18a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c124:	2300      	movs	r3, #0
 800c126:	60fb      	str	r3, [r7, #12]
 800c128:	e002      	b.n	800c130 <inc_lock+0x6c>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3301      	adds	r3, #1
 800c12e:	60fb      	str	r3, [r7, #12]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d806      	bhi.n	800c144 <inc_lock+0x80>
 800c136:	4a29      	ldr	r2, [pc, #164]	; (800c1dc <inc_lock+0x118>)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	011b      	lsls	r3, r3, #4
 800c13c:	4413      	add	r3, r2
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1f2      	bne.n	800c12a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b02      	cmp	r3, #2
 800c148:	d101      	bne.n	800c14e <inc_lock+0x8a>
 800c14a:	2300      	movs	r3, #0
 800c14c:	e040      	b.n	800c1d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	4922      	ldr	r1, [pc, #136]	; (800c1dc <inc_lock+0x118>)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	011b      	lsls	r3, r3, #4
 800c158:	440b      	add	r3, r1
 800c15a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	689a      	ldr	r2, [r3, #8]
 800c160:	491e      	ldr	r1, [pc, #120]	; (800c1dc <inc_lock+0x118>)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	011b      	lsls	r3, r3, #4
 800c166:	440b      	add	r3, r1
 800c168:	3304      	adds	r3, #4
 800c16a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	695a      	ldr	r2, [r3, #20]
 800c170:	491a      	ldr	r1, [pc, #104]	; (800c1dc <inc_lock+0x118>)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	011b      	lsls	r3, r3, #4
 800c176:	440b      	add	r3, r1
 800c178:	3308      	adds	r3, #8
 800c17a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c17c:	4a17      	ldr	r2, [pc, #92]	; (800c1dc <inc_lock+0x118>)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	011b      	lsls	r3, r3, #4
 800c182:	4413      	add	r3, r2
 800c184:	330c      	adds	r3, #12
 800c186:	2200      	movs	r2, #0
 800c188:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d009      	beq.n	800c1a4 <inc_lock+0xe0>
 800c190:	4a12      	ldr	r2, [pc, #72]	; (800c1dc <inc_lock+0x118>)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	011b      	lsls	r3, r3, #4
 800c196:	4413      	add	r3, r2
 800c198:	330c      	adds	r3, #12
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <inc_lock+0xe0>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e015      	b.n	800c1d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d108      	bne.n	800c1bc <inc_lock+0xf8>
 800c1aa:	4a0c      	ldr	r2, [pc, #48]	; (800c1dc <inc_lock+0x118>)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	011b      	lsls	r3, r3, #4
 800c1b0:	4413      	add	r3, r2
 800c1b2:	330c      	adds	r3, #12
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	e001      	b.n	800c1c0 <inc_lock+0xfc>
 800c1bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1c0:	4906      	ldr	r1, [pc, #24]	; (800c1dc <inc_lock+0x118>)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	440b      	add	r3, r1
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3301      	adds	r3, #1
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3714      	adds	r7, #20
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	20002538 	.word	0x20002538

0800c1e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	607b      	str	r3, [r7, #4]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d825      	bhi.n	800c240 <dec_lock+0x60>
		n = Files[i].ctr;
 800c1f4:	4a17      	ldr	r2, [pc, #92]	; (800c254 <dec_lock+0x74>)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	011b      	lsls	r3, r3, #4
 800c1fa:	4413      	add	r3, r2
 800c1fc:	330c      	adds	r3, #12
 800c1fe:	881b      	ldrh	r3, [r3, #0]
 800c200:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c202:	89fb      	ldrh	r3, [r7, #14]
 800c204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c208:	d101      	bne.n	800c20e <dec_lock+0x2e>
 800c20a:	2300      	movs	r3, #0
 800c20c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c20e:	89fb      	ldrh	r3, [r7, #14]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <dec_lock+0x3a>
 800c214:	89fb      	ldrh	r3, [r7, #14]
 800c216:	3b01      	subs	r3, #1
 800c218:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c21a:	4a0e      	ldr	r2, [pc, #56]	; (800c254 <dec_lock+0x74>)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	011b      	lsls	r3, r3, #4
 800c220:	4413      	add	r3, r2
 800c222:	330c      	adds	r3, #12
 800c224:	89fa      	ldrh	r2, [r7, #14]
 800c226:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c228:	89fb      	ldrh	r3, [r7, #14]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d105      	bne.n	800c23a <dec_lock+0x5a>
 800c22e:	4a09      	ldr	r2, [pc, #36]	; (800c254 <dec_lock+0x74>)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	011b      	lsls	r3, r3, #4
 800c234:	4413      	add	r3, r2
 800c236:	2200      	movs	r2, #0
 800c238:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	737b      	strb	r3, [r7, #13]
 800c23e:	e001      	b.n	800c244 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c240:	2302      	movs	r3, #2
 800c242:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c244:	7b7b      	ldrb	r3, [r7, #13]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	20002538 	.word	0x20002538

0800c258 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c260:	2300      	movs	r3, #0
 800c262:	60fb      	str	r3, [r7, #12]
 800c264:	e010      	b.n	800c288 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c266:	4a0d      	ldr	r2, [pc, #52]	; (800c29c <clear_lock+0x44>)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	011b      	lsls	r3, r3, #4
 800c26c:	4413      	add	r3, r2
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	429a      	cmp	r2, r3
 800c274:	d105      	bne.n	800c282 <clear_lock+0x2a>
 800c276:	4a09      	ldr	r2, [pc, #36]	; (800c29c <clear_lock+0x44>)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	011b      	lsls	r3, r3, #4
 800c27c:	4413      	add	r3, r2
 800c27e:	2200      	movs	r2, #0
 800c280:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3301      	adds	r3, #1
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d9eb      	bls.n	800c266 <clear_lock+0xe>
	}
}
 800c28e:	bf00      	nop
 800c290:	bf00      	nop
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	20002538 	.word	0x20002538

0800c2a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	78db      	ldrb	r3, [r3, #3]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d034      	beq.n	800c31e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	7858      	ldrb	r0, [r3, #1]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	f7ff fd40 	bl	800bd4c <disk_write>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	73fb      	strb	r3, [r7, #15]
 800c2d6:	e022      	b.n	800c31e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	1ad2      	subs	r2, r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6a1b      	ldr	r3, [r3, #32]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d217      	bcs.n	800c31e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	789b      	ldrb	r3, [r3, #2]
 800c2f2:	613b      	str	r3, [r7, #16]
 800c2f4:	e010      	b.n	800c318 <sync_window+0x78>
					wsect += fs->fsize;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	7858      	ldrb	r0, [r3, #1]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c30a:	2301      	movs	r3, #1
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	f7ff fd1d 	bl	800bd4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	3b01      	subs	r3, #1
 800c316:	613b      	str	r3, [r7, #16]
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d8eb      	bhi.n	800c2f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c332:	2300      	movs	r3, #0
 800c334:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d01b      	beq.n	800c378 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff ffad 	bl	800c2a0 <sync_window>
 800c346:	4603      	mov	r3, r0
 800c348:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d113      	bne.n	800c378 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	7858      	ldrb	r0, [r3, #1]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c35a:	2301      	movs	r3, #1
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	f7ff fcd5 	bl	800bd0c <disk_read>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d004      	beq.n	800c372 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c36c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c36e:	2301      	movs	r3, #1
 800c370:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c378:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
	...

0800c384 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff ff87 	bl	800c2a0 <sync_window>
 800c392:	4603      	mov	r3, r0
 800c394:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d159      	bne.n	800c450 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2b03      	cmp	r3, #3
 800c3a2:	d149      	bne.n	800c438 <sync_fs+0xb4>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	791b      	ldrb	r3, [r3, #4]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d145      	bne.n	800c438 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	899b      	ldrh	r3, [r3, #12]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	f7ff fda8 	bl	800bf0e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	3338      	adds	r3, #56	; 0x38
 800c3c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff fd37 	bl	800be3e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	3338      	adds	r3, #56	; 0x38
 800c3d4:	4921      	ldr	r1, [pc, #132]	; (800c45c <sync_fs+0xd8>)
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fd4c 	bl	800be74 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3338      	adds	r3, #56	; 0x38
 800c3e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c3e4:	491e      	ldr	r1, [pc, #120]	; (800c460 <sync_fs+0xdc>)
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff fd44 	bl	800be74 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	3338      	adds	r3, #56	; 0x38
 800c3f0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	4610      	mov	r0, r2
 800c3fc:	f7ff fd3a 	bl	800be74 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3338      	adds	r3, #56	; 0x38
 800c404:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	4619      	mov	r1, r3
 800c40e:	4610      	mov	r0, r2
 800c410:	f7ff fd30 	bl	800be74 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c418:	1c5a      	adds	r2, r3, #1
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	7858      	ldrb	r0, [r3, #1]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c42c:	2301      	movs	r3, #1
 800c42e:	f7ff fc8d 	bl	800bd4c <disk_write>
			fs->fsi_flag = 0;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	2200      	movs	r2, #0
 800c43e:	2100      	movs	r1, #0
 800c440:	4618      	mov	r0, r3
 800c442:	f7ff fca3 	bl	800bd8c <disk_ioctl>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <sync_fs+0xcc>
 800c44c:	2301      	movs	r3, #1
 800c44e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c450:	7bfb      	ldrb	r3, [r7, #15]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	41615252 	.word	0x41615252
 800c460:	61417272 	.word	0x61417272

0800c464 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	3b02      	subs	r3, #2
 800c472:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	69db      	ldr	r3, [r3, #28]
 800c478:	3b02      	subs	r3, #2
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d301      	bcc.n	800c484 <clust2sect+0x20>
 800c480:	2300      	movs	r3, #0
 800c482:	e008      	b.n	800c496 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	895b      	ldrh	r3, [r3, #10]
 800c488:	461a      	mov	r2, r3
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	fb03 f202 	mul.w	r2, r3, r2
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c494:	4413      	add	r3, r2
}
 800c496:	4618      	mov	r0, r3
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b086      	sub	sp, #24
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d904      	bls.n	800c4c2 <get_fat+0x20>
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	69db      	ldr	r3, [r3, #28]
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d302      	bcc.n	800c4c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	617b      	str	r3, [r7, #20]
 800c4c6:	e0bb      	b.n	800c640 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c4c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	2b03      	cmp	r3, #3
 800c4d4:	f000 8083 	beq.w	800c5de <get_fat+0x13c>
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	f300 80a7 	bgt.w	800c62c <get_fat+0x18a>
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d002      	beq.n	800c4e8 <get_fat+0x46>
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d056      	beq.n	800c594 <get_fat+0xf2>
 800c4e6:	e0a1      	b.n	800c62c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	085b      	lsrs	r3, r3, #1
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	899b      	ldrh	r3, [r3, #12]
 800c4fe:	4619      	mov	r1, r3
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	fbb3 f3f1 	udiv	r3, r3, r1
 800c506:	4413      	add	r3, r2
 800c508:	4619      	mov	r1, r3
 800c50a:	6938      	ldr	r0, [r7, #16]
 800c50c:	f7ff ff0c 	bl	800c328 <move_window>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	f040 808d 	bne.w	800c632 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	60fa      	str	r2, [r7, #12]
 800c51e:	693a      	ldr	r2, [r7, #16]
 800c520:	8992      	ldrh	r2, [r2, #12]
 800c522:	fbb3 f1f2 	udiv	r1, r3, r2
 800c526:	fb02 f201 	mul.w	r2, r2, r1
 800c52a:	1a9b      	subs	r3, r3, r2
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	4413      	add	r3, r2
 800c530:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c534:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	899b      	ldrh	r3, [r3, #12]
 800c53e:	4619      	mov	r1, r3
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	fbb3 f3f1 	udiv	r3, r3, r1
 800c546:	4413      	add	r3, r2
 800c548:	4619      	mov	r1, r3
 800c54a:	6938      	ldr	r0, [r7, #16]
 800c54c:	f7ff feec 	bl	800c328 <move_window>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d16f      	bne.n	800c636 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	899b      	ldrh	r3, [r3, #12]
 800c55a:	461a      	mov	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c562:	fb02 f201 	mul.w	r2, r2, r1
 800c566:	1a9b      	subs	r3, r3, r2
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	4413      	add	r3, r2
 800c56c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c570:	021b      	lsls	r3, r3, #8
 800c572:	461a      	mov	r2, r3
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	4313      	orrs	r3, r2
 800c578:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	2b00      	cmp	r3, #0
 800c582:	d002      	beq.n	800c58a <get_fat+0xe8>
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	091b      	lsrs	r3, r3, #4
 800c588:	e002      	b.n	800c590 <get_fat+0xee>
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c590:	617b      	str	r3, [r7, #20]
			break;
 800c592:	e055      	b.n	800c640 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	899b      	ldrh	r3, [r3, #12]
 800c59c:	085b      	lsrs	r3, r3, #1
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5a8:	4413      	add	r3, r2
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	6938      	ldr	r0, [r7, #16]
 800c5ae:	f7ff febb 	bl	800c328 <move_window>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d140      	bne.n	800c63a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	8992      	ldrh	r2, [r2, #12]
 800c5c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5ca:	fb02 f200 	mul.w	r2, r2, r0
 800c5ce:	1a9b      	subs	r3, r3, r2
 800c5d0:	440b      	add	r3, r1
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7ff fbf8 	bl	800bdc8 <ld_word>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	617b      	str	r3, [r7, #20]
			break;
 800c5dc:	e030      	b.n	800c640 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	899b      	ldrh	r3, [r3, #12]
 800c5e6:	089b      	lsrs	r3, r3, #2
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5f2:	4413      	add	r3, r2
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6938      	ldr	r0, [r7, #16]
 800c5f8:	f7ff fe96 	bl	800c328 <move_window>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d11d      	bne.n	800c63e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	693a      	ldr	r2, [r7, #16]
 800c60e:	8992      	ldrh	r2, [r2, #12]
 800c610:	fbb3 f0f2 	udiv	r0, r3, r2
 800c614:	fb02 f200 	mul.w	r2, r2, r0
 800c618:	1a9b      	subs	r3, r3, r2
 800c61a:	440b      	add	r3, r1
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7ff fbeb 	bl	800bdf8 <ld_dword>
 800c622:	4603      	mov	r3, r0
 800c624:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c628:	617b      	str	r3, [r7, #20]
			break;
 800c62a:	e009      	b.n	800c640 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c62c:	2301      	movs	r3, #1
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	e006      	b.n	800c640 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c632:	bf00      	nop
 800c634:	e004      	b.n	800c640 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c636:	bf00      	nop
 800c638:	e002      	b.n	800c640 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c63a:	bf00      	nop
 800c63c:	e000      	b.n	800c640 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c63e:	bf00      	nop
		}
	}

	return val;
 800c640:	697b      	ldr	r3, [r7, #20]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c64a:	b590      	push	{r4, r7, lr}
 800c64c:	b089      	sub	sp, #36	; 0x24
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	60b9      	str	r1, [r7, #8]
 800c654:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c656:	2302      	movs	r3, #2
 800c658:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	f240 8102 	bls.w	800c866 <put_fat+0x21c>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	69db      	ldr	r3, [r3, #28]
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	429a      	cmp	r2, r3
 800c66a:	f080 80fc 	bcs.w	800c866 <put_fat+0x21c>
		switch (fs->fs_type) {
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	2b03      	cmp	r3, #3
 800c674:	f000 80b6 	beq.w	800c7e4 <put_fat+0x19a>
 800c678:	2b03      	cmp	r3, #3
 800c67a:	f300 80fd 	bgt.w	800c878 <put_fat+0x22e>
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d003      	beq.n	800c68a <put_fat+0x40>
 800c682:	2b02      	cmp	r3, #2
 800c684:	f000 8083 	beq.w	800c78e <put_fat+0x144>
 800c688:	e0f6      	b.n	800c878 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	61bb      	str	r3, [r7, #24]
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	085b      	lsrs	r3, r3, #1
 800c692:	69ba      	ldr	r2, [r7, #24]
 800c694:	4413      	add	r3, r2
 800c696:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	899b      	ldrh	r3, [r3, #12]
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6a8:	4413      	add	r3, r2
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f7ff fe3b 	bl	800c328 <move_window>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6b6:	7ffb      	ldrb	r3, [r7, #31]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f040 80d6 	bne.w	800c86a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	1c5a      	adds	r2, r3, #1
 800c6c8:	61ba      	str	r2, [r7, #24]
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	8992      	ldrh	r2, [r2, #12]
 800c6ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6d2:	fb02 f200 	mul.w	r2, r2, r0
 800c6d6:	1a9b      	subs	r3, r3, r2
 800c6d8:	440b      	add	r3, r1
 800c6da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	f003 0301 	and.w	r3, r3, #1
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00d      	beq.n	800c702 <put_fat+0xb8>
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	b25b      	sxtb	r3, r3
 800c6ec:	f003 030f 	and.w	r3, r3, #15
 800c6f0:	b25a      	sxtb	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	011b      	lsls	r3, r3, #4
 800c6f8:	b25b      	sxtb	r3, r3
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	b25b      	sxtb	r3, r3
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	e001      	b.n	800c706 <put_fat+0xbc>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	b2db      	uxtb	r3, r3
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2201      	movs	r2, #1
 800c70e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	899b      	ldrh	r3, [r3, #12]
 800c718:	4619      	mov	r1, r3
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c720:	4413      	add	r3, r2
 800c722:	4619      	mov	r1, r3
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f7ff fdff 	bl	800c328 <move_window>
 800c72a:	4603      	mov	r3, r0
 800c72c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c72e:	7ffb      	ldrb	r3, [r7, #31]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f040 809c 	bne.w	800c86e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	899b      	ldrh	r3, [r3, #12]
 800c740:	461a      	mov	r2, r3
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	fbb3 f0f2 	udiv	r0, r3, r2
 800c748:	fb02 f200 	mul.w	r2, r2, r0
 800c74c:	1a9b      	subs	r3, r3, r2
 800c74e:	440b      	add	r3, r1
 800c750:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	f003 0301 	and.w	r3, r3, #1
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <put_fat+0x11a>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	091b      	lsrs	r3, r3, #4
 800c760:	b2db      	uxtb	r3, r3
 800c762:	e00e      	b.n	800c782 <put_fat+0x138>
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	b25b      	sxtb	r3, r3
 800c76a:	f023 030f 	bic.w	r3, r3, #15
 800c76e:	b25a      	sxtb	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	0a1b      	lsrs	r3, r3, #8
 800c774:	b25b      	sxtb	r3, r3
 800c776:	f003 030f 	and.w	r3, r3, #15
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	4313      	orrs	r3, r2
 800c77e:	b25b      	sxtb	r3, r3
 800c780:	b2db      	uxtb	r3, r3
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2201      	movs	r2, #1
 800c78a:	70da      	strb	r2, [r3, #3]
			break;
 800c78c:	e074      	b.n	800c878 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	899b      	ldrh	r3, [r3, #12]
 800c796:	085b      	lsrs	r3, r3, #1
 800c798:	b29b      	uxth	r3, r3
 800c79a:	4619      	mov	r1, r3
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7a2:	4413      	add	r3, r2
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f7ff fdbe 	bl	800c328 <move_window>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7b0:	7ffb      	ldrb	r3, [r7, #31]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d15d      	bne.n	800c872 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	8992      	ldrh	r2, [r2, #12]
 800c7c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7c8:	fb02 f200 	mul.w	r2, r2, r0
 800c7cc:	1a9b      	subs	r3, r3, r2
 800c7ce:	440b      	add	r3, r1
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	b292      	uxth	r2, r2
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7ff fb31 	bl	800be3e <st_word>
			fs->wflag = 1;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	70da      	strb	r2, [r3, #3]
			break;
 800c7e2:	e049      	b.n	800c878 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	899b      	ldrh	r3, [r3, #12]
 800c7ec:	089b      	lsrs	r3, r3, #2
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7f8:	4413      	add	r3, r2
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f7ff fd93 	bl	800c328 <move_window>
 800c802:	4603      	mov	r3, r0
 800c804:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c806:	7ffb      	ldrb	r3, [r7, #31]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d134      	bne.n	800c876 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	8992      	ldrh	r2, [r2, #12]
 800c820:	fbb3 f0f2 	udiv	r0, r3, r2
 800c824:	fb02 f200 	mul.w	r2, r2, r0
 800c828:	1a9b      	subs	r3, r3, r2
 800c82a:	440b      	add	r3, r1
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7ff fae3 	bl	800bdf8 <ld_dword>
 800c832:	4603      	mov	r3, r0
 800c834:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c838:	4323      	orrs	r3, r4
 800c83a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	8992      	ldrh	r2, [r2, #12]
 800c84a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c84e:	fb02 f200 	mul.w	r2, r2, r0
 800c852:	1a9b      	subs	r3, r3, r2
 800c854:	440b      	add	r3, r1
 800c856:	6879      	ldr	r1, [r7, #4]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7ff fb0b 	bl	800be74 <st_dword>
			fs->wflag = 1;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2201      	movs	r2, #1
 800c862:	70da      	strb	r2, [r3, #3]
			break;
 800c864:	e008      	b.n	800c878 <put_fat+0x22e>
		}
	}
 800c866:	bf00      	nop
 800c868:	e006      	b.n	800c878 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c86a:	bf00      	nop
 800c86c:	e004      	b.n	800c878 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c86e:	bf00      	nop
 800c870:	e002      	b.n	800c878 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c872:	bf00      	nop
 800c874:	e000      	b.n	800c878 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c876:	bf00      	nop
	return res;
 800c878:	7ffb      	ldrb	r3, [r7, #31]
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3724      	adds	r7, #36	; 0x24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd90      	pop	{r4, r7, pc}

0800c882 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b088      	sub	sp, #32
 800c886:	af00      	add	r7, sp, #0
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d904      	bls.n	800c8a8 <remove_chain+0x26>
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	69db      	ldr	r3, [r3, #28]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d301      	bcc.n	800c8ac <remove_chain+0x2a>
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	e04b      	b.n	800c944 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00c      	beq.n	800c8cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c8b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8b6:	6879      	ldr	r1, [r7, #4]
 800c8b8:	69b8      	ldr	r0, [r7, #24]
 800c8ba:	f7ff fec6 	bl	800c64a <put_fat>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c8c2:	7ffb      	ldrb	r3, [r7, #31]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <remove_chain+0x4a>
 800c8c8:	7ffb      	ldrb	r3, [r7, #31]
 800c8ca:	e03b      	b.n	800c944 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c8cc:	68b9      	ldr	r1, [r7, #8]
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f7ff fde7 	bl	800c4a2 <get_fat>
 800c8d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d031      	beq.n	800c940 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d101      	bne.n	800c8e6 <remove_chain+0x64>
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	e02e      	b.n	800c944 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8ec:	d101      	bne.n	800c8f2 <remove_chain+0x70>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e028      	b.n	800c944 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	69b8      	ldr	r0, [r7, #24]
 800c8f8:	f7ff fea7 	bl	800c64a <put_fat>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c900:	7ffb      	ldrb	r3, [r7, #31]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <remove_chain+0x88>
 800c906:	7ffb      	ldrb	r3, [r7, #31]
 800c908:	e01c      	b.n	800c944 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	699a      	ldr	r2, [r3, #24]
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	69db      	ldr	r3, [r3, #28]
 800c912:	3b02      	subs	r3, #2
 800c914:	429a      	cmp	r2, r3
 800c916:	d20b      	bcs.n	800c930 <remove_chain+0xae>
			fs->free_clst++;
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	1c5a      	adds	r2, r3, #1
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	791b      	ldrb	r3, [r3, #4]
 800c926:	f043 0301 	orr.w	r3, r3, #1
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	69db      	ldr	r3, [r3, #28]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d3c6      	bcc.n	800c8cc <remove_chain+0x4a>
 800c93e:	e000      	b.n	800c942 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c940:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	3720      	adds	r7, #32
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b088      	sub	sp, #32
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10d      	bne.n	800c97e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	695b      	ldr	r3, [r3, #20]
 800c966:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d004      	beq.n	800c978 <create_chain+0x2c>
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	69db      	ldr	r3, [r3, #28]
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	429a      	cmp	r2, r3
 800c976:	d31b      	bcc.n	800c9b0 <create_chain+0x64>
 800c978:	2301      	movs	r3, #1
 800c97a:	61bb      	str	r3, [r7, #24]
 800c97c:	e018      	b.n	800c9b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff fd8e 	bl	800c4a2 <get_fat>
 800c986:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d801      	bhi.n	800c992 <create_chain+0x46>
 800c98e:	2301      	movs	r3, #1
 800c990:	e070      	b.n	800ca74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c998:	d101      	bne.n	800c99e <create_chain+0x52>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	e06a      	b.n	800ca74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	69db      	ldr	r3, [r3, #28]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d201      	bcs.n	800c9ac <create_chain+0x60>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	e063      	b.n	800ca74 <create_chain+0x128>
		scl = clst;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	69db      	ldr	r3, [r3, #28]
 800c9be:	69fa      	ldr	r2, [r7, #28]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d307      	bcc.n	800c9d4 <create_chain+0x88>
				ncl = 2;
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c9c8:	69fa      	ldr	r2, [r7, #28]
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d901      	bls.n	800c9d4 <create_chain+0x88>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e04f      	b.n	800ca74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c9d4:	69f9      	ldr	r1, [r7, #28]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff fd63 	bl	800c4a2 <get_fat>
 800c9dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00e      	beq.n	800ca02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d003      	beq.n	800c9f2 <create_chain+0xa6>
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9f0:	d101      	bne.n	800c9f6 <create_chain+0xaa>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	e03e      	b.n	800ca74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c9f6:	69fa      	ldr	r2, [r7, #28]
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d1da      	bne.n	800c9b4 <create_chain+0x68>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	e038      	b.n	800ca74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ca02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ca04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca08:	69f9      	ldr	r1, [r7, #28]
 800ca0a:	6938      	ldr	r0, [r7, #16]
 800ca0c:	f7ff fe1d 	bl	800c64a <put_fat>
 800ca10:	4603      	mov	r3, r0
 800ca12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ca14:	7dfb      	ldrb	r3, [r7, #23]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d109      	bne.n	800ca2e <create_chain+0xe2>
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d006      	beq.n	800ca2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ca20:	69fa      	ldr	r2, [r7, #28]
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6938      	ldr	r0, [r7, #16]
 800ca26:	f7ff fe10 	bl	800c64a <put_fat>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d116      	bne.n	800ca62 <create_chain+0x116>
		fs->last_clst = ncl;
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	69fa      	ldr	r2, [r7, #28]
 800ca38:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	699a      	ldr	r2, [r3, #24]
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	69db      	ldr	r3, [r3, #28]
 800ca42:	3b02      	subs	r3, #2
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d804      	bhi.n	800ca52 <create_chain+0x106>
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	699b      	ldr	r3, [r3, #24]
 800ca4c:	1e5a      	subs	r2, r3, #1
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	791b      	ldrb	r3, [r3, #4]
 800ca56:	f043 0301 	orr.w	r3, r3, #1
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	711a      	strb	r2, [r3, #4]
 800ca60:	e007      	b.n	800ca72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ca62:	7dfb      	ldrb	r3, [r7, #23]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d102      	bne.n	800ca6e <create_chain+0x122>
 800ca68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca6c:	e000      	b.n	800ca70 <create_chain+0x124>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ca72:	69fb      	ldr	r3, [r7, #28]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3720      	adds	r7, #32
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b087      	sub	sp, #28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca90:	3304      	adds	r3, #4
 800ca92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	899b      	ldrh	r3, [r3, #12]
 800ca98:	461a      	mov	r2, r3
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	8952      	ldrh	r2, [r2, #10]
 800caa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800caa8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	1d1a      	adds	r2, r3, #4
 800caae:	613a      	str	r2, [r7, #16]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <clmt_clust+0x42>
 800caba:	2300      	movs	r3, #0
 800cabc:	e010      	b.n	800cae0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d307      	bcc.n	800cad6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	617b      	str	r3, [r7, #20]
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	3304      	adds	r3, #4
 800cad2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cad4:	e7e9      	b.n	800caaa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cad6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	4413      	add	r3, r2
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	371c      	adds	r7, #28
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb02:	d204      	bcs.n	800cb0e <dir_sdi+0x22>
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	f003 031f 	and.w	r3, r3, #31
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cb0e:	2302      	movs	r3, #2
 800cb10:	e071      	b.n	800cbf6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <dir_sdi+0x46>
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2b02      	cmp	r3, #2
 800cb2a:	d902      	bls.n	800cb32 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb30:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10c      	bne.n	800cb52 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	095b      	lsrs	r3, r3, #5
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	8912      	ldrh	r2, [r2, #8]
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d301      	bcc.n	800cb48 <dir_sdi+0x5c>
 800cb44:	2302      	movs	r3, #2
 800cb46:	e056      	b.n	800cbf6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	61da      	str	r2, [r3, #28]
 800cb50:	e02d      	b.n	800cbae <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	895b      	ldrh	r3, [r3, #10]
 800cb56:	461a      	mov	r2, r3
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	899b      	ldrh	r3, [r3, #12]
 800cb5c:	fb03 f302 	mul.w	r3, r3, r2
 800cb60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb62:	e019      	b.n	800cb98 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6979      	ldr	r1, [r7, #20]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7ff fc9a 	bl	800c4a2 <get_fat>
 800cb6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb76:	d101      	bne.n	800cb7c <dir_sdi+0x90>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e03c      	b.n	800cbf6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d904      	bls.n	800cb8c <dir_sdi+0xa0>
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	69db      	ldr	r3, [r3, #28]
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d301      	bcc.n	800cb90 <dir_sdi+0xa4>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	e032      	b.n	800cbf6 <dir_sdi+0x10a>
			ofs -= csz;
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d2e1      	bcs.n	800cb64 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cba0:	6979      	ldr	r1, [r7, #20]
 800cba2:	6938      	ldr	r0, [r7, #16]
 800cba4:	f7ff fc5e 	bl	800c464 <clust2sect>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	69db      	ldr	r3, [r3, #28]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <dir_sdi+0xd4>
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	e01a      	b.n	800cbf6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	69da      	ldr	r2, [r3, #28]
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	899b      	ldrh	r3, [r3, #12]
 800cbc8:	4619      	mov	r1, r3
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbd0:	441a      	add	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	899b      	ldrh	r3, [r3, #12]
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbe8:	fb02 f200 	mul.w	r2, r2, r0
 800cbec:	1a9b      	subs	r3, r3, r2
 800cbee:	18ca      	adds	r2, r1, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b086      	sub	sp, #24
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	3320      	adds	r3, #32
 800cc14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	69db      	ldr	r3, [r3, #28]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <dir_next+0x28>
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc24:	d301      	bcc.n	800cc2a <dir_next+0x2c>
 800cc26:	2304      	movs	r3, #4
 800cc28:	e0bb      	b.n	800cda2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	899b      	ldrh	r3, [r3, #12]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc36:	fb02 f201 	mul.w	r2, r2, r1
 800cc3a:	1a9b      	subs	r3, r3, r2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f040 809d 	bne.w	800cd7c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	69db      	ldr	r3, [r3, #28]
 800cc46:	1c5a      	adds	r2, r3, #1
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	699b      	ldr	r3, [r3, #24]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10b      	bne.n	800cc6c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	095b      	lsrs	r3, r3, #5
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	8912      	ldrh	r2, [r2, #8]
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	f0c0 808d 	bcc.w	800cd7c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	61da      	str	r2, [r3, #28]
 800cc68:	2304      	movs	r3, #4
 800cc6a:	e09a      	b.n	800cda2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	899b      	ldrh	r3, [r3, #12]
 800cc70:	461a      	mov	r2, r3
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	8952      	ldrh	r2, [r2, #10]
 800cc7c:	3a01      	subs	r2, #1
 800cc7e:	4013      	ands	r3, r2
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d17b      	bne.n	800cd7c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	699b      	ldr	r3, [r3, #24]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	f7ff fc08 	bl	800c4a2 <get_fat>
 800cc92:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d801      	bhi.n	800cc9e <dir_next+0xa0>
 800cc9a:	2302      	movs	r3, #2
 800cc9c:	e081      	b.n	800cda2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cca4:	d101      	bne.n	800ccaa <dir_next+0xac>
 800cca6:	2301      	movs	r3, #1
 800cca8:	e07b      	b.n	800cda2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	697a      	ldr	r2, [r7, #20]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d359      	bcc.n	800cd68 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d104      	bne.n	800ccc4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	61da      	str	r2, [r3, #28]
 800ccc0:	2304      	movs	r3, #4
 800ccc2:	e06e      	b.n	800cda2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	699b      	ldr	r3, [r3, #24]
 800ccca:	4619      	mov	r1, r3
 800cccc:	4610      	mov	r0, r2
 800ccce:	f7ff fe3d 	bl	800c94c <create_chain>
 800ccd2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <dir_next+0xe0>
 800ccda:	2307      	movs	r3, #7
 800ccdc:	e061      	b.n	800cda2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d101      	bne.n	800cce8 <dir_next+0xea>
 800cce4:	2302      	movs	r3, #2
 800cce6:	e05c      	b.n	800cda2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccee:	d101      	bne.n	800ccf4 <dir_next+0xf6>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e056      	b.n	800cda2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f7ff fad3 	bl	800c2a0 <sync_window>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d001      	beq.n	800cd04 <dir_next+0x106>
 800cd00:	2301      	movs	r3, #1
 800cd02:	e04e      	b.n	800cda2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	899b      	ldrh	r3, [r3, #12]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	2100      	movs	r1, #0
 800cd12:	f7ff f8fc 	bl	800bf0e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cd16:	2300      	movs	r3, #0
 800cd18:	613b      	str	r3, [r7, #16]
 800cd1a:	6979      	ldr	r1, [r7, #20]
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f7ff fba1 	bl	800c464 <clust2sect>
 800cd22:	4602      	mov	r2, r0
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	635a      	str	r2, [r3, #52]	; 0x34
 800cd28:	e012      	b.n	800cd50 <dir_next+0x152>
						fs->wflag = 1;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f7ff fab5 	bl	800c2a0 <sync_window>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <dir_next+0x142>
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e030      	b.n	800cda2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	3301      	adds	r3, #1
 800cd44:	613b      	str	r3, [r7, #16]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	635a      	str	r2, [r3, #52]	; 0x34
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	895b      	ldrh	r3, [r3, #10]
 800cd54:	461a      	mov	r2, r3
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d3e6      	bcc.n	800cd2a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	1ad2      	subs	r2, r2, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cd6e:	6979      	ldr	r1, [r7, #20]
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7ff fb77 	bl	800c464 <clust2sect>
 800cd76:	4602      	mov	r2, r0
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	899b      	ldrh	r3, [r3, #12]
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd94:	fb02 f200 	mul.w	r2, r2, r0
 800cd98:	1a9b      	subs	r3, r3, r2
 800cd9a:	18ca      	adds	r2, r1, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3718      	adds	r7, #24
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b086      	sub	sp, #24
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cdba:	2100      	movs	r1, #0
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7ff fe95 	bl	800caec <dir_sdi>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cdc6:	7dfb      	ldrb	r3, [r7, #23]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d12b      	bne.n	800ce24 <dir_alloc+0x7a>
		n = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	69db      	ldr	r3, [r3, #28]
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f7ff faa6 	bl	800c328 <move_window>
 800cddc:	4603      	mov	r3, r0
 800cdde:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d11d      	bne.n	800ce22 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a1b      	ldr	r3, [r3, #32]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2be5      	cmp	r3, #229	; 0xe5
 800cdee:	d004      	beq.n	800cdfa <dir_alloc+0x50>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a1b      	ldr	r3, [r3, #32]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d107      	bne.n	800ce0a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	613b      	str	r3, [r7, #16]
 800ce00:	693a      	ldr	r2, [r7, #16]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d102      	bne.n	800ce0e <dir_alloc+0x64>
 800ce08:	e00c      	b.n	800ce24 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ce0e:	2101      	movs	r1, #1
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7ff fef4 	bl	800cbfe <dir_next>
 800ce16:	4603      	mov	r3, r0
 800ce18:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d0d7      	beq.n	800cdd0 <dir_alloc+0x26>
 800ce20:	e000      	b.n	800ce24 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ce22:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
 800ce26:	2b04      	cmp	r3, #4
 800ce28:	d101      	bne.n	800ce2e <dir_alloc+0x84>
 800ce2a:	2307      	movs	r3, #7
 800ce2c:	75fb      	strb	r3, [r7, #23]
	return res;
 800ce2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	331a      	adds	r3, #26
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fe ffbe 	bl	800bdc8 <ld_word>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b03      	cmp	r3, #3
 800ce56:	d109      	bne.n	800ce6c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	3314      	adds	r3, #20
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe ffb3 	bl	800bdc8 <ld_word>
 800ce62:	4603      	mov	r3, r0
 800ce64:	041b      	lsls	r3, r3, #16
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b084      	sub	sp, #16
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	60f8      	str	r0, [r7, #12]
 800ce7e:	60b9      	str	r1, [r7, #8]
 800ce80:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	331a      	adds	r3, #26
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	b292      	uxth	r2, r2
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe ffd6 	bl	800be3e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d109      	bne.n	800ceae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	f103 0214 	add.w	r2, r3, #20
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	0c1b      	lsrs	r3, r3, #16
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	4619      	mov	r1, r3
 800cea8:	4610      	mov	r0, r2
 800ceaa:	f7fe ffc8 	bl	800be3e <st_word>
	}
}
 800ceae:	bf00      	nop
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
	...

0800ceb8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ceb8:	b590      	push	{r4, r7, lr}
 800ceba:	b087      	sub	sp, #28
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	331a      	adds	r3, #26
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe ff7e 	bl	800bdc8 <ld_word>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d001      	beq.n	800ced6 <cmp_lfn+0x1e>
 800ced2:	2300      	movs	r3, #0
 800ced4:	e059      	b.n	800cf8a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cede:	1e5a      	subs	r2, r3, #1
 800cee0:	4613      	mov	r3, r2
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	4413      	add	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4413      	add	r3, r2
 800ceea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ceec:	2301      	movs	r3, #1
 800ceee:	81fb      	strh	r3, [r7, #14]
 800cef0:	2300      	movs	r3, #0
 800cef2:	613b      	str	r3, [r7, #16]
 800cef4:	e033      	b.n	800cf5e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cef6:	4a27      	ldr	r2, [pc, #156]	; (800cf94 <cmp_lfn+0xdc>)
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	4413      	add	r3, r2
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	4413      	add	r3, r2
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fe ff5f 	bl	800bdc8 <ld_word>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cf0e:	89fb      	ldrh	r3, [r7, #14]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d01a      	beq.n	800cf4a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2b31      	cmp	r3, #49	; 0x31
 800cf18:	d812      	bhi.n	800cf40 <cmp_lfn+0x88>
 800cf1a:	89bb      	ldrh	r3, [r7, #12]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f002 f98b 	bl	800f238 <ff_wtoupper>
 800cf22:	4603      	mov	r3, r0
 800cf24:	461c      	mov	r4, r3
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	1c5a      	adds	r2, r3, #1
 800cf2a:	617a      	str	r2, [r7, #20]
 800cf2c:	005b      	lsls	r3, r3, #1
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	4413      	add	r3, r2
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f002 f97f 	bl	800f238 <ff_wtoupper>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	429c      	cmp	r4, r3
 800cf3e:	d001      	beq.n	800cf44 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cf40:	2300      	movs	r3, #0
 800cf42:	e022      	b.n	800cf8a <cmp_lfn+0xd2>
			}
			wc = uc;
 800cf44:	89bb      	ldrh	r3, [r7, #12]
 800cf46:	81fb      	strh	r3, [r7, #14]
 800cf48:	e006      	b.n	800cf58 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cf4a:	89bb      	ldrh	r3, [r7, #12]
 800cf4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d001      	beq.n	800cf58 <cmp_lfn+0xa0>
 800cf54:	2300      	movs	r3, #0
 800cf56:	e018      	b.n	800cf8a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	613b      	str	r3, [r7, #16]
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	2b0c      	cmp	r3, #12
 800cf62:	d9c8      	bls.n	800cef6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00b      	beq.n	800cf88 <cmp_lfn+0xd0>
 800cf70:	89fb      	ldrh	r3, [r7, #14]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d008      	beq.n	800cf88 <cmp_lfn+0xd0>
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	005b      	lsls	r3, r3, #1
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	881b      	ldrh	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d001      	beq.n	800cf88 <cmp_lfn+0xd0>
 800cf84:	2300      	movs	r3, #0
 800cf86:	e000      	b.n	800cf8a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cf88:	2301      	movs	r3, #1
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	371c      	adds	r7, #28
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd90      	pop	{r4, r7, pc}
 800cf92:	bf00      	nop
 800cf94:	08014bc0 	.word	0x08014bc0

0800cf98 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	331a      	adds	r3, #26
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe ff0e 	bl	800bdc8 <ld_word>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <pick_lfn+0x1e>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	e04d      	b.n	800d052 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfbe:	1e5a      	subs	r2, r3, #1
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	4413      	add	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cfcc:	2301      	movs	r3, #1
 800cfce:	81fb      	strh	r3, [r7, #14]
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	613b      	str	r3, [r7, #16]
 800cfd4:	e028      	b.n	800d028 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cfd6:	4a21      	ldr	r2, [pc, #132]	; (800d05c <pick_lfn+0xc4>)
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	4413      	add	r3, r2
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe feef 	bl	800bdc8 <ld_word>
 800cfea:	4603      	mov	r3, r0
 800cfec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cfee:	89fb      	ldrh	r3, [r7, #14]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00f      	beq.n	800d014 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	2b31      	cmp	r3, #49	; 0x31
 800cff8:	d901      	bls.n	800cffe <pick_lfn+0x66>
 800cffa:	2300      	movs	r3, #0
 800cffc:	e029      	b.n	800d052 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cffe:	89bb      	ldrh	r3, [r7, #12]
 800d000:	81fb      	strh	r3, [r7, #14]
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	1c5a      	adds	r2, r3, #1
 800d006:	617a      	str	r2, [r7, #20]
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	4413      	add	r3, r2
 800d00e:	89fa      	ldrh	r2, [r7, #14]
 800d010:	801a      	strh	r2, [r3, #0]
 800d012:	e006      	b.n	800d022 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d014:	89bb      	ldrh	r3, [r7, #12]
 800d016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d001      	beq.n	800d022 <pick_lfn+0x8a>
 800d01e:	2300      	movs	r3, #0
 800d020:	e017      	b.n	800d052 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	3301      	adds	r3, #1
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	2b0c      	cmp	r3, #12
 800d02c:	d9d3      	bls.n	800cfd6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	2b31      	cmp	r3, #49	; 0x31
 800d03e:	d901      	bls.n	800d044 <pick_lfn+0xac>
 800d040:	2300      	movs	r3, #0
 800d042:	e006      	b.n	800d052 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	005b      	lsls	r3, r3, #1
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	4413      	add	r3, r2
 800d04c:	2200      	movs	r2, #0
 800d04e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d050:	2301      	movs	r3, #1
}
 800d052:	4618      	mov	r0, r3
 800d054:	3718      	adds	r7, #24
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	08014bc0 	.word	0x08014bc0

0800d060 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b088      	sub	sp, #32
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	4611      	mov	r1, r2
 800d06c:	461a      	mov	r2, r3
 800d06e:	460b      	mov	r3, r1
 800d070:	71fb      	strb	r3, [r7, #7]
 800d072:	4613      	mov	r3, r2
 800d074:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	330d      	adds	r3, #13
 800d07a:	79ba      	ldrb	r2, [r7, #6]
 800d07c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	330b      	adds	r3, #11
 800d082:	220f      	movs	r2, #15
 800d084:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	330c      	adds	r3, #12
 800d08a:	2200      	movs	r2, #0
 800d08c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	331a      	adds	r3, #26
 800d092:	2100      	movs	r1, #0
 800d094:	4618      	mov	r0, r3
 800d096:	f7fe fed2 	bl	800be3e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	1e5a      	subs	r2, r3, #1
 800d09e:	4613      	mov	r3, r2
 800d0a0:	005b      	lsls	r3, r3, #1
 800d0a2:	4413      	add	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	82fb      	strh	r3, [r7, #22]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d0b2:	8afb      	ldrh	r3, [r7, #22]
 800d0b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d007      	beq.n	800d0cc <put_lfn+0x6c>
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	61fa      	str	r2, [r7, #28]
 800d0c2:	005b      	lsls	r3, r3, #1
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d0cc:	4a17      	ldr	r2, [pc, #92]	; (800d12c <put_lfn+0xcc>)
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	4413      	add	r3, r2
 800d0da:	8afa      	ldrh	r2, [r7, #22]
 800d0dc:	4611      	mov	r1, r2
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe fead 	bl	800be3e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d0e4:	8afb      	ldrh	r3, [r7, #22]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d102      	bne.n	800d0f0 <put_lfn+0x90>
 800d0ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0ee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	61bb      	str	r3, [r7, #24]
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	2b0c      	cmp	r3, #12
 800d0fa:	d9da      	bls.n	800d0b2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d0fc:	8afb      	ldrh	r3, [r7, #22]
 800d0fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d102:	4293      	cmp	r3, r2
 800d104:	d006      	beq.n	800d114 <put_lfn+0xb4>
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	4413      	add	r3, r2
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d103      	bne.n	800d11c <put_lfn+0xbc>
 800d114:	79fb      	ldrb	r3, [r7, #7]
 800d116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d11a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	79fa      	ldrb	r2, [r7, #7]
 800d120:	701a      	strb	r2, [r3, #0]
}
 800d122:	bf00      	nop
 800d124:	3720      	adds	r7, #32
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	08014bc0 	.word	0x08014bc0

0800d130 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08c      	sub	sp, #48	; 0x30
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d13e:	220b      	movs	r2, #11
 800d140:	68b9      	ldr	r1, [r7, #8]
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f7fe fec2 	bl	800becc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2b05      	cmp	r3, #5
 800d14c:	d92b      	bls.n	800d1a6 <gen_numname+0x76>
		sr = seq;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d152:	e022      	b.n	800d19a <gen_numname+0x6a>
			wc = *lfn++;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	1c9a      	adds	r2, r3, #2
 800d158:	607a      	str	r2, [r7, #4]
 800d15a:	881b      	ldrh	r3, [r3, #0]
 800d15c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d15e:	2300      	movs	r3, #0
 800d160:	62bb      	str	r3, [r7, #40]	; 0x28
 800d162:	e017      	b.n	800d194 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	005a      	lsls	r2, r3, #1
 800d168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	4413      	add	r3, r2
 800d170:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d172:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d174:	085b      	lsrs	r3, r3, #1
 800d176:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d005      	beq.n	800d18e <gen_numname+0x5e>
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d188:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d18c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	3301      	adds	r3, #1
 800d192:	62bb      	str	r3, [r7, #40]	; 0x28
 800d194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d196:	2b0f      	cmp	r3, #15
 800d198:	d9e4      	bls.n	800d164 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d1d8      	bne.n	800d154 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d1a6:	2307      	movs	r3, #7
 800d1a8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	f003 030f 	and.w	r3, r3, #15
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	3330      	adds	r3, #48	; 0x30
 800d1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d1ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1be:	2b39      	cmp	r3, #57	; 0x39
 800d1c0:	d904      	bls.n	800d1cc <gen_numname+0x9c>
 800d1c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1c6:	3307      	adds	r3, #7
 800d1c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	1e5a      	subs	r2, r3, #1
 800d1d0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d1d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d1dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	091b      	lsrs	r3, r3, #4
 800d1e4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1de      	bne.n	800d1aa <gen_numname+0x7a>
	ns[i] = '~';
 800d1ec:	f107 0214 	add.w	r2, r7, #20
 800d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f2:	4413      	add	r3, r2
 800d1f4:	227e      	movs	r2, #126	; 0x7e
 800d1f6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	627b      	str	r3, [r7, #36]	; 0x24
 800d1fc:	e002      	b.n	800d204 <gen_numname+0xd4>
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d200:	3301      	adds	r3, #1
 800d202:	627b      	str	r3, [r7, #36]	; 0x24
 800d204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d208:	429a      	cmp	r2, r3
 800d20a:	d205      	bcs.n	800d218 <gen_numname+0xe8>
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	4413      	add	r3, r2
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	2b20      	cmp	r3, #32
 800d216:	d1f2      	bne.n	800d1fe <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	2b07      	cmp	r3, #7
 800d21c:	d808      	bhi.n	800d230 <gen_numname+0x100>
 800d21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d220:	1c5a      	adds	r2, r3, #1
 800d222:	62ba      	str	r2, [r7, #40]	; 0x28
 800d224:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d228:	4413      	add	r3, r2
 800d22a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d22e:	e000      	b.n	800d232 <gen_numname+0x102>
 800d230:	2120      	movs	r1, #32
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	1c5a      	adds	r2, r3, #1
 800d236:	627a      	str	r2, [r7, #36]	; 0x24
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	4413      	add	r3, r2
 800d23c:	460a      	mov	r2, r1
 800d23e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	2b07      	cmp	r3, #7
 800d244:	d9e8      	bls.n	800d218 <gen_numname+0xe8>
}
 800d246:	bf00      	nop
 800d248:	bf00      	nop
 800d24a:	3730      	adds	r7, #48	; 0x30
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d25c:	230b      	movs	r3, #11
 800d25e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d260:	7bfb      	ldrb	r3, [r7, #15]
 800d262:	b2da      	uxtb	r2, r3
 800d264:	0852      	lsrs	r2, r2, #1
 800d266:	01db      	lsls	r3, r3, #7
 800d268:	4313      	orrs	r3, r2
 800d26a:	b2da      	uxtb	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	1c59      	adds	r1, r3, #1
 800d270:	6079      	str	r1, [r7, #4]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	4413      	add	r3, r2
 800d276:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	3b01      	subs	r3, #1
 800d27c:	60bb      	str	r3, [r7, #8]
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1ed      	bne.n	800d260 <sum_sfn+0x10>
	return sum;
 800d284:	7bfb      	ldrb	r3, [r7, #15]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3714      	adds	r7, #20
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr

0800d292 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b086      	sub	sp, #24
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
 800d29a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d29c:	2304      	movs	r3, #4
 800d29e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d2a6:	23ff      	movs	r3, #255	; 0xff
 800d2a8:	757b      	strb	r3, [r7, #21]
 800d2aa:	23ff      	movs	r3, #255	; 0xff
 800d2ac:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d2ae:	e081      	b.n	800d3b4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	69db      	ldr	r3, [r3, #28]
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	6938      	ldr	r0, [r7, #16]
 800d2b8:	f7ff f836 	bl	800c328 <move_window>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2c0:	7dfb      	ldrb	r3, [r7, #23]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d17c      	bne.n	800d3c0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d2ce:	7dbb      	ldrb	r3, [r7, #22]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	75fb      	strb	r3, [r7, #23]
 800d2d8:	e077      	b.n	800d3ca <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a1b      	ldr	r3, [r3, #32]
 800d2de:	330b      	adds	r3, #11
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2e6:	73fb      	strb	r3, [r7, #15]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	7bfa      	ldrb	r2, [r7, #15]
 800d2ec:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d2ee:	7dbb      	ldrb	r3, [r7, #22]
 800d2f0:	2be5      	cmp	r3, #229	; 0xe5
 800d2f2:	d00e      	beq.n	800d312 <dir_read+0x80>
 800d2f4:	7dbb      	ldrb	r3, [r7, #22]
 800d2f6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2f8:	d00b      	beq.n	800d312 <dir_read+0x80>
 800d2fa:	7bfb      	ldrb	r3, [r7, #15]
 800d2fc:	f023 0320 	bic.w	r3, r3, #32
 800d300:	2b08      	cmp	r3, #8
 800d302:	bf0c      	ite	eq
 800d304:	2301      	moveq	r3, #1
 800d306:	2300      	movne	r3, #0
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	461a      	mov	r2, r3
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	4293      	cmp	r3, r2
 800d310:	d002      	beq.n	800d318 <dir_read+0x86>
				ord = 0xFF;
 800d312:	23ff      	movs	r3, #255	; 0xff
 800d314:	757b      	strb	r3, [r7, #21]
 800d316:	e044      	b.n	800d3a2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	2b0f      	cmp	r3, #15
 800d31c:	d12f      	bne.n	800d37e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d31e:	7dbb      	ldrb	r3, [r7, #22]
 800d320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00d      	beq.n	800d344 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6a1b      	ldr	r3, [r3, #32]
 800d32c:	7b5b      	ldrb	r3, [r3, #13]
 800d32e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d330:	7dbb      	ldrb	r3, [r7, #22]
 800d332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d336:	75bb      	strb	r3, [r7, #22]
 800d338:	7dbb      	ldrb	r3, [r7, #22]
 800d33a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	695a      	ldr	r2, [r3, #20]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d344:	7dba      	ldrb	r2, [r7, #22]
 800d346:	7d7b      	ldrb	r3, [r7, #21]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d115      	bne.n	800d378 <dir_read+0xe6>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a1b      	ldr	r3, [r3, #32]
 800d350:	330d      	adds	r3, #13
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	7d3a      	ldrb	r2, [r7, #20]
 800d356:	429a      	cmp	r2, r3
 800d358:	d10e      	bne.n	800d378 <dir_read+0xe6>
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	691a      	ldr	r2, [r3, #16]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a1b      	ldr	r3, [r3, #32]
 800d362:	4619      	mov	r1, r3
 800d364:	4610      	mov	r0, r2
 800d366:	f7ff fe17 	bl	800cf98 <pick_lfn>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d003      	beq.n	800d378 <dir_read+0xe6>
 800d370:	7d7b      	ldrb	r3, [r7, #21]
 800d372:	3b01      	subs	r3, #1
 800d374:	b2db      	uxtb	r3, r3
 800d376:	e000      	b.n	800d37a <dir_read+0xe8>
 800d378:	23ff      	movs	r3, #255	; 0xff
 800d37a:	757b      	strb	r3, [r7, #21]
 800d37c:	e011      	b.n	800d3a2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d37e:	7d7b      	ldrb	r3, [r7, #21]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d109      	bne.n	800d398 <dir_read+0x106>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6a1b      	ldr	r3, [r3, #32]
 800d388:	4618      	mov	r0, r3
 800d38a:	f7ff ff61 	bl	800d250 <sum_sfn>
 800d38e:	4603      	mov	r3, r0
 800d390:	461a      	mov	r2, r3
 800d392:	7d3b      	ldrb	r3, [r7, #20]
 800d394:	4293      	cmp	r3, r2
 800d396:	d015      	beq.n	800d3c4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d39e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d3a0:	e010      	b.n	800d3c4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff fc2a 	bl	800cbfe <dir_next>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d109      	bne.n	800d3c8 <dir_read+0x136>
	while (dp->sect) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	69db      	ldr	r3, [r3, #28]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f47f af79 	bne.w	800d2b0 <dir_read+0x1e>
 800d3be:	e004      	b.n	800d3ca <dir_read+0x138>
		if (res != FR_OK) break;
 800d3c0:	bf00      	nop
 800d3c2:	e002      	b.n	800d3ca <dir_read+0x138>
					break;
 800d3c4:	bf00      	nop
 800d3c6:	e000      	b.n	800d3ca <dir_read+0x138>
		if (res != FR_OK) break;
 800d3c8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <dir_read+0x144>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	61da      	str	r2, [r3, #28]
	return res;
 800d3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3718      	adds	r7, #24
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7ff fb7b 	bl	800caec <dir_sdi>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <dir_find+0x24>
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	e0a9      	b.n	800d558 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d404:	23ff      	movs	r3, #255	; 0xff
 800d406:	753b      	strb	r3, [r7, #20]
 800d408:	7d3b      	ldrb	r3, [r7, #20]
 800d40a:	757b      	strb	r3, [r7, #21]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d412:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	69db      	ldr	r3, [r3, #28]
 800d418:	4619      	mov	r1, r3
 800d41a:	6938      	ldr	r0, [r7, #16]
 800d41c:	f7fe ff84 	bl	800c328 <move_window>
 800d420:	4603      	mov	r3, r0
 800d422:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d424:	7dfb      	ldrb	r3, [r7, #23]
 800d426:	2b00      	cmp	r3, #0
 800d428:	f040 8090 	bne.w	800d54c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a1b      	ldr	r3, [r3, #32]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d434:	7dbb      	ldrb	r3, [r7, #22]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d102      	bne.n	800d440 <dir_find+0x60>
 800d43a:	2304      	movs	r3, #4
 800d43c:	75fb      	strb	r3, [r7, #23]
 800d43e:	e08a      	b.n	800d556 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6a1b      	ldr	r3, [r3, #32]
 800d444:	330b      	adds	r3, #11
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d44c:	73fb      	strb	r3, [r7, #15]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	7bfa      	ldrb	r2, [r7, #15]
 800d452:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d454:	7dbb      	ldrb	r3, [r7, #22]
 800d456:	2be5      	cmp	r3, #229	; 0xe5
 800d458:	d007      	beq.n	800d46a <dir_find+0x8a>
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	f003 0308 	and.w	r3, r3, #8
 800d460:	2b00      	cmp	r3, #0
 800d462:	d009      	beq.n	800d478 <dir_find+0x98>
 800d464:	7bfb      	ldrb	r3, [r7, #15]
 800d466:	2b0f      	cmp	r3, #15
 800d468:	d006      	beq.n	800d478 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d46a:	23ff      	movs	r3, #255	; 0xff
 800d46c:	757b      	strb	r3, [r7, #21]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d474:	631a      	str	r2, [r3, #48]	; 0x30
 800d476:	e05e      	b.n	800d536 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	2b0f      	cmp	r3, #15
 800d47c:	d136      	bne.n	800d4ec <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d154      	bne.n	800d536 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d48c:	7dbb      	ldrb	r3, [r7, #22]
 800d48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00d      	beq.n	800d4b2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6a1b      	ldr	r3, [r3, #32]
 800d49a:	7b5b      	ldrb	r3, [r3, #13]
 800d49c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d49e:	7dbb      	ldrb	r3, [r7, #22]
 800d4a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4a4:	75bb      	strb	r3, [r7, #22]
 800d4a6:	7dbb      	ldrb	r3, [r7, #22]
 800d4a8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	695a      	ldr	r2, [r3, #20]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d4b2:	7dba      	ldrb	r2, [r7, #22]
 800d4b4:	7d7b      	ldrb	r3, [r7, #21]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d115      	bne.n	800d4e6 <dir_find+0x106>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	330d      	adds	r3, #13
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	7d3a      	ldrb	r2, [r7, #20]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d10e      	bne.n	800d4e6 <dir_find+0x106>
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	691a      	ldr	r2, [r3, #16]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6a1b      	ldr	r3, [r3, #32]
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4610      	mov	r0, r2
 800d4d4:	f7ff fcf0 	bl	800ceb8 <cmp_lfn>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d003      	beq.n	800d4e6 <dir_find+0x106>
 800d4de:	7d7b      	ldrb	r3, [r7, #21]
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	e000      	b.n	800d4e8 <dir_find+0x108>
 800d4e6:	23ff      	movs	r3, #255	; 0xff
 800d4e8:	757b      	strb	r3, [r7, #21]
 800d4ea:	e024      	b.n	800d536 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d4ec:	7d7b      	ldrb	r3, [r7, #21]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d109      	bne.n	800d506 <dir_find+0x126>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7ff feaa 	bl	800d250 <sum_sfn>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	461a      	mov	r2, r3
 800d500:	7d3b      	ldrb	r3, [r7, #20]
 800d502:	4293      	cmp	r3, r2
 800d504:	d024      	beq.n	800d550 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10a      	bne.n	800d52a <dir_find+0x14a>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a18      	ldr	r0, [r3, #32]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3324      	adds	r3, #36	; 0x24
 800d51c:	220b      	movs	r2, #11
 800d51e:	4619      	mov	r1, r3
 800d520:	f7fe fd10 	bl	800bf44 <mem_cmp>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d014      	beq.n	800d554 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d52a:	23ff      	movs	r3, #255	; 0xff
 800d52c:	757b      	strb	r3, [r7, #21]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d534:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d536:	2100      	movs	r1, #0
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7ff fb60 	bl	800cbfe <dir_next>
 800d53e:	4603      	mov	r3, r0
 800d540:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d542:	7dfb      	ldrb	r3, [r7, #23]
 800d544:	2b00      	cmp	r3, #0
 800d546:	f43f af65 	beq.w	800d414 <dir_find+0x34>
 800d54a:	e004      	b.n	800d556 <dir_find+0x176>
		if (res != FR_OK) break;
 800d54c:	bf00      	nop
 800d54e:	e002      	b.n	800d556 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d550:	bf00      	nop
 800d552:	e000      	b.n	800d556 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d554:	bf00      	nop

	return res;
 800d556:	7dfb      	ldrb	r3, [r7, #23]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b08c      	sub	sp, #48	; 0x30
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d574:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d001      	beq.n	800d580 <dir_register+0x20>
 800d57c:	2306      	movs	r3, #6
 800d57e:	e0e0      	b.n	800d742 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d580:	2300      	movs	r3, #0
 800d582:	627b      	str	r3, [r7, #36]	; 0x24
 800d584:	e002      	b.n	800d58c <dir_register+0x2c>
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	3301      	adds	r3, #1
 800d58a:	627b      	str	r3, [r7, #36]	; 0x24
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	691a      	ldr	r2, [r3, #16]
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	005b      	lsls	r3, r3, #1
 800d594:	4413      	add	r3, r2
 800d596:	881b      	ldrh	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1f4      	bne.n	800d586 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d5a2:	f107 030c 	add.w	r3, r7, #12
 800d5a6:	220c      	movs	r2, #12
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fe fc8f 	bl	800becc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d5ae:	7dfb      	ldrb	r3, [r7, #23]
 800d5b0:	f003 0301 	and.w	r3, r3, #1
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d032      	beq.n	800d61e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2240      	movs	r2, #64	; 0x40
 800d5bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5c4:	e016      	b.n	800d5f4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	691a      	ldr	r2, [r3, #16]
 800d5d0:	f107 010c 	add.w	r1, r7, #12
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	f7ff fdab 	bl	800d130 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7ff ff00 	bl	800d3e0 <dir_find>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f6:	2b63      	cmp	r3, #99	; 0x63
 800d5f8:	d9e5      	bls.n	800d5c6 <dir_register+0x66>
 800d5fa:	e000      	b.n	800d5fe <dir_register+0x9e>
			if (res != FR_OK) break;
 800d5fc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	2b64      	cmp	r3, #100	; 0x64
 800d602:	d101      	bne.n	800d608 <dir_register+0xa8>
 800d604:	2307      	movs	r3, #7
 800d606:	e09c      	b.n	800d742 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d60c:	2b04      	cmp	r3, #4
 800d60e:	d002      	beq.n	800d616 <dir_register+0xb6>
 800d610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d614:	e095      	b.n	800d742 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d616:	7dfa      	ldrb	r2, [r7, #23]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d61e:	7dfb      	ldrb	r3, [r7, #23]
 800d620:	f003 0302 	and.w	r3, r3, #2
 800d624:	2b00      	cmp	r3, #0
 800d626:	d007      	beq.n	800d638 <dir_register+0xd8>
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	330c      	adds	r3, #12
 800d62c:	4a47      	ldr	r2, [pc, #284]	; (800d74c <dir_register+0x1ec>)
 800d62e:	fba2 2303 	umull	r2, r3, r2, r3
 800d632:	089b      	lsrs	r3, r3, #2
 800d634:	3301      	adds	r3, #1
 800d636:	e000      	b.n	800d63a <dir_register+0xda>
 800d638:	2301      	movs	r3, #1
 800d63a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d63c:	6a39      	ldr	r1, [r7, #32]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7ff fbb3 	bl	800cdaa <dir_alloc>
 800d644:	4603      	mov	r3, r0
 800d646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d64a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d148      	bne.n	800d6e4 <dir_register+0x184>
 800d652:	6a3b      	ldr	r3, [r7, #32]
 800d654:	3b01      	subs	r3, #1
 800d656:	623b      	str	r3, [r7, #32]
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d042      	beq.n	800d6e4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	695a      	ldr	r2, [r3, #20]
 800d662:	6a3b      	ldr	r3, [r7, #32]
 800d664:	015b      	lsls	r3, r3, #5
 800d666:	1ad3      	subs	r3, r2, r3
 800d668:	4619      	mov	r1, r3
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7ff fa3e 	bl	800caec <dir_sdi>
 800d670:	4603      	mov	r3, r0
 800d672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d132      	bne.n	800d6e4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	3324      	adds	r3, #36	; 0x24
 800d682:	4618      	mov	r0, r3
 800d684:	f7ff fde4 	bl	800d250 <sum_sfn>
 800d688:	4603      	mov	r3, r0
 800d68a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	69db      	ldr	r3, [r3, #28]
 800d690:	4619      	mov	r1, r3
 800d692:	69f8      	ldr	r0, [r7, #28]
 800d694:	f7fe fe48 	bl	800c328 <move_window>
 800d698:	4603      	mov	r3, r0
 800d69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d69e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d11d      	bne.n	800d6e2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	6918      	ldr	r0, [r3, #16]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a19      	ldr	r1, [r3, #32]
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	7efb      	ldrb	r3, [r7, #27]
 800d6b4:	f7ff fcd4 	bl	800d060 <put_lfn>
				fs->wflag = 1;
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d6be:	2100      	movs	r1, #0
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f7ff fa9c 	bl	800cbfe <dir_next>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d6cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d107      	bne.n	800d6e4 <dir_register+0x184>
 800d6d4:	6a3b      	ldr	r3, [r7, #32]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	623b      	str	r3, [r7, #32]
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d1d5      	bne.n	800d68c <dir_register+0x12c>
 800d6e0:	e000      	b.n	800d6e4 <dir_register+0x184>
				if (res != FR_OK) break;
 800d6e2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d128      	bne.n	800d73e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	69db      	ldr	r3, [r3, #28]
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	69f8      	ldr	r0, [r7, #28]
 800d6f4:	f7fe fe18 	bl	800c328 <move_window>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d6fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d702:	2b00      	cmp	r3, #0
 800d704:	d11b      	bne.n	800d73e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a1b      	ldr	r3, [r3, #32]
 800d70a:	2220      	movs	r2, #32
 800d70c:	2100      	movs	r1, #0
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fbfd 	bl	800bf0e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6a18      	ldr	r0, [r3, #32]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	3324      	adds	r3, #36	; 0x24
 800d71c:	220b      	movs	r2, #11
 800d71e:	4619      	mov	r1, r3
 800d720:	f7fe fbd4 	bl	800becc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	330c      	adds	r3, #12
 800d730:	f002 0218 	and.w	r2, r2, #24
 800d734:	b2d2      	uxtb	r2, r2
 800d736:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	2201      	movs	r2, #1
 800d73c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d73e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d742:	4618      	mov	r0, r3
 800d744:	3730      	adds	r7, #48	; 0x30
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	4ec4ec4f 	.word	0x4ec4ec4f

0800d750 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b088      	sub	sp, #32
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	2200      	movs	r2, #0
 800d764:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	69db      	ldr	r3, [r3, #28]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 80c9 	beq.w	800d902 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d778:	d032      	beq.n	800d7e0 <get_fileinfo+0x90>
			i = j = 0;
 800d77a:	2300      	movs	r3, #0
 800d77c:	61bb      	str	r3, [r7, #24]
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d782:	e01b      	b.n	800d7bc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d784:	89fb      	ldrh	r3, [r7, #14]
 800d786:	2100      	movs	r1, #0
 800d788:	4618      	mov	r0, r3
 800d78a:	f001 fd19 	bl	800f1c0 <ff_convert>
 800d78e:	4603      	mov	r3, r0
 800d790:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d792:	89fb      	ldrh	r3, [r7, #14]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d102      	bne.n	800d79e <get_fileinfo+0x4e>
 800d798:	2300      	movs	r3, #0
 800d79a:	61fb      	str	r3, [r7, #28]
 800d79c:	e01a      	b.n	800d7d4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	2b31      	cmp	r3, #49	; 0x31
 800d7a2:	d902      	bls.n	800d7aa <get_fileinfo+0x5a>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	61fb      	str	r3, [r7, #28]
 800d7a8:	e014      	b.n	800d7d4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	1c5a      	adds	r2, r3, #1
 800d7ae:	61fa      	str	r2, [r7, #28]
 800d7b0:	89fa      	ldrh	r2, [r7, #14]
 800d7b2:	b2d1      	uxtb	r1, r2
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	460a      	mov	r2, r1
 800d7ba:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	691a      	ldr	r2, [r3, #16]
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	1c59      	adds	r1, r3, #1
 800d7c4:	61b9      	str	r1, [r7, #24]
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	4413      	add	r3, r2
 800d7ca:	881b      	ldrh	r3, [r3, #0]
 800d7cc:	81fb      	strh	r3, [r7, #14]
 800d7ce:	89fb      	ldrh	r3, [r7, #14]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1d7      	bne.n	800d784 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d7d4:	683a      	ldr	r2, [r7, #0]
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	4413      	add	r3, r2
 800d7da:	3316      	adds	r3, #22
 800d7dc:	2200      	movs	r2, #0
 800d7de:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	61bb      	str	r3, [r7, #24]
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d7e8:	683a      	ldr	r2, [r7, #0]
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	3316      	adds	r3, #22
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d7f4:	e04c      	b.n	800d890 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a1a      	ldr	r2, [r3, #32]
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	1c59      	adds	r1, r3, #1
 800d7fe:	61f9      	str	r1, [r7, #28]
 800d800:	4413      	add	r3, r2
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d806:	7dfb      	ldrb	r3, [r7, #23]
 800d808:	2b20      	cmp	r3, #32
 800d80a:	d100      	bne.n	800d80e <get_fileinfo+0xbe>
 800d80c:	e040      	b.n	800d890 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d80e:	7dfb      	ldrb	r3, [r7, #23]
 800d810:	2b05      	cmp	r3, #5
 800d812:	d101      	bne.n	800d818 <get_fileinfo+0xc8>
 800d814:	23e5      	movs	r3, #229	; 0xe5
 800d816:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	2b09      	cmp	r3, #9
 800d81c:	d10f      	bne.n	800d83e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d81e:	89bb      	ldrh	r3, [r7, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d105      	bne.n	800d830 <get_fileinfo+0xe0>
 800d824:	683a      	ldr	r2, [r7, #0]
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	4413      	add	r3, r2
 800d82a:	3316      	adds	r3, #22
 800d82c:	222e      	movs	r2, #46	; 0x2e
 800d82e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	61ba      	str	r2, [r7, #24]
 800d836:	683a      	ldr	r2, [r7, #0]
 800d838:	4413      	add	r3, r2
 800d83a:	222e      	movs	r2, #46	; 0x2e
 800d83c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d83e:	683a      	ldr	r2, [r7, #0]
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	4413      	add	r3, r2
 800d844:	3309      	adds	r3, #9
 800d846:	7dfa      	ldrb	r2, [r7, #23]
 800d848:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d84a:	89bb      	ldrh	r3, [r7, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d11c      	bne.n	800d88a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d850:	7dfb      	ldrb	r3, [r7, #23]
 800d852:	2b40      	cmp	r3, #64	; 0x40
 800d854:	d913      	bls.n	800d87e <get_fileinfo+0x12e>
 800d856:	7dfb      	ldrb	r3, [r7, #23]
 800d858:	2b5a      	cmp	r3, #90	; 0x5a
 800d85a:	d810      	bhi.n	800d87e <get_fileinfo+0x12e>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6a1b      	ldr	r3, [r3, #32]
 800d860:	330c      	adds	r3, #12
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	461a      	mov	r2, r3
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	2b08      	cmp	r3, #8
 800d86a:	d901      	bls.n	800d870 <get_fileinfo+0x120>
 800d86c:	2310      	movs	r3, #16
 800d86e:	e000      	b.n	800d872 <get_fileinfo+0x122>
 800d870:	2308      	movs	r3, #8
 800d872:	4013      	ands	r3, r2
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d878:	7dfb      	ldrb	r3, [r7, #23]
 800d87a:	3320      	adds	r3, #32
 800d87c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	4413      	add	r3, r2
 800d884:	3316      	adds	r3, #22
 800d886:	7dfa      	ldrb	r2, [r7, #23]
 800d888:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	3301      	adds	r3, #1
 800d88e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	2b0a      	cmp	r3, #10
 800d894:	d9af      	bls.n	800d7f6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d896:	89bb      	ldrh	r3, [r7, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10d      	bne.n	800d8b8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d89c:	683a      	ldr	r2, [r7, #0]
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	3316      	adds	r3, #22
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6a1b      	ldr	r3, [r3, #32]
 800d8ac:	330c      	adds	r3, #12
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <get_fileinfo+0x168>
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d8b8:	683a      	ldr	r2, [r7, #0]
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	4413      	add	r3, r2
 800d8be:	3309      	adds	r3, #9
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a1b      	ldr	r3, [r3, #32]
 800d8c8:	7ada      	ldrb	r2, [r3, #11]
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	331c      	adds	r3, #28
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fe fa8f 	bl	800bdf8 <ld_dword>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6a1b      	ldr	r3, [r3, #32]
 800d8e4:	3316      	adds	r3, #22
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fe fa86 	bl	800bdf8 <ld_dword>
 800d8ec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	b29a      	uxth	r2, r3
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	80da      	strh	r2, [r3, #6]
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	0c1b      	lsrs	r3, r3, #16
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	809a      	strh	r2, [r3, #4]
 800d900:	e000      	b.n	800d904 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d902:	bf00      	nop
}
 800d904:	3720      	adds	r7, #32
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
	...

0800d90c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08a      	sub	sp, #40	; 0x28
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	613b      	str	r3, [r7, #16]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	691b      	ldr	r3, [r3, #16]
 800d922:	60fb      	str	r3, [r7, #12]
 800d924:	2300      	movs	r3, #0
 800d926:	617b      	str	r3, [r7, #20]
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	1c5a      	adds	r2, r3, #1
 800d930:	61ba      	str	r2, [r7, #24]
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	4413      	add	r3, r2
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d93a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d93c:	2b1f      	cmp	r3, #31
 800d93e:	d940      	bls.n	800d9c2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d942:	2b2f      	cmp	r3, #47	; 0x2f
 800d944:	d006      	beq.n	800d954 <create_name+0x48>
 800d946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d948:	2b5c      	cmp	r3, #92	; 0x5c
 800d94a:	d110      	bne.n	800d96e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d94c:	e002      	b.n	800d954 <create_name+0x48>
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	3301      	adds	r3, #1
 800d952:	61bb      	str	r3, [r7, #24]
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	4413      	add	r3, r2
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b2f      	cmp	r3, #47	; 0x2f
 800d95e:	d0f6      	beq.n	800d94e <create_name+0x42>
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	4413      	add	r3, r2
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b5c      	cmp	r3, #92	; 0x5c
 800d96a:	d0f0      	beq.n	800d94e <create_name+0x42>
			break;
 800d96c:	e02a      	b.n	800d9c4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	2b31      	cmp	r3, #49	; 0x31
 800d972:	d901      	bls.n	800d978 <create_name+0x6c>
 800d974:	2306      	movs	r3, #6
 800d976:	e177      	b.n	800dc68 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d97e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d980:	2101      	movs	r1, #1
 800d982:	4618      	mov	r0, r3
 800d984:	f001 fc1c 	bl	800f1c0 <ff_convert>
 800d988:	4603      	mov	r3, r0
 800d98a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d98c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d101      	bne.n	800d996 <create_name+0x8a>
 800d992:	2306      	movs	r3, #6
 800d994:	e168      	b.n	800dc68 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d998:	2b7f      	cmp	r3, #127	; 0x7f
 800d99a:	d809      	bhi.n	800d9b0 <create_name+0xa4>
 800d99c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d99e:	4619      	mov	r1, r3
 800d9a0:	48b3      	ldr	r0, [pc, #716]	; (800dc70 <create_name+0x364>)
 800d9a2:	f7fe faf6 	bl	800bf92 <chk_chr>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <create_name+0xa4>
 800d9ac:	2306      	movs	r3, #6
 800d9ae:	e15b      	b.n	800dc68 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	1c5a      	adds	r2, r3, #1
 800d9b4:	617a      	str	r2, [r7, #20]
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d9be:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d9c0:	e7b4      	b.n	800d92c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d9c2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d9c4:	693a      	ldr	r2, [r7, #16]
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	441a      	add	r2, r3
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d0:	2b1f      	cmp	r3, #31
 800d9d2:	d801      	bhi.n	800d9d8 <create_name+0xcc>
 800d9d4:	2304      	movs	r3, #4
 800d9d6:	e000      	b.n	800d9da <create_name+0xce>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d9de:	e011      	b.n	800da04 <create_name+0xf8>
		w = lfn[di - 1];
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	005b      	lsls	r3, r3, #1
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f4:	2b20      	cmp	r3, #32
 800d9f6:	d002      	beq.n	800d9fe <create_name+0xf2>
 800d9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d9fc:	d106      	bne.n	800da0c <create_name+0x100>
		di--;
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	3b01      	subs	r3, #1
 800da02:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d1ea      	bne.n	800d9e0 <create_name+0xd4>
 800da0a:	e000      	b.n	800da0e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800da0c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	4413      	add	r3, r2
 800da16:	2200      	movs	r2, #0
 800da18:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d101      	bne.n	800da24 <create_name+0x118>
 800da20:	2306      	movs	r3, #6
 800da22:	e121      	b.n	800dc68 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	3324      	adds	r3, #36	; 0x24
 800da28:	220b      	movs	r2, #11
 800da2a:	2120      	movs	r1, #32
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7fe fa6e 	bl	800bf0e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800da32:	2300      	movs	r3, #0
 800da34:	61bb      	str	r3, [r7, #24]
 800da36:	e002      	b.n	800da3e <create_name+0x132>
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	3301      	adds	r3, #1
 800da3c:	61bb      	str	r3, [r7, #24]
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	005b      	lsls	r3, r3, #1
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	4413      	add	r3, r2
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	2b20      	cmp	r3, #32
 800da4a:	d0f5      	beq.n	800da38 <create_name+0x12c>
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	005b      	lsls	r3, r3, #1
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	4413      	add	r3, r2
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	2b2e      	cmp	r3, #46	; 0x2e
 800da58:	d0ee      	beq.n	800da38 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d009      	beq.n	800da74 <create_name+0x168>
 800da60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da64:	f043 0303 	orr.w	r3, r3, #3
 800da68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800da6c:	e002      	b.n	800da74 <create_name+0x168>
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	3b01      	subs	r3, #1
 800da72:	617b      	str	r3, [r7, #20]
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d009      	beq.n	800da8e <create_name+0x182>
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da80:	3b01      	subs	r3, #1
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	4413      	add	r3, r2
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	2b2e      	cmp	r3, #46	; 0x2e
 800da8c:	d1ef      	bne.n	800da6e <create_name+0x162>

	i = b = 0; ni = 8;
 800da8e:	2300      	movs	r3, #0
 800da90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da94:	2300      	movs	r3, #0
 800da96:	623b      	str	r3, [r7, #32]
 800da98:	2308      	movs	r3, #8
 800da9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	1c5a      	adds	r2, r3, #1
 800daa0:	61ba      	str	r2, [r7, #24]
 800daa2:	005b      	lsls	r3, r3, #1
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	4413      	add	r3, r2
 800daa8:	881b      	ldrh	r3, [r3, #0]
 800daaa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800daac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f000 8090 	beq.w	800dbd4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab6:	2b20      	cmp	r3, #32
 800dab8:	d006      	beq.n	800dac8 <create_name+0x1bc>
 800daba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dabc:	2b2e      	cmp	r3, #46	; 0x2e
 800dabe:	d10a      	bne.n	800dad6 <create_name+0x1ca>
 800dac0:	69ba      	ldr	r2, [r7, #24]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d006      	beq.n	800dad6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dacc:	f043 0303 	orr.w	r3, r3, #3
 800dad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dad4:	e07d      	b.n	800dbd2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dad6:	6a3a      	ldr	r2, [r7, #32]
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d203      	bcs.n	800dae6 <create_name+0x1da>
 800dade:	69ba      	ldr	r2, [r7, #24]
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d123      	bne.n	800db2e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	2b0b      	cmp	r3, #11
 800daea:	d106      	bne.n	800dafa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800daec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daf0:	f043 0303 	orr.w	r3, r3, #3
 800daf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800daf8:	e06f      	b.n	800dbda <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dafa:	69ba      	ldr	r2, [r7, #24]
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d005      	beq.n	800db0e <create_name+0x202>
 800db02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db06:	f043 0303 	orr.w	r3, r3, #3
 800db0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800db0e:	69ba      	ldr	r2, [r7, #24]
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	429a      	cmp	r2, r3
 800db14:	d860      	bhi.n	800dbd8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	61bb      	str	r3, [r7, #24]
 800db1a:	2308      	movs	r3, #8
 800db1c:	623b      	str	r3, [r7, #32]
 800db1e:	230b      	movs	r3, #11
 800db20:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800db22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db2c:	e051      	b.n	800dbd2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800db2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db30:	2b7f      	cmp	r3, #127	; 0x7f
 800db32:	d914      	bls.n	800db5e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800db34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db36:	2100      	movs	r1, #0
 800db38:	4618      	mov	r0, r3
 800db3a:	f001 fb41 	bl	800f1c0 <ff_convert>
 800db3e:	4603      	mov	r3, r0
 800db40:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800db42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db44:	2b00      	cmp	r3, #0
 800db46:	d004      	beq.n	800db52 <create_name+0x246>
 800db48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db4a:	3b80      	subs	r3, #128	; 0x80
 800db4c:	4a49      	ldr	r2, [pc, #292]	; (800dc74 <create_name+0x368>)
 800db4e:	5cd3      	ldrb	r3, [r2, r3]
 800db50:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800db52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db56:	f043 0302 	orr.w	r3, r3, #2
 800db5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800db5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db60:	2b00      	cmp	r3, #0
 800db62:	d007      	beq.n	800db74 <create_name+0x268>
 800db64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db66:	4619      	mov	r1, r3
 800db68:	4843      	ldr	r0, [pc, #268]	; (800dc78 <create_name+0x36c>)
 800db6a:	f7fe fa12 	bl	800bf92 <chk_chr>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d008      	beq.n	800db86 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800db74:	235f      	movs	r3, #95	; 0x5f
 800db76:	84bb      	strh	r3, [r7, #36]	; 0x24
 800db78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db7c:	f043 0303 	orr.w	r3, r3, #3
 800db80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db84:	e01b      	b.n	800dbbe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800db86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db88:	2b40      	cmp	r3, #64	; 0x40
 800db8a:	d909      	bls.n	800dba0 <create_name+0x294>
 800db8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db8e:	2b5a      	cmp	r3, #90	; 0x5a
 800db90:	d806      	bhi.n	800dba0 <create_name+0x294>
					b |= 2;
 800db92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db96:	f043 0302 	orr.w	r3, r3, #2
 800db9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db9e:	e00e      	b.n	800dbbe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dba2:	2b60      	cmp	r3, #96	; 0x60
 800dba4:	d90b      	bls.n	800dbbe <create_name+0x2b2>
 800dba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dba8:	2b7a      	cmp	r3, #122	; 0x7a
 800dbaa:	d808      	bhi.n	800dbbe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dbac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbb0:	f043 0301 	orr.w	r3, r3, #1
 800dbb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dbb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbba:	3b20      	subs	r3, #32
 800dbbc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dbbe:	6a3b      	ldr	r3, [r7, #32]
 800dbc0:	1c5a      	adds	r2, r3, #1
 800dbc2:	623a      	str	r2, [r7, #32]
 800dbc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dbc6:	b2d1      	uxtb	r1, r2
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	4413      	add	r3, r2
 800dbcc:	460a      	mov	r2, r1
 800dbce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dbd2:	e763      	b.n	800da9c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dbd4:	bf00      	nop
 800dbd6:	e000      	b.n	800dbda <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800dbd8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbe0:	2be5      	cmp	r3, #229	; 0xe5
 800dbe2:	d103      	bne.n	800dbec <create_name+0x2e0>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2205      	movs	r2, #5
 800dbe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	2b08      	cmp	r3, #8
 800dbf0:	d104      	bne.n	800dbfc <create_name+0x2f0>
 800dbf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dbfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc00:	f003 030c 	and.w	r3, r3, #12
 800dc04:	2b0c      	cmp	r3, #12
 800dc06:	d005      	beq.n	800dc14 <create_name+0x308>
 800dc08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc0c:	f003 0303 	and.w	r3, r3, #3
 800dc10:	2b03      	cmp	r3, #3
 800dc12:	d105      	bne.n	800dc20 <create_name+0x314>
 800dc14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc18:	f043 0302 	orr.w	r3, r3, #2
 800dc1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dc20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc24:	f003 0302 	and.w	r3, r3, #2
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d117      	bne.n	800dc5c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dc2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc30:	f003 0303 	and.w	r3, r3, #3
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d105      	bne.n	800dc44 <create_name+0x338>
 800dc38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc3c:	f043 0310 	orr.w	r3, r3, #16
 800dc40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dc44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc48:	f003 030c 	and.w	r3, r3, #12
 800dc4c:	2b04      	cmp	r3, #4
 800dc4e:	d105      	bne.n	800dc5c <create_name+0x350>
 800dc50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc54:	f043 0308 	orr.w	r3, r3, #8
 800dc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dc66:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3728      	adds	r7, #40	; 0x28
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	08014a54 	.word	0x08014a54
 800dc74:	08014b40 	.word	0x08014b40
 800dc78:	08014a60 	.word	0x08014a60

0800dc7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b086      	sub	sp, #24
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dc90:	e002      	b.n	800dc98 <follow_path+0x1c>
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	3301      	adds	r3, #1
 800dc96:	603b      	str	r3, [r7, #0]
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	2b2f      	cmp	r3, #47	; 0x2f
 800dc9e:	d0f8      	beq.n	800dc92 <follow_path+0x16>
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	2b5c      	cmp	r3, #92	; 0x5c
 800dca6:	d0f4      	beq.n	800dc92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	2b1f      	cmp	r3, #31
 800dcb4:	d80a      	bhi.n	800dccc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2280      	movs	r2, #128	; 0x80
 800dcba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7fe ff13 	bl	800caec <dir_sdi>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	75fb      	strb	r3, [r7, #23]
 800dcca:	e048      	b.n	800dd5e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dccc:	463b      	mov	r3, r7
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff fe1b 	bl	800d90c <create_name>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dcda:	7dfb      	ldrb	r3, [r7, #23]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d139      	bne.n	800dd54 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f7ff fb7d 	bl	800d3e0 <dir_find>
 800dce6:	4603      	mov	r3, r0
 800dce8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dcf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dcf2:	7dfb      	ldrb	r3, [r7, #23]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00a      	beq.n	800dd0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dcf8:	7dfb      	ldrb	r3, [r7, #23]
 800dcfa:	2b04      	cmp	r3, #4
 800dcfc:	d12c      	bne.n	800dd58 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dcfe:	7afb      	ldrb	r3, [r7, #11]
 800dd00:	f003 0304 	and.w	r3, r3, #4
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d127      	bne.n	800dd58 <follow_path+0xdc>
 800dd08:	2305      	movs	r3, #5
 800dd0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dd0c:	e024      	b.n	800dd58 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd0e:	7afb      	ldrb	r3, [r7, #11]
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d121      	bne.n	800dd5c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	799b      	ldrb	r3, [r3, #6]
 800dd1c:	f003 0310 	and.w	r3, r3, #16
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d102      	bne.n	800dd2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dd24:	2305      	movs	r3, #5
 800dd26:	75fb      	strb	r3, [r7, #23]
 800dd28:	e019      	b.n	800dd5e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	695b      	ldr	r3, [r3, #20]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	8992      	ldrh	r2, [r2, #12]
 800dd38:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd3c:	fb02 f200 	mul.w	r2, r2, r0
 800dd40:	1a9b      	subs	r3, r3, r2
 800dd42:	440b      	add	r3, r1
 800dd44:	4619      	mov	r1, r3
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f7ff f876 	bl	800ce38 <ld_clust>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd52:	e7bb      	b.n	800dccc <follow_path+0x50>
			if (res != FR_OK) break;
 800dd54:	bf00      	nop
 800dd56:	e002      	b.n	800dd5e <follow_path+0xe2>
				break;
 800dd58:	bf00      	nop
 800dd5a:	e000      	b.n	800dd5e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd5c:	bf00      	nop
			}
		}
	}

	return res;
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3718      	adds	r7, #24
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b087      	sub	sp, #28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dd70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd74:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d031      	beq.n	800dde2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	617b      	str	r3, [r7, #20]
 800dd84:	e002      	b.n	800dd8c <get_ldnumber+0x24>
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	617b      	str	r3, [r7, #20]
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	2b1f      	cmp	r3, #31
 800dd92:	d903      	bls.n	800dd9c <get_ldnumber+0x34>
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	2b3a      	cmp	r3, #58	; 0x3a
 800dd9a:	d1f4      	bne.n	800dd86 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	2b3a      	cmp	r3, #58	; 0x3a
 800dda2:	d11c      	bne.n	800ddde <get_ldnumber+0x76>
			tp = *path;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	1c5a      	adds	r2, r3, #1
 800ddae:	60fa      	str	r2, [r7, #12]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	3b30      	subs	r3, #48	; 0x30
 800ddb4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2b09      	cmp	r3, #9
 800ddba:	d80e      	bhi.n	800ddda <get_ldnumber+0x72>
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d10a      	bne.n	800ddda <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d107      	bne.n	800ddda <get_ldnumber+0x72>
					vol = (int)i;
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	617b      	str	r3, [r7, #20]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	e002      	b.n	800dde4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ddde:	2300      	movs	r3, #0
 800dde0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dde2:	693b      	ldr	r3, [r7, #16]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	371c      	adds	r7, #28
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	70da      	strb	r2, [r3, #3]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de06:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800de08:	6839      	ldr	r1, [r7, #0]
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7fe fa8c 	bl	800c328 <move_window>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d001      	beq.n	800de1a <check_fs+0x2a>
 800de16:	2304      	movs	r3, #4
 800de18:	e038      	b.n	800de8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	3338      	adds	r3, #56	; 0x38
 800de1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de22:	4618      	mov	r0, r3
 800de24:	f7fd ffd0 	bl	800bdc8 <ld_word>
 800de28:	4603      	mov	r3, r0
 800de2a:	461a      	mov	r2, r3
 800de2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de30:	429a      	cmp	r2, r3
 800de32:	d001      	beq.n	800de38 <check_fs+0x48>
 800de34:	2303      	movs	r3, #3
 800de36:	e029      	b.n	800de8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de3e:	2be9      	cmp	r3, #233	; 0xe9
 800de40:	d009      	beq.n	800de56 <check_fs+0x66>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de48:	2beb      	cmp	r3, #235	; 0xeb
 800de4a:	d11e      	bne.n	800de8a <check_fs+0x9a>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800de52:	2b90      	cmp	r3, #144	; 0x90
 800de54:	d119      	bne.n	800de8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	3338      	adds	r3, #56	; 0x38
 800de5a:	3336      	adds	r3, #54	; 0x36
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fd ffcb 	bl	800bdf8 <ld_dword>
 800de62:	4603      	mov	r3, r0
 800de64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800de68:	4a0a      	ldr	r2, [pc, #40]	; (800de94 <check_fs+0xa4>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d101      	bne.n	800de72 <check_fs+0x82>
 800de6e:	2300      	movs	r3, #0
 800de70:	e00c      	b.n	800de8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	3338      	adds	r3, #56	; 0x38
 800de76:	3352      	adds	r3, #82	; 0x52
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fd ffbd 	bl	800bdf8 <ld_dword>
 800de7e:	4603      	mov	r3, r0
 800de80:	4a05      	ldr	r2, [pc, #20]	; (800de98 <check_fs+0xa8>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d101      	bne.n	800de8a <check_fs+0x9a>
 800de86:	2300      	movs	r3, #0
 800de88:	e000      	b.n	800de8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800de8a:	2302      	movs	r3, #2
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	00544146 	.word	0x00544146
 800de98:	33544146 	.word	0x33544146

0800de9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b096      	sub	sp, #88	; 0x58
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	4613      	mov	r3, r2
 800dea8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	2200      	movs	r2, #0
 800deae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f7ff ff59 	bl	800dd68 <get_ldnumber>
 800deb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800deb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deba:	2b00      	cmp	r3, #0
 800debc:	da01      	bge.n	800dec2 <find_volume+0x26>
 800debe:	230b      	movs	r3, #11
 800dec0:	e268      	b.n	800e394 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dec2:	4ab0      	ldr	r2, [pc, #704]	; (800e184 <find_volume+0x2e8>)
 800dec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800decc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d101      	bne.n	800ded6 <find_volume+0x3a>
 800ded2:	230c      	movs	r3, #12
 800ded4:	e25e      	b.n	800e394 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800deda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	f023 0301 	bic.w	r3, r3, #1
 800dee2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d01a      	beq.n	800df22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800deec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deee:	785b      	ldrb	r3, [r3, #1]
 800def0:	4618      	mov	r0, r3
 800def2:	f7fd fecb 	bl	800bc8c <disk_status>
 800def6:	4603      	mov	r3, r0
 800def8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800defc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df00:	f003 0301 	and.w	r3, r3, #1
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10c      	bne.n	800df22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800df08:	79fb      	ldrb	r3, [r7, #7]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d007      	beq.n	800df1e <find_volume+0x82>
 800df0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df12:	f003 0304 	and.w	r3, r3, #4
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800df1a:	230a      	movs	r3, #10
 800df1c:	e23a      	b.n	800e394 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800df1e:	2300      	movs	r3, #0
 800df20:	e238      	b.n	800e394 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	2200      	movs	r2, #0
 800df26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800df28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df32:	785b      	ldrb	r3, [r3, #1]
 800df34:	4618      	mov	r0, r3
 800df36:	f7fd fec3 	bl	800bcc0 <disk_initialize>
 800df3a:	4603      	mov	r3, r0
 800df3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800df40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df44:	f003 0301 	and.w	r3, r3, #1
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d001      	beq.n	800df50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800df4c:	2303      	movs	r3, #3
 800df4e:	e221      	b.n	800e394 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800df50:	79fb      	ldrb	r3, [r7, #7]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d007      	beq.n	800df66 <find_volume+0xca>
 800df56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df5a:	f003 0304 	and.w	r3, r3, #4
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d001      	beq.n	800df66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800df62:	230a      	movs	r3, #10
 800df64:	e216      	b.n	800e394 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800df66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df68:	7858      	ldrb	r0, [r3, #1]
 800df6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6c:	330c      	adds	r3, #12
 800df6e:	461a      	mov	r2, r3
 800df70:	2102      	movs	r1, #2
 800df72:	f7fd ff0b 	bl	800bd8c <disk_ioctl>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <find_volume+0xe4>
 800df7c:	2301      	movs	r3, #1
 800df7e:	e209      	b.n	800e394 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800df80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df82:	899b      	ldrh	r3, [r3, #12]
 800df84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df88:	d80d      	bhi.n	800dfa6 <find_volume+0x10a>
 800df8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8c:	899b      	ldrh	r3, [r3, #12]
 800df8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df92:	d308      	bcc.n	800dfa6 <find_volume+0x10a>
 800df94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df96:	899b      	ldrh	r3, [r3, #12]
 800df98:	461a      	mov	r2, r3
 800df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9c:	899b      	ldrh	r3, [r3, #12]
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d001      	beq.n	800dfaa <find_volume+0x10e>
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e1f4      	b.n	800e394 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dfae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dfb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dfb2:	f7ff ff1d 	bl	800ddf0 <check_fs>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dfbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dfc0:	2b02      	cmp	r3, #2
 800dfc2:	d14b      	bne.n	800e05c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	643b      	str	r3, [r7, #64]	; 0x40
 800dfc8:	e01f      	b.n	800e00a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfcc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dfd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfd2:	011b      	lsls	r3, r3, #4
 800dfd4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dfd8:	4413      	add	r3, r2
 800dfda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfde:	3304      	adds	r3, #4
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d006      	beq.n	800dff4 <find_volume+0x158>
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	3308      	adds	r3, #8
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fd ff04 	bl	800bdf8 <ld_dword>
 800dff0:	4602      	mov	r2, r0
 800dff2:	e000      	b.n	800dff6 <find_volume+0x15a>
 800dff4:	2200      	movs	r2, #0
 800dff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800dffe:	440b      	add	r3, r1
 800e000:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e006:	3301      	adds	r3, #1
 800e008:	643b      	str	r3, [r7, #64]	; 0x40
 800e00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e00c:	2b03      	cmp	r3, #3
 800e00e:	d9dc      	bls.n	800dfca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e010:	2300      	movs	r3, #0
 800e012:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <find_volume+0x184>
 800e01a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e01c:	3b01      	subs	r3, #1
 800e01e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e028:	4413      	add	r3, r2
 800e02a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e02e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e032:	2b00      	cmp	r3, #0
 800e034:	d005      	beq.n	800e042 <find_volume+0x1a6>
 800e036:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e03a:	f7ff fed9 	bl	800ddf0 <check_fs>
 800e03e:	4603      	mov	r3, r0
 800e040:	e000      	b.n	800e044 <find_volume+0x1a8>
 800e042:	2303      	movs	r3, #3
 800e044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d905      	bls.n	800e05c <find_volume+0x1c0>
 800e050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e052:	3301      	adds	r3, #1
 800e054:	643b      	str	r3, [r7, #64]	; 0x40
 800e056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e058:	2b03      	cmp	r3, #3
 800e05a:	d9e1      	bls.n	800e020 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e05c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e060:	2b04      	cmp	r3, #4
 800e062:	d101      	bne.n	800e068 <find_volume+0x1cc>
 800e064:	2301      	movs	r3, #1
 800e066:	e195      	b.n	800e394 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e068:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d901      	bls.n	800e074 <find_volume+0x1d8>
 800e070:	230d      	movs	r3, #13
 800e072:	e18f      	b.n	800e394 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e076:	3338      	adds	r3, #56	; 0x38
 800e078:	330b      	adds	r3, #11
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fd fea4 	bl	800bdc8 <ld_word>
 800e080:	4603      	mov	r3, r0
 800e082:	461a      	mov	r2, r3
 800e084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e086:	899b      	ldrh	r3, [r3, #12]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d001      	beq.n	800e090 <find_volume+0x1f4>
 800e08c:	230d      	movs	r3, #13
 800e08e:	e181      	b.n	800e394 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e092:	3338      	adds	r3, #56	; 0x38
 800e094:	3316      	adds	r3, #22
 800e096:	4618      	mov	r0, r3
 800e098:	f7fd fe96 	bl	800bdc8 <ld_word>
 800e09c:	4603      	mov	r3, r0
 800e09e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d106      	bne.n	800e0b4 <find_volume+0x218>
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	3338      	adds	r3, #56	; 0x38
 800e0aa:	3324      	adds	r3, #36	; 0x24
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fd fea3 	bl	800bdf8 <ld_dword>
 800e0b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0b8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0bc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c6:	789b      	ldrb	r3, [r3, #2]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d005      	beq.n	800e0d8 <find_volume+0x23c>
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ce:	789b      	ldrb	r3, [r3, #2]
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d001      	beq.n	800e0d8 <find_volume+0x23c>
 800e0d4:	230d      	movs	r3, #13
 800e0d6:	e15d      	b.n	800e394 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0da:	789b      	ldrb	r3, [r3, #2]
 800e0dc:	461a      	mov	r2, r3
 800e0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e0:	fb02 f303 	mul.w	r3, r2, r3
 800e0e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f4:	895b      	ldrh	r3, [r3, #10]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d008      	beq.n	800e10c <find_volume+0x270>
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	895b      	ldrh	r3, [r3, #10]
 800e0fe:	461a      	mov	r2, r3
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	895b      	ldrh	r3, [r3, #10]
 800e104:	3b01      	subs	r3, #1
 800e106:	4013      	ands	r3, r2
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <find_volume+0x274>
 800e10c:	230d      	movs	r3, #13
 800e10e:	e141      	b.n	800e394 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	3338      	adds	r3, #56	; 0x38
 800e114:	3311      	adds	r3, #17
 800e116:	4618      	mov	r0, r3
 800e118:	f7fd fe56 	bl	800bdc8 <ld_word>
 800e11c:	4603      	mov	r3, r0
 800e11e:	461a      	mov	r2, r3
 800e120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e122:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e126:	891b      	ldrh	r3, [r3, #8]
 800e128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e12a:	8992      	ldrh	r2, [r2, #12]
 800e12c:	0952      	lsrs	r2, r2, #5
 800e12e:	b292      	uxth	r2, r2
 800e130:	fbb3 f1f2 	udiv	r1, r3, r2
 800e134:	fb02 f201 	mul.w	r2, r2, r1
 800e138:	1a9b      	subs	r3, r3, r2
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <find_volume+0x2a8>
 800e140:	230d      	movs	r3, #13
 800e142:	e127      	b.n	800e394 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	3338      	adds	r3, #56	; 0x38
 800e148:	3313      	adds	r3, #19
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fd fe3c 	bl	800bdc8 <ld_word>
 800e150:	4603      	mov	r3, r0
 800e152:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e156:	2b00      	cmp	r3, #0
 800e158:	d106      	bne.n	800e168 <find_volume+0x2cc>
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	3338      	adds	r3, #56	; 0x38
 800e15e:	3320      	adds	r3, #32
 800e160:	4618      	mov	r0, r3
 800e162:	f7fd fe49 	bl	800bdf8 <ld_dword>
 800e166:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16a:	3338      	adds	r3, #56	; 0x38
 800e16c:	330e      	adds	r3, #14
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fd fe2a 	bl	800bdc8 <ld_word>
 800e174:	4603      	mov	r3, r0
 800e176:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e178:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d104      	bne.n	800e188 <find_volume+0x2ec>
 800e17e:	230d      	movs	r3, #13
 800e180:	e108      	b.n	800e394 <find_volume+0x4f8>
 800e182:	bf00      	nop
 800e184:	20002530 	.word	0x20002530

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e188:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e18c:	4413      	add	r3, r2
 800e18e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e190:	8911      	ldrh	r1, [r2, #8]
 800e192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e194:	8992      	ldrh	r2, [r2, #12]
 800e196:	0952      	lsrs	r2, r2, #5
 800e198:	b292      	uxth	r2, r2
 800e19a:	fbb1 f2f2 	udiv	r2, r1, r2
 800e19e:	b292      	uxth	r2, r2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e1a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d201      	bcs.n	800e1b0 <find_volume+0x314>
 800e1ac:	230d      	movs	r3, #13
 800e1ae:	e0f1      	b.n	800e394 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e1b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b4:	1ad3      	subs	r3, r2, r3
 800e1b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1b8:	8952      	ldrh	r2, [r2, #10]
 800e1ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1be:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d101      	bne.n	800e1ca <find_volume+0x32e>
 800e1c6:	230d      	movs	r3, #13
 800e1c8:	e0e4      	b.n	800e394 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800e1ca:	2303      	movs	r3, #3
 800e1cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d802      	bhi.n	800e1e0 <find_volume+0x344>
 800e1da:	2302      	movs	r3, #2
 800e1dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d802      	bhi.n	800e1f0 <find_volume+0x354>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	1c9a      	adds	r2, r3, #2
 800e1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1fc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e1fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e202:	441a      	add	r2, r3
 800e204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e206:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e208:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20c:	441a      	add	r2, r3
 800e20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e210:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e216:	2b03      	cmp	r3, #3
 800e218:	d11e      	bne.n	800e258 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21c:	3338      	adds	r3, #56	; 0x38
 800e21e:	332a      	adds	r3, #42	; 0x2a
 800e220:	4618      	mov	r0, r3
 800e222:	f7fd fdd1 	bl	800bdc8 <ld_word>
 800e226:	4603      	mov	r3, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d001      	beq.n	800e230 <find_volume+0x394>
 800e22c:	230d      	movs	r3, #13
 800e22e:	e0b1      	b.n	800e394 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e232:	891b      	ldrh	r3, [r3, #8]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d001      	beq.n	800e23c <find_volume+0x3a0>
 800e238:	230d      	movs	r3, #13
 800e23a:	e0ab      	b.n	800e394 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	3338      	adds	r3, #56	; 0x38
 800e240:	332c      	adds	r3, #44	; 0x2c
 800e242:	4618      	mov	r0, r3
 800e244:	f7fd fdd8 	bl	800bdf8 <ld_dword>
 800e248:	4602      	mov	r2, r0
 800e24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e250:	69db      	ldr	r3, [r3, #28]
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	647b      	str	r3, [r7, #68]	; 0x44
 800e256:	e01f      	b.n	800e298 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	891b      	ldrh	r3, [r3, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d101      	bne.n	800e264 <find_volume+0x3c8>
 800e260:	230d      	movs	r3, #13
 800e262:	e097      	b.n	800e394 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e26a:	441a      	add	r2, r3
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e274:	2b02      	cmp	r3, #2
 800e276:	d103      	bne.n	800e280 <find_volume+0x3e4>
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	69db      	ldr	r3, [r3, #28]
 800e27c:	005b      	lsls	r3, r3, #1
 800e27e:	e00a      	b.n	800e296 <find_volume+0x3fa>
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	69da      	ldr	r2, [r3, #28]
 800e284:	4613      	mov	r3, r2
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	4413      	add	r3, r2
 800e28a:	085a      	lsrs	r2, r3, #1
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	69db      	ldr	r3, [r3, #28]
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e296:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29a:	6a1a      	ldr	r2, [r3, #32]
 800e29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29e:	899b      	ldrh	r3, [r3, #12]
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2a4:	440b      	add	r3, r1
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2aa:	8989      	ldrh	r1, [r1, #12]
 800e2ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d201      	bcs.n	800e2b8 <find_volume+0x41c>
 800e2b4:	230d      	movs	r3, #13
 800e2b6:	e06d      	b.n	800e394 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2be:	619a      	str	r2, [r3, #24]
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	699a      	ldr	r2, [r3, #24]
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	2280      	movs	r2, #128	; 0x80
 800e2cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e2ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d149      	bne.n	800e36a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	3338      	adds	r3, #56	; 0x38
 800e2da:	3330      	adds	r3, #48	; 0x30
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7fd fd73 	bl	800bdc8 <ld_word>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d140      	bne.n	800e36a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2f0:	f7fe f81a 	bl	800c328 <move_window>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d137      	bne.n	800e36a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	3338      	adds	r3, #56	; 0x38
 800e304:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e308:	4618      	mov	r0, r3
 800e30a:	f7fd fd5d 	bl	800bdc8 <ld_word>
 800e30e:	4603      	mov	r3, r0
 800e310:	461a      	mov	r2, r3
 800e312:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e316:	429a      	cmp	r2, r3
 800e318:	d127      	bne.n	800e36a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31c:	3338      	adds	r3, #56	; 0x38
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fd fd6a 	bl	800bdf8 <ld_dword>
 800e324:	4603      	mov	r3, r0
 800e326:	4a1d      	ldr	r2, [pc, #116]	; (800e39c <find_volume+0x500>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d11e      	bne.n	800e36a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32e:	3338      	adds	r3, #56	; 0x38
 800e330:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e334:	4618      	mov	r0, r3
 800e336:	f7fd fd5f 	bl	800bdf8 <ld_dword>
 800e33a:	4603      	mov	r3, r0
 800e33c:	4a18      	ldr	r2, [pc, #96]	; (800e3a0 <find_volume+0x504>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d113      	bne.n	800e36a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e344:	3338      	adds	r3, #56	; 0x38
 800e346:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fd fd54 	bl	800bdf8 <ld_dword>
 800e350:	4602      	mov	r2, r0
 800e352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e354:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e358:	3338      	adds	r3, #56	; 0x38
 800e35a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fd fd4a 	bl	800bdf8 <ld_dword>
 800e364:	4602      	mov	r2, r0
 800e366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e368:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e370:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e372:	4b0c      	ldr	r3, [pc, #48]	; (800e3a4 <find_volume+0x508>)
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	3301      	adds	r3, #1
 800e378:	b29a      	uxth	r2, r3
 800e37a:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <find_volume+0x508>)
 800e37c:	801a      	strh	r2, [r3, #0]
 800e37e:	4b09      	ldr	r3, [pc, #36]	; (800e3a4 <find_volume+0x508>)
 800e380:	881a      	ldrh	r2, [r3, #0]
 800e382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e384:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e388:	4a07      	ldr	r2, [pc, #28]	; (800e3a8 <find_volume+0x50c>)
 800e38a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e38c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e38e:	f7fd ff63 	bl	800c258 <clear_lock>
#endif
	return FR_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3758      	adds	r7, #88	; 0x58
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	41615252 	.word	0x41615252
 800e3a0:	61417272 	.word	0x61417272
 800e3a4:	20002534 	.word	0x20002534
 800e3a8:	20002558 	.word	0x20002558

0800e3ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e3b6:	2309      	movs	r3, #9
 800e3b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d01c      	beq.n	800e3fa <validate+0x4e>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d018      	beq.n	800e3fa <validate+0x4e>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d013      	beq.n	800e3fa <validate+0x4e>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	889a      	ldrh	r2, [r3, #4]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	88db      	ldrh	r3, [r3, #6]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d10c      	bne.n	800e3fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	785b      	ldrb	r3, [r3, #1]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fd fc50 	bl	800bc8c <disk_status>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d101      	bne.n	800e3fa <validate+0x4e>
			res = FR_OK;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e3fa:	7bfb      	ldrb	r3, [r7, #15]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d102      	bne.n	800e406 <validate+0x5a>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	e000      	b.n	800e408 <validate+0x5c>
 800e406:	2300      	movs	r3, #0
 800e408:	683a      	ldr	r2, [r7, #0]
 800e40a:	6013      	str	r3, [r2, #0]
	return res;
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
	...

0800e418 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b088      	sub	sp, #32
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	4613      	mov	r3, r2
 800e424:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e42a:	f107 0310 	add.w	r3, r7, #16
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fc9a 	bl	800dd68 <get_ldnumber>
 800e434:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	da01      	bge.n	800e440 <f_mount+0x28>
 800e43c:	230b      	movs	r3, #11
 800e43e:	e02b      	b.n	800e498 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e440:	4a17      	ldr	r2, [pc, #92]	; (800e4a0 <f_mount+0x88>)
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e448:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d005      	beq.n	800e45c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e450:	69b8      	ldr	r0, [r7, #24]
 800e452:	f7fd ff01 	bl	800c258 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	2200      	movs	r2, #0
 800e45a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d002      	beq.n	800e468 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	490d      	ldr	r1, [pc, #52]	; (800e4a0 <f_mount+0x88>)
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d002      	beq.n	800e47e <f_mount+0x66>
 800e478:	79fb      	ldrb	r3, [r7, #7]
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d001      	beq.n	800e482 <f_mount+0x6a>
 800e47e:	2300      	movs	r3, #0
 800e480:	e00a      	b.n	800e498 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e482:	f107 010c 	add.w	r1, r7, #12
 800e486:	f107 0308 	add.w	r3, r7, #8
 800e48a:	2200      	movs	r2, #0
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7ff fd05 	bl	800de9c <find_volume>
 800e492:	4603      	mov	r3, r0
 800e494:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e496:	7dfb      	ldrb	r3, [r7, #23]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3720      	adds	r7, #32
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	20002530 	.word	0x20002530

0800e4a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b09a      	sub	sp, #104	; 0x68
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d101      	bne.n	800e4bc <f_open+0x18>
 800e4b8:	2309      	movs	r3, #9
 800e4ba:	e1bb      	b.n	800e834 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e4bc:	79fb      	ldrb	r3, [r7, #7]
 800e4be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e4c4:	79fa      	ldrb	r2, [r7, #7]
 800e4c6:	f107 0114 	add.w	r1, r7, #20
 800e4ca:	f107 0308 	add.w	r3, r7, #8
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7ff fce4 	bl	800de9c <find_volume>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e4da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f040 819f 	bne.w	800e822 <f_open+0x37e>
		dj.obj.fs = fs;
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	f107 0318 	add.w	r3, r7, #24
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7ff fbc3 	bl	800dc7c <follow_path>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e4fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e500:	2b00      	cmp	r3, #0
 800e502:	d11a      	bne.n	800e53a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e504:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e508:	b25b      	sxtb	r3, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	da03      	bge.n	800e516 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e50e:	2306      	movs	r3, #6
 800e510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e514:	e011      	b.n	800e53a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e516:	79fb      	ldrb	r3, [r7, #7]
 800e518:	f023 0301 	bic.w	r3, r3, #1
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	bf14      	ite	ne
 800e520:	2301      	movne	r3, #1
 800e522:	2300      	moveq	r3, #0
 800e524:	b2db      	uxtb	r3, r3
 800e526:	461a      	mov	r2, r3
 800e528:	f107 0318 	add.w	r3, r7, #24
 800e52c:	4611      	mov	r1, r2
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fd fd4a 	bl	800bfc8 <chk_lock>
 800e534:	4603      	mov	r3, r0
 800e536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e53a:	79fb      	ldrb	r3, [r7, #7]
 800e53c:	f003 031c 	and.w	r3, r3, #28
 800e540:	2b00      	cmp	r3, #0
 800e542:	d07f      	beq.n	800e644 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e544:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d017      	beq.n	800e57c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e54c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e550:	2b04      	cmp	r3, #4
 800e552:	d10e      	bne.n	800e572 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e554:	f7fd fd94 	bl	800c080 <enq_lock>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d006      	beq.n	800e56c <f_open+0xc8>
 800e55e:	f107 0318 	add.w	r3, r7, #24
 800e562:	4618      	mov	r0, r3
 800e564:	f7fe fffc 	bl	800d560 <dir_register>
 800e568:	4603      	mov	r3, r0
 800e56a:	e000      	b.n	800e56e <f_open+0xca>
 800e56c:	2312      	movs	r3, #18
 800e56e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e572:	79fb      	ldrb	r3, [r7, #7]
 800e574:	f043 0308 	orr.w	r3, r3, #8
 800e578:	71fb      	strb	r3, [r7, #7]
 800e57a:	e010      	b.n	800e59e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e57c:	7fbb      	ldrb	r3, [r7, #30]
 800e57e:	f003 0311 	and.w	r3, r3, #17
 800e582:	2b00      	cmp	r3, #0
 800e584:	d003      	beq.n	800e58e <f_open+0xea>
					res = FR_DENIED;
 800e586:	2307      	movs	r3, #7
 800e588:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e58c:	e007      	b.n	800e59e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e58e:	79fb      	ldrb	r3, [r7, #7]
 800e590:	f003 0304 	and.w	r3, r3, #4
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <f_open+0xfa>
 800e598:	2308      	movs	r3, #8
 800e59a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e59e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d168      	bne.n	800e678 <f_open+0x1d4>
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	f003 0308 	and.w	r3, r3, #8
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d063      	beq.n	800e678 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e5b0:	f7fb fd70 	bl	800a094 <get_fattime>
 800e5b4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b8:	330e      	adds	r3, #14
 800e5ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fd fc59 	bl	800be74 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c4:	3316      	adds	r3, #22
 800e5c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fd fc53 	bl	800be74 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d0:	330b      	adds	r3, #11
 800e5d2:	2220      	movs	r2, #32
 800e5d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5da:	4611      	mov	r1, r2
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7fe fc2b 	bl	800ce38 <ld_clust>
 800e5e2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fe fc43 	bl	800ce76 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f2:	331c      	adds	r3, #28
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fd fc3c 	bl	800be74 <st_dword>
					fs->wflag = 1;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	2201      	movs	r2, #1
 800e600:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e604:	2b00      	cmp	r3, #0
 800e606:	d037      	beq.n	800e678 <f_open+0x1d4>
						dw = fs->winsect;
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e60c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e60e:	f107 0318 	add.w	r3, r7, #24
 800e612:	2200      	movs	r2, #0
 800e614:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e616:	4618      	mov	r0, r3
 800e618:	f7fe f933 	bl	800c882 <remove_chain>
 800e61c:	4603      	mov	r3, r0
 800e61e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e622:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e626:	2b00      	cmp	r3, #0
 800e628:	d126      	bne.n	800e678 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fd fe7a 	bl	800c328 <move_window>
 800e634:	4603      	mov	r3, r0
 800e636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e63e:	3a01      	subs	r2, #1
 800e640:	615a      	str	r2, [r3, #20]
 800e642:	e019      	b.n	800e678 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e644:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d115      	bne.n	800e678 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e64c:	7fbb      	ldrb	r3, [r7, #30]
 800e64e:	f003 0310 	and.w	r3, r3, #16
 800e652:	2b00      	cmp	r3, #0
 800e654:	d003      	beq.n	800e65e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e656:	2304      	movs	r3, #4
 800e658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e65c:	e00c      	b.n	800e678 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e65e:	79fb      	ldrb	r3, [r7, #7]
 800e660:	f003 0302 	and.w	r3, r3, #2
 800e664:	2b00      	cmp	r3, #0
 800e666:	d007      	beq.n	800e678 <f_open+0x1d4>
 800e668:	7fbb      	ldrb	r3, [r7, #30]
 800e66a:	f003 0301 	and.w	r3, r3, #1
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d002      	beq.n	800e678 <f_open+0x1d4>
						res = FR_DENIED;
 800e672:	2307      	movs	r3, #7
 800e674:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e678:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d128      	bne.n	800e6d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e680:	79fb      	ldrb	r3, [r7, #7]
 800e682:	f003 0308 	and.w	r3, r3, #8
 800e686:	2b00      	cmp	r3, #0
 800e688:	d003      	beq.n	800e692 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e690:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e69a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6a0:	79fb      	ldrb	r3, [r7, #7]
 800e6a2:	f023 0301 	bic.w	r3, r3, #1
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	bf14      	ite	ne
 800e6aa:	2301      	movne	r3, #1
 800e6ac:	2300      	moveq	r3, #0
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	f107 0318 	add.w	r3, r7, #24
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fd fd03 	bl	800c0c4 <inc_lock>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	691b      	ldr	r3, [r3, #16]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <f_open+0x22e>
 800e6cc:	2302      	movs	r3, #2
 800e6ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e6d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f040 80a3 	bne.w	800e822 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe fba8 	bl	800ce38 <ld_clust>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f0:	331c      	adds	r3, #28
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fd fb80 	bl	800bdf8 <ld_dword>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e704:	697a      	ldr	r2, [r7, #20]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	88da      	ldrh	r2, [r3, #6]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	79fa      	ldrb	r2, [r7, #7]
 800e716:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2200      	movs	r2, #0
 800e71c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2200      	movs	r2, #0
 800e728:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	3330      	adds	r3, #48	; 0x30
 800e72e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e732:	2100      	movs	r1, #0
 800e734:	4618      	mov	r0, r3
 800e736:	f7fd fbea 	bl	800bf0e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	f003 0320 	and.w	r3, r3, #32
 800e740:	2b00      	cmp	r3, #0
 800e742:	d06e      	beq.n	800e822 <f_open+0x37e>
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d06a      	beq.n	800e822 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	68da      	ldr	r2, [r3, #12]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	895b      	ldrh	r3, [r3, #10]
 800e758:	461a      	mov	r2, r3
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	899b      	ldrh	r3, [r3, #12]
 800e75e:	fb03 f302 	mul.w	r3, r3, r2
 800e762:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e770:	e016      	b.n	800e7a0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e776:	4618      	mov	r0, r3
 800e778:	f7fd fe93 	bl	800c4a2 <get_fat>
 800e77c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e77e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e780:	2b01      	cmp	r3, #1
 800e782:	d802      	bhi.n	800e78a <f_open+0x2e6>
 800e784:	2302      	movs	r3, #2
 800e786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e78a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e78c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e790:	d102      	bne.n	800e798 <f_open+0x2f4>
 800e792:	2301      	movs	r3, #1
 800e794:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e79a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d103      	bne.n	800e7b0 <f_open+0x30c>
 800e7a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d8e0      	bhi.n	800e772 <f_open+0x2ce>
				}
				fp->clust = clst;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e7b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d131      	bne.n	800e822 <f_open+0x37e>
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	899b      	ldrh	r3, [r3, #12]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7ca:	fb02 f201 	mul.w	r2, r2, r1
 800e7ce:	1a9b      	subs	r3, r3, r2
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d026      	beq.n	800e822 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fd fe43 	bl	800c464 <clust2sect>
 800e7de:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d103      	bne.n	800e7ee <f_open+0x34a>
						res = FR_INT_ERR;
 800e7e6:	2302      	movs	r3, #2
 800e7e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e7ec:	e019      	b.n	800e822 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	899b      	ldrh	r3, [r3, #12]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7fc:	441a      	add	r2, r3
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	7858      	ldrb	r0, [r3, #1]
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	6a1a      	ldr	r2, [r3, #32]
 800e810:	2301      	movs	r3, #1
 800e812:	f7fd fa7b 	bl	800bd0c <disk_read>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d002      	beq.n	800e822 <f_open+0x37e>
 800e81c:	2301      	movs	r3, #1
 800e81e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e822:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e826:	2b00      	cmp	r3, #0
 800e828:	d002      	beq.n	800e830 <f_open+0x38c>
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e830:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e834:	4618      	mov	r0, r3
 800e836:	3768      	adds	r7, #104	; 0x68
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08c      	sub	sp, #48	; 0x30
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	2200      	movs	r2, #0
 800e852:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f107 0210 	add.w	r2, r7, #16
 800e85a:	4611      	mov	r1, r2
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7ff fda5 	bl	800e3ac <validate>
 800e862:	4603      	mov	r3, r0
 800e864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d107      	bne.n	800e880 <f_write+0x44>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	7d5b      	ldrb	r3, [r3, #21]
 800e874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <f_write+0x4a>
 800e880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e884:	e16a      	b.n	800eb5c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	7d1b      	ldrb	r3, [r3, #20]
 800e88a:	f003 0302 	and.w	r3, r3, #2
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <f_write+0x5a>
 800e892:	2307      	movs	r3, #7
 800e894:	e162      	b.n	800eb5c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	699a      	ldr	r2, [r3, #24]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	441a      	add	r2, r3
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	699b      	ldr	r3, [r3, #24]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	f080 814c 	bcs.w	800eb40 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	43db      	mvns	r3, r3
 800e8ae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e8b0:	e146      	b.n	800eb40 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	699b      	ldr	r3, [r3, #24]
 800e8b6:	693a      	ldr	r2, [r7, #16]
 800e8b8:	8992      	ldrh	r2, [r2, #12]
 800e8ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8be:	fb02 f201 	mul.w	r2, r2, r1
 800e8c2:	1a9b      	subs	r3, r3, r2
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	f040 80f1 	bne.w	800eaac <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	699b      	ldr	r3, [r3, #24]
 800e8ce:	693a      	ldr	r2, [r7, #16]
 800e8d0:	8992      	ldrh	r2, [r2, #12]
 800e8d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8d6:	693a      	ldr	r2, [r7, #16]
 800e8d8:	8952      	ldrh	r2, [r2, #10]
 800e8da:	3a01      	subs	r2, #1
 800e8dc:	4013      	ands	r3, r2
 800e8de:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d143      	bne.n	800e96e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	699b      	ldr	r3, [r3, #24]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10c      	bne.n	800e908 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d11a      	bne.n	800e930 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe f824 	bl	800c94c <create_chain>
 800e904:	62b8      	str	r0, [r7, #40]	; 0x28
 800e906:	e013      	b.n	800e930 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d007      	beq.n	800e920 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	699b      	ldr	r3, [r3, #24]
 800e914:	4619      	mov	r1, r3
 800e916:	68f8      	ldr	r0, [r7, #12]
 800e918:	f7fe f8b0 	bl	800ca7c <clmt_clust>
 800e91c:	62b8      	str	r0, [r7, #40]	; 0x28
 800e91e:	e007      	b.n	800e930 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	69db      	ldr	r3, [r3, #28]
 800e926:	4619      	mov	r1, r3
 800e928:	4610      	mov	r0, r2
 800e92a:	f7fe f80f 	bl	800c94c <create_chain>
 800e92e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	2b00      	cmp	r3, #0
 800e934:	f000 8109 	beq.w	800eb4a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d104      	bne.n	800e948 <f_write+0x10c>
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2202      	movs	r2, #2
 800e942:	755a      	strb	r2, [r3, #21]
 800e944:	2302      	movs	r3, #2
 800e946:	e109      	b.n	800eb5c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e94e:	d104      	bne.n	800e95a <f_write+0x11e>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2201      	movs	r2, #1
 800e954:	755a      	strb	r2, [r3, #21]
 800e956:	2301      	movs	r3, #1
 800e958:	e100      	b.n	800eb5c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e95e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d102      	bne.n	800e96e <f_write+0x132>
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e96c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	7d1b      	ldrb	r3, [r3, #20]
 800e972:	b25b      	sxtb	r3, r3
 800e974:	2b00      	cmp	r3, #0
 800e976:	da18      	bge.n	800e9aa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	7858      	ldrb	r0, [r3, #1]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6a1a      	ldr	r2, [r3, #32]
 800e986:	2301      	movs	r3, #1
 800e988:	f7fd f9e0 	bl	800bd4c <disk_write>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d004      	beq.n	800e99c <f_write+0x160>
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2201      	movs	r2, #1
 800e996:	755a      	strb	r2, [r3, #21]
 800e998:	2301      	movs	r3, #1
 800e99a:	e0df      	b.n	800eb5c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	7d1b      	ldrb	r3, [r3, #20]
 800e9a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e9aa:	693a      	ldr	r2, [r7, #16]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	69db      	ldr	r3, [r3, #28]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	f7fd fd56 	bl	800c464 <clust2sect>
 800e9b8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d104      	bne.n	800e9ca <f_write+0x18e>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2202      	movs	r2, #2
 800e9c4:	755a      	strb	r2, [r3, #21]
 800e9c6:	2302      	movs	r3, #2
 800e9c8:	e0c8      	b.n	800eb5c <f_write+0x320>
			sect += csect;
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	899b      	ldrh	r3, [r3, #12]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9de:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e9e0:	6a3b      	ldr	r3, [r7, #32]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d043      	beq.n	800ea6e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	6a3b      	ldr	r3, [r7, #32]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	693a      	ldr	r2, [r7, #16]
 800e9ee:	8952      	ldrh	r2, [r2, #10]
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d905      	bls.n	800ea00 <f_write+0x1c4>
					cc = fs->csize - csect;
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	895b      	ldrh	r3, [r3, #10]
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	1ad3      	subs	r3, r2, r3
 800e9fe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	7858      	ldrb	r0, [r3, #1]
 800ea04:	6a3b      	ldr	r3, [r7, #32]
 800ea06:	697a      	ldr	r2, [r7, #20]
 800ea08:	69f9      	ldr	r1, [r7, #28]
 800ea0a:	f7fd f99f 	bl	800bd4c <disk_write>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d004      	beq.n	800ea1e <f_write+0x1e2>
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2201      	movs	r2, #1
 800ea18:	755a      	strb	r2, [r3, #21]
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e09e      	b.n	800eb5c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	6a1a      	ldr	r2, [r3, #32]
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	1ad3      	subs	r3, r2, r3
 800ea26:	6a3a      	ldr	r2, [r7, #32]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d918      	bls.n	800ea5e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6a1a      	ldr	r2, [r3, #32]
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	693a      	ldr	r2, [r7, #16]
 800ea3c:	8992      	ldrh	r2, [r2, #12]
 800ea3e:	fb02 f303 	mul.w	r3, r2, r3
 800ea42:	69fa      	ldr	r2, [r7, #28]
 800ea44:	18d1      	adds	r1, r2, r3
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	899b      	ldrh	r3, [r3, #12]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	f7fd fa3e 	bl	800becc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	7d1b      	ldrb	r3, [r3, #20]
 800ea54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea58:	b2da      	uxtb	r2, r3
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	899b      	ldrh	r3, [r3, #12]
 800ea62:	461a      	mov	r2, r3
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	fb02 f303 	mul.w	r3, r2, r3
 800ea6a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ea6c:	e04b      	b.n	800eb06 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	6a1b      	ldr	r3, [r3, #32]
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d016      	beq.n	800eaa6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	699a      	ldr	r2, [r3, #24]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d210      	bcs.n	800eaa6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	7858      	ldrb	r0, [r3, #1]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea8e:	2301      	movs	r3, #1
 800ea90:	697a      	ldr	r2, [r7, #20]
 800ea92:	f7fd f93b 	bl	800bd0c <disk_read>
 800ea96:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d004      	beq.n	800eaa6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	755a      	strb	r2, [r3, #21]
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e05a      	b.n	800eb5c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	697a      	ldr	r2, [r7, #20]
 800eaaa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	899b      	ldrh	r3, [r3, #12]
 800eab0:	4618      	mov	r0, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	699b      	ldr	r3, [r3, #24]
 800eab6:	693a      	ldr	r2, [r7, #16]
 800eab8:	8992      	ldrh	r2, [r2, #12]
 800eaba:	fbb3 f1f2 	udiv	r1, r3, r2
 800eabe:	fb02 f201 	mul.w	r2, r2, r1
 800eac2:	1a9b      	subs	r3, r3, r2
 800eac4:	1ac3      	subs	r3, r0, r3
 800eac6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800eac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d901      	bls.n	800ead4 <f_write+0x298>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	699b      	ldr	r3, [r3, #24]
 800eade:	693a      	ldr	r2, [r7, #16]
 800eae0:	8992      	ldrh	r2, [r2, #12]
 800eae2:	fbb3 f0f2 	udiv	r0, r3, r2
 800eae6:	fb02 f200 	mul.w	r2, r2, r0
 800eaea:	1a9b      	subs	r3, r3, r2
 800eaec:	440b      	add	r3, r1
 800eaee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaf0:	69f9      	ldr	r1, [r7, #28]
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fd f9ea 	bl	800becc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	7d1b      	ldrb	r3, [r3, #20]
 800eafc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800eb06:	69fa      	ldr	r2, [r7, #28]
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	4413      	add	r3, r2
 800eb0c:	61fb      	str	r3, [r7, #28]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	699a      	ldr	r2, [r3, #24]
 800eb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb14:	441a      	add	r2, r3
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	619a      	str	r2, [r3, #24]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	68da      	ldr	r2, [r3, #12]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	699b      	ldr	r3, [r3, #24]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	bf38      	it	cc
 800eb26:	461a      	movcc	r2, r3
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	60da      	str	r2, [r3, #12]
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb32:	441a      	add	r2, r3
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	601a      	str	r2, [r3, #0]
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3c:	1ad3      	subs	r3, r2, r3
 800eb3e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	f47f aeb5 	bne.w	800e8b2 <f_write+0x76>
 800eb48:	e000      	b.n	800eb4c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eb4a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	7d1b      	ldrb	r3, [r3, #20]
 800eb50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3730      	adds	r7, #48	; 0x30
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f107 0208 	add.w	r2, r7, #8
 800eb72:	4611      	mov	r1, r2
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7ff fc19 	bl	800e3ac <validate>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb7e:	7dfb      	ldrb	r3, [r7, #23]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d168      	bne.n	800ec56 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	7d1b      	ldrb	r3, [r3, #20]
 800eb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d062      	beq.n	800ec56 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	7d1b      	ldrb	r3, [r3, #20]
 800eb94:	b25b      	sxtb	r3, r3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	da15      	bge.n	800ebc6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	7858      	ldrb	r0, [r3, #1]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a1a      	ldr	r2, [r3, #32]
 800eba8:	2301      	movs	r3, #1
 800ebaa:	f7fd f8cf 	bl	800bd4c <disk_write>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d001      	beq.n	800ebb8 <f_sync+0x54>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e04f      	b.n	800ec58 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	7d1b      	ldrb	r3, [r3, #20]
 800ebbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ebc6:	f7fb fa65 	bl	800a094 <get_fattime>
 800ebca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ebcc:	68ba      	ldr	r2, [r7, #8]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	f7fd fba7 	bl	800c328 <move_window>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ebde:	7dfb      	ldrb	r3, [r7, #23]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d138      	bne.n	800ec56 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	330b      	adds	r3, #11
 800ebee:	781a      	ldrb	r2, [r3, #0]
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	330b      	adds	r3, #11
 800ebf4:	f042 0220 	orr.w	r2, r2, #32
 800ebf8:	b2d2      	uxtb	r2, r2
 800ebfa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6818      	ldr	r0, [r3, #0]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	461a      	mov	r2, r3
 800ec06:	68f9      	ldr	r1, [r7, #12]
 800ec08:	f7fe f935 	bl	800ce76 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f103 021c 	add.w	r2, r3, #28
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	4619      	mov	r1, r3
 800ec18:	4610      	mov	r0, r2
 800ec1a:	f7fd f92b 	bl	800be74 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3316      	adds	r3, #22
 800ec22:	6939      	ldr	r1, [r7, #16]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7fd f925 	bl	800be74 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3312      	adds	r3, #18
 800ec2e:	2100      	movs	r1, #0
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fd f904 	bl	800be3e <st_word>
					fs->wflag = 1;
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7fd fba0 	bl	800c384 <sync_fs>
 800ec44:	4603      	mov	r3, r0
 800ec46:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	7d1b      	ldrb	r3, [r3, #20]
 800ec4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec50:	b2da      	uxtb	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ec56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3718      	adds	r7, #24
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7ff ff7b 	bl	800eb64 <f_sync>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec72:	7bfb      	ldrb	r3, [r7, #15]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d118      	bne.n	800ecaa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f107 0208 	add.w	r2, r7, #8
 800ec7e:	4611      	mov	r1, r2
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7ff fb93 	bl	800e3ac <validate>
 800ec86:	4603      	mov	r3, r0
 800ec88:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d10c      	bne.n	800ecaa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	691b      	ldr	r3, [r3, #16]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fd faa3 	bl	800c1e0 <dec_lock>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d102      	bne.n	800ecaa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d101      	bne.n	800ecc8 <f_opendir+0x14>
 800ecc4:	2309      	movs	r3, #9
 800ecc6:	e064      	b.n	800ed92 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800eccc:	f107 010c 	add.w	r1, r7, #12
 800ecd0:	463b      	mov	r3, r7
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7ff f8e1 	bl	800de9c <find_volume>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ecde:	7dfb      	ldrb	r3, [r7, #23]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d14f      	bne.n	800ed84 <f_opendir+0xd0>
		obj->fs = fs;
 800ece4:	68fa      	ldr	r2, [r7, #12]
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	4619      	mov	r1, r3
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7fe ffc4 	bl	800dc7c <follow_path>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ecf8:	7dfb      	ldrb	r3, [r7, #23]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d13d      	bne.n	800ed7a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ed04:	b25b      	sxtb	r3, r3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	db12      	blt.n	800ed30 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	799b      	ldrb	r3, [r3, #6]
 800ed0e:	f003 0310 	and.w	r3, r3, #16
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00a      	beq.n	800ed2c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ed16:	68fa      	ldr	r2, [r7, #12]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a1b      	ldr	r3, [r3, #32]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	4610      	mov	r0, r2
 800ed20:	f7fe f88a 	bl	800ce38 <ld_clust>
 800ed24:	4602      	mov	r2, r0
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	609a      	str	r2, [r3, #8]
 800ed2a:	e001      	b.n	800ed30 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ed2c:	2305      	movs	r3, #5
 800ed2e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ed30:	7dfb      	ldrb	r3, [r7, #23]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d121      	bne.n	800ed7a <f_opendir+0xc6>
				obj->id = fs->id;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	88da      	ldrh	r2, [r3, #6]
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ed3e:	2100      	movs	r1, #0
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7fd fed3 	bl	800caec <dir_sdi>
 800ed46:	4603      	mov	r3, r0
 800ed48:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ed4a:	7dfb      	ldrb	r3, [r7, #23]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d114      	bne.n	800ed7a <f_opendir+0xc6>
					if (obj->sclust) {
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00d      	beq.n	800ed74 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ed58:	2100      	movs	r1, #0
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7fd f9b2 	bl	800c0c4 <inc_lock>
 800ed60:	4602      	mov	r2, r0
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d105      	bne.n	800ed7a <f_opendir+0xc6>
 800ed6e:	2312      	movs	r3, #18
 800ed70:	75fb      	strb	r3, [r7, #23]
 800ed72:	e002      	b.n	800ed7a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	2200      	movs	r2, #0
 800ed78:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ed7a:	7dfb      	ldrb	r3, [r7, #23]
 800ed7c:	2b04      	cmp	r3, #4
 800ed7e:	d101      	bne.n	800ed84 <f_opendir+0xd0>
 800ed80:	2305      	movs	r3, #5
 800ed82:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ed84:	7dfb      	ldrb	r3, [r7, #23]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d002      	beq.n	800ed90 <f_opendir+0xdc>
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3718      	adds	r7, #24
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b084      	sub	sp, #16
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f107 0208 	add.w	r2, r7, #8
 800eda8:	4611      	mov	r1, r2
 800edaa:	4618      	mov	r0, r3
 800edac:	f7ff fafe 	bl	800e3ac <validate>
 800edb0:	4603      	mov	r3, r0
 800edb2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d110      	bne.n	800eddc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	691b      	ldr	r3, [r3, #16]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d006      	beq.n	800edd0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7fd fa0a 	bl	800c1e0 <dec_lock>
 800edcc:	4603      	mov	r3, r0
 800edce:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d102      	bne.n	800eddc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800eddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b084      	sub	sp, #16
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f107 0208 	add.w	r2, r7, #8
 800edf6:	4611      	mov	r1, r2
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7ff fad7 	bl	800e3ac <validate>
 800edfe:	4603      	mov	r3, r0
 800ee00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ee02:	7bfb      	ldrb	r3, [r7, #15]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d126      	bne.n	800ee56 <f_readdir+0x70>
		if (!fno) {
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d106      	bne.n	800ee1c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ee0e:	2100      	movs	r1, #0
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7fd fe6b 	bl	800caec <dir_sdi>
 800ee16:	4603      	mov	r3, r0
 800ee18:	73fb      	strb	r3, [r7, #15]
 800ee1a:	e01c      	b.n	800ee56 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7fe fa37 	bl	800d292 <dir_read>
 800ee24:	4603      	mov	r3, r0
 800ee26:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
 800ee2a:	2b04      	cmp	r3, #4
 800ee2c:	d101      	bne.n	800ee32 <f_readdir+0x4c>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ee32:	7bfb      	ldrb	r3, [r7, #15]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10e      	bne.n	800ee56 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7fe fc88 	bl	800d750 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ee40:	2100      	movs	r1, #0
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f7fd fedb 	bl	800cbfe <dir_next>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ee4c:	7bfb      	ldrb	r3, [r7, #15]
 800ee4e:	2b04      	cmp	r3, #4
 800ee50:	d101      	bne.n	800ee56 <f_readdir+0x70>
 800ee52:	2300      	movs	r3, #0
 800ee54:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ee56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b098      	sub	sp, #96	; 0x60
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ee68:	f107 010c 	add.w	r1, r7, #12
 800ee6c:	1d3b      	adds	r3, r7, #4
 800ee6e:	2202      	movs	r2, #2
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7ff f813 	bl	800de9c <find_volume>
 800ee76:	4603      	mov	r3, r0
 800ee78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800ee80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f040 80f2 	bne.w	800f06e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	f107 0310 	add.w	r3, r7, #16
 800ee90:	4611      	mov	r1, r2
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fe fef2 	bl	800dc7c <follow_path>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ee9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d102      	bne.n	800eeac <f_mkdir+0x4c>
 800eea6:	2308      	movs	r3, #8
 800eea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800eeac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eeb0:	2b04      	cmp	r3, #4
 800eeb2:	f040 80dc 	bne.w	800f06e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800eeb6:	f107 0310 	add.w	r3, r7, #16
 800eeba:	2100      	movs	r1, #0
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fd fd45 	bl	800c94c <create_chain>
 800eec2:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	895b      	ldrh	r3, [r3, #10]
 800eec8:	461a      	mov	r2, r3
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	899b      	ldrh	r3, [r3, #12]
 800eece:	fb03 f302 	mul.w	r3, r3, r2
 800eed2:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800eeda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d102      	bne.n	800eee6 <f_mkdir+0x86>
 800eee0:	2307      	movs	r3, #7
 800eee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800eee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d102      	bne.n	800eef2 <f_mkdir+0x92>
 800eeec:	2302      	movs	r3, #2
 800eeee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eef8:	d102      	bne.n	800ef00 <f_mkdir+0xa0>
 800eefa:	2301      	movs	r3, #1
 800eefc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ef00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d106      	bne.n	800ef16 <f_mkdir+0xb6>
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fd f9c8 	bl	800c2a0 <sync_window>
 800ef10:	4603      	mov	r3, r0
 800ef12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800ef16:	f7fb f8bd 	bl	800a094 <get_fattime>
 800ef1a:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ef1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d16c      	bne.n	800effe <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fd fa9b 	bl	800c464 <clust2sect>
 800ef2e:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3338      	adds	r3, #56	; 0x38
 800ef34:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	899b      	ldrh	r3, [r3, #12]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ef40:	f7fc ffe5 	bl	800bf0e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ef44:	220b      	movs	r2, #11
 800ef46:	2120      	movs	r1, #32
 800ef48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ef4a:	f7fc ffe0 	bl	800bf0e <mem_set>
					dir[DIR_Name] = '.';
 800ef4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef50:	222e      	movs	r2, #46	; 0x2e
 800ef52:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800ef54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef56:	330b      	adds	r3, #11
 800ef58:	2210      	movs	r2, #16
 800ef5a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800ef5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef5e:	3316      	adds	r3, #22
 800ef60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fc ff86 	bl	800be74 <st_dword>
					st_clust(fs, dir, dcl);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fd ff81 	bl	800ce76 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800ef74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef76:	3320      	adds	r3, #32
 800ef78:	2220      	movs	r2, #32
 800ef7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fc ffa5 	bl	800becc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800ef82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef84:	3321      	adds	r3, #33	; 0x21
 800ef86:	222e      	movs	r2, #46	; 0x2e
 800ef88:	701a      	strb	r2, [r3, #0]
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	2b03      	cmp	r3, #3
 800ef94:	d106      	bne.n	800efa4 <f_mkdir+0x144>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d101      	bne.n	800efa4 <f_mkdir+0x144>
 800efa0:	2300      	movs	r3, #0
 800efa2:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efa8:	3320      	adds	r3, #32
 800efaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800efac:	4619      	mov	r1, r3
 800efae:	f7fd ff62 	bl	800ce76 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	895b      	ldrh	r3, [r3, #10]
 800efb6:	65bb      	str	r3, [r7, #88]	; 0x58
 800efb8:	e01c      	b.n	800eff4 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800efba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efbc:	1c5a      	adds	r2, r3, #1
 800efbe:	657a      	str	r2, [r7, #84]	; 0x54
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2201      	movs	r2, #1
 800efc8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fd f967 	bl	800c2a0 <sync_window>
 800efd2:	4603      	mov	r3, r0
 800efd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800efd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10d      	bne.n	800effc <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	899b      	ldrh	r3, [r3, #12]
 800efe4:	461a      	mov	r2, r3
 800efe6:	2100      	movs	r1, #0
 800efe8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800efea:	f7fc ff90 	bl	800bf0e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800efee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eff0:	3b01      	subs	r3, #1
 800eff2:	65bb      	str	r3, [r7, #88]	; 0x58
 800eff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1df      	bne.n	800efba <f_mkdir+0x15a>
 800effa:	e000      	b.n	800effe <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800effc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800effe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f002:	2b00      	cmp	r3, #0
 800f004:	d107      	bne.n	800f016 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f006:	f107 0310 	add.w	r3, r7, #16
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fe faa8 	bl	800d560 <dir_register>
 800f010:	4603      	mov	r3, r0
 800f012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800f016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d120      	bne.n	800f060 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f020:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f024:	3316      	adds	r3, #22
 800f026:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fc ff23 	bl	800be74 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f034:	4618      	mov	r0, r3
 800f036:	f7fd ff1e 	bl	800ce76 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f03a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f03c:	330b      	adds	r3, #11
 800f03e:	2210      	movs	r2, #16
 800f040:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2201      	movs	r2, #1
 800f046:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10e      	bne.n	800f06e <f_mkdir+0x20e>
					res = sync_fs(fs);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	4618      	mov	r0, r3
 800f054:	f7fd f996 	bl	800c384 <sync_fs>
 800f058:	4603      	mov	r3, r0
 800f05a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f05e:	e006      	b.n	800f06e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f060:	f107 0310 	add.w	r3, r7, #16
 800f064:	2200      	movs	r2, #0
 800f066:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fd fc0a 	bl	800c882 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f06e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f072:	4618      	mov	r0, r3
 800f074:	3760      	adds	r7, #96	; 0x60
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
	...

0800f07c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b087      	sub	sp, #28
 800f080:	af00      	add	r7, sp, #0
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	4613      	mov	r3, r2
 800f088:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f08a:	2301      	movs	r3, #1
 800f08c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f08e:	2300      	movs	r3, #0
 800f090:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f092:	4b1f      	ldr	r3, [pc, #124]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f094:	7a5b      	ldrb	r3, [r3, #9]
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d131      	bne.n	800f100 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f09c:	4b1c      	ldr	r3, [pc, #112]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f09e:	7a5b      	ldrb	r3, [r3, #9]
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	4b1a      	ldr	r3, [pc, #104]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f0aa:	4b19      	ldr	r3, [pc, #100]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0ac:	7a5b      	ldrb	r3, [r3, #9]
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	4a17      	ldr	r2, [pc, #92]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f0ba:	4b15      	ldr	r3, [pc, #84]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0bc:	7a5b      	ldrb	r3, [r3, #9]
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	4b13      	ldr	r3, [pc, #76]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0c4:	4413      	add	r3, r2
 800f0c6:	79fa      	ldrb	r2, [r7, #7]
 800f0c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f0ca:	4b11      	ldr	r3, [pc, #68]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0cc:	7a5b      	ldrb	r3, [r3, #9]
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	1c5a      	adds	r2, r3, #1
 800f0d2:	b2d1      	uxtb	r1, r2
 800f0d4:	4a0e      	ldr	r2, [pc, #56]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0d6:	7251      	strb	r1, [r2, #9]
 800f0d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f0da:	7dbb      	ldrb	r3, [r7, #22]
 800f0dc:	3330      	adds	r3, #48	; 0x30
 800f0de:	b2da      	uxtb	r2, r3
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	223a      	movs	r2, #58	; 0x3a
 800f0ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	3302      	adds	r3, #2
 800f0f0:	222f      	movs	r2, #47	; 0x2f
 800f0f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	3303      	adds	r3, #3
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f100:	7dfb      	ldrb	r3, [r7, #23]
}
 800f102:	4618      	mov	r0, r3
 800f104:	371c      	adds	r7, #28
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	200025c0 	.word	0x200025c0

0800f114 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f11e:	2200      	movs	r2, #0
 800f120:	6839      	ldr	r1, [r7, #0]
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7ff ffaa 	bl	800f07c <FATFS_LinkDriverEx>
 800f128:	4603      	mov	r3, r0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
	...

0800f134 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	460b      	mov	r3, r1
 800f13e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800f140:	2300      	movs	r3, #0
 800f142:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800f144:	2301      	movs	r3, #1
 800f146:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800f148:	4b15      	ldr	r3, [pc, #84]	; (800f1a0 <FATFS_UnLinkDriverEx+0x6c>)
 800f14a:	7a5b      	ldrb	r3, [r3, #9]
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d01e      	beq.n	800f190 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	3b30      	subs	r3, #48	; 0x30
 800f158:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800f15a:	7bbb      	ldrb	r3, [r7, #14]
 800f15c:	4a10      	ldr	r2, [pc, #64]	; (800f1a0 <FATFS_UnLinkDriverEx+0x6c>)
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	4413      	add	r3, r2
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d013      	beq.n	800f190 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800f168:	7bbb      	ldrb	r3, [r7, #14]
 800f16a:	4a0d      	ldr	r2, [pc, #52]	; (800f1a0 <FATFS_UnLinkDriverEx+0x6c>)
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	2200      	movs	r2, #0
 800f172:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800f174:	7bbb      	ldrb	r3, [r7, #14]
 800f176:	4a0a      	ldr	r2, [pc, #40]	; (800f1a0 <FATFS_UnLinkDriverEx+0x6c>)
 800f178:	4413      	add	r3, r2
 800f17a:	2200      	movs	r2, #0
 800f17c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800f17e:	4b08      	ldr	r3, [pc, #32]	; (800f1a0 <FATFS_UnLinkDriverEx+0x6c>)
 800f180:	7a5b      	ldrb	r3, [r3, #9]
 800f182:	b2db      	uxtb	r3, r3
 800f184:	3b01      	subs	r3, #1
 800f186:	b2da      	uxtb	r2, r3
 800f188:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <FATFS_UnLinkDriverEx+0x6c>)
 800f18a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f190:	7bfb      	ldrb	r3, [r7, #15]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3714      	adds	r7, #20
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	200025c0 	.word	0x200025c0

0800f1a4 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f7ff ffc0 	bl	800f134 <FATFS_UnLinkDriverEx>
 800f1b4:	4603      	mov	r3, r0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
	...

0800f1c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	6039      	str	r1, [r7, #0]
 800f1ca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f1cc:	88fb      	ldrh	r3, [r7, #6]
 800f1ce:	2b7f      	cmp	r3, #127	; 0x7f
 800f1d0:	d802      	bhi.n	800f1d8 <ff_convert+0x18>
		c = chr;
 800f1d2:	88fb      	ldrh	r3, [r7, #6]
 800f1d4:	81fb      	strh	r3, [r7, #14]
 800f1d6:	e025      	b.n	800f224 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00b      	beq.n	800f1f6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f1de:	88fb      	ldrh	r3, [r7, #6]
 800f1e0:	2bff      	cmp	r3, #255	; 0xff
 800f1e2:	d805      	bhi.n	800f1f0 <ff_convert+0x30>
 800f1e4:	88fb      	ldrh	r3, [r7, #6]
 800f1e6:	3b80      	subs	r3, #128	; 0x80
 800f1e8:	4a12      	ldr	r2, [pc, #72]	; (800f234 <ff_convert+0x74>)
 800f1ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ee:	e000      	b.n	800f1f2 <ff_convert+0x32>
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	81fb      	strh	r3, [r7, #14]
 800f1f4:	e016      	b.n	800f224 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	81fb      	strh	r3, [r7, #14]
 800f1fa:	e009      	b.n	800f210 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f1fc:	89fb      	ldrh	r3, [r7, #14]
 800f1fe:	4a0d      	ldr	r2, [pc, #52]	; (800f234 <ff_convert+0x74>)
 800f200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f204:	88fa      	ldrh	r2, [r7, #6]
 800f206:	429a      	cmp	r2, r3
 800f208:	d006      	beq.n	800f218 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f20a:	89fb      	ldrh	r3, [r7, #14]
 800f20c:	3301      	adds	r3, #1
 800f20e:	81fb      	strh	r3, [r7, #14]
 800f210:	89fb      	ldrh	r3, [r7, #14]
 800f212:	2b7f      	cmp	r3, #127	; 0x7f
 800f214:	d9f2      	bls.n	800f1fc <ff_convert+0x3c>
 800f216:	e000      	b.n	800f21a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f218:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f21a:	89fb      	ldrh	r3, [r7, #14]
 800f21c:	3380      	adds	r3, #128	; 0x80
 800f21e:	b29b      	uxth	r3, r3
 800f220:	b2db      	uxtb	r3, r3
 800f222:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f224:	89fb      	ldrh	r3, [r7, #14]
}
 800f226:	4618      	mov	r0, r3
 800f228:	3714      	adds	r7, #20
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	08014bd0 	.word	0x08014bd0

0800f238 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f238:	b480      	push	{r7}
 800f23a:	b087      	sub	sp, #28
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	4603      	mov	r3, r0
 800f240:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f242:	88fb      	ldrh	r3, [r7, #6]
 800f244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f248:	d201      	bcs.n	800f24e <ff_wtoupper+0x16>
 800f24a:	4b3e      	ldr	r3, [pc, #248]	; (800f344 <ff_wtoupper+0x10c>)
 800f24c:	e000      	b.n	800f250 <ff_wtoupper+0x18>
 800f24e:	4b3e      	ldr	r3, [pc, #248]	; (800f348 <ff_wtoupper+0x110>)
 800f250:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	1c9a      	adds	r2, r3, #2
 800f256:	617a      	str	r2, [r7, #20]
 800f258:	881b      	ldrh	r3, [r3, #0]
 800f25a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f25c:	8a7b      	ldrh	r3, [r7, #18]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d068      	beq.n	800f334 <ff_wtoupper+0xfc>
 800f262:	88fa      	ldrh	r2, [r7, #6]
 800f264:	8a7b      	ldrh	r3, [r7, #18]
 800f266:	429a      	cmp	r2, r3
 800f268:	d364      	bcc.n	800f334 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	1c9a      	adds	r2, r3, #2
 800f26e:	617a      	str	r2, [r7, #20]
 800f270:	881b      	ldrh	r3, [r3, #0]
 800f272:	823b      	strh	r3, [r7, #16]
 800f274:	8a3b      	ldrh	r3, [r7, #16]
 800f276:	0a1b      	lsrs	r3, r3, #8
 800f278:	81fb      	strh	r3, [r7, #14]
 800f27a:	8a3b      	ldrh	r3, [r7, #16]
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f280:	88fa      	ldrh	r2, [r7, #6]
 800f282:	8a79      	ldrh	r1, [r7, #18]
 800f284:	8a3b      	ldrh	r3, [r7, #16]
 800f286:	440b      	add	r3, r1
 800f288:	429a      	cmp	r2, r3
 800f28a:	da49      	bge.n	800f320 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f28c:	89fb      	ldrh	r3, [r7, #14]
 800f28e:	2b08      	cmp	r3, #8
 800f290:	d84f      	bhi.n	800f332 <ff_wtoupper+0xfa>
 800f292:	a201      	add	r2, pc, #4	; (adr r2, 800f298 <ff_wtoupper+0x60>)
 800f294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f298:	0800f2bd 	.word	0x0800f2bd
 800f29c:	0800f2cf 	.word	0x0800f2cf
 800f2a0:	0800f2e5 	.word	0x0800f2e5
 800f2a4:	0800f2ed 	.word	0x0800f2ed
 800f2a8:	0800f2f5 	.word	0x0800f2f5
 800f2ac:	0800f2fd 	.word	0x0800f2fd
 800f2b0:	0800f305 	.word	0x0800f305
 800f2b4:	0800f30d 	.word	0x0800f30d
 800f2b8:	0800f315 	.word	0x0800f315
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f2bc:	88fa      	ldrh	r2, [r7, #6]
 800f2be:	8a7b      	ldrh	r3, [r7, #18]
 800f2c0:	1ad3      	subs	r3, r2, r3
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	697a      	ldr	r2, [r7, #20]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	80fb      	strh	r3, [r7, #6]
 800f2cc:	e027      	b.n	800f31e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f2ce:	88fa      	ldrh	r2, [r7, #6]
 800f2d0:	8a7b      	ldrh	r3, [r7, #18]
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	f003 0301 	and.w	r3, r3, #1
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	88fa      	ldrh	r2, [r7, #6]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	80fb      	strh	r3, [r7, #6]
 800f2e2:	e01c      	b.n	800f31e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f2e4:	88fb      	ldrh	r3, [r7, #6]
 800f2e6:	3b10      	subs	r3, #16
 800f2e8:	80fb      	strh	r3, [r7, #6]
 800f2ea:	e018      	b.n	800f31e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f2ec:	88fb      	ldrh	r3, [r7, #6]
 800f2ee:	3b20      	subs	r3, #32
 800f2f0:	80fb      	strh	r3, [r7, #6]
 800f2f2:	e014      	b.n	800f31e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f2f4:	88fb      	ldrh	r3, [r7, #6]
 800f2f6:	3b30      	subs	r3, #48	; 0x30
 800f2f8:	80fb      	strh	r3, [r7, #6]
 800f2fa:	e010      	b.n	800f31e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f2fc:	88fb      	ldrh	r3, [r7, #6]
 800f2fe:	3b1a      	subs	r3, #26
 800f300:	80fb      	strh	r3, [r7, #6]
 800f302:	e00c      	b.n	800f31e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f304:	88fb      	ldrh	r3, [r7, #6]
 800f306:	3308      	adds	r3, #8
 800f308:	80fb      	strh	r3, [r7, #6]
 800f30a:	e008      	b.n	800f31e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f30c:	88fb      	ldrh	r3, [r7, #6]
 800f30e:	3b50      	subs	r3, #80	; 0x50
 800f310:	80fb      	strh	r3, [r7, #6]
 800f312:	e004      	b.n	800f31e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f314:	88fb      	ldrh	r3, [r7, #6]
 800f316:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f31a:	80fb      	strh	r3, [r7, #6]
 800f31c:	bf00      	nop
			}
			break;
 800f31e:	e008      	b.n	800f332 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f320:	89fb      	ldrh	r3, [r7, #14]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d195      	bne.n	800f252 <ff_wtoupper+0x1a>
 800f326:	8a3b      	ldrh	r3, [r7, #16]
 800f328:	005b      	lsls	r3, r3, #1
 800f32a:	697a      	ldr	r2, [r7, #20]
 800f32c:	4413      	add	r3, r2
 800f32e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f330:	e78f      	b.n	800f252 <ff_wtoupper+0x1a>
			break;
 800f332:	bf00      	nop
	}

	return chr;
 800f334:	88fb      	ldrh	r3, [r7, #6]
}
 800f336:	4618      	mov	r0, r3
 800f338:	371c      	adds	r7, #28
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop
 800f344:	08014cd0 	.word	0x08014cd0
 800f348:	08014ec4 	.word	0x08014ec4

0800f34c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f350:	2200      	movs	r2, #0
 800f352:	4912      	ldr	r1, [pc, #72]	; (800f39c <MX_USB_DEVICE_Init+0x50>)
 800f354:	4812      	ldr	r0, [pc, #72]	; (800f3a0 <MX_USB_DEVICE_Init+0x54>)
 800f356:	f7fb fb2f 	bl	800a9b8 <USBD_Init>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d001      	beq.n	800f364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f360:	f7f3 f9e6 	bl	8002730 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f364:	490f      	ldr	r1, [pc, #60]	; (800f3a4 <MX_USB_DEVICE_Init+0x58>)
 800f366:	480e      	ldr	r0, [pc, #56]	; (800f3a0 <MX_USB_DEVICE_Init+0x54>)
 800f368:	f7fb fb56 	bl	800aa18 <USBD_RegisterClass>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d001      	beq.n	800f376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f372:	f7f3 f9dd 	bl	8002730 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f376:	490c      	ldr	r1, [pc, #48]	; (800f3a8 <MX_USB_DEVICE_Init+0x5c>)
 800f378:	4809      	ldr	r0, [pc, #36]	; (800f3a0 <MX_USB_DEVICE_Init+0x54>)
 800f37a:	f7fb fa77 	bl	800a86c <USBD_CDC_RegisterInterface>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f384:	f7f3 f9d4 	bl	8002730 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f388:	4805      	ldr	r0, [pc, #20]	; (800f3a0 <MX_USB_DEVICE_Init+0x54>)
 800f38a:	f7fb fb6c 	bl	800aa66 <USBD_Start>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d001      	beq.n	800f398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f394:	f7f3 f9cc 	bl	8002730 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f398:	bf00      	nop
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	20000138 	.word	0x20000138
 800f3a0:	20004b50 	.word	0x20004b50
 800f3a4:	20000020 	.word	0x20000020
 800f3a8:	20000124 	.word	0x20000124

0800f3ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	4905      	ldr	r1, [pc, #20]	; (800f3c8 <CDC_Init_FS+0x1c>)
 800f3b4:	4805      	ldr	r0, [pc, #20]	; (800f3cc <CDC_Init_FS+0x20>)
 800f3b6:	f7fb fa6e 	bl	800a896 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f3ba:	4905      	ldr	r1, [pc, #20]	; (800f3d0 <CDC_Init_FS+0x24>)
 800f3bc:	4803      	ldr	r0, [pc, #12]	; (800f3cc <CDC_Init_FS+0x20>)
 800f3be:	f7fb fa88 	bl	800a8d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f3c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	20005620 	.word	0x20005620
 800f3cc:	20004b50 	.word	0x20004b50
 800f3d0:	20004e20 	.word	0x20004e20

0800f3d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f3d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr

0800f3e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	6039      	str	r1, [r7, #0]
 800f3ee:	71fb      	strb	r3, [r7, #7]
 800f3f0:	4613      	mov	r3, r2
 800f3f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f3f4:	79fb      	ldrb	r3, [r7, #7]
 800f3f6:	2b23      	cmp	r3, #35	; 0x23
 800f3f8:	d84a      	bhi.n	800f490 <CDC_Control_FS+0xac>
 800f3fa:	a201      	add	r2, pc, #4	; (adr r2, 800f400 <CDC_Control_FS+0x1c>)
 800f3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f400:	0800f491 	.word	0x0800f491
 800f404:	0800f491 	.word	0x0800f491
 800f408:	0800f491 	.word	0x0800f491
 800f40c:	0800f491 	.word	0x0800f491
 800f410:	0800f491 	.word	0x0800f491
 800f414:	0800f491 	.word	0x0800f491
 800f418:	0800f491 	.word	0x0800f491
 800f41c:	0800f491 	.word	0x0800f491
 800f420:	0800f491 	.word	0x0800f491
 800f424:	0800f491 	.word	0x0800f491
 800f428:	0800f491 	.word	0x0800f491
 800f42c:	0800f491 	.word	0x0800f491
 800f430:	0800f491 	.word	0x0800f491
 800f434:	0800f491 	.word	0x0800f491
 800f438:	0800f491 	.word	0x0800f491
 800f43c:	0800f491 	.word	0x0800f491
 800f440:	0800f491 	.word	0x0800f491
 800f444:	0800f491 	.word	0x0800f491
 800f448:	0800f491 	.word	0x0800f491
 800f44c:	0800f491 	.word	0x0800f491
 800f450:	0800f491 	.word	0x0800f491
 800f454:	0800f491 	.word	0x0800f491
 800f458:	0800f491 	.word	0x0800f491
 800f45c:	0800f491 	.word	0x0800f491
 800f460:	0800f491 	.word	0x0800f491
 800f464:	0800f491 	.word	0x0800f491
 800f468:	0800f491 	.word	0x0800f491
 800f46c:	0800f491 	.word	0x0800f491
 800f470:	0800f491 	.word	0x0800f491
 800f474:	0800f491 	.word	0x0800f491
 800f478:	0800f491 	.word	0x0800f491
 800f47c:	0800f491 	.word	0x0800f491
 800f480:	0800f491 	.word	0x0800f491
 800f484:	0800f491 	.word	0x0800f491
 800f488:	0800f491 	.word	0x0800f491
 800f48c:	0800f491 	.word	0x0800f491
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f490:	bf00      	nop
  }

  return (USBD_OK);
 800f492:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f494:	4618      	mov	r0, r3
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f4aa:	6879      	ldr	r1, [r7, #4]
 800f4ac:	4805      	ldr	r0, [pc, #20]	; (800f4c4 <CDC_Receive_FS+0x24>)
 800f4ae:	f7fb fa10 	bl	800a8d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f4b2:	4804      	ldr	r0, [pc, #16]	; (800f4c4 <CDC_Receive_FS+0x24>)
 800f4b4:	f7fb fa56 	bl	800a964 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f4b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	20004b50 	.word	0x20004b50

0800f4c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f4d8:	4b0d      	ldr	r3, [pc, #52]	; (800f510 <CDC_Transmit_FS+0x48>)
 800f4da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d001      	beq.n	800f4ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	e00b      	b.n	800f506 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f4ee:	887b      	ldrh	r3, [r7, #2]
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	6879      	ldr	r1, [r7, #4]
 800f4f4:	4806      	ldr	r0, [pc, #24]	; (800f510 <CDC_Transmit_FS+0x48>)
 800f4f6:	f7fb f9ce 	bl	800a896 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f4fa:	4805      	ldr	r0, [pc, #20]	; (800f510 <CDC_Transmit_FS+0x48>)
 800f4fc:	f7fb fa02 	bl	800a904 <USBD_CDC_TransmitPacket>
 800f500:	4603      	mov	r3, r0
 800f502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f504:	7bfb      	ldrb	r3, [r7, #15]
}
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	20004b50 	.word	0x20004b50

0800f514 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f514:	b480      	push	{r7}
 800f516:	b087      	sub	sp, #28
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	4613      	mov	r3, r2
 800f520:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f522:	2300      	movs	r3, #0
 800f524:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	371c      	adds	r7, #28
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr
	...

0800f538 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	4603      	mov	r3, r0
 800f540:	6039      	str	r1, [r7, #0]
 800f542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2212      	movs	r2, #18
 800f548:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f54a:	4b03      	ldr	r3, [pc, #12]	; (800f558 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr
 800f558:	20000154 	.word	0x20000154

0800f55c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	4603      	mov	r3, r0
 800f564:	6039      	str	r1, [r7, #0]
 800f566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	2204      	movs	r2, #4
 800f56c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f56e:	4b03      	ldr	r3, [pc, #12]	; (800f57c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f570:	4618      	mov	r0, r3
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr
 800f57c:	20000168 	.word	0x20000168

0800f580 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	4603      	mov	r3, r0
 800f588:	6039      	str	r1, [r7, #0]
 800f58a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f58c:	79fb      	ldrb	r3, [r7, #7]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d105      	bne.n	800f59e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	4907      	ldr	r1, [pc, #28]	; (800f5b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f596:	4808      	ldr	r0, [pc, #32]	; (800f5b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f598:	f7fc fa97 	bl	800baca <USBD_GetString>
 800f59c:	e004      	b.n	800f5a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	4904      	ldr	r1, [pc, #16]	; (800f5b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f5a2:	4805      	ldr	r0, [pc, #20]	; (800f5b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f5a4:	f7fc fa91 	bl	800baca <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5a8:	4b02      	ldr	r3, [pc, #8]	; (800f5b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	20005e20 	.word	0x20005e20
 800f5b8:	08014a9c 	.word	0x08014a9c

0800f5bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	6039      	str	r1, [r7, #0]
 800f5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f5c8:	683a      	ldr	r2, [r7, #0]
 800f5ca:	4904      	ldr	r1, [pc, #16]	; (800f5dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f5cc:	4804      	ldr	r0, [pc, #16]	; (800f5e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f5ce:	f7fc fa7c 	bl	800baca <USBD_GetString>
  return USBD_StrDesc;
 800f5d2:	4b02      	ldr	r3, [pc, #8]	; (800f5dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3708      	adds	r7, #8
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	20005e20 	.word	0x20005e20
 800f5e0:	08014ab4 	.word	0x08014ab4

0800f5e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	6039      	str	r1, [r7, #0]
 800f5ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	221a      	movs	r2, #26
 800f5f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f5f6:	f000 f843 	bl	800f680 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f5fa:	4b02      	ldr	r3, [pc, #8]	; (800f604 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	2000016c 	.word	0x2000016c

0800f608 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	4603      	mov	r3, r0
 800f610:	6039      	str	r1, [r7, #0]
 800f612:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f614:	79fb      	ldrb	r3, [r7, #7]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d105      	bne.n	800f626 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f61a:	683a      	ldr	r2, [r7, #0]
 800f61c:	4907      	ldr	r1, [pc, #28]	; (800f63c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f61e:	4808      	ldr	r0, [pc, #32]	; (800f640 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f620:	f7fc fa53 	bl	800baca <USBD_GetString>
 800f624:	e004      	b.n	800f630 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f626:	683a      	ldr	r2, [r7, #0]
 800f628:	4904      	ldr	r1, [pc, #16]	; (800f63c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f62a:	4805      	ldr	r0, [pc, #20]	; (800f640 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f62c:	f7fc fa4d 	bl	800baca <USBD_GetString>
  }
  return USBD_StrDesc;
 800f630:	4b02      	ldr	r3, [pc, #8]	; (800f63c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f632:	4618      	mov	r0, r3
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	20005e20 	.word	0x20005e20
 800f640:	08014ac8 	.word	0x08014ac8

0800f644 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	4603      	mov	r3, r0
 800f64c:	6039      	str	r1, [r7, #0]
 800f64e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f650:	79fb      	ldrb	r3, [r7, #7]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d105      	bne.n	800f662 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f656:	683a      	ldr	r2, [r7, #0]
 800f658:	4907      	ldr	r1, [pc, #28]	; (800f678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f65a:	4808      	ldr	r0, [pc, #32]	; (800f67c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f65c:	f7fc fa35 	bl	800baca <USBD_GetString>
 800f660:	e004      	b.n	800f66c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f662:	683a      	ldr	r2, [r7, #0]
 800f664:	4904      	ldr	r1, [pc, #16]	; (800f678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f666:	4805      	ldr	r0, [pc, #20]	; (800f67c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f668:	f7fc fa2f 	bl	800baca <USBD_GetString>
  }
  return USBD_StrDesc;
 800f66c:	4b02      	ldr	r3, [pc, #8]	; (800f678 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	20005e20 	.word	0x20005e20
 800f67c:	08014ad4 	.word	0x08014ad4

0800f680 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f686:	4b0f      	ldr	r3, [pc, #60]	; (800f6c4 <Get_SerialNum+0x44>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f68c:	4b0e      	ldr	r3, [pc, #56]	; (800f6c8 <Get_SerialNum+0x48>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f692:	4b0e      	ldr	r3, [pc, #56]	; (800f6cc <Get_SerialNum+0x4c>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4413      	add	r3, r2
 800f69e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d009      	beq.n	800f6ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f6a6:	2208      	movs	r2, #8
 800f6a8:	4909      	ldr	r1, [pc, #36]	; (800f6d0 <Get_SerialNum+0x50>)
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	f000 f814 	bl	800f6d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f6b0:	2204      	movs	r2, #4
 800f6b2:	4908      	ldr	r1, [pc, #32]	; (800f6d4 <Get_SerialNum+0x54>)
 800f6b4:	68b8      	ldr	r0, [r7, #8]
 800f6b6:	f000 f80f 	bl	800f6d8 <IntToUnicode>
  }
}
 800f6ba:	bf00      	nop
 800f6bc:	3710      	adds	r7, #16
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	1fff7a10 	.word	0x1fff7a10
 800f6c8:	1fff7a14 	.word	0x1fff7a14
 800f6cc:	1fff7a18 	.word	0x1fff7a18
 800f6d0:	2000016e 	.word	0x2000016e
 800f6d4:	2000017e 	.word	0x2000017e

0800f6d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b087      	sub	sp, #28
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	60b9      	str	r1, [r7, #8]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	75fb      	strb	r3, [r7, #23]
 800f6ee:	e027      	b.n	800f740 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	0f1b      	lsrs	r3, r3, #28
 800f6f4:	2b09      	cmp	r3, #9
 800f6f6:	d80b      	bhi.n	800f710 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	0f1b      	lsrs	r3, r3, #28
 800f6fc:	b2da      	uxtb	r2, r3
 800f6fe:	7dfb      	ldrb	r3, [r7, #23]
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	4619      	mov	r1, r3
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	440b      	add	r3, r1
 800f708:	3230      	adds	r2, #48	; 0x30
 800f70a:	b2d2      	uxtb	r2, r2
 800f70c:	701a      	strb	r2, [r3, #0]
 800f70e:	e00a      	b.n	800f726 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	0f1b      	lsrs	r3, r3, #28
 800f714:	b2da      	uxtb	r2, r3
 800f716:	7dfb      	ldrb	r3, [r7, #23]
 800f718:	005b      	lsls	r3, r3, #1
 800f71a:	4619      	mov	r1, r3
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	440b      	add	r3, r1
 800f720:	3237      	adds	r2, #55	; 0x37
 800f722:	b2d2      	uxtb	r2, r2
 800f724:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	011b      	lsls	r3, r3, #4
 800f72a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f72c:	7dfb      	ldrb	r3, [r7, #23]
 800f72e:	005b      	lsls	r3, r3, #1
 800f730:	3301      	adds	r3, #1
 800f732:	68ba      	ldr	r2, [r7, #8]
 800f734:	4413      	add	r3, r2
 800f736:	2200      	movs	r2, #0
 800f738:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f73a:	7dfb      	ldrb	r3, [r7, #23]
 800f73c:	3301      	adds	r3, #1
 800f73e:	75fb      	strb	r3, [r7, #23]
 800f740:	7dfa      	ldrb	r2, [r7, #23]
 800f742:	79fb      	ldrb	r3, [r7, #7]
 800f744:	429a      	cmp	r2, r3
 800f746:	d3d3      	bcc.n	800f6f0 <IntToUnicode+0x18>
  }
}
 800f748:	bf00      	nop
 800f74a:	bf00      	nop
 800f74c:	371c      	adds	r7, #28
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
	...

0800f758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b08a      	sub	sp, #40	; 0x28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f760:	f107 0314 	add.w	r3, r7, #20
 800f764:	2200      	movs	r2, #0
 800f766:	601a      	str	r2, [r3, #0]
 800f768:	605a      	str	r2, [r3, #4]
 800f76a:	609a      	str	r2, [r3, #8]
 800f76c:	60da      	str	r2, [r3, #12]
 800f76e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f778:	d13a      	bne.n	800f7f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f77a:	2300      	movs	r3, #0
 800f77c:	613b      	str	r3, [r7, #16]
 800f77e:	4b1e      	ldr	r3, [pc, #120]	; (800f7f8 <HAL_PCD_MspInit+0xa0>)
 800f780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f782:	4a1d      	ldr	r2, [pc, #116]	; (800f7f8 <HAL_PCD_MspInit+0xa0>)
 800f784:	f043 0301 	orr.w	r3, r3, #1
 800f788:	6313      	str	r3, [r2, #48]	; 0x30
 800f78a:	4b1b      	ldr	r3, [pc, #108]	; (800f7f8 <HAL_PCD_MspInit+0xa0>)
 800f78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f78e:	f003 0301 	and.w	r3, r3, #1
 800f792:	613b      	str	r3, [r7, #16]
 800f794:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f796:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f79a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f79c:	2302      	movs	r3, #2
 800f79e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7a4:	2303      	movs	r3, #3
 800f7a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f7a8:	230a      	movs	r3, #10
 800f7aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7ac:	f107 0314 	add.w	r3, r7, #20
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	4812      	ldr	r0, [pc, #72]	; (800f7fc <HAL_PCD_MspInit+0xa4>)
 800f7b4:	f7f4 f91e 	bl	80039f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f7b8:	4b0f      	ldr	r3, [pc, #60]	; (800f7f8 <HAL_PCD_MspInit+0xa0>)
 800f7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7bc:	4a0e      	ldr	r2, [pc, #56]	; (800f7f8 <HAL_PCD_MspInit+0xa0>)
 800f7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7c2:	6353      	str	r3, [r2, #52]	; 0x34
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	60fb      	str	r3, [r7, #12]
 800f7c8:	4b0b      	ldr	r3, [pc, #44]	; (800f7f8 <HAL_PCD_MspInit+0xa0>)
 800f7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7cc:	4a0a      	ldr	r2, [pc, #40]	; (800f7f8 <HAL_PCD_MspInit+0xa0>)
 800f7ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7d2:	6453      	str	r3, [r2, #68]	; 0x44
 800f7d4:	4b08      	ldr	r3, [pc, #32]	; (800f7f8 <HAL_PCD_MspInit+0xa0>)
 800f7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7dc:	60fb      	str	r3, [r7, #12]
 800f7de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	2043      	movs	r0, #67	; 0x43
 800f7e6:	f7f4 f83c 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f7ea:	2043      	movs	r0, #67	; 0x43
 800f7ec:	f7f4 f855 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f7f0:	bf00      	nop
 800f7f2:	3728      	adds	r7, #40	; 0x28
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	40023800 	.word	0x40023800
 800f7fc:	40020000 	.word	0x40020000

0800f800 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f814:	4619      	mov	r1, r3
 800f816:	4610      	mov	r0, r2
 800f818:	f7fb f970 	bl	800aafc <USBD_LL_SetupStage>
}
 800f81c:	bf00      	nop
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	460b      	mov	r3, r1
 800f82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f836:	78fa      	ldrb	r2, [r7, #3]
 800f838:	6879      	ldr	r1, [r7, #4]
 800f83a:	4613      	mov	r3, r2
 800f83c:	00db      	lsls	r3, r3, #3
 800f83e:	1a9b      	subs	r3, r3, r2
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	440b      	add	r3, r1
 800f844:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	78fb      	ldrb	r3, [r7, #3]
 800f84c:	4619      	mov	r1, r3
 800f84e:	f7fb f9aa 	bl	800aba6 <USBD_LL_DataOutStage>
}
 800f852:	bf00      	nop
 800f854:	3708      	adds	r7, #8
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b082      	sub	sp, #8
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
 800f862:	460b      	mov	r3, r1
 800f864:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f86c:	78fa      	ldrb	r2, [r7, #3]
 800f86e:	6879      	ldr	r1, [r7, #4]
 800f870:	4613      	mov	r3, r2
 800f872:	00db      	lsls	r3, r3, #3
 800f874:	1a9b      	subs	r3, r3, r2
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	440b      	add	r3, r1
 800f87a:	3348      	adds	r3, #72	; 0x48
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	78fb      	ldrb	r3, [r7, #3]
 800f880:	4619      	mov	r1, r3
 800f882:	f7fb f9f3 	bl	800ac6c <USBD_LL_DataInStage>
}
 800f886:	bf00      	nop
 800f888:	3708      	adds	r7, #8
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f88e:	b580      	push	{r7, lr}
 800f890:	b082      	sub	sp, #8
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fb fb07 	bl	800aeb0 <USBD_LL_SOF>
}
 800f8a2:	bf00      	nop
 800f8a4:	3708      	adds	r7, #8
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b084      	sub	sp, #16
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d102      	bne.n	800f8c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	73fb      	strb	r3, [r7, #15]
 800f8c2:	e008      	b.n	800f8d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	2b02      	cmp	r3, #2
 800f8ca:	d102      	bne.n	800f8d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	73fb      	strb	r3, [r7, #15]
 800f8d0:	e001      	b.n	800f8d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f8d2:	f7f2 ff2d 	bl	8002730 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8dc:	7bfa      	ldrb	r2, [r7, #15]
 800f8de:	4611      	mov	r1, r2
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fb faa7 	bl	800ae34 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fb fa53 	bl	800ad98 <USBD_LL_Reset>
}
 800f8f2:	bf00      	nop
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
	...

0800f8fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fb faa2 	bl	800ae54 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	6812      	ldr	r2, [r2, #0]
 800f91e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f922:	f043 0301 	orr.w	r3, r3, #1
 800f926:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6a1b      	ldr	r3, [r3, #32]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d005      	beq.n	800f93c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f930:	4b04      	ldr	r3, [pc, #16]	; (800f944 <HAL_PCD_SuspendCallback+0x48>)
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	4a03      	ldr	r2, [pc, #12]	; (800f944 <HAL_PCD_SuspendCallback+0x48>)
 800f936:	f043 0306 	orr.w	r3, r3, #6
 800f93a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f93c:	bf00      	nop
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	e000ed00 	.word	0xe000ed00

0800f948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f956:	4618      	mov	r0, r3
 800f958:	f7fb fa92 	bl	800ae80 <USBD_LL_Resume>
}
 800f95c:	bf00      	nop
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	460b      	mov	r3, r1
 800f96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f976:	78fa      	ldrb	r2, [r7, #3]
 800f978:	4611      	mov	r1, r2
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fb fae0 	bl	800af40 <USBD_LL_IsoOUTIncomplete>
}
 800f980:	bf00      	nop
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	460b      	mov	r3, r1
 800f992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f99a:	78fa      	ldrb	r2, [r7, #3]
 800f99c:	4611      	mov	r1, r2
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fb faa8 	bl	800aef4 <USBD_LL_IsoINIncomplete>
}
 800f9a4:	bf00      	nop
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fb fae6 	bl	800af8c <USBD_LL_DevConnected>
}
 800f9c0:	bf00      	nop
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fb fae3 	bl	800afa2 <USBD_LL_DevDisconnected>
}
 800f9dc:	bf00      	nop
 800f9de:	3708      	adds	r7, #8
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d13c      	bne.n	800fa6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f9f4:	4a20      	ldr	r2, [pc, #128]	; (800fa78 <USBD_LL_Init+0x94>)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4a1e      	ldr	r2, [pc, #120]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa04:	4b1c      	ldr	r3, [pc, #112]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fa0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fa0c:	4b1a      	ldr	r3, [pc, #104]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa0e:	2204      	movs	r2, #4
 800fa10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fa12:	4b19      	ldr	r3, [pc, #100]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa14:	2202      	movs	r2, #2
 800fa16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fa18:	4b17      	ldr	r3, [pc, #92]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa1e:	4b16      	ldr	r3, [pc, #88]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa20:	2202      	movs	r2, #2
 800fa22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fa24:	4b14      	ldr	r3, [pc, #80]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa26:	2200      	movs	r2, #0
 800fa28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fa2a:	4b13      	ldr	r3, [pc, #76]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fa30:	4b11      	ldr	r3, [pc, #68]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa32:	2200      	movs	r2, #0
 800fa34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fa36:	4b10      	ldr	r3, [pc, #64]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa38:	2200      	movs	r2, #0
 800fa3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fa3c:	4b0e      	ldr	r3, [pc, #56]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa3e:	2200      	movs	r2, #0
 800fa40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fa42:	480d      	ldr	r0, [pc, #52]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa44:	f7f4 fb46 	bl	80040d4 <HAL_PCD_Init>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d001      	beq.n	800fa52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fa4e:	f7f2 fe6f 	bl	8002730 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fa52:	2180      	movs	r1, #128	; 0x80
 800fa54:	4808      	ldr	r0, [pc, #32]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa56:	f7f5 fca4 	bl	80053a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fa5a:	2240      	movs	r2, #64	; 0x40
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	4806      	ldr	r0, [pc, #24]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa60:	f7f5 fc58 	bl	8005314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fa64:	2280      	movs	r2, #128	; 0x80
 800fa66:	2101      	movs	r1, #1
 800fa68:	4803      	ldr	r0, [pc, #12]	; (800fa78 <USBD_LL_Init+0x94>)
 800fa6a:	f7f5 fc53 	bl	8005314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fa6e:	2300      	movs	r3, #0
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	20006020 	.word	0x20006020

0800fa7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b084      	sub	sp, #16
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa84:	2300      	movs	r3, #0
 800fa86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7f4 fc3b 	bl	800430e <HAL_PCD_Start>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa9c:	7bfb      	ldrb	r3, [r7, #15]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f000 f942 	bl	800fd28 <USBD_Get_USB_Status>
 800faa4:	4603      	mov	r3, r0
 800faa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3710      	adds	r7, #16
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}

0800fab2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b084      	sub	sp, #16
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	4608      	mov	r0, r1
 800fabc:	4611      	mov	r1, r2
 800fabe:	461a      	mov	r2, r3
 800fac0:	4603      	mov	r3, r0
 800fac2:	70fb      	strb	r3, [r7, #3]
 800fac4:	460b      	mov	r3, r1
 800fac6:	70bb      	strb	r3, [r7, #2]
 800fac8:	4613      	mov	r3, r2
 800faca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800facc:	2300      	movs	r3, #0
 800face:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fada:	78bb      	ldrb	r3, [r7, #2]
 800fadc:	883a      	ldrh	r2, [r7, #0]
 800fade:	78f9      	ldrb	r1, [r7, #3]
 800fae0:	f7f5 f81f 	bl	8004b22 <HAL_PCD_EP_Open>
 800fae4:	4603      	mov	r3, r0
 800fae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fae8:	7bfb      	ldrb	r3, [r7, #15]
 800faea:	4618      	mov	r0, r3
 800faec:	f000 f91c 	bl	800fd28 <USBD_Get_USB_Status>
 800faf0:	4603      	mov	r3, r0
 800faf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b084      	sub	sp, #16
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
 800fb06:	460b      	mov	r3, r1
 800fb08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb18:	78fa      	ldrb	r2, [r7, #3]
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f5 f868 	bl	8004bf2 <HAL_PCD_EP_Close>
 800fb22:	4603      	mov	r3, r0
 800fb24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb26:	7bfb      	ldrb	r3, [r7, #15]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 f8fd 	bl	800fd28 <USBD_Get_USB_Status>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb32:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3710      	adds	r7, #16
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	460b      	mov	r3, r1
 800fb46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb56:	78fa      	ldrb	r2, [r7, #3]
 800fb58:	4611      	mov	r1, r2
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7f5 f940 	bl	8004de0 <HAL_PCD_EP_SetStall>
 800fb60:	4603      	mov	r3, r0
 800fb62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb64:	7bfb      	ldrb	r3, [r7, #15]
 800fb66:	4618      	mov	r0, r3
 800fb68:	f000 f8de 	bl	800fd28 <USBD_Get_USB_Status>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb70:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3710      	adds	r7, #16
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b084      	sub	sp, #16
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
 800fb82:	460b      	mov	r3, r1
 800fb84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb86:	2300      	movs	r3, #0
 800fb88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb94:	78fa      	ldrb	r2, [r7, #3]
 800fb96:	4611      	mov	r1, r2
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7f5 f985 	bl	8004ea8 <HAL_PCD_EP_ClrStall>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fba2:	7bfb      	ldrb	r3, [r7, #15]
 800fba4:	4618      	mov	r0, r3
 800fba6:	f000 f8bf 	bl	800fd28 <USBD_Get_USB_Status>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbae:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fbca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fbcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	da0b      	bge.n	800fbec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fbd4:	78fb      	ldrb	r3, [r7, #3]
 800fbd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbda:	68f9      	ldr	r1, [r7, #12]
 800fbdc:	4613      	mov	r3, r2
 800fbde:	00db      	lsls	r3, r3, #3
 800fbe0:	1a9b      	subs	r3, r3, r2
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	440b      	add	r3, r1
 800fbe6:	333e      	adds	r3, #62	; 0x3e
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	e00b      	b.n	800fc04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fbec:	78fb      	ldrb	r3, [r7, #3]
 800fbee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbf2:	68f9      	ldr	r1, [r7, #12]
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	00db      	lsls	r3, r3, #3
 800fbf8:	1a9b      	subs	r3, r3, r2
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	440b      	add	r3, r1
 800fbfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3714      	adds	r7, #20
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr

0800fc10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	460b      	mov	r3, r1
 800fc1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc2a:	78fa      	ldrb	r2, [r7, #3]
 800fc2c:	4611      	mov	r1, r2
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7f4 ff52 	bl	8004ad8 <HAL_PCD_SetAddress>
 800fc34:	4603      	mov	r3, r0
 800fc36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc38:	7bfb      	ldrb	r3, [r7, #15]
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f000 f874 	bl	800fd28 <USBD_Get_USB_Status>
 800fc40:	4603      	mov	r3, r0
 800fc42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc44:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3710      	adds	r7, #16
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b086      	sub	sp, #24
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	60f8      	str	r0, [r7, #12]
 800fc56:	607a      	str	r2, [r7, #4]
 800fc58:	603b      	str	r3, [r7, #0]
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc62:	2300      	movs	r3, #0
 800fc64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc6c:	7af9      	ldrb	r1, [r7, #11]
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	f7f5 f86b 	bl	8004d4c <HAL_PCD_EP_Transmit>
 800fc76:	4603      	mov	r3, r0
 800fc78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc7a:	7dfb      	ldrb	r3, [r7, #23]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f000 f853 	bl	800fd28 <USBD_Get_USB_Status>
 800fc82:	4603      	mov	r3, r0
 800fc84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc86:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3718      	adds	r7, #24
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	607a      	str	r2, [r7, #4]
 800fc9a:	603b      	str	r3, [r7, #0]
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fca0:	2300      	movs	r3, #0
 800fca2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fca4:	2300      	movs	r3, #0
 800fca6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fcae:	7af9      	ldrb	r1, [r7, #11]
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	f7f4 ffe7 	bl	8004c86 <HAL_PCD_EP_Receive>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcbc:	7dfb      	ldrb	r3, [r7, #23]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 f832 	bl	800fd28 <USBD_Get_USB_Status>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3718      	adds	r7, #24
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b082      	sub	sp, #8
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
 800fcda:	460b      	mov	r3, r1
 800fcdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fce4:	78fa      	ldrb	r2, [r7, #3]
 800fce6:	4611      	mov	r1, r2
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7f5 f817 	bl	8004d1c <HAL_PCD_EP_GetRxCount>
 800fcee:	4603      	mov	r3, r0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fd00:	4b03      	ldr	r3, [pc, #12]	; (800fd10 <USBD_static_malloc+0x18>)
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	370c      	adds	r7, #12
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	200025cc 	.word	0x200025cc

0800fd14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]

}
 800fd1c:	bf00      	nop
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	4603      	mov	r3, r0
 800fd30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd32:	2300      	movs	r3, #0
 800fd34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fd36:	79fb      	ldrb	r3, [r7, #7]
 800fd38:	2b03      	cmp	r3, #3
 800fd3a:	d817      	bhi.n	800fd6c <USBD_Get_USB_Status+0x44>
 800fd3c:	a201      	add	r2, pc, #4	; (adr r2, 800fd44 <USBD_Get_USB_Status+0x1c>)
 800fd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd42:	bf00      	nop
 800fd44:	0800fd55 	.word	0x0800fd55
 800fd48:	0800fd5b 	.word	0x0800fd5b
 800fd4c:	0800fd61 	.word	0x0800fd61
 800fd50:	0800fd67 	.word	0x0800fd67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fd54:	2300      	movs	r3, #0
 800fd56:	73fb      	strb	r3, [r7, #15]
    break;
 800fd58:	e00b      	b.n	800fd72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fd5a:	2303      	movs	r3, #3
 800fd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800fd5e:	e008      	b.n	800fd72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fd60:	2301      	movs	r3, #1
 800fd62:	73fb      	strb	r3, [r7, #15]
    break;
 800fd64:	e005      	b.n	800fd72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fd66:	2303      	movs	r3, #3
 800fd68:	73fb      	strb	r3, [r7, #15]
    break;
 800fd6a:	e002      	b.n	800fd72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fd6c:	2303      	movs	r3, #3
 800fd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd70:	bf00      	nop
  }
  return usb_status;
 800fd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3714      	adds	r7, #20
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <_ZdlPv>:
 800fd80:	f000 b874 	b.w	800fe6c <free>

0800fd84 <_ZdlPvj>:
 800fd84:	f7ff bffc 	b.w	800fd80 <_ZdlPv>

0800fd88 <__cxa_guard_acquire>:
 800fd88:	6803      	ldr	r3, [r0, #0]
 800fd8a:	07db      	lsls	r3, r3, #31
 800fd8c:	d406      	bmi.n	800fd9c <__cxa_guard_acquire+0x14>
 800fd8e:	7843      	ldrb	r3, [r0, #1]
 800fd90:	b103      	cbz	r3, 800fd94 <__cxa_guard_acquire+0xc>
 800fd92:	deff      	udf	#255	; 0xff
 800fd94:	2301      	movs	r3, #1
 800fd96:	7043      	strb	r3, [r0, #1]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	4770      	bx	lr
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	4770      	bx	lr

0800fda0 <__cxa_guard_release>:
 800fda0:	2301      	movs	r3, #1
 800fda2:	6003      	str	r3, [r0, #0]
 800fda4:	4770      	bx	lr

0800fda6 <_Znwj>:
 800fda6:	2801      	cmp	r0, #1
 800fda8:	bf38      	it	cc
 800fdaa:	2001      	movcc	r0, #1
 800fdac:	b510      	push	{r4, lr}
 800fdae:	4604      	mov	r4, r0
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f000 f853 	bl	800fe5c <malloc>
 800fdb6:	b930      	cbnz	r0, 800fdc6 <_Znwj+0x20>
 800fdb8:	f000 f810 	bl	800fddc <_ZSt15get_new_handlerv>
 800fdbc:	b908      	cbnz	r0, 800fdc2 <_Znwj+0x1c>
 800fdbe:	f000 f815 	bl	800fdec <abort>
 800fdc2:	4780      	blx	r0
 800fdc4:	e7f4      	b.n	800fdb0 <_Znwj+0xa>
 800fdc6:	bd10      	pop	{r4, pc}

0800fdc8 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800fdc8:	684b      	ldr	r3, [r1, #4]
 800fdca:	6043      	str	r3, [r0, #4]
 800fdcc:	684b      	ldr	r3, [r1, #4]
 800fdce:	6001      	str	r1, [r0, #0]
 800fdd0:	6018      	str	r0, [r3, #0]
 800fdd2:	6048      	str	r0, [r1, #4]
 800fdd4:	4770      	bx	lr

0800fdd6 <_ZSt17__throw_bad_allocv>:
 800fdd6:	b508      	push	{r3, lr}
 800fdd8:	f000 f808 	bl	800fdec <abort>

0800fddc <_ZSt15get_new_handlerv>:
 800fddc:	4b02      	ldr	r3, [pc, #8]	; (800fde8 <_ZSt15get_new_handlerv+0xc>)
 800fdde:	6818      	ldr	r0, [r3, #0]
 800fde0:	f3bf 8f5b 	dmb	ish
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop
 800fde8:	200027ec 	.word	0x200027ec

0800fdec <abort>:
 800fdec:	b508      	push	{r3, lr}
 800fdee:	2006      	movs	r0, #6
 800fdf0:	f001 f84a 	bl	8010e88 <raise>
 800fdf4:	2001      	movs	r0, #1
 800fdf6:	f7f2 ff29 	bl	8002c4c <_exit>

0800fdfa <atexit>:
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	4601      	mov	r1, r0
 800fdfe:	461a      	mov	r2, r3
 800fe00:	4618      	mov	r0, r3
 800fe02:	f001 bfef 	b.w	8011de4 <__register_exitproc>
	...

0800fe08 <__errno>:
 800fe08:	4b01      	ldr	r3, [pc, #4]	; (800fe10 <__errno+0x8>)
 800fe0a:	6818      	ldr	r0, [r3, #0]
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	20000188 	.word	0x20000188

0800fe14 <__libc_init_array>:
 800fe14:	b570      	push	{r4, r5, r6, lr}
 800fe16:	4d0d      	ldr	r5, [pc, #52]	; (800fe4c <__libc_init_array+0x38>)
 800fe18:	4c0d      	ldr	r4, [pc, #52]	; (800fe50 <__libc_init_array+0x3c>)
 800fe1a:	1b64      	subs	r4, r4, r5
 800fe1c:	10a4      	asrs	r4, r4, #2
 800fe1e:	2600      	movs	r6, #0
 800fe20:	42a6      	cmp	r6, r4
 800fe22:	d109      	bne.n	800fe38 <__libc_init_array+0x24>
 800fe24:	4d0b      	ldr	r5, [pc, #44]	; (800fe54 <__libc_init_array+0x40>)
 800fe26:	4c0c      	ldr	r4, [pc, #48]	; (800fe58 <__libc_init_array+0x44>)
 800fe28:	f004 fd30 	bl	801488c <_init>
 800fe2c:	1b64      	subs	r4, r4, r5
 800fe2e:	10a4      	asrs	r4, r4, #2
 800fe30:	2600      	movs	r6, #0
 800fe32:	42a6      	cmp	r6, r4
 800fe34:	d105      	bne.n	800fe42 <__libc_init_array+0x2e>
 800fe36:	bd70      	pop	{r4, r5, r6, pc}
 800fe38:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe3c:	4798      	blx	r3
 800fe3e:	3601      	adds	r6, #1
 800fe40:	e7ee      	b.n	800fe20 <__libc_init_array+0xc>
 800fe42:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe46:	4798      	blx	r3
 800fe48:	3601      	adds	r6, #1
 800fe4a:	e7f2      	b.n	800fe32 <__libc_init_array+0x1e>
 800fe4c:	0801543c 	.word	0x0801543c
 800fe50:	0801543c 	.word	0x0801543c
 800fe54:	0801543c 	.word	0x0801543c
 800fe58:	08015444 	.word	0x08015444

0800fe5c <malloc>:
 800fe5c:	4b02      	ldr	r3, [pc, #8]	; (800fe68 <malloc+0xc>)
 800fe5e:	4601      	mov	r1, r0
 800fe60:	6818      	ldr	r0, [r3, #0]
 800fe62:	f000 b871 	b.w	800ff48 <_malloc_r>
 800fe66:	bf00      	nop
 800fe68:	20000188 	.word	0x20000188

0800fe6c <free>:
 800fe6c:	4b02      	ldr	r3, [pc, #8]	; (800fe78 <free+0xc>)
 800fe6e:	4601      	mov	r1, r0
 800fe70:	6818      	ldr	r0, [r3, #0]
 800fe72:	f000 b819 	b.w	800fea8 <_free_r>
 800fe76:	bf00      	nop
 800fe78:	20000188 	.word	0x20000188

0800fe7c <memcpy>:
 800fe7c:	440a      	add	r2, r1
 800fe7e:	4291      	cmp	r1, r2
 800fe80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fe84:	d100      	bne.n	800fe88 <memcpy+0xc>
 800fe86:	4770      	bx	lr
 800fe88:	b510      	push	{r4, lr}
 800fe8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe92:	4291      	cmp	r1, r2
 800fe94:	d1f9      	bne.n	800fe8a <memcpy+0xe>
 800fe96:	bd10      	pop	{r4, pc}

0800fe98 <memset>:
 800fe98:	4402      	add	r2, r0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d100      	bne.n	800fea2 <memset+0xa>
 800fea0:	4770      	bx	lr
 800fea2:	f803 1b01 	strb.w	r1, [r3], #1
 800fea6:	e7f9      	b.n	800fe9c <memset+0x4>

0800fea8 <_free_r>:
 800fea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800feaa:	2900      	cmp	r1, #0
 800feac:	d048      	beq.n	800ff40 <_free_r+0x98>
 800feae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feb2:	9001      	str	r0, [sp, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f1a1 0404 	sub.w	r4, r1, #4
 800feba:	bfb8      	it	lt
 800febc:	18e4      	addlt	r4, r4, r3
 800febe:	f003 fc0f 	bl	80136e0 <__malloc_lock>
 800fec2:	4a20      	ldr	r2, [pc, #128]	; (800ff44 <_free_r+0x9c>)
 800fec4:	9801      	ldr	r0, [sp, #4]
 800fec6:	6813      	ldr	r3, [r2, #0]
 800fec8:	4615      	mov	r5, r2
 800feca:	b933      	cbnz	r3, 800feda <_free_r+0x32>
 800fecc:	6063      	str	r3, [r4, #4]
 800fece:	6014      	str	r4, [r2, #0]
 800fed0:	b003      	add	sp, #12
 800fed2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fed6:	f003 bc09 	b.w	80136ec <__malloc_unlock>
 800feda:	42a3      	cmp	r3, r4
 800fedc:	d90b      	bls.n	800fef6 <_free_r+0x4e>
 800fede:	6821      	ldr	r1, [r4, #0]
 800fee0:	1862      	adds	r2, r4, r1
 800fee2:	4293      	cmp	r3, r2
 800fee4:	bf04      	itt	eq
 800fee6:	681a      	ldreq	r2, [r3, #0]
 800fee8:	685b      	ldreq	r3, [r3, #4]
 800feea:	6063      	str	r3, [r4, #4]
 800feec:	bf04      	itt	eq
 800feee:	1852      	addeq	r2, r2, r1
 800fef0:	6022      	streq	r2, [r4, #0]
 800fef2:	602c      	str	r4, [r5, #0]
 800fef4:	e7ec      	b.n	800fed0 <_free_r+0x28>
 800fef6:	461a      	mov	r2, r3
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	b10b      	cbz	r3, 800ff00 <_free_r+0x58>
 800fefc:	42a3      	cmp	r3, r4
 800fefe:	d9fa      	bls.n	800fef6 <_free_r+0x4e>
 800ff00:	6811      	ldr	r1, [r2, #0]
 800ff02:	1855      	adds	r5, r2, r1
 800ff04:	42a5      	cmp	r5, r4
 800ff06:	d10b      	bne.n	800ff20 <_free_r+0x78>
 800ff08:	6824      	ldr	r4, [r4, #0]
 800ff0a:	4421      	add	r1, r4
 800ff0c:	1854      	adds	r4, r2, r1
 800ff0e:	42a3      	cmp	r3, r4
 800ff10:	6011      	str	r1, [r2, #0]
 800ff12:	d1dd      	bne.n	800fed0 <_free_r+0x28>
 800ff14:	681c      	ldr	r4, [r3, #0]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	6053      	str	r3, [r2, #4]
 800ff1a:	4421      	add	r1, r4
 800ff1c:	6011      	str	r1, [r2, #0]
 800ff1e:	e7d7      	b.n	800fed0 <_free_r+0x28>
 800ff20:	d902      	bls.n	800ff28 <_free_r+0x80>
 800ff22:	230c      	movs	r3, #12
 800ff24:	6003      	str	r3, [r0, #0]
 800ff26:	e7d3      	b.n	800fed0 <_free_r+0x28>
 800ff28:	6825      	ldr	r5, [r4, #0]
 800ff2a:	1961      	adds	r1, r4, r5
 800ff2c:	428b      	cmp	r3, r1
 800ff2e:	bf04      	itt	eq
 800ff30:	6819      	ldreq	r1, [r3, #0]
 800ff32:	685b      	ldreq	r3, [r3, #4]
 800ff34:	6063      	str	r3, [r4, #4]
 800ff36:	bf04      	itt	eq
 800ff38:	1949      	addeq	r1, r1, r5
 800ff3a:	6021      	streq	r1, [r4, #0]
 800ff3c:	6054      	str	r4, [r2, #4]
 800ff3e:	e7c7      	b.n	800fed0 <_free_r+0x28>
 800ff40:	b003      	add	sp, #12
 800ff42:	bd30      	pop	{r4, r5, pc}
 800ff44:	200027f0 	.word	0x200027f0

0800ff48 <_malloc_r>:
 800ff48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff4a:	1ccd      	adds	r5, r1, #3
 800ff4c:	f025 0503 	bic.w	r5, r5, #3
 800ff50:	3508      	adds	r5, #8
 800ff52:	2d0c      	cmp	r5, #12
 800ff54:	bf38      	it	cc
 800ff56:	250c      	movcc	r5, #12
 800ff58:	2d00      	cmp	r5, #0
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	db01      	blt.n	800ff62 <_malloc_r+0x1a>
 800ff5e:	42a9      	cmp	r1, r5
 800ff60:	d903      	bls.n	800ff6a <_malloc_r+0x22>
 800ff62:	230c      	movs	r3, #12
 800ff64:	6033      	str	r3, [r6, #0]
 800ff66:	2000      	movs	r0, #0
 800ff68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff6a:	f003 fbb9 	bl	80136e0 <__malloc_lock>
 800ff6e:	4921      	ldr	r1, [pc, #132]	; (800fff4 <_malloc_r+0xac>)
 800ff70:	680a      	ldr	r2, [r1, #0]
 800ff72:	4614      	mov	r4, r2
 800ff74:	b99c      	cbnz	r4, 800ff9e <_malloc_r+0x56>
 800ff76:	4f20      	ldr	r7, [pc, #128]	; (800fff8 <_malloc_r+0xb0>)
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	b923      	cbnz	r3, 800ff86 <_malloc_r+0x3e>
 800ff7c:	4621      	mov	r1, r4
 800ff7e:	4630      	mov	r0, r6
 800ff80:	f000 ff44 	bl	8010e0c <_sbrk_r>
 800ff84:	6038      	str	r0, [r7, #0]
 800ff86:	4629      	mov	r1, r5
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f000 ff3f 	bl	8010e0c <_sbrk_r>
 800ff8e:	1c43      	adds	r3, r0, #1
 800ff90:	d123      	bne.n	800ffda <_malloc_r+0x92>
 800ff92:	230c      	movs	r3, #12
 800ff94:	6033      	str	r3, [r6, #0]
 800ff96:	4630      	mov	r0, r6
 800ff98:	f003 fba8 	bl	80136ec <__malloc_unlock>
 800ff9c:	e7e3      	b.n	800ff66 <_malloc_r+0x1e>
 800ff9e:	6823      	ldr	r3, [r4, #0]
 800ffa0:	1b5b      	subs	r3, r3, r5
 800ffa2:	d417      	bmi.n	800ffd4 <_malloc_r+0x8c>
 800ffa4:	2b0b      	cmp	r3, #11
 800ffa6:	d903      	bls.n	800ffb0 <_malloc_r+0x68>
 800ffa8:	6023      	str	r3, [r4, #0]
 800ffaa:	441c      	add	r4, r3
 800ffac:	6025      	str	r5, [r4, #0]
 800ffae:	e004      	b.n	800ffba <_malloc_r+0x72>
 800ffb0:	6863      	ldr	r3, [r4, #4]
 800ffb2:	42a2      	cmp	r2, r4
 800ffb4:	bf0c      	ite	eq
 800ffb6:	600b      	streq	r3, [r1, #0]
 800ffb8:	6053      	strne	r3, [r2, #4]
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f003 fb96 	bl	80136ec <__malloc_unlock>
 800ffc0:	f104 000b 	add.w	r0, r4, #11
 800ffc4:	1d23      	adds	r3, r4, #4
 800ffc6:	f020 0007 	bic.w	r0, r0, #7
 800ffca:	1ac2      	subs	r2, r0, r3
 800ffcc:	d0cc      	beq.n	800ff68 <_malloc_r+0x20>
 800ffce:	1a1b      	subs	r3, r3, r0
 800ffd0:	50a3      	str	r3, [r4, r2]
 800ffd2:	e7c9      	b.n	800ff68 <_malloc_r+0x20>
 800ffd4:	4622      	mov	r2, r4
 800ffd6:	6864      	ldr	r4, [r4, #4]
 800ffd8:	e7cc      	b.n	800ff74 <_malloc_r+0x2c>
 800ffda:	1cc4      	adds	r4, r0, #3
 800ffdc:	f024 0403 	bic.w	r4, r4, #3
 800ffe0:	42a0      	cmp	r0, r4
 800ffe2:	d0e3      	beq.n	800ffac <_malloc_r+0x64>
 800ffe4:	1a21      	subs	r1, r4, r0
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	f000 ff10 	bl	8010e0c <_sbrk_r>
 800ffec:	3001      	adds	r0, #1
 800ffee:	d1dd      	bne.n	800ffac <_malloc_r+0x64>
 800fff0:	e7cf      	b.n	800ff92 <_malloc_r+0x4a>
 800fff2:	bf00      	nop
 800fff4:	200027f0 	.word	0x200027f0
 800fff8:	200027f4 	.word	0x200027f4

0800fffc <__cvt>:
 800fffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010000:	ec55 4b10 	vmov	r4, r5, d0
 8010004:	2d00      	cmp	r5, #0
 8010006:	460e      	mov	r6, r1
 8010008:	4619      	mov	r1, r3
 801000a:	462b      	mov	r3, r5
 801000c:	bfbb      	ittet	lt
 801000e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010012:	461d      	movlt	r5, r3
 8010014:	2300      	movge	r3, #0
 8010016:	232d      	movlt	r3, #45	; 0x2d
 8010018:	700b      	strb	r3, [r1, #0]
 801001a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801001c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010020:	4691      	mov	r9, r2
 8010022:	f023 0820 	bic.w	r8, r3, #32
 8010026:	bfbc      	itt	lt
 8010028:	4622      	movlt	r2, r4
 801002a:	4614      	movlt	r4, r2
 801002c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010030:	d005      	beq.n	801003e <__cvt+0x42>
 8010032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010036:	d100      	bne.n	801003a <__cvt+0x3e>
 8010038:	3601      	adds	r6, #1
 801003a:	2102      	movs	r1, #2
 801003c:	e000      	b.n	8010040 <__cvt+0x44>
 801003e:	2103      	movs	r1, #3
 8010040:	ab03      	add	r3, sp, #12
 8010042:	9301      	str	r3, [sp, #4]
 8010044:	ab02      	add	r3, sp, #8
 8010046:	9300      	str	r3, [sp, #0]
 8010048:	ec45 4b10 	vmov	d0, r4, r5
 801004c:	4653      	mov	r3, sl
 801004e:	4632      	mov	r2, r6
 8010050:	f001 ffb6 	bl	8011fc0 <_dtoa_r>
 8010054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010058:	4607      	mov	r7, r0
 801005a:	d102      	bne.n	8010062 <__cvt+0x66>
 801005c:	f019 0f01 	tst.w	r9, #1
 8010060:	d022      	beq.n	80100a8 <__cvt+0xac>
 8010062:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010066:	eb07 0906 	add.w	r9, r7, r6
 801006a:	d110      	bne.n	801008e <__cvt+0x92>
 801006c:	783b      	ldrb	r3, [r7, #0]
 801006e:	2b30      	cmp	r3, #48	; 0x30
 8010070:	d10a      	bne.n	8010088 <__cvt+0x8c>
 8010072:	2200      	movs	r2, #0
 8010074:	2300      	movs	r3, #0
 8010076:	4620      	mov	r0, r4
 8010078:	4629      	mov	r1, r5
 801007a:	f7f0 fd35 	bl	8000ae8 <__aeabi_dcmpeq>
 801007e:	b918      	cbnz	r0, 8010088 <__cvt+0x8c>
 8010080:	f1c6 0601 	rsb	r6, r6, #1
 8010084:	f8ca 6000 	str.w	r6, [sl]
 8010088:	f8da 3000 	ldr.w	r3, [sl]
 801008c:	4499      	add	r9, r3
 801008e:	2200      	movs	r2, #0
 8010090:	2300      	movs	r3, #0
 8010092:	4620      	mov	r0, r4
 8010094:	4629      	mov	r1, r5
 8010096:	f7f0 fd27 	bl	8000ae8 <__aeabi_dcmpeq>
 801009a:	b108      	cbz	r0, 80100a0 <__cvt+0xa4>
 801009c:	f8cd 900c 	str.w	r9, [sp, #12]
 80100a0:	2230      	movs	r2, #48	; 0x30
 80100a2:	9b03      	ldr	r3, [sp, #12]
 80100a4:	454b      	cmp	r3, r9
 80100a6:	d307      	bcc.n	80100b8 <__cvt+0xbc>
 80100a8:	9b03      	ldr	r3, [sp, #12]
 80100aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100ac:	1bdb      	subs	r3, r3, r7
 80100ae:	4638      	mov	r0, r7
 80100b0:	6013      	str	r3, [r2, #0]
 80100b2:	b004      	add	sp, #16
 80100b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100b8:	1c59      	adds	r1, r3, #1
 80100ba:	9103      	str	r1, [sp, #12]
 80100bc:	701a      	strb	r2, [r3, #0]
 80100be:	e7f0      	b.n	80100a2 <__cvt+0xa6>

080100c0 <__exponent>:
 80100c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100c2:	4603      	mov	r3, r0
 80100c4:	2900      	cmp	r1, #0
 80100c6:	bfb8      	it	lt
 80100c8:	4249      	neglt	r1, r1
 80100ca:	f803 2b02 	strb.w	r2, [r3], #2
 80100ce:	bfb4      	ite	lt
 80100d0:	222d      	movlt	r2, #45	; 0x2d
 80100d2:	222b      	movge	r2, #43	; 0x2b
 80100d4:	2909      	cmp	r1, #9
 80100d6:	7042      	strb	r2, [r0, #1]
 80100d8:	dd2a      	ble.n	8010130 <__exponent+0x70>
 80100da:	f10d 0407 	add.w	r4, sp, #7
 80100de:	46a4      	mov	ip, r4
 80100e0:	270a      	movs	r7, #10
 80100e2:	46a6      	mov	lr, r4
 80100e4:	460a      	mov	r2, r1
 80100e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80100ea:	fb07 1516 	mls	r5, r7, r6, r1
 80100ee:	3530      	adds	r5, #48	; 0x30
 80100f0:	2a63      	cmp	r2, #99	; 0x63
 80100f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80100f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80100fa:	4631      	mov	r1, r6
 80100fc:	dcf1      	bgt.n	80100e2 <__exponent+0x22>
 80100fe:	3130      	adds	r1, #48	; 0x30
 8010100:	f1ae 0502 	sub.w	r5, lr, #2
 8010104:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010108:	1c44      	adds	r4, r0, #1
 801010a:	4629      	mov	r1, r5
 801010c:	4561      	cmp	r1, ip
 801010e:	d30a      	bcc.n	8010126 <__exponent+0x66>
 8010110:	f10d 0209 	add.w	r2, sp, #9
 8010114:	eba2 020e 	sub.w	r2, r2, lr
 8010118:	4565      	cmp	r5, ip
 801011a:	bf88      	it	hi
 801011c:	2200      	movhi	r2, #0
 801011e:	4413      	add	r3, r2
 8010120:	1a18      	subs	r0, r3, r0
 8010122:	b003      	add	sp, #12
 8010124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010126:	f811 2b01 	ldrb.w	r2, [r1], #1
 801012a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801012e:	e7ed      	b.n	801010c <__exponent+0x4c>
 8010130:	2330      	movs	r3, #48	; 0x30
 8010132:	3130      	adds	r1, #48	; 0x30
 8010134:	7083      	strb	r3, [r0, #2]
 8010136:	70c1      	strb	r1, [r0, #3]
 8010138:	1d03      	adds	r3, r0, #4
 801013a:	e7f1      	b.n	8010120 <__exponent+0x60>

0801013c <_printf_float>:
 801013c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010140:	ed2d 8b02 	vpush	{d8}
 8010144:	b08d      	sub	sp, #52	; 0x34
 8010146:	460c      	mov	r4, r1
 8010148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801014c:	4616      	mov	r6, r2
 801014e:	461f      	mov	r7, r3
 8010150:	4605      	mov	r5, r0
 8010152:	f003 fa47 	bl	80135e4 <_localeconv_r>
 8010156:	f8d0 a000 	ldr.w	sl, [r0]
 801015a:	4650      	mov	r0, sl
 801015c:	f7f0 f846 	bl	80001ec <strlen>
 8010160:	2300      	movs	r3, #0
 8010162:	930a      	str	r3, [sp, #40]	; 0x28
 8010164:	6823      	ldr	r3, [r4, #0]
 8010166:	9305      	str	r3, [sp, #20]
 8010168:	f8d8 3000 	ldr.w	r3, [r8]
 801016c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010170:	3307      	adds	r3, #7
 8010172:	f023 0307 	bic.w	r3, r3, #7
 8010176:	f103 0208 	add.w	r2, r3, #8
 801017a:	f8c8 2000 	str.w	r2, [r8]
 801017e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010182:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010186:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801018a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801018e:	9307      	str	r3, [sp, #28]
 8010190:	f8cd 8018 	str.w	r8, [sp, #24]
 8010194:	ee08 0a10 	vmov	s16, r0
 8010198:	4b9f      	ldr	r3, [pc, #636]	; (8010418 <_printf_float+0x2dc>)
 801019a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801019e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101a2:	f7f0 fcd3 	bl	8000b4c <__aeabi_dcmpun>
 80101a6:	bb88      	cbnz	r0, 801020c <_printf_float+0xd0>
 80101a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101ac:	4b9a      	ldr	r3, [pc, #616]	; (8010418 <_printf_float+0x2dc>)
 80101ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101b2:	f7f0 fcad 	bl	8000b10 <__aeabi_dcmple>
 80101b6:	bb48      	cbnz	r0, 801020c <_printf_float+0xd0>
 80101b8:	2200      	movs	r2, #0
 80101ba:	2300      	movs	r3, #0
 80101bc:	4640      	mov	r0, r8
 80101be:	4649      	mov	r1, r9
 80101c0:	f7f0 fc9c 	bl	8000afc <__aeabi_dcmplt>
 80101c4:	b110      	cbz	r0, 80101cc <_printf_float+0x90>
 80101c6:	232d      	movs	r3, #45	; 0x2d
 80101c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101cc:	4b93      	ldr	r3, [pc, #588]	; (801041c <_printf_float+0x2e0>)
 80101ce:	4894      	ldr	r0, [pc, #592]	; (8010420 <_printf_float+0x2e4>)
 80101d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80101d4:	bf94      	ite	ls
 80101d6:	4698      	movls	r8, r3
 80101d8:	4680      	movhi	r8, r0
 80101da:	2303      	movs	r3, #3
 80101dc:	6123      	str	r3, [r4, #16]
 80101de:	9b05      	ldr	r3, [sp, #20]
 80101e0:	f023 0204 	bic.w	r2, r3, #4
 80101e4:	6022      	str	r2, [r4, #0]
 80101e6:	f04f 0900 	mov.w	r9, #0
 80101ea:	9700      	str	r7, [sp, #0]
 80101ec:	4633      	mov	r3, r6
 80101ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80101f0:	4621      	mov	r1, r4
 80101f2:	4628      	mov	r0, r5
 80101f4:	f000 f9d8 	bl	80105a8 <_printf_common>
 80101f8:	3001      	adds	r0, #1
 80101fa:	f040 8090 	bne.w	801031e <_printf_float+0x1e2>
 80101fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010202:	b00d      	add	sp, #52	; 0x34
 8010204:	ecbd 8b02 	vpop	{d8}
 8010208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801020c:	4642      	mov	r2, r8
 801020e:	464b      	mov	r3, r9
 8010210:	4640      	mov	r0, r8
 8010212:	4649      	mov	r1, r9
 8010214:	f7f0 fc9a 	bl	8000b4c <__aeabi_dcmpun>
 8010218:	b140      	cbz	r0, 801022c <_printf_float+0xf0>
 801021a:	464b      	mov	r3, r9
 801021c:	2b00      	cmp	r3, #0
 801021e:	bfbc      	itt	lt
 8010220:	232d      	movlt	r3, #45	; 0x2d
 8010222:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010226:	487f      	ldr	r0, [pc, #508]	; (8010424 <_printf_float+0x2e8>)
 8010228:	4b7f      	ldr	r3, [pc, #508]	; (8010428 <_printf_float+0x2ec>)
 801022a:	e7d1      	b.n	80101d0 <_printf_float+0x94>
 801022c:	6863      	ldr	r3, [r4, #4]
 801022e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010232:	9206      	str	r2, [sp, #24]
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	d13f      	bne.n	80102b8 <_printf_float+0x17c>
 8010238:	2306      	movs	r3, #6
 801023a:	6063      	str	r3, [r4, #4]
 801023c:	9b05      	ldr	r3, [sp, #20]
 801023e:	6861      	ldr	r1, [r4, #4]
 8010240:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010244:	2300      	movs	r3, #0
 8010246:	9303      	str	r3, [sp, #12]
 8010248:	ab0a      	add	r3, sp, #40	; 0x28
 801024a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801024e:	ab09      	add	r3, sp, #36	; 0x24
 8010250:	ec49 8b10 	vmov	d0, r8, r9
 8010254:	9300      	str	r3, [sp, #0]
 8010256:	6022      	str	r2, [r4, #0]
 8010258:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801025c:	4628      	mov	r0, r5
 801025e:	f7ff fecd 	bl	800fffc <__cvt>
 8010262:	9b06      	ldr	r3, [sp, #24]
 8010264:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010266:	2b47      	cmp	r3, #71	; 0x47
 8010268:	4680      	mov	r8, r0
 801026a:	d108      	bne.n	801027e <_printf_float+0x142>
 801026c:	1cc8      	adds	r0, r1, #3
 801026e:	db02      	blt.n	8010276 <_printf_float+0x13a>
 8010270:	6863      	ldr	r3, [r4, #4]
 8010272:	4299      	cmp	r1, r3
 8010274:	dd41      	ble.n	80102fa <_printf_float+0x1be>
 8010276:	f1ab 0b02 	sub.w	fp, fp, #2
 801027a:	fa5f fb8b 	uxtb.w	fp, fp
 801027e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010282:	d820      	bhi.n	80102c6 <_printf_float+0x18a>
 8010284:	3901      	subs	r1, #1
 8010286:	465a      	mov	r2, fp
 8010288:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801028c:	9109      	str	r1, [sp, #36]	; 0x24
 801028e:	f7ff ff17 	bl	80100c0 <__exponent>
 8010292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010294:	1813      	adds	r3, r2, r0
 8010296:	2a01      	cmp	r2, #1
 8010298:	4681      	mov	r9, r0
 801029a:	6123      	str	r3, [r4, #16]
 801029c:	dc02      	bgt.n	80102a4 <_printf_float+0x168>
 801029e:	6822      	ldr	r2, [r4, #0]
 80102a0:	07d2      	lsls	r2, r2, #31
 80102a2:	d501      	bpl.n	80102a8 <_printf_float+0x16c>
 80102a4:	3301      	adds	r3, #1
 80102a6:	6123      	str	r3, [r4, #16]
 80102a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d09c      	beq.n	80101ea <_printf_float+0xae>
 80102b0:	232d      	movs	r3, #45	; 0x2d
 80102b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102b6:	e798      	b.n	80101ea <_printf_float+0xae>
 80102b8:	9a06      	ldr	r2, [sp, #24]
 80102ba:	2a47      	cmp	r2, #71	; 0x47
 80102bc:	d1be      	bne.n	801023c <_printf_float+0x100>
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1bc      	bne.n	801023c <_printf_float+0x100>
 80102c2:	2301      	movs	r3, #1
 80102c4:	e7b9      	b.n	801023a <_printf_float+0xfe>
 80102c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80102ca:	d118      	bne.n	80102fe <_printf_float+0x1c2>
 80102cc:	2900      	cmp	r1, #0
 80102ce:	6863      	ldr	r3, [r4, #4]
 80102d0:	dd0b      	ble.n	80102ea <_printf_float+0x1ae>
 80102d2:	6121      	str	r1, [r4, #16]
 80102d4:	b913      	cbnz	r3, 80102dc <_printf_float+0x1a0>
 80102d6:	6822      	ldr	r2, [r4, #0]
 80102d8:	07d0      	lsls	r0, r2, #31
 80102da:	d502      	bpl.n	80102e2 <_printf_float+0x1a6>
 80102dc:	3301      	adds	r3, #1
 80102de:	440b      	add	r3, r1
 80102e0:	6123      	str	r3, [r4, #16]
 80102e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80102e4:	f04f 0900 	mov.w	r9, #0
 80102e8:	e7de      	b.n	80102a8 <_printf_float+0x16c>
 80102ea:	b913      	cbnz	r3, 80102f2 <_printf_float+0x1b6>
 80102ec:	6822      	ldr	r2, [r4, #0]
 80102ee:	07d2      	lsls	r2, r2, #31
 80102f0:	d501      	bpl.n	80102f6 <_printf_float+0x1ba>
 80102f2:	3302      	adds	r3, #2
 80102f4:	e7f4      	b.n	80102e0 <_printf_float+0x1a4>
 80102f6:	2301      	movs	r3, #1
 80102f8:	e7f2      	b.n	80102e0 <_printf_float+0x1a4>
 80102fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80102fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010300:	4299      	cmp	r1, r3
 8010302:	db05      	blt.n	8010310 <_printf_float+0x1d4>
 8010304:	6823      	ldr	r3, [r4, #0]
 8010306:	6121      	str	r1, [r4, #16]
 8010308:	07d8      	lsls	r0, r3, #31
 801030a:	d5ea      	bpl.n	80102e2 <_printf_float+0x1a6>
 801030c:	1c4b      	adds	r3, r1, #1
 801030e:	e7e7      	b.n	80102e0 <_printf_float+0x1a4>
 8010310:	2900      	cmp	r1, #0
 8010312:	bfd4      	ite	le
 8010314:	f1c1 0202 	rsble	r2, r1, #2
 8010318:	2201      	movgt	r2, #1
 801031a:	4413      	add	r3, r2
 801031c:	e7e0      	b.n	80102e0 <_printf_float+0x1a4>
 801031e:	6823      	ldr	r3, [r4, #0]
 8010320:	055a      	lsls	r2, r3, #21
 8010322:	d407      	bmi.n	8010334 <_printf_float+0x1f8>
 8010324:	6923      	ldr	r3, [r4, #16]
 8010326:	4642      	mov	r2, r8
 8010328:	4631      	mov	r1, r6
 801032a:	4628      	mov	r0, r5
 801032c:	47b8      	blx	r7
 801032e:	3001      	adds	r0, #1
 8010330:	d12c      	bne.n	801038c <_printf_float+0x250>
 8010332:	e764      	b.n	80101fe <_printf_float+0xc2>
 8010334:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010338:	f240 80e0 	bls.w	80104fc <_printf_float+0x3c0>
 801033c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010340:	2200      	movs	r2, #0
 8010342:	2300      	movs	r3, #0
 8010344:	f7f0 fbd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8010348:	2800      	cmp	r0, #0
 801034a:	d034      	beq.n	80103b6 <_printf_float+0x27a>
 801034c:	4a37      	ldr	r2, [pc, #220]	; (801042c <_printf_float+0x2f0>)
 801034e:	2301      	movs	r3, #1
 8010350:	4631      	mov	r1, r6
 8010352:	4628      	mov	r0, r5
 8010354:	47b8      	blx	r7
 8010356:	3001      	adds	r0, #1
 8010358:	f43f af51 	beq.w	80101fe <_printf_float+0xc2>
 801035c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010360:	429a      	cmp	r2, r3
 8010362:	db02      	blt.n	801036a <_printf_float+0x22e>
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	07d8      	lsls	r0, r3, #31
 8010368:	d510      	bpl.n	801038c <_printf_float+0x250>
 801036a:	ee18 3a10 	vmov	r3, s16
 801036e:	4652      	mov	r2, sl
 8010370:	4631      	mov	r1, r6
 8010372:	4628      	mov	r0, r5
 8010374:	47b8      	blx	r7
 8010376:	3001      	adds	r0, #1
 8010378:	f43f af41 	beq.w	80101fe <_printf_float+0xc2>
 801037c:	f04f 0800 	mov.w	r8, #0
 8010380:	f104 091a 	add.w	r9, r4, #26
 8010384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010386:	3b01      	subs	r3, #1
 8010388:	4543      	cmp	r3, r8
 801038a:	dc09      	bgt.n	80103a0 <_printf_float+0x264>
 801038c:	6823      	ldr	r3, [r4, #0]
 801038e:	079b      	lsls	r3, r3, #30
 8010390:	f100 8105 	bmi.w	801059e <_printf_float+0x462>
 8010394:	68e0      	ldr	r0, [r4, #12]
 8010396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010398:	4298      	cmp	r0, r3
 801039a:	bfb8      	it	lt
 801039c:	4618      	movlt	r0, r3
 801039e:	e730      	b.n	8010202 <_printf_float+0xc6>
 80103a0:	2301      	movs	r3, #1
 80103a2:	464a      	mov	r2, r9
 80103a4:	4631      	mov	r1, r6
 80103a6:	4628      	mov	r0, r5
 80103a8:	47b8      	blx	r7
 80103aa:	3001      	adds	r0, #1
 80103ac:	f43f af27 	beq.w	80101fe <_printf_float+0xc2>
 80103b0:	f108 0801 	add.w	r8, r8, #1
 80103b4:	e7e6      	b.n	8010384 <_printf_float+0x248>
 80103b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	dc39      	bgt.n	8010430 <_printf_float+0x2f4>
 80103bc:	4a1b      	ldr	r2, [pc, #108]	; (801042c <_printf_float+0x2f0>)
 80103be:	2301      	movs	r3, #1
 80103c0:	4631      	mov	r1, r6
 80103c2:	4628      	mov	r0, r5
 80103c4:	47b8      	blx	r7
 80103c6:	3001      	adds	r0, #1
 80103c8:	f43f af19 	beq.w	80101fe <_printf_float+0xc2>
 80103cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103d0:	4313      	orrs	r3, r2
 80103d2:	d102      	bne.n	80103da <_printf_float+0x29e>
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	07d9      	lsls	r1, r3, #31
 80103d8:	d5d8      	bpl.n	801038c <_printf_float+0x250>
 80103da:	ee18 3a10 	vmov	r3, s16
 80103de:	4652      	mov	r2, sl
 80103e0:	4631      	mov	r1, r6
 80103e2:	4628      	mov	r0, r5
 80103e4:	47b8      	blx	r7
 80103e6:	3001      	adds	r0, #1
 80103e8:	f43f af09 	beq.w	80101fe <_printf_float+0xc2>
 80103ec:	f04f 0900 	mov.w	r9, #0
 80103f0:	f104 0a1a 	add.w	sl, r4, #26
 80103f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103f6:	425b      	negs	r3, r3
 80103f8:	454b      	cmp	r3, r9
 80103fa:	dc01      	bgt.n	8010400 <_printf_float+0x2c4>
 80103fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103fe:	e792      	b.n	8010326 <_printf_float+0x1ea>
 8010400:	2301      	movs	r3, #1
 8010402:	4652      	mov	r2, sl
 8010404:	4631      	mov	r1, r6
 8010406:	4628      	mov	r0, r5
 8010408:	47b8      	blx	r7
 801040a:	3001      	adds	r0, #1
 801040c:	f43f aef7 	beq.w	80101fe <_printf_float+0xc2>
 8010410:	f109 0901 	add.w	r9, r9, #1
 8010414:	e7ee      	b.n	80103f4 <_printf_float+0x2b8>
 8010416:	bf00      	nop
 8010418:	7fefffff 	.word	0x7fefffff
 801041c:	08014f84 	.word	0x08014f84
 8010420:	08014f88 	.word	0x08014f88
 8010424:	08014f90 	.word	0x08014f90
 8010428:	08014f8c 	.word	0x08014f8c
 801042c:	08014f94 	.word	0x08014f94
 8010430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010432:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010434:	429a      	cmp	r2, r3
 8010436:	bfa8      	it	ge
 8010438:	461a      	movge	r2, r3
 801043a:	2a00      	cmp	r2, #0
 801043c:	4691      	mov	r9, r2
 801043e:	dc37      	bgt.n	80104b0 <_printf_float+0x374>
 8010440:	f04f 0b00 	mov.w	fp, #0
 8010444:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010448:	f104 021a 	add.w	r2, r4, #26
 801044c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801044e:	9305      	str	r3, [sp, #20]
 8010450:	eba3 0309 	sub.w	r3, r3, r9
 8010454:	455b      	cmp	r3, fp
 8010456:	dc33      	bgt.n	80104c0 <_printf_float+0x384>
 8010458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801045c:	429a      	cmp	r2, r3
 801045e:	db3b      	blt.n	80104d8 <_printf_float+0x39c>
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	07da      	lsls	r2, r3, #31
 8010464:	d438      	bmi.n	80104d8 <_printf_float+0x39c>
 8010466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010468:	9b05      	ldr	r3, [sp, #20]
 801046a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801046c:	1ad3      	subs	r3, r2, r3
 801046e:	eba2 0901 	sub.w	r9, r2, r1
 8010472:	4599      	cmp	r9, r3
 8010474:	bfa8      	it	ge
 8010476:	4699      	movge	r9, r3
 8010478:	f1b9 0f00 	cmp.w	r9, #0
 801047c:	dc35      	bgt.n	80104ea <_printf_float+0x3ae>
 801047e:	f04f 0800 	mov.w	r8, #0
 8010482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010486:	f104 0a1a 	add.w	sl, r4, #26
 801048a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801048e:	1a9b      	subs	r3, r3, r2
 8010490:	eba3 0309 	sub.w	r3, r3, r9
 8010494:	4543      	cmp	r3, r8
 8010496:	f77f af79 	ble.w	801038c <_printf_float+0x250>
 801049a:	2301      	movs	r3, #1
 801049c:	4652      	mov	r2, sl
 801049e:	4631      	mov	r1, r6
 80104a0:	4628      	mov	r0, r5
 80104a2:	47b8      	blx	r7
 80104a4:	3001      	adds	r0, #1
 80104a6:	f43f aeaa 	beq.w	80101fe <_printf_float+0xc2>
 80104aa:	f108 0801 	add.w	r8, r8, #1
 80104ae:	e7ec      	b.n	801048a <_printf_float+0x34e>
 80104b0:	4613      	mov	r3, r2
 80104b2:	4631      	mov	r1, r6
 80104b4:	4642      	mov	r2, r8
 80104b6:	4628      	mov	r0, r5
 80104b8:	47b8      	blx	r7
 80104ba:	3001      	adds	r0, #1
 80104bc:	d1c0      	bne.n	8010440 <_printf_float+0x304>
 80104be:	e69e      	b.n	80101fe <_printf_float+0xc2>
 80104c0:	2301      	movs	r3, #1
 80104c2:	4631      	mov	r1, r6
 80104c4:	4628      	mov	r0, r5
 80104c6:	9205      	str	r2, [sp, #20]
 80104c8:	47b8      	blx	r7
 80104ca:	3001      	adds	r0, #1
 80104cc:	f43f ae97 	beq.w	80101fe <_printf_float+0xc2>
 80104d0:	9a05      	ldr	r2, [sp, #20]
 80104d2:	f10b 0b01 	add.w	fp, fp, #1
 80104d6:	e7b9      	b.n	801044c <_printf_float+0x310>
 80104d8:	ee18 3a10 	vmov	r3, s16
 80104dc:	4652      	mov	r2, sl
 80104de:	4631      	mov	r1, r6
 80104e0:	4628      	mov	r0, r5
 80104e2:	47b8      	blx	r7
 80104e4:	3001      	adds	r0, #1
 80104e6:	d1be      	bne.n	8010466 <_printf_float+0x32a>
 80104e8:	e689      	b.n	80101fe <_printf_float+0xc2>
 80104ea:	9a05      	ldr	r2, [sp, #20]
 80104ec:	464b      	mov	r3, r9
 80104ee:	4442      	add	r2, r8
 80104f0:	4631      	mov	r1, r6
 80104f2:	4628      	mov	r0, r5
 80104f4:	47b8      	blx	r7
 80104f6:	3001      	adds	r0, #1
 80104f8:	d1c1      	bne.n	801047e <_printf_float+0x342>
 80104fa:	e680      	b.n	80101fe <_printf_float+0xc2>
 80104fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104fe:	2a01      	cmp	r2, #1
 8010500:	dc01      	bgt.n	8010506 <_printf_float+0x3ca>
 8010502:	07db      	lsls	r3, r3, #31
 8010504:	d538      	bpl.n	8010578 <_printf_float+0x43c>
 8010506:	2301      	movs	r3, #1
 8010508:	4642      	mov	r2, r8
 801050a:	4631      	mov	r1, r6
 801050c:	4628      	mov	r0, r5
 801050e:	47b8      	blx	r7
 8010510:	3001      	adds	r0, #1
 8010512:	f43f ae74 	beq.w	80101fe <_printf_float+0xc2>
 8010516:	ee18 3a10 	vmov	r3, s16
 801051a:	4652      	mov	r2, sl
 801051c:	4631      	mov	r1, r6
 801051e:	4628      	mov	r0, r5
 8010520:	47b8      	blx	r7
 8010522:	3001      	adds	r0, #1
 8010524:	f43f ae6b 	beq.w	80101fe <_printf_float+0xc2>
 8010528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801052c:	2200      	movs	r2, #0
 801052e:	2300      	movs	r3, #0
 8010530:	f7f0 fada 	bl	8000ae8 <__aeabi_dcmpeq>
 8010534:	b9d8      	cbnz	r0, 801056e <_printf_float+0x432>
 8010536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010538:	f108 0201 	add.w	r2, r8, #1
 801053c:	3b01      	subs	r3, #1
 801053e:	4631      	mov	r1, r6
 8010540:	4628      	mov	r0, r5
 8010542:	47b8      	blx	r7
 8010544:	3001      	adds	r0, #1
 8010546:	d10e      	bne.n	8010566 <_printf_float+0x42a>
 8010548:	e659      	b.n	80101fe <_printf_float+0xc2>
 801054a:	2301      	movs	r3, #1
 801054c:	4652      	mov	r2, sl
 801054e:	4631      	mov	r1, r6
 8010550:	4628      	mov	r0, r5
 8010552:	47b8      	blx	r7
 8010554:	3001      	adds	r0, #1
 8010556:	f43f ae52 	beq.w	80101fe <_printf_float+0xc2>
 801055a:	f108 0801 	add.w	r8, r8, #1
 801055e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010560:	3b01      	subs	r3, #1
 8010562:	4543      	cmp	r3, r8
 8010564:	dcf1      	bgt.n	801054a <_printf_float+0x40e>
 8010566:	464b      	mov	r3, r9
 8010568:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801056c:	e6dc      	b.n	8010328 <_printf_float+0x1ec>
 801056e:	f04f 0800 	mov.w	r8, #0
 8010572:	f104 0a1a 	add.w	sl, r4, #26
 8010576:	e7f2      	b.n	801055e <_printf_float+0x422>
 8010578:	2301      	movs	r3, #1
 801057a:	4642      	mov	r2, r8
 801057c:	e7df      	b.n	801053e <_printf_float+0x402>
 801057e:	2301      	movs	r3, #1
 8010580:	464a      	mov	r2, r9
 8010582:	4631      	mov	r1, r6
 8010584:	4628      	mov	r0, r5
 8010586:	47b8      	blx	r7
 8010588:	3001      	adds	r0, #1
 801058a:	f43f ae38 	beq.w	80101fe <_printf_float+0xc2>
 801058e:	f108 0801 	add.w	r8, r8, #1
 8010592:	68e3      	ldr	r3, [r4, #12]
 8010594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010596:	1a5b      	subs	r3, r3, r1
 8010598:	4543      	cmp	r3, r8
 801059a:	dcf0      	bgt.n	801057e <_printf_float+0x442>
 801059c:	e6fa      	b.n	8010394 <_printf_float+0x258>
 801059e:	f04f 0800 	mov.w	r8, #0
 80105a2:	f104 0919 	add.w	r9, r4, #25
 80105a6:	e7f4      	b.n	8010592 <_printf_float+0x456>

080105a8 <_printf_common>:
 80105a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105ac:	4616      	mov	r6, r2
 80105ae:	4699      	mov	r9, r3
 80105b0:	688a      	ldr	r2, [r1, #8]
 80105b2:	690b      	ldr	r3, [r1, #16]
 80105b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80105b8:	4293      	cmp	r3, r2
 80105ba:	bfb8      	it	lt
 80105bc:	4613      	movlt	r3, r2
 80105be:	6033      	str	r3, [r6, #0]
 80105c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80105c4:	4607      	mov	r7, r0
 80105c6:	460c      	mov	r4, r1
 80105c8:	b10a      	cbz	r2, 80105ce <_printf_common+0x26>
 80105ca:	3301      	adds	r3, #1
 80105cc:	6033      	str	r3, [r6, #0]
 80105ce:	6823      	ldr	r3, [r4, #0]
 80105d0:	0699      	lsls	r1, r3, #26
 80105d2:	bf42      	ittt	mi
 80105d4:	6833      	ldrmi	r3, [r6, #0]
 80105d6:	3302      	addmi	r3, #2
 80105d8:	6033      	strmi	r3, [r6, #0]
 80105da:	6825      	ldr	r5, [r4, #0]
 80105dc:	f015 0506 	ands.w	r5, r5, #6
 80105e0:	d106      	bne.n	80105f0 <_printf_common+0x48>
 80105e2:	f104 0a19 	add.w	sl, r4, #25
 80105e6:	68e3      	ldr	r3, [r4, #12]
 80105e8:	6832      	ldr	r2, [r6, #0]
 80105ea:	1a9b      	subs	r3, r3, r2
 80105ec:	42ab      	cmp	r3, r5
 80105ee:	dc26      	bgt.n	801063e <_printf_common+0x96>
 80105f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80105f4:	1e13      	subs	r3, r2, #0
 80105f6:	6822      	ldr	r2, [r4, #0]
 80105f8:	bf18      	it	ne
 80105fa:	2301      	movne	r3, #1
 80105fc:	0692      	lsls	r2, r2, #26
 80105fe:	d42b      	bmi.n	8010658 <_printf_common+0xb0>
 8010600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010604:	4649      	mov	r1, r9
 8010606:	4638      	mov	r0, r7
 8010608:	47c0      	blx	r8
 801060a:	3001      	adds	r0, #1
 801060c:	d01e      	beq.n	801064c <_printf_common+0xa4>
 801060e:	6823      	ldr	r3, [r4, #0]
 8010610:	68e5      	ldr	r5, [r4, #12]
 8010612:	6832      	ldr	r2, [r6, #0]
 8010614:	f003 0306 	and.w	r3, r3, #6
 8010618:	2b04      	cmp	r3, #4
 801061a:	bf08      	it	eq
 801061c:	1aad      	subeq	r5, r5, r2
 801061e:	68a3      	ldr	r3, [r4, #8]
 8010620:	6922      	ldr	r2, [r4, #16]
 8010622:	bf0c      	ite	eq
 8010624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010628:	2500      	movne	r5, #0
 801062a:	4293      	cmp	r3, r2
 801062c:	bfc4      	itt	gt
 801062e:	1a9b      	subgt	r3, r3, r2
 8010630:	18ed      	addgt	r5, r5, r3
 8010632:	2600      	movs	r6, #0
 8010634:	341a      	adds	r4, #26
 8010636:	42b5      	cmp	r5, r6
 8010638:	d11a      	bne.n	8010670 <_printf_common+0xc8>
 801063a:	2000      	movs	r0, #0
 801063c:	e008      	b.n	8010650 <_printf_common+0xa8>
 801063e:	2301      	movs	r3, #1
 8010640:	4652      	mov	r2, sl
 8010642:	4649      	mov	r1, r9
 8010644:	4638      	mov	r0, r7
 8010646:	47c0      	blx	r8
 8010648:	3001      	adds	r0, #1
 801064a:	d103      	bne.n	8010654 <_printf_common+0xac>
 801064c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010654:	3501      	adds	r5, #1
 8010656:	e7c6      	b.n	80105e6 <_printf_common+0x3e>
 8010658:	18e1      	adds	r1, r4, r3
 801065a:	1c5a      	adds	r2, r3, #1
 801065c:	2030      	movs	r0, #48	; 0x30
 801065e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010662:	4422      	add	r2, r4
 8010664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801066c:	3302      	adds	r3, #2
 801066e:	e7c7      	b.n	8010600 <_printf_common+0x58>
 8010670:	2301      	movs	r3, #1
 8010672:	4622      	mov	r2, r4
 8010674:	4649      	mov	r1, r9
 8010676:	4638      	mov	r0, r7
 8010678:	47c0      	blx	r8
 801067a:	3001      	adds	r0, #1
 801067c:	d0e6      	beq.n	801064c <_printf_common+0xa4>
 801067e:	3601      	adds	r6, #1
 8010680:	e7d9      	b.n	8010636 <_printf_common+0x8e>
	...

08010684 <_printf_i>:
 8010684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010688:	460c      	mov	r4, r1
 801068a:	4691      	mov	r9, r2
 801068c:	7e27      	ldrb	r7, [r4, #24]
 801068e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010690:	2f78      	cmp	r7, #120	; 0x78
 8010692:	4680      	mov	r8, r0
 8010694:	469a      	mov	sl, r3
 8010696:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801069a:	d807      	bhi.n	80106ac <_printf_i+0x28>
 801069c:	2f62      	cmp	r7, #98	; 0x62
 801069e:	d80a      	bhi.n	80106b6 <_printf_i+0x32>
 80106a0:	2f00      	cmp	r7, #0
 80106a2:	f000 80d8 	beq.w	8010856 <_printf_i+0x1d2>
 80106a6:	2f58      	cmp	r7, #88	; 0x58
 80106a8:	f000 80a3 	beq.w	80107f2 <_printf_i+0x16e>
 80106ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80106b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80106b4:	e03a      	b.n	801072c <_printf_i+0xa8>
 80106b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80106ba:	2b15      	cmp	r3, #21
 80106bc:	d8f6      	bhi.n	80106ac <_printf_i+0x28>
 80106be:	a001      	add	r0, pc, #4	; (adr r0, 80106c4 <_printf_i+0x40>)
 80106c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80106c4:	0801071d 	.word	0x0801071d
 80106c8:	08010731 	.word	0x08010731
 80106cc:	080106ad 	.word	0x080106ad
 80106d0:	080106ad 	.word	0x080106ad
 80106d4:	080106ad 	.word	0x080106ad
 80106d8:	080106ad 	.word	0x080106ad
 80106dc:	08010731 	.word	0x08010731
 80106e0:	080106ad 	.word	0x080106ad
 80106e4:	080106ad 	.word	0x080106ad
 80106e8:	080106ad 	.word	0x080106ad
 80106ec:	080106ad 	.word	0x080106ad
 80106f0:	0801083d 	.word	0x0801083d
 80106f4:	08010761 	.word	0x08010761
 80106f8:	0801081f 	.word	0x0801081f
 80106fc:	080106ad 	.word	0x080106ad
 8010700:	080106ad 	.word	0x080106ad
 8010704:	0801085f 	.word	0x0801085f
 8010708:	080106ad 	.word	0x080106ad
 801070c:	08010761 	.word	0x08010761
 8010710:	080106ad 	.word	0x080106ad
 8010714:	080106ad 	.word	0x080106ad
 8010718:	08010827 	.word	0x08010827
 801071c:	680b      	ldr	r3, [r1, #0]
 801071e:	1d1a      	adds	r2, r3, #4
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	600a      	str	r2, [r1, #0]
 8010724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801072c:	2301      	movs	r3, #1
 801072e:	e0a3      	b.n	8010878 <_printf_i+0x1f4>
 8010730:	6825      	ldr	r5, [r4, #0]
 8010732:	6808      	ldr	r0, [r1, #0]
 8010734:	062e      	lsls	r6, r5, #24
 8010736:	f100 0304 	add.w	r3, r0, #4
 801073a:	d50a      	bpl.n	8010752 <_printf_i+0xce>
 801073c:	6805      	ldr	r5, [r0, #0]
 801073e:	600b      	str	r3, [r1, #0]
 8010740:	2d00      	cmp	r5, #0
 8010742:	da03      	bge.n	801074c <_printf_i+0xc8>
 8010744:	232d      	movs	r3, #45	; 0x2d
 8010746:	426d      	negs	r5, r5
 8010748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801074c:	485e      	ldr	r0, [pc, #376]	; (80108c8 <_printf_i+0x244>)
 801074e:	230a      	movs	r3, #10
 8010750:	e019      	b.n	8010786 <_printf_i+0x102>
 8010752:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010756:	6805      	ldr	r5, [r0, #0]
 8010758:	600b      	str	r3, [r1, #0]
 801075a:	bf18      	it	ne
 801075c:	b22d      	sxthne	r5, r5
 801075e:	e7ef      	b.n	8010740 <_printf_i+0xbc>
 8010760:	680b      	ldr	r3, [r1, #0]
 8010762:	6825      	ldr	r5, [r4, #0]
 8010764:	1d18      	adds	r0, r3, #4
 8010766:	6008      	str	r0, [r1, #0]
 8010768:	0628      	lsls	r0, r5, #24
 801076a:	d501      	bpl.n	8010770 <_printf_i+0xec>
 801076c:	681d      	ldr	r5, [r3, #0]
 801076e:	e002      	b.n	8010776 <_printf_i+0xf2>
 8010770:	0669      	lsls	r1, r5, #25
 8010772:	d5fb      	bpl.n	801076c <_printf_i+0xe8>
 8010774:	881d      	ldrh	r5, [r3, #0]
 8010776:	4854      	ldr	r0, [pc, #336]	; (80108c8 <_printf_i+0x244>)
 8010778:	2f6f      	cmp	r7, #111	; 0x6f
 801077a:	bf0c      	ite	eq
 801077c:	2308      	moveq	r3, #8
 801077e:	230a      	movne	r3, #10
 8010780:	2100      	movs	r1, #0
 8010782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010786:	6866      	ldr	r6, [r4, #4]
 8010788:	60a6      	str	r6, [r4, #8]
 801078a:	2e00      	cmp	r6, #0
 801078c:	bfa2      	ittt	ge
 801078e:	6821      	ldrge	r1, [r4, #0]
 8010790:	f021 0104 	bicge.w	r1, r1, #4
 8010794:	6021      	strge	r1, [r4, #0]
 8010796:	b90d      	cbnz	r5, 801079c <_printf_i+0x118>
 8010798:	2e00      	cmp	r6, #0
 801079a:	d04d      	beq.n	8010838 <_printf_i+0x1b4>
 801079c:	4616      	mov	r6, r2
 801079e:	fbb5 f1f3 	udiv	r1, r5, r3
 80107a2:	fb03 5711 	mls	r7, r3, r1, r5
 80107a6:	5dc7      	ldrb	r7, [r0, r7]
 80107a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80107ac:	462f      	mov	r7, r5
 80107ae:	42bb      	cmp	r3, r7
 80107b0:	460d      	mov	r5, r1
 80107b2:	d9f4      	bls.n	801079e <_printf_i+0x11a>
 80107b4:	2b08      	cmp	r3, #8
 80107b6:	d10b      	bne.n	80107d0 <_printf_i+0x14c>
 80107b8:	6823      	ldr	r3, [r4, #0]
 80107ba:	07df      	lsls	r7, r3, #31
 80107bc:	d508      	bpl.n	80107d0 <_printf_i+0x14c>
 80107be:	6923      	ldr	r3, [r4, #16]
 80107c0:	6861      	ldr	r1, [r4, #4]
 80107c2:	4299      	cmp	r1, r3
 80107c4:	bfde      	ittt	le
 80107c6:	2330      	movle	r3, #48	; 0x30
 80107c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80107cc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80107d0:	1b92      	subs	r2, r2, r6
 80107d2:	6122      	str	r2, [r4, #16]
 80107d4:	f8cd a000 	str.w	sl, [sp]
 80107d8:	464b      	mov	r3, r9
 80107da:	aa03      	add	r2, sp, #12
 80107dc:	4621      	mov	r1, r4
 80107de:	4640      	mov	r0, r8
 80107e0:	f7ff fee2 	bl	80105a8 <_printf_common>
 80107e4:	3001      	adds	r0, #1
 80107e6:	d14c      	bne.n	8010882 <_printf_i+0x1fe>
 80107e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107ec:	b004      	add	sp, #16
 80107ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107f2:	4835      	ldr	r0, [pc, #212]	; (80108c8 <_printf_i+0x244>)
 80107f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80107f8:	6823      	ldr	r3, [r4, #0]
 80107fa:	680e      	ldr	r6, [r1, #0]
 80107fc:	061f      	lsls	r7, r3, #24
 80107fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8010802:	600e      	str	r6, [r1, #0]
 8010804:	d514      	bpl.n	8010830 <_printf_i+0x1ac>
 8010806:	07d9      	lsls	r1, r3, #31
 8010808:	bf44      	itt	mi
 801080a:	f043 0320 	orrmi.w	r3, r3, #32
 801080e:	6023      	strmi	r3, [r4, #0]
 8010810:	b91d      	cbnz	r5, 801081a <_printf_i+0x196>
 8010812:	6823      	ldr	r3, [r4, #0]
 8010814:	f023 0320 	bic.w	r3, r3, #32
 8010818:	6023      	str	r3, [r4, #0]
 801081a:	2310      	movs	r3, #16
 801081c:	e7b0      	b.n	8010780 <_printf_i+0xfc>
 801081e:	6823      	ldr	r3, [r4, #0]
 8010820:	f043 0320 	orr.w	r3, r3, #32
 8010824:	6023      	str	r3, [r4, #0]
 8010826:	2378      	movs	r3, #120	; 0x78
 8010828:	4828      	ldr	r0, [pc, #160]	; (80108cc <_printf_i+0x248>)
 801082a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801082e:	e7e3      	b.n	80107f8 <_printf_i+0x174>
 8010830:	065e      	lsls	r6, r3, #25
 8010832:	bf48      	it	mi
 8010834:	b2ad      	uxthmi	r5, r5
 8010836:	e7e6      	b.n	8010806 <_printf_i+0x182>
 8010838:	4616      	mov	r6, r2
 801083a:	e7bb      	b.n	80107b4 <_printf_i+0x130>
 801083c:	680b      	ldr	r3, [r1, #0]
 801083e:	6826      	ldr	r6, [r4, #0]
 8010840:	6960      	ldr	r0, [r4, #20]
 8010842:	1d1d      	adds	r5, r3, #4
 8010844:	600d      	str	r5, [r1, #0]
 8010846:	0635      	lsls	r5, r6, #24
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	d501      	bpl.n	8010850 <_printf_i+0x1cc>
 801084c:	6018      	str	r0, [r3, #0]
 801084e:	e002      	b.n	8010856 <_printf_i+0x1d2>
 8010850:	0671      	lsls	r1, r6, #25
 8010852:	d5fb      	bpl.n	801084c <_printf_i+0x1c8>
 8010854:	8018      	strh	r0, [r3, #0]
 8010856:	2300      	movs	r3, #0
 8010858:	6123      	str	r3, [r4, #16]
 801085a:	4616      	mov	r6, r2
 801085c:	e7ba      	b.n	80107d4 <_printf_i+0x150>
 801085e:	680b      	ldr	r3, [r1, #0]
 8010860:	1d1a      	adds	r2, r3, #4
 8010862:	600a      	str	r2, [r1, #0]
 8010864:	681e      	ldr	r6, [r3, #0]
 8010866:	6862      	ldr	r2, [r4, #4]
 8010868:	2100      	movs	r1, #0
 801086a:	4630      	mov	r0, r6
 801086c:	f7ef fcc8 	bl	8000200 <memchr>
 8010870:	b108      	cbz	r0, 8010876 <_printf_i+0x1f2>
 8010872:	1b80      	subs	r0, r0, r6
 8010874:	6060      	str	r0, [r4, #4]
 8010876:	6863      	ldr	r3, [r4, #4]
 8010878:	6123      	str	r3, [r4, #16]
 801087a:	2300      	movs	r3, #0
 801087c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010880:	e7a8      	b.n	80107d4 <_printf_i+0x150>
 8010882:	6923      	ldr	r3, [r4, #16]
 8010884:	4632      	mov	r2, r6
 8010886:	4649      	mov	r1, r9
 8010888:	4640      	mov	r0, r8
 801088a:	47d0      	blx	sl
 801088c:	3001      	adds	r0, #1
 801088e:	d0ab      	beq.n	80107e8 <_printf_i+0x164>
 8010890:	6823      	ldr	r3, [r4, #0]
 8010892:	079b      	lsls	r3, r3, #30
 8010894:	d413      	bmi.n	80108be <_printf_i+0x23a>
 8010896:	68e0      	ldr	r0, [r4, #12]
 8010898:	9b03      	ldr	r3, [sp, #12]
 801089a:	4298      	cmp	r0, r3
 801089c:	bfb8      	it	lt
 801089e:	4618      	movlt	r0, r3
 80108a0:	e7a4      	b.n	80107ec <_printf_i+0x168>
 80108a2:	2301      	movs	r3, #1
 80108a4:	4632      	mov	r2, r6
 80108a6:	4649      	mov	r1, r9
 80108a8:	4640      	mov	r0, r8
 80108aa:	47d0      	blx	sl
 80108ac:	3001      	adds	r0, #1
 80108ae:	d09b      	beq.n	80107e8 <_printf_i+0x164>
 80108b0:	3501      	adds	r5, #1
 80108b2:	68e3      	ldr	r3, [r4, #12]
 80108b4:	9903      	ldr	r1, [sp, #12]
 80108b6:	1a5b      	subs	r3, r3, r1
 80108b8:	42ab      	cmp	r3, r5
 80108ba:	dcf2      	bgt.n	80108a2 <_printf_i+0x21e>
 80108bc:	e7eb      	b.n	8010896 <_printf_i+0x212>
 80108be:	2500      	movs	r5, #0
 80108c0:	f104 0619 	add.w	r6, r4, #25
 80108c4:	e7f5      	b.n	80108b2 <_printf_i+0x22e>
 80108c6:	bf00      	nop
 80108c8:	08014f96 	.word	0x08014f96
 80108cc:	08014fa7 	.word	0x08014fa7

080108d0 <_scanf_float>:
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	b087      	sub	sp, #28
 80108d6:	4617      	mov	r7, r2
 80108d8:	9303      	str	r3, [sp, #12]
 80108da:	688b      	ldr	r3, [r1, #8]
 80108dc:	1e5a      	subs	r2, r3, #1
 80108de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80108e2:	bf83      	ittte	hi
 80108e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80108e8:	195b      	addhi	r3, r3, r5
 80108ea:	9302      	strhi	r3, [sp, #8]
 80108ec:	2300      	movls	r3, #0
 80108ee:	bf86      	itte	hi
 80108f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80108f4:	608b      	strhi	r3, [r1, #8]
 80108f6:	9302      	strls	r3, [sp, #8]
 80108f8:	680b      	ldr	r3, [r1, #0]
 80108fa:	468b      	mov	fp, r1
 80108fc:	2500      	movs	r5, #0
 80108fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010902:	f84b 3b1c 	str.w	r3, [fp], #28
 8010906:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801090a:	4680      	mov	r8, r0
 801090c:	460c      	mov	r4, r1
 801090e:	465e      	mov	r6, fp
 8010910:	46aa      	mov	sl, r5
 8010912:	46a9      	mov	r9, r5
 8010914:	9501      	str	r5, [sp, #4]
 8010916:	68a2      	ldr	r2, [r4, #8]
 8010918:	b152      	cbz	r2, 8010930 <_scanf_float+0x60>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	2b4e      	cmp	r3, #78	; 0x4e
 8010920:	d864      	bhi.n	80109ec <_scanf_float+0x11c>
 8010922:	2b40      	cmp	r3, #64	; 0x40
 8010924:	d83c      	bhi.n	80109a0 <_scanf_float+0xd0>
 8010926:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801092a:	b2c8      	uxtb	r0, r1
 801092c:	280e      	cmp	r0, #14
 801092e:	d93a      	bls.n	80109a6 <_scanf_float+0xd6>
 8010930:	f1b9 0f00 	cmp.w	r9, #0
 8010934:	d003      	beq.n	801093e <_scanf_float+0x6e>
 8010936:	6823      	ldr	r3, [r4, #0]
 8010938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801093c:	6023      	str	r3, [r4, #0]
 801093e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010942:	f1ba 0f01 	cmp.w	sl, #1
 8010946:	f200 8113 	bhi.w	8010b70 <_scanf_float+0x2a0>
 801094a:	455e      	cmp	r6, fp
 801094c:	f200 8105 	bhi.w	8010b5a <_scanf_float+0x28a>
 8010950:	2501      	movs	r5, #1
 8010952:	4628      	mov	r0, r5
 8010954:	b007      	add	sp, #28
 8010956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801095a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801095e:	2a0d      	cmp	r2, #13
 8010960:	d8e6      	bhi.n	8010930 <_scanf_float+0x60>
 8010962:	a101      	add	r1, pc, #4	; (adr r1, 8010968 <_scanf_float+0x98>)
 8010964:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010968:	08010aa7 	.word	0x08010aa7
 801096c:	08010931 	.word	0x08010931
 8010970:	08010931 	.word	0x08010931
 8010974:	08010931 	.word	0x08010931
 8010978:	08010b07 	.word	0x08010b07
 801097c:	08010adf 	.word	0x08010adf
 8010980:	08010931 	.word	0x08010931
 8010984:	08010931 	.word	0x08010931
 8010988:	08010ab5 	.word	0x08010ab5
 801098c:	08010931 	.word	0x08010931
 8010990:	08010931 	.word	0x08010931
 8010994:	08010931 	.word	0x08010931
 8010998:	08010931 	.word	0x08010931
 801099c:	08010a6d 	.word	0x08010a6d
 80109a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80109a4:	e7db      	b.n	801095e <_scanf_float+0x8e>
 80109a6:	290e      	cmp	r1, #14
 80109a8:	d8c2      	bhi.n	8010930 <_scanf_float+0x60>
 80109aa:	a001      	add	r0, pc, #4	; (adr r0, 80109b0 <_scanf_float+0xe0>)
 80109ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80109b0:	08010a5f 	.word	0x08010a5f
 80109b4:	08010931 	.word	0x08010931
 80109b8:	08010a5f 	.word	0x08010a5f
 80109bc:	08010af3 	.word	0x08010af3
 80109c0:	08010931 	.word	0x08010931
 80109c4:	08010a0d 	.word	0x08010a0d
 80109c8:	08010a49 	.word	0x08010a49
 80109cc:	08010a49 	.word	0x08010a49
 80109d0:	08010a49 	.word	0x08010a49
 80109d4:	08010a49 	.word	0x08010a49
 80109d8:	08010a49 	.word	0x08010a49
 80109dc:	08010a49 	.word	0x08010a49
 80109e0:	08010a49 	.word	0x08010a49
 80109e4:	08010a49 	.word	0x08010a49
 80109e8:	08010a49 	.word	0x08010a49
 80109ec:	2b6e      	cmp	r3, #110	; 0x6e
 80109ee:	d809      	bhi.n	8010a04 <_scanf_float+0x134>
 80109f0:	2b60      	cmp	r3, #96	; 0x60
 80109f2:	d8b2      	bhi.n	801095a <_scanf_float+0x8a>
 80109f4:	2b54      	cmp	r3, #84	; 0x54
 80109f6:	d077      	beq.n	8010ae8 <_scanf_float+0x218>
 80109f8:	2b59      	cmp	r3, #89	; 0x59
 80109fa:	d199      	bne.n	8010930 <_scanf_float+0x60>
 80109fc:	2d07      	cmp	r5, #7
 80109fe:	d197      	bne.n	8010930 <_scanf_float+0x60>
 8010a00:	2508      	movs	r5, #8
 8010a02:	e029      	b.n	8010a58 <_scanf_float+0x188>
 8010a04:	2b74      	cmp	r3, #116	; 0x74
 8010a06:	d06f      	beq.n	8010ae8 <_scanf_float+0x218>
 8010a08:	2b79      	cmp	r3, #121	; 0x79
 8010a0a:	e7f6      	b.n	80109fa <_scanf_float+0x12a>
 8010a0c:	6821      	ldr	r1, [r4, #0]
 8010a0e:	05c8      	lsls	r0, r1, #23
 8010a10:	d51a      	bpl.n	8010a48 <_scanf_float+0x178>
 8010a12:	9b02      	ldr	r3, [sp, #8]
 8010a14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010a18:	6021      	str	r1, [r4, #0]
 8010a1a:	f109 0901 	add.w	r9, r9, #1
 8010a1e:	b11b      	cbz	r3, 8010a28 <_scanf_float+0x158>
 8010a20:	3b01      	subs	r3, #1
 8010a22:	3201      	adds	r2, #1
 8010a24:	9302      	str	r3, [sp, #8]
 8010a26:	60a2      	str	r2, [r4, #8]
 8010a28:	68a3      	ldr	r3, [r4, #8]
 8010a2a:	3b01      	subs	r3, #1
 8010a2c:	60a3      	str	r3, [r4, #8]
 8010a2e:	6923      	ldr	r3, [r4, #16]
 8010a30:	3301      	adds	r3, #1
 8010a32:	6123      	str	r3, [r4, #16]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	3b01      	subs	r3, #1
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	607b      	str	r3, [r7, #4]
 8010a3c:	f340 8084 	ble.w	8010b48 <_scanf_float+0x278>
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	3301      	adds	r3, #1
 8010a44:	603b      	str	r3, [r7, #0]
 8010a46:	e766      	b.n	8010916 <_scanf_float+0x46>
 8010a48:	eb1a 0f05 	cmn.w	sl, r5
 8010a4c:	f47f af70 	bne.w	8010930 <_scanf_float+0x60>
 8010a50:	6822      	ldr	r2, [r4, #0]
 8010a52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010a56:	6022      	str	r2, [r4, #0]
 8010a58:	f806 3b01 	strb.w	r3, [r6], #1
 8010a5c:	e7e4      	b.n	8010a28 <_scanf_float+0x158>
 8010a5e:	6822      	ldr	r2, [r4, #0]
 8010a60:	0610      	lsls	r0, r2, #24
 8010a62:	f57f af65 	bpl.w	8010930 <_scanf_float+0x60>
 8010a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a6a:	e7f4      	b.n	8010a56 <_scanf_float+0x186>
 8010a6c:	f1ba 0f00 	cmp.w	sl, #0
 8010a70:	d10e      	bne.n	8010a90 <_scanf_float+0x1c0>
 8010a72:	f1b9 0f00 	cmp.w	r9, #0
 8010a76:	d10e      	bne.n	8010a96 <_scanf_float+0x1c6>
 8010a78:	6822      	ldr	r2, [r4, #0]
 8010a7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010a7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010a82:	d108      	bne.n	8010a96 <_scanf_float+0x1c6>
 8010a84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a88:	6022      	str	r2, [r4, #0]
 8010a8a:	f04f 0a01 	mov.w	sl, #1
 8010a8e:	e7e3      	b.n	8010a58 <_scanf_float+0x188>
 8010a90:	f1ba 0f02 	cmp.w	sl, #2
 8010a94:	d055      	beq.n	8010b42 <_scanf_float+0x272>
 8010a96:	2d01      	cmp	r5, #1
 8010a98:	d002      	beq.n	8010aa0 <_scanf_float+0x1d0>
 8010a9a:	2d04      	cmp	r5, #4
 8010a9c:	f47f af48 	bne.w	8010930 <_scanf_float+0x60>
 8010aa0:	3501      	adds	r5, #1
 8010aa2:	b2ed      	uxtb	r5, r5
 8010aa4:	e7d8      	b.n	8010a58 <_scanf_float+0x188>
 8010aa6:	f1ba 0f01 	cmp.w	sl, #1
 8010aaa:	f47f af41 	bne.w	8010930 <_scanf_float+0x60>
 8010aae:	f04f 0a02 	mov.w	sl, #2
 8010ab2:	e7d1      	b.n	8010a58 <_scanf_float+0x188>
 8010ab4:	b97d      	cbnz	r5, 8010ad6 <_scanf_float+0x206>
 8010ab6:	f1b9 0f00 	cmp.w	r9, #0
 8010aba:	f47f af3c 	bne.w	8010936 <_scanf_float+0x66>
 8010abe:	6822      	ldr	r2, [r4, #0]
 8010ac0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010ac4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010ac8:	f47f af39 	bne.w	801093e <_scanf_float+0x6e>
 8010acc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010ad0:	6022      	str	r2, [r4, #0]
 8010ad2:	2501      	movs	r5, #1
 8010ad4:	e7c0      	b.n	8010a58 <_scanf_float+0x188>
 8010ad6:	2d03      	cmp	r5, #3
 8010ad8:	d0e2      	beq.n	8010aa0 <_scanf_float+0x1d0>
 8010ada:	2d05      	cmp	r5, #5
 8010adc:	e7de      	b.n	8010a9c <_scanf_float+0x1cc>
 8010ade:	2d02      	cmp	r5, #2
 8010ae0:	f47f af26 	bne.w	8010930 <_scanf_float+0x60>
 8010ae4:	2503      	movs	r5, #3
 8010ae6:	e7b7      	b.n	8010a58 <_scanf_float+0x188>
 8010ae8:	2d06      	cmp	r5, #6
 8010aea:	f47f af21 	bne.w	8010930 <_scanf_float+0x60>
 8010aee:	2507      	movs	r5, #7
 8010af0:	e7b2      	b.n	8010a58 <_scanf_float+0x188>
 8010af2:	6822      	ldr	r2, [r4, #0]
 8010af4:	0591      	lsls	r1, r2, #22
 8010af6:	f57f af1b 	bpl.w	8010930 <_scanf_float+0x60>
 8010afa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010afe:	6022      	str	r2, [r4, #0]
 8010b00:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b04:	e7a8      	b.n	8010a58 <_scanf_float+0x188>
 8010b06:	6822      	ldr	r2, [r4, #0]
 8010b08:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010b0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010b10:	d006      	beq.n	8010b20 <_scanf_float+0x250>
 8010b12:	0550      	lsls	r0, r2, #21
 8010b14:	f57f af0c 	bpl.w	8010930 <_scanf_float+0x60>
 8010b18:	f1b9 0f00 	cmp.w	r9, #0
 8010b1c:	f43f af0f 	beq.w	801093e <_scanf_float+0x6e>
 8010b20:	0591      	lsls	r1, r2, #22
 8010b22:	bf58      	it	pl
 8010b24:	9901      	ldrpl	r1, [sp, #4]
 8010b26:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b2a:	bf58      	it	pl
 8010b2c:	eba9 0101 	subpl.w	r1, r9, r1
 8010b30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010b34:	bf58      	it	pl
 8010b36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010b3a:	6022      	str	r2, [r4, #0]
 8010b3c:	f04f 0900 	mov.w	r9, #0
 8010b40:	e78a      	b.n	8010a58 <_scanf_float+0x188>
 8010b42:	f04f 0a03 	mov.w	sl, #3
 8010b46:	e787      	b.n	8010a58 <_scanf_float+0x188>
 8010b48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010b4c:	4639      	mov	r1, r7
 8010b4e:	4640      	mov	r0, r8
 8010b50:	4798      	blx	r3
 8010b52:	2800      	cmp	r0, #0
 8010b54:	f43f aedf 	beq.w	8010916 <_scanf_float+0x46>
 8010b58:	e6ea      	b.n	8010930 <_scanf_float+0x60>
 8010b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b62:	463a      	mov	r2, r7
 8010b64:	4640      	mov	r0, r8
 8010b66:	4798      	blx	r3
 8010b68:	6923      	ldr	r3, [r4, #16]
 8010b6a:	3b01      	subs	r3, #1
 8010b6c:	6123      	str	r3, [r4, #16]
 8010b6e:	e6ec      	b.n	801094a <_scanf_float+0x7a>
 8010b70:	1e6b      	subs	r3, r5, #1
 8010b72:	2b06      	cmp	r3, #6
 8010b74:	d825      	bhi.n	8010bc2 <_scanf_float+0x2f2>
 8010b76:	2d02      	cmp	r5, #2
 8010b78:	d836      	bhi.n	8010be8 <_scanf_float+0x318>
 8010b7a:	455e      	cmp	r6, fp
 8010b7c:	f67f aee8 	bls.w	8010950 <_scanf_float+0x80>
 8010b80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b88:	463a      	mov	r2, r7
 8010b8a:	4640      	mov	r0, r8
 8010b8c:	4798      	blx	r3
 8010b8e:	6923      	ldr	r3, [r4, #16]
 8010b90:	3b01      	subs	r3, #1
 8010b92:	6123      	str	r3, [r4, #16]
 8010b94:	e7f1      	b.n	8010b7a <_scanf_float+0x2aa>
 8010b96:	9802      	ldr	r0, [sp, #8]
 8010b98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b9c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010ba0:	9002      	str	r0, [sp, #8]
 8010ba2:	463a      	mov	r2, r7
 8010ba4:	4640      	mov	r0, r8
 8010ba6:	4798      	blx	r3
 8010ba8:	6923      	ldr	r3, [r4, #16]
 8010baa:	3b01      	subs	r3, #1
 8010bac:	6123      	str	r3, [r4, #16]
 8010bae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010bb2:	fa5f fa8a 	uxtb.w	sl, sl
 8010bb6:	f1ba 0f02 	cmp.w	sl, #2
 8010bba:	d1ec      	bne.n	8010b96 <_scanf_float+0x2c6>
 8010bbc:	3d03      	subs	r5, #3
 8010bbe:	b2ed      	uxtb	r5, r5
 8010bc0:	1b76      	subs	r6, r6, r5
 8010bc2:	6823      	ldr	r3, [r4, #0]
 8010bc4:	05da      	lsls	r2, r3, #23
 8010bc6:	d52f      	bpl.n	8010c28 <_scanf_float+0x358>
 8010bc8:	055b      	lsls	r3, r3, #21
 8010bca:	d510      	bpl.n	8010bee <_scanf_float+0x31e>
 8010bcc:	455e      	cmp	r6, fp
 8010bce:	f67f aebf 	bls.w	8010950 <_scanf_float+0x80>
 8010bd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010bda:	463a      	mov	r2, r7
 8010bdc:	4640      	mov	r0, r8
 8010bde:	4798      	blx	r3
 8010be0:	6923      	ldr	r3, [r4, #16]
 8010be2:	3b01      	subs	r3, #1
 8010be4:	6123      	str	r3, [r4, #16]
 8010be6:	e7f1      	b.n	8010bcc <_scanf_float+0x2fc>
 8010be8:	46aa      	mov	sl, r5
 8010bea:	9602      	str	r6, [sp, #8]
 8010bec:	e7df      	b.n	8010bae <_scanf_float+0x2de>
 8010bee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010bf2:	6923      	ldr	r3, [r4, #16]
 8010bf4:	2965      	cmp	r1, #101	; 0x65
 8010bf6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010bfa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8010bfe:	6123      	str	r3, [r4, #16]
 8010c00:	d00c      	beq.n	8010c1c <_scanf_float+0x34c>
 8010c02:	2945      	cmp	r1, #69	; 0x45
 8010c04:	d00a      	beq.n	8010c1c <_scanf_float+0x34c>
 8010c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c0a:	463a      	mov	r2, r7
 8010c0c:	4640      	mov	r0, r8
 8010c0e:	4798      	blx	r3
 8010c10:	6923      	ldr	r3, [r4, #16]
 8010c12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010c16:	3b01      	subs	r3, #1
 8010c18:	1eb5      	subs	r5, r6, #2
 8010c1a:	6123      	str	r3, [r4, #16]
 8010c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c20:	463a      	mov	r2, r7
 8010c22:	4640      	mov	r0, r8
 8010c24:	4798      	blx	r3
 8010c26:	462e      	mov	r6, r5
 8010c28:	6825      	ldr	r5, [r4, #0]
 8010c2a:	f015 0510 	ands.w	r5, r5, #16
 8010c2e:	d158      	bne.n	8010ce2 <_scanf_float+0x412>
 8010c30:	7035      	strb	r5, [r6, #0]
 8010c32:	6823      	ldr	r3, [r4, #0]
 8010c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c3c:	d11c      	bne.n	8010c78 <_scanf_float+0x3a8>
 8010c3e:	9b01      	ldr	r3, [sp, #4]
 8010c40:	454b      	cmp	r3, r9
 8010c42:	eba3 0209 	sub.w	r2, r3, r9
 8010c46:	d124      	bne.n	8010c92 <_scanf_float+0x3c2>
 8010c48:	2200      	movs	r2, #0
 8010c4a:	4659      	mov	r1, fp
 8010c4c:	4640      	mov	r0, r8
 8010c4e:	f000 ff7d 	bl	8011b4c <_strtod_r>
 8010c52:	9b03      	ldr	r3, [sp, #12]
 8010c54:	6821      	ldr	r1, [r4, #0]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f011 0f02 	tst.w	r1, #2
 8010c5c:	ec57 6b10 	vmov	r6, r7, d0
 8010c60:	f103 0204 	add.w	r2, r3, #4
 8010c64:	d020      	beq.n	8010ca8 <_scanf_float+0x3d8>
 8010c66:	9903      	ldr	r1, [sp, #12]
 8010c68:	600a      	str	r2, [r1, #0]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	e9c3 6700 	strd	r6, r7, [r3]
 8010c70:	68e3      	ldr	r3, [r4, #12]
 8010c72:	3301      	adds	r3, #1
 8010c74:	60e3      	str	r3, [r4, #12]
 8010c76:	e66c      	b.n	8010952 <_scanf_float+0x82>
 8010c78:	9b04      	ldr	r3, [sp, #16]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d0e4      	beq.n	8010c48 <_scanf_float+0x378>
 8010c7e:	9905      	ldr	r1, [sp, #20]
 8010c80:	230a      	movs	r3, #10
 8010c82:	462a      	mov	r2, r5
 8010c84:	3101      	adds	r1, #1
 8010c86:	4640      	mov	r0, r8
 8010c88:	f000 ffea 	bl	8011c60 <_strtol_r>
 8010c8c:	9b04      	ldr	r3, [sp, #16]
 8010c8e:	9e05      	ldr	r6, [sp, #20]
 8010c90:	1ac2      	subs	r2, r0, r3
 8010c92:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010c96:	429e      	cmp	r6, r3
 8010c98:	bf28      	it	cs
 8010c9a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010c9e:	4912      	ldr	r1, [pc, #72]	; (8010ce8 <_scanf_float+0x418>)
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	f000 f90d 	bl	8010ec0 <siprintf>
 8010ca6:	e7cf      	b.n	8010c48 <_scanf_float+0x378>
 8010ca8:	f011 0f04 	tst.w	r1, #4
 8010cac:	9903      	ldr	r1, [sp, #12]
 8010cae:	600a      	str	r2, [r1, #0]
 8010cb0:	d1db      	bne.n	8010c6a <_scanf_float+0x39a>
 8010cb2:	f8d3 8000 	ldr.w	r8, [r3]
 8010cb6:	ee10 2a10 	vmov	r2, s0
 8010cba:	ee10 0a10 	vmov	r0, s0
 8010cbe:	463b      	mov	r3, r7
 8010cc0:	4639      	mov	r1, r7
 8010cc2:	f7ef ff43 	bl	8000b4c <__aeabi_dcmpun>
 8010cc6:	b128      	cbz	r0, 8010cd4 <_scanf_float+0x404>
 8010cc8:	4808      	ldr	r0, [pc, #32]	; (8010cec <_scanf_float+0x41c>)
 8010cca:	f000 f8af 	bl	8010e2c <nanf>
 8010cce:	ed88 0a00 	vstr	s0, [r8]
 8010cd2:	e7cd      	b.n	8010c70 <_scanf_float+0x3a0>
 8010cd4:	4630      	mov	r0, r6
 8010cd6:	4639      	mov	r1, r7
 8010cd8:	f7ef ff96 	bl	8000c08 <__aeabi_d2f>
 8010cdc:	f8c8 0000 	str.w	r0, [r8]
 8010ce0:	e7c6      	b.n	8010c70 <_scanf_float+0x3a0>
 8010ce2:	2500      	movs	r5, #0
 8010ce4:	e635      	b.n	8010952 <_scanf_float+0x82>
 8010ce6:	bf00      	nop
 8010ce8:	08014fb8 	.word	0x08014fb8
 8010cec:	08015430 	.word	0x08015430

08010cf0 <iprintf>:
 8010cf0:	b40f      	push	{r0, r1, r2, r3}
 8010cf2:	4b0a      	ldr	r3, [pc, #40]	; (8010d1c <iprintf+0x2c>)
 8010cf4:	b513      	push	{r0, r1, r4, lr}
 8010cf6:	681c      	ldr	r4, [r3, #0]
 8010cf8:	b124      	cbz	r4, 8010d04 <iprintf+0x14>
 8010cfa:	69a3      	ldr	r3, [r4, #24]
 8010cfc:	b913      	cbnz	r3, 8010d04 <iprintf+0x14>
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f002 f864 	bl	8012dcc <__sinit>
 8010d04:	ab05      	add	r3, sp, #20
 8010d06:	9a04      	ldr	r2, [sp, #16]
 8010d08:	68a1      	ldr	r1, [r4, #8]
 8010d0a:	9301      	str	r3, [sp, #4]
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f003 fb43 	bl	8014398 <_vfiprintf_r>
 8010d12:	b002      	add	sp, #8
 8010d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d18:	b004      	add	sp, #16
 8010d1a:	4770      	bx	lr
 8010d1c:	20000188 	.word	0x20000188

08010d20 <_puts_r>:
 8010d20:	b570      	push	{r4, r5, r6, lr}
 8010d22:	460e      	mov	r6, r1
 8010d24:	4605      	mov	r5, r0
 8010d26:	b118      	cbz	r0, 8010d30 <_puts_r+0x10>
 8010d28:	6983      	ldr	r3, [r0, #24]
 8010d2a:	b90b      	cbnz	r3, 8010d30 <_puts_r+0x10>
 8010d2c:	f002 f84e 	bl	8012dcc <__sinit>
 8010d30:	69ab      	ldr	r3, [r5, #24]
 8010d32:	68ac      	ldr	r4, [r5, #8]
 8010d34:	b913      	cbnz	r3, 8010d3c <_puts_r+0x1c>
 8010d36:	4628      	mov	r0, r5
 8010d38:	f002 f848 	bl	8012dcc <__sinit>
 8010d3c:	4b2c      	ldr	r3, [pc, #176]	; (8010df0 <_puts_r+0xd0>)
 8010d3e:	429c      	cmp	r4, r3
 8010d40:	d120      	bne.n	8010d84 <_puts_r+0x64>
 8010d42:	686c      	ldr	r4, [r5, #4]
 8010d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d46:	07db      	lsls	r3, r3, #31
 8010d48:	d405      	bmi.n	8010d56 <_puts_r+0x36>
 8010d4a:	89a3      	ldrh	r3, [r4, #12]
 8010d4c:	0598      	lsls	r0, r3, #22
 8010d4e:	d402      	bmi.n	8010d56 <_puts_r+0x36>
 8010d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d52:	f002 fc4c 	bl	80135ee <__retarget_lock_acquire_recursive>
 8010d56:	89a3      	ldrh	r3, [r4, #12]
 8010d58:	0719      	lsls	r1, r3, #28
 8010d5a:	d51d      	bpl.n	8010d98 <_puts_r+0x78>
 8010d5c:	6923      	ldr	r3, [r4, #16]
 8010d5e:	b1db      	cbz	r3, 8010d98 <_puts_r+0x78>
 8010d60:	3e01      	subs	r6, #1
 8010d62:	68a3      	ldr	r3, [r4, #8]
 8010d64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d68:	3b01      	subs	r3, #1
 8010d6a:	60a3      	str	r3, [r4, #8]
 8010d6c:	bb39      	cbnz	r1, 8010dbe <_puts_r+0x9e>
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	da38      	bge.n	8010de4 <_puts_r+0xc4>
 8010d72:	4622      	mov	r2, r4
 8010d74:	210a      	movs	r1, #10
 8010d76:	4628      	mov	r0, r5
 8010d78:	f000 ff74 	bl	8011c64 <__swbuf_r>
 8010d7c:	3001      	adds	r0, #1
 8010d7e:	d011      	beq.n	8010da4 <_puts_r+0x84>
 8010d80:	250a      	movs	r5, #10
 8010d82:	e011      	b.n	8010da8 <_puts_r+0x88>
 8010d84:	4b1b      	ldr	r3, [pc, #108]	; (8010df4 <_puts_r+0xd4>)
 8010d86:	429c      	cmp	r4, r3
 8010d88:	d101      	bne.n	8010d8e <_puts_r+0x6e>
 8010d8a:	68ac      	ldr	r4, [r5, #8]
 8010d8c:	e7da      	b.n	8010d44 <_puts_r+0x24>
 8010d8e:	4b1a      	ldr	r3, [pc, #104]	; (8010df8 <_puts_r+0xd8>)
 8010d90:	429c      	cmp	r4, r3
 8010d92:	bf08      	it	eq
 8010d94:	68ec      	ldreq	r4, [r5, #12]
 8010d96:	e7d5      	b.n	8010d44 <_puts_r+0x24>
 8010d98:	4621      	mov	r1, r4
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	f000 ffb4 	bl	8011d08 <__swsetup_r>
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d0dd      	beq.n	8010d60 <_puts_r+0x40>
 8010da4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010da8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010daa:	07da      	lsls	r2, r3, #31
 8010dac:	d405      	bmi.n	8010dba <_puts_r+0x9a>
 8010dae:	89a3      	ldrh	r3, [r4, #12]
 8010db0:	059b      	lsls	r3, r3, #22
 8010db2:	d402      	bmi.n	8010dba <_puts_r+0x9a>
 8010db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010db6:	f002 fc1c 	bl	80135f2 <__retarget_lock_release_recursive>
 8010dba:	4628      	mov	r0, r5
 8010dbc:	bd70      	pop	{r4, r5, r6, pc}
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	da04      	bge.n	8010dcc <_puts_r+0xac>
 8010dc2:	69a2      	ldr	r2, [r4, #24]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	dc06      	bgt.n	8010dd6 <_puts_r+0xb6>
 8010dc8:	290a      	cmp	r1, #10
 8010dca:	d004      	beq.n	8010dd6 <_puts_r+0xb6>
 8010dcc:	6823      	ldr	r3, [r4, #0]
 8010dce:	1c5a      	adds	r2, r3, #1
 8010dd0:	6022      	str	r2, [r4, #0]
 8010dd2:	7019      	strb	r1, [r3, #0]
 8010dd4:	e7c5      	b.n	8010d62 <_puts_r+0x42>
 8010dd6:	4622      	mov	r2, r4
 8010dd8:	4628      	mov	r0, r5
 8010dda:	f000 ff43 	bl	8011c64 <__swbuf_r>
 8010dde:	3001      	adds	r0, #1
 8010de0:	d1bf      	bne.n	8010d62 <_puts_r+0x42>
 8010de2:	e7df      	b.n	8010da4 <_puts_r+0x84>
 8010de4:	6823      	ldr	r3, [r4, #0]
 8010de6:	250a      	movs	r5, #10
 8010de8:	1c5a      	adds	r2, r3, #1
 8010dea:	6022      	str	r2, [r4, #0]
 8010dec:	701d      	strb	r5, [r3, #0]
 8010dee:	e7db      	b.n	8010da8 <_puts_r+0x88>
 8010df0:	080151c8 	.word	0x080151c8
 8010df4:	080151e8 	.word	0x080151e8
 8010df8:	080151a8 	.word	0x080151a8

08010dfc <puts>:
 8010dfc:	4b02      	ldr	r3, [pc, #8]	; (8010e08 <puts+0xc>)
 8010dfe:	4601      	mov	r1, r0
 8010e00:	6818      	ldr	r0, [r3, #0]
 8010e02:	f7ff bf8d 	b.w	8010d20 <_puts_r>
 8010e06:	bf00      	nop
 8010e08:	20000188 	.word	0x20000188

08010e0c <_sbrk_r>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	4d06      	ldr	r5, [pc, #24]	; (8010e28 <_sbrk_r+0x1c>)
 8010e10:	2300      	movs	r3, #0
 8010e12:	4604      	mov	r4, r0
 8010e14:	4608      	mov	r0, r1
 8010e16:	602b      	str	r3, [r5, #0]
 8010e18:	f7f1 ff74 	bl	8002d04 <_sbrk>
 8010e1c:	1c43      	adds	r3, r0, #1
 8010e1e:	d102      	bne.n	8010e26 <_sbrk_r+0x1a>
 8010e20:	682b      	ldr	r3, [r5, #0]
 8010e22:	b103      	cbz	r3, 8010e26 <_sbrk_r+0x1a>
 8010e24:	6023      	str	r3, [r4, #0]
 8010e26:	bd38      	pop	{r3, r4, r5, pc}
 8010e28:	20006434 	.word	0x20006434

08010e2c <nanf>:
 8010e2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010e34 <nanf+0x8>
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop
 8010e34:	7fc00000 	.word	0x7fc00000

08010e38 <_raise_r>:
 8010e38:	291f      	cmp	r1, #31
 8010e3a:	b538      	push	{r3, r4, r5, lr}
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	460d      	mov	r5, r1
 8010e40:	d904      	bls.n	8010e4c <_raise_r+0x14>
 8010e42:	2316      	movs	r3, #22
 8010e44:	6003      	str	r3, [r0, #0]
 8010e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e4a:	bd38      	pop	{r3, r4, r5, pc}
 8010e4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e4e:	b112      	cbz	r2, 8010e56 <_raise_r+0x1e>
 8010e50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e54:	b94b      	cbnz	r3, 8010e6a <_raise_r+0x32>
 8010e56:	4620      	mov	r0, r4
 8010e58:	f000 f830 	bl	8010ebc <_getpid_r>
 8010e5c:	462a      	mov	r2, r5
 8010e5e:	4601      	mov	r1, r0
 8010e60:	4620      	mov	r0, r4
 8010e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e66:	f000 b817 	b.w	8010e98 <_kill_r>
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d00a      	beq.n	8010e84 <_raise_r+0x4c>
 8010e6e:	1c59      	adds	r1, r3, #1
 8010e70:	d103      	bne.n	8010e7a <_raise_r+0x42>
 8010e72:	2316      	movs	r3, #22
 8010e74:	6003      	str	r3, [r0, #0]
 8010e76:	2001      	movs	r0, #1
 8010e78:	e7e7      	b.n	8010e4a <_raise_r+0x12>
 8010e7a:	2400      	movs	r4, #0
 8010e7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e80:	4628      	mov	r0, r5
 8010e82:	4798      	blx	r3
 8010e84:	2000      	movs	r0, #0
 8010e86:	e7e0      	b.n	8010e4a <_raise_r+0x12>

08010e88 <raise>:
 8010e88:	4b02      	ldr	r3, [pc, #8]	; (8010e94 <raise+0xc>)
 8010e8a:	4601      	mov	r1, r0
 8010e8c:	6818      	ldr	r0, [r3, #0]
 8010e8e:	f7ff bfd3 	b.w	8010e38 <_raise_r>
 8010e92:	bf00      	nop
 8010e94:	20000188 	.word	0x20000188

08010e98 <_kill_r>:
 8010e98:	b538      	push	{r3, r4, r5, lr}
 8010e9a:	4d07      	ldr	r5, [pc, #28]	; (8010eb8 <_kill_r+0x20>)
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	4608      	mov	r0, r1
 8010ea2:	4611      	mov	r1, r2
 8010ea4:	602b      	str	r3, [r5, #0]
 8010ea6:	f7f1 fec1 	bl	8002c2c <_kill>
 8010eaa:	1c43      	adds	r3, r0, #1
 8010eac:	d102      	bne.n	8010eb4 <_kill_r+0x1c>
 8010eae:	682b      	ldr	r3, [r5, #0]
 8010eb0:	b103      	cbz	r3, 8010eb4 <_kill_r+0x1c>
 8010eb2:	6023      	str	r3, [r4, #0]
 8010eb4:	bd38      	pop	{r3, r4, r5, pc}
 8010eb6:	bf00      	nop
 8010eb8:	20006434 	.word	0x20006434

08010ebc <_getpid_r>:
 8010ebc:	f7f1 beae 	b.w	8002c1c <_getpid>

08010ec0 <siprintf>:
 8010ec0:	b40e      	push	{r1, r2, r3}
 8010ec2:	b500      	push	{lr}
 8010ec4:	b09c      	sub	sp, #112	; 0x70
 8010ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8010ec8:	9002      	str	r0, [sp, #8]
 8010eca:	9006      	str	r0, [sp, #24]
 8010ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ed0:	4809      	ldr	r0, [pc, #36]	; (8010ef8 <siprintf+0x38>)
 8010ed2:	9107      	str	r1, [sp, #28]
 8010ed4:	9104      	str	r1, [sp, #16]
 8010ed6:	4909      	ldr	r1, [pc, #36]	; (8010efc <siprintf+0x3c>)
 8010ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010edc:	9105      	str	r1, [sp, #20]
 8010ede:	6800      	ldr	r0, [r0, #0]
 8010ee0:	9301      	str	r3, [sp, #4]
 8010ee2:	a902      	add	r1, sp, #8
 8010ee4:	f003 f92e 	bl	8014144 <_svfiprintf_r>
 8010ee8:	9b02      	ldr	r3, [sp, #8]
 8010eea:	2200      	movs	r2, #0
 8010eec:	701a      	strb	r2, [r3, #0]
 8010eee:	b01c      	add	sp, #112	; 0x70
 8010ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ef4:	b003      	add	sp, #12
 8010ef6:	4770      	bx	lr
 8010ef8:	20000188 	.word	0x20000188
 8010efc:	ffff0208 	.word	0xffff0208

08010f00 <sulp>:
 8010f00:	b570      	push	{r4, r5, r6, lr}
 8010f02:	4604      	mov	r4, r0
 8010f04:	460d      	mov	r5, r1
 8010f06:	ec45 4b10 	vmov	d0, r4, r5
 8010f0a:	4616      	mov	r6, r2
 8010f0c:	f002 ff60 	bl	8013dd0 <__ulp>
 8010f10:	ec51 0b10 	vmov	r0, r1, d0
 8010f14:	b17e      	cbz	r6, 8010f36 <sulp+0x36>
 8010f16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010f1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	dd09      	ble.n	8010f36 <sulp+0x36>
 8010f22:	051b      	lsls	r3, r3, #20
 8010f24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010f28:	2400      	movs	r4, #0
 8010f2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010f2e:	4622      	mov	r2, r4
 8010f30:	462b      	mov	r3, r5
 8010f32:	f7ef fb71 	bl	8000618 <__aeabi_dmul>
 8010f36:	bd70      	pop	{r4, r5, r6, pc}

08010f38 <_strtod_l>:
 8010f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f3c:	b0a3      	sub	sp, #140	; 0x8c
 8010f3e:	461f      	mov	r7, r3
 8010f40:	2300      	movs	r3, #0
 8010f42:	931e      	str	r3, [sp, #120]	; 0x78
 8010f44:	4ba4      	ldr	r3, [pc, #656]	; (80111d8 <_strtod_l+0x2a0>)
 8010f46:	9219      	str	r2, [sp, #100]	; 0x64
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	9307      	str	r3, [sp, #28]
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	4618      	mov	r0, r3
 8010f50:	4688      	mov	r8, r1
 8010f52:	f7ef f94b 	bl	80001ec <strlen>
 8010f56:	f04f 0a00 	mov.w	sl, #0
 8010f5a:	4605      	mov	r5, r0
 8010f5c:	f04f 0b00 	mov.w	fp, #0
 8010f60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010f64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f66:	781a      	ldrb	r2, [r3, #0]
 8010f68:	2a2b      	cmp	r2, #43	; 0x2b
 8010f6a:	d04c      	beq.n	8011006 <_strtod_l+0xce>
 8010f6c:	d839      	bhi.n	8010fe2 <_strtod_l+0xaa>
 8010f6e:	2a0d      	cmp	r2, #13
 8010f70:	d832      	bhi.n	8010fd8 <_strtod_l+0xa0>
 8010f72:	2a08      	cmp	r2, #8
 8010f74:	d832      	bhi.n	8010fdc <_strtod_l+0xa4>
 8010f76:	2a00      	cmp	r2, #0
 8010f78:	d03c      	beq.n	8010ff4 <_strtod_l+0xbc>
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	930e      	str	r3, [sp, #56]	; 0x38
 8010f7e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010f80:	7833      	ldrb	r3, [r6, #0]
 8010f82:	2b30      	cmp	r3, #48	; 0x30
 8010f84:	f040 80b4 	bne.w	80110f0 <_strtod_l+0x1b8>
 8010f88:	7873      	ldrb	r3, [r6, #1]
 8010f8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010f8e:	2b58      	cmp	r3, #88	; 0x58
 8010f90:	d16c      	bne.n	801106c <_strtod_l+0x134>
 8010f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f94:	9301      	str	r3, [sp, #4]
 8010f96:	ab1e      	add	r3, sp, #120	; 0x78
 8010f98:	9702      	str	r7, [sp, #8]
 8010f9a:	9300      	str	r3, [sp, #0]
 8010f9c:	4a8f      	ldr	r2, [pc, #572]	; (80111dc <_strtod_l+0x2a4>)
 8010f9e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010fa0:	a91d      	add	r1, sp, #116	; 0x74
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f002 f816 	bl	8012fd4 <__gethex>
 8010fa8:	f010 0707 	ands.w	r7, r0, #7
 8010fac:	4605      	mov	r5, r0
 8010fae:	d005      	beq.n	8010fbc <_strtod_l+0x84>
 8010fb0:	2f06      	cmp	r7, #6
 8010fb2:	d12a      	bne.n	801100a <_strtod_l+0xd2>
 8010fb4:	3601      	adds	r6, #1
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	961d      	str	r6, [sp, #116]	; 0x74
 8010fba:	930e      	str	r3, [sp, #56]	; 0x38
 8010fbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	f040 8596 	bne.w	8011af0 <_strtod_l+0xbb8>
 8010fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fc6:	b1db      	cbz	r3, 8011000 <_strtod_l+0xc8>
 8010fc8:	4652      	mov	r2, sl
 8010fca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010fce:	ec43 2b10 	vmov	d0, r2, r3
 8010fd2:	b023      	add	sp, #140	; 0x8c
 8010fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd8:	2a20      	cmp	r2, #32
 8010fda:	d1ce      	bne.n	8010f7a <_strtod_l+0x42>
 8010fdc:	3301      	adds	r3, #1
 8010fde:	931d      	str	r3, [sp, #116]	; 0x74
 8010fe0:	e7c0      	b.n	8010f64 <_strtod_l+0x2c>
 8010fe2:	2a2d      	cmp	r2, #45	; 0x2d
 8010fe4:	d1c9      	bne.n	8010f7a <_strtod_l+0x42>
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	920e      	str	r2, [sp, #56]	; 0x38
 8010fea:	1c5a      	adds	r2, r3, #1
 8010fec:	921d      	str	r2, [sp, #116]	; 0x74
 8010fee:	785b      	ldrb	r3, [r3, #1]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d1c4      	bne.n	8010f7e <_strtod_l+0x46>
 8010ff4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010ff6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f040 8576 	bne.w	8011aec <_strtod_l+0xbb4>
 8011000:	4652      	mov	r2, sl
 8011002:	465b      	mov	r3, fp
 8011004:	e7e3      	b.n	8010fce <_strtod_l+0x96>
 8011006:	2200      	movs	r2, #0
 8011008:	e7ee      	b.n	8010fe8 <_strtod_l+0xb0>
 801100a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801100c:	b13a      	cbz	r2, 801101e <_strtod_l+0xe6>
 801100e:	2135      	movs	r1, #53	; 0x35
 8011010:	a820      	add	r0, sp, #128	; 0x80
 8011012:	f002 ffe8 	bl	8013fe6 <__copybits>
 8011016:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011018:	4620      	mov	r0, r4
 801101a:	f002 fbad 	bl	8013778 <_Bfree>
 801101e:	3f01      	subs	r7, #1
 8011020:	2f05      	cmp	r7, #5
 8011022:	d807      	bhi.n	8011034 <_strtod_l+0xfc>
 8011024:	e8df f007 	tbb	[pc, r7]
 8011028:	1d180b0e 	.word	0x1d180b0e
 801102c:	030e      	.short	0x030e
 801102e:	f04f 0b00 	mov.w	fp, #0
 8011032:	46da      	mov	sl, fp
 8011034:	0728      	lsls	r0, r5, #28
 8011036:	d5c1      	bpl.n	8010fbc <_strtod_l+0x84>
 8011038:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801103c:	e7be      	b.n	8010fbc <_strtod_l+0x84>
 801103e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011042:	e7f7      	b.n	8011034 <_strtod_l+0xfc>
 8011044:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011048:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801104a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801104e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011052:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011056:	e7ed      	b.n	8011034 <_strtod_l+0xfc>
 8011058:	f8df b184 	ldr.w	fp, [pc, #388]	; 80111e0 <_strtod_l+0x2a8>
 801105c:	f04f 0a00 	mov.w	sl, #0
 8011060:	e7e8      	b.n	8011034 <_strtod_l+0xfc>
 8011062:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011066:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801106a:	e7e3      	b.n	8011034 <_strtod_l+0xfc>
 801106c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801106e:	1c5a      	adds	r2, r3, #1
 8011070:	921d      	str	r2, [sp, #116]	; 0x74
 8011072:	785b      	ldrb	r3, [r3, #1]
 8011074:	2b30      	cmp	r3, #48	; 0x30
 8011076:	d0f9      	beq.n	801106c <_strtod_l+0x134>
 8011078:	2b00      	cmp	r3, #0
 801107a:	d09f      	beq.n	8010fbc <_strtod_l+0x84>
 801107c:	2301      	movs	r3, #1
 801107e:	f04f 0900 	mov.w	r9, #0
 8011082:	9304      	str	r3, [sp, #16]
 8011084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011086:	930a      	str	r3, [sp, #40]	; 0x28
 8011088:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801108c:	464f      	mov	r7, r9
 801108e:	220a      	movs	r2, #10
 8011090:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011092:	7806      	ldrb	r6, [r0, #0]
 8011094:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011098:	b2d9      	uxtb	r1, r3
 801109a:	2909      	cmp	r1, #9
 801109c:	d92a      	bls.n	80110f4 <_strtod_l+0x1bc>
 801109e:	9907      	ldr	r1, [sp, #28]
 80110a0:	462a      	mov	r2, r5
 80110a2:	f003 faf4 	bl	801468e <strncmp>
 80110a6:	b398      	cbz	r0, 8011110 <_strtod_l+0x1d8>
 80110a8:	2000      	movs	r0, #0
 80110aa:	4633      	mov	r3, r6
 80110ac:	463d      	mov	r5, r7
 80110ae:	9007      	str	r0, [sp, #28]
 80110b0:	4602      	mov	r2, r0
 80110b2:	2b65      	cmp	r3, #101	; 0x65
 80110b4:	d001      	beq.n	80110ba <_strtod_l+0x182>
 80110b6:	2b45      	cmp	r3, #69	; 0x45
 80110b8:	d118      	bne.n	80110ec <_strtod_l+0x1b4>
 80110ba:	b91d      	cbnz	r5, 80110c4 <_strtod_l+0x18c>
 80110bc:	9b04      	ldr	r3, [sp, #16]
 80110be:	4303      	orrs	r3, r0
 80110c0:	d098      	beq.n	8010ff4 <_strtod_l+0xbc>
 80110c2:	2500      	movs	r5, #0
 80110c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80110c8:	f108 0301 	add.w	r3, r8, #1
 80110cc:	931d      	str	r3, [sp, #116]	; 0x74
 80110ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80110d2:	2b2b      	cmp	r3, #43	; 0x2b
 80110d4:	d075      	beq.n	80111c2 <_strtod_l+0x28a>
 80110d6:	2b2d      	cmp	r3, #45	; 0x2d
 80110d8:	d07b      	beq.n	80111d2 <_strtod_l+0x29a>
 80110da:	f04f 0c00 	mov.w	ip, #0
 80110de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80110e2:	2909      	cmp	r1, #9
 80110e4:	f240 8082 	bls.w	80111ec <_strtod_l+0x2b4>
 80110e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80110ec:	2600      	movs	r6, #0
 80110ee:	e09d      	b.n	801122c <_strtod_l+0x2f4>
 80110f0:	2300      	movs	r3, #0
 80110f2:	e7c4      	b.n	801107e <_strtod_l+0x146>
 80110f4:	2f08      	cmp	r7, #8
 80110f6:	bfd8      	it	le
 80110f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80110fa:	f100 0001 	add.w	r0, r0, #1
 80110fe:	bfda      	itte	le
 8011100:	fb02 3301 	mlale	r3, r2, r1, r3
 8011104:	9309      	strle	r3, [sp, #36]	; 0x24
 8011106:	fb02 3909 	mlagt	r9, r2, r9, r3
 801110a:	3701      	adds	r7, #1
 801110c:	901d      	str	r0, [sp, #116]	; 0x74
 801110e:	e7bf      	b.n	8011090 <_strtod_l+0x158>
 8011110:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011112:	195a      	adds	r2, r3, r5
 8011114:	921d      	str	r2, [sp, #116]	; 0x74
 8011116:	5d5b      	ldrb	r3, [r3, r5]
 8011118:	2f00      	cmp	r7, #0
 801111a:	d037      	beq.n	801118c <_strtod_l+0x254>
 801111c:	9007      	str	r0, [sp, #28]
 801111e:	463d      	mov	r5, r7
 8011120:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011124:	2a09      	cmp	r2, #9
 8011126:	d912      	bls.n	801114e <_strtod_l+0x216>
 8011128:	2201      	movs	r2, #1
 801112a:	e7c2      	b.n	80110b2 <_strtod_l+0x17a>
 801112c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	921d      	str	r2, [sp, #116]	; 0x74
 8011132:	785b      	ldrb	r3, [r3, #1]
 8011134:	3001      	adds	r0, #1
 8011136:	2b30      	cmp	r3, #48	; 0x30
 8011138:	d0f8      	beq.n	801112c <_strtod_l+0x1f4>
 801113a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801113e:	2a08      	cmp	r2, #8
 8011140:	f200 84db 	bhi.w	8011afa <_strtod_l+0xbc2>
 8011144:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011146:	9007      	str	r0, [sp, #28]
 8011148:	2000      	movs	r0, #0
 801114a:	920a      	str	r2, [sp, #40]	; 0x28
 801114c:	4605      	mov	r5, r0
 801114e:	3b30      	subs	r3, #48	; 0x30
 8011150:	f100 0201 	add.w	r2, r0, #1
 8011154:	d014      	beq.n	8011180 <_strtod_l+0x248>
 8011156:	9907      	ldr	r1, [sp, #28]
 8011158:	4411      	add	r1, r2
 801115a:	9107      	str	r1, [sp, #28]
 801115c:	462a      	mov	r2, r5
 801115e:	eb00 0e05 	add.w	lr, r0, r5
 8011162:	210a      	movs	r1, #10
 8011164:	4572      	cmp	r2, lr
 8011166:	d113      	bne.n	8011190 <_strtod_l+0x258>
 8011168:	182a      	adds	r2, r5, r0
 801116a:	2a08      	cmp	r2, #8
 801116c:	f105 0501 	add.w	r5, r5, #1
 8011170:	4405      	add	r5, r0
 8011172:	dc1c      	bgt.n	80111ae <_strtod_l+0x276>
 8011174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011176:	220a      	movs	r2, #10
 8011178:	fb02 3301 	mla	r3, r2, r1, r3
 801117c:	9309      	str	r3, [sp, #36]	; 0x24
 801117e:	2200      	movs	r2, #0
 8011180:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011182:	1c59      	adds	r1, r3, #1
 8011184:	911d      	str	r1, [sp, #116]	; 0x74
 8011186:	785b      	ldrb	r3, [r3, #1]
 8011188:	4610      	mov	r0, r2
 801118a:	e7c9      	b.n	8011120 <_strtod_l+0x1e8>
 801118c:	4638      	mov	r0, r7
 801118e:	e7d2      	b.n	8011136 <_strtod_l+0x1fe>
 8011190:	2a08      	cmp	r2, #8
 8011192:	dc04      	bgt.n	801119e <_strtod_l+0x266>
 8011194:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011196:	434e      	muls	r6, r1
 8011198:	9609      	str	r6, [sp, #36]	; 0x24
 801119a:	3201      	adds	r2, #1
 801119c:	e7e2      	b.n	8011164 <_strtod_l+0x22c>
 801119e:	f102 0c01 	add.w	ip, r2, #1
 80111a2:	f1bc 0f10 	cmp.w	ip, #16
 80111a6:	bfd8      	it	le
 80111a8:	fb01 f909 	mulle.w	r9, r1, r9
 80111ac:	e7f5      	b.n	801119a <_strtod_l+0x262>
 80111ae:	2d10      	cmp	r5, #16
 80111b0:	bfdc      	itt	le
 80111b2:	220a      	movle	r2, #10
 80111b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80111b8:	e7e1      	b.n	801117e <_strtod_l+0x246>
 80111ba:	2300      	movs	r3, #0
 80111bc:	9307      	str	r3, [sp, #28]
 80111be:	2201      	movs	r2, #1
 80111c0:	e77c      	b.n	80110bc <_strtod_l+0x184>
 80111c2:	f04f 0c00 	mov.w	ip, #0
 80111c6:	f108 0302 	add.w	r3, r8, #2
 80111ca:	931d      	str	r3, [sp, #116]	; 0x74
 80111cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80111d0:	e785      	b.n	80110de <_strtod_l+0x1a6>
 80111d2:	f04f 0c01 	mov.w	ip, #1
 80111d6:	e7f6      	b.n	80111c6 <_strtod_l+0x28e>
 80111d8:	08015274 	.word	0x08015274
 80111dc:	08014fc0 	.word	0x08014fc0
 80111e0:	7ff00000 	.word	0x7ff00000
 80111e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80111e6:	1c59      	adds	r1, r3, #1
 80111e8:	911d      	str	r1, [sp, #116]	; 0x74
 80111ea:	785b      	ldrb	r3, [r3, #1]
 80111ec:	2b30      	cmp	r3, #48	; 0x30
 80111ee:	d0f9      	beq.n	80111e4 <_strtod_l+0x2ac>
 80111f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80111f4:	2908      	cmp	r1, #8
 80111f6:	f63f af79 	bhi.w	80110ec <_strtod_l+0x1b4>
 80111fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80111fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011200:	9308      	str	r3, [sp, #32]
 8011202:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011204:	1c59      	adds	r1, r3, #1
 8011206:	911d      	str	r1, [sp, #116]	; 0x74
 8011208:	785b      	ldrb	r3, [r3, #1]
 801120a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801120e:	2e09      	cmp	r6, #9
 8011210:	d937      	bls.n	8011282 <_strtod_l+0x34a>
 8011212:	9e08      	ldr	r6, [sp, #32]
 8011214:	1b89      	subs	r1, r1, r6
 8011216:	2908      	cmp	r1, #8
 8011218:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801121c:	dc02      	bgt.n	8011224 <_strtod_l+0x2ec>
 801121e:	4576      	cmp	r6, lr
 8011220:	bfa8      	it	ge
 8011222:	4676      	movge	r6, lr
 8011224:	f1bc 0f00 	cmp.w	ip, #0
 8011228:	d000      	beq.n	801122c <_strtod_l+0x2f4>
 801122a:	4276      	negs	r6, r6
 801122c:	2d00      	cmp	r5, #0
 801122e:	d14f      	bne.n	80112d0 <_strtod_l+0x398>
 8011230:	9904      	ldr	r1, [sp, #16]
 8011232:	4301      	orrs	r1, r0
 8011234:	f47f aec2 	bne.w	8010fbc <_strtod_l+0x84>
 8011238:	2a00      	cmp	r2, #0
 801123a:	f47f aedb 	bne.w	8010ff4 <_strtod_l+0xbc>
 801123e:	2b69      	cmp	r3, #105	; 0x69
 8011240:	d027      	beq.n	8011292 <_strtod_l+0x35a>
 8011242:	dc24      	bgt.n	801128e <_strtod_l+0x356>
 8011244:	2b49      	cmp	r3, #73	; 0x49
 8011246:	d024      	beq.n	8011292 <_strtod_l+0x35a>
 8011248:	2b4e      	cmp	r3, #78	; 0x4e
 801124a:	f47f aed3 	bne.w	8010ff4 <_strtod_l+0xbc>
 801124e:	499e      	ldr	r1, [pc, #632]	; (80114c8 <_strtod_l+0x590>)
 8011250:	a81d      	add	r0, sp, #116	; 0x74
 8011252:	f002 f917 	bl	8013484 <__match>
 8011256:	2800      	cmp	r0, #0
 8011258:	f43f aecc 	beq.w	8010ff4 <_strtod_l+0xbc>
 801125c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	2b28      	cmp	r3, #40	; 0x28
 8011262:	d12d      	bne.n	80112c0 <_strtod_l+0x388>
 8011264:	4999      	ldr	r1, [pc, #612]	; (80114cc <_strtod_l+0x594>)
 8011266:	aa20      	add	r2, sp, #128	; 0x80
 8011268:	a81d      	add	r0, sp, #116	; 0x74
 801126a:	f002 f91f 	bl	80134ac <__hexnan>
 801126e:	2805      	cmp	r0, #5
 8011270:	d126      	bne.n	80112c0 <_strtod_l+0x388>
 8011272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011274:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011278:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801127c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011280:	e69c      	b.n	8010fbc <_strtod_l+0x84>
 8011282:	210a      	movs	r1, #10
 8011284:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011288:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801128c:	e7b9      	b.n	8011202 <_strtod_l+0x2ca>
 801128e:	2b6e      	cmp	r3, #110	; 0x6e
 8011290:	e7db      	b.n	801124a <_strtod_l+0x312>
 8011292:	498f      	ldr	r1, [pc, #572]	; (80114d0 <_strtod_l+0x598>)
 8011294:	a81d      	add	r0, sp, #116	; 0x74
 8011296:	f002 f8f5 	bl	8013484 <__match>
 801129a:	2800      	cmp	r0, #0
 801129c:	f43f aeaa 	beq.w	8010ff4 <_strtod_l+0xbc>
 80112a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112a2:	498c      	ldr	r1, [pc, #560]	; (80114d4 <_strtod_l+0x59c>)
 80112a4:	3b01      	subs	r3, #1
 80112a6:	a81d      	add	r0, sp, #116	; 0x74
 80112a8:	931d      	str	r3, [sp, #116]	; 0x74
 80112aa:	f002 f8eb 	bl	8013484 <__match>
 80112ae:	b910      	cbnz	r0, 80112b6 <_strtod_l+0x37e>
 80112b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112b2:	3301      	adds	r3, #1
 80112b4:	931d      	str	r3, [sp, #116]	; 0x74
 80112b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80114e4 <_strtod_l+0x5ac>
 80112ba:	f04f 0a00 	mov.w	sl, #0
 80112be:	e67d      	b.n	8010fbc <_strtod_l+0x84>
 80112c0:	4885      	ldr	r0, [pc, #532]	; (80114d8 <_strtod_l+0x5a0>)
 80112c2:	f003 f999 	bl	80145f8 <nan>
 80112c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80112ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80112ce:	e675      	b.n	8010fbc <_strtod_l+0x84>
 80112d0:	9b07      	ldr	r3, [sp, #28]
 80112d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112d4:	1af3      	subs	r3, r6, r3
 80112d6:	2f00      	cmp	r7, #0
 80112d8:	bf08      	it	eq
 80112da:	462f      	moveq	r7, r5
 80112dc:	2d10      	cmp	r5, #16
 80112de:	9308      	str	r3, [sp, #32]
 80112e0:	46a8      	mov	r8, r5
 80112e2:	bfa8      	it	ge
 80112e4:	f04f 0810 	movge.w	r8, #16
 80112e8:	f7ef f91c 	bl	8000524 <__aeabi_ui2d>
 80112ec:	2d09      	cmp	r5, #9
 80112ee:	4682      	mov	sl, r0
 80112f0:	468b      	mov	fp, r1
 80112f2:	dd13      	ble.n	801131c <_strtod_l+0x3e4>
 80112f4:	4b79      	ldr	r3, [pc, #484]	; (80114dc <_strtod_l+0x5a4>)
 80112f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80112fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80112fe:	f7ef f98b 	bl	8000618 <__aeabi_dmul>
 8011302:	4682      	mov	sl, r0
 8011304:	4648      	mov	r0, r9
 8011306:	468b      	mov	fp, r1
 8011308:	f7ef f90c 	bl	8000524 <__aeabi_ui2d>
 801130c:	4602      	mov	r2, r0
 801130e:	460b      	mov	r3, r1
 8011310:	4650      	mov	r0, sl
 8011312:	4659      	mov	r1, fp
 8011314:	f7ee ffca 	bl	80002ac <__adddf3>
 8011318:	4682      	mov	sl, r0
 801131a:	468b      	mov	fp, r1
 801131c:	2d0f      	cmp	r5, #15
 801131e:	dc38      	bgt.n	8011392 <_strtod_l+0x45a>
 8011320:	9b08      	ldr	r3, [sp, #32]
 8011322:	2b00      	cmp	r3, #0
 8011324:	f43f ae4a 	beq.w	8010fbc <_strtod_l+0x84>
 8011328:	dd24      	ble.n	8011374 <_strtod_l+0x43c>
 801132a:	2b16      	cmp	r3, #22
 801132c:	dc0b      	bgt.n	8011346 <_strtod_l+0x40e>
 801132e:	4d6b      	ldr	r5, [pc, #428]	; (80114dc <_strtod_l+0x5a4>)
 8011330:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011334:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011338:	4652      	mov	r2, sl
 801133a:	465b      	mov	r3, fp
 801133c:	f7ef f96c 	bl	8000618 <__aeabi_dmul>
 8011340:	4682      	mov	sl, r0
 8011342:	468b      	mov	fp, r1
 8011344:	e63a      	b.n	8010fbc <_strtod_l+0x84>
 8011346:	9a08      	ldr	r2, [sp, #32]
 8011348:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801134c:	4293      	cmp	r3, r2
 801134e:	db20      	blt.n	8011392 <_strtod_l+0x45a>
 8011350:	4c62      	ldr	r4, [pc, #392]	; (80114dc <_strtod_l+0x5a4>)
 8011352:	f1c5 050f 	rsb	r5, r5, #15
 8011356:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801135a:	4652      	mov	r2, sl
 801135c:	465b      	mov	r3, fp
 801135e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011362:	f7ef f959 	bl	8000618 <__aeabi_dmul>
 8011366:	9b08      	ldr	r3, [sp, #32]
 8011368:	1b5d      	subs	r5, r3, r5
 801136a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801136e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011372:	e7e3      	b.n	801133c <_strtod_l+0x404>
 8011374:	9b08      	ldr	r3, [sp, #32]
 8011376:	3316      	adds	r3, #22
 8011378:	db0b      	blt.n	8011392 <_strtod_l+0x45a>
 801137a:	9b07      	ldr	r3, [sp, #28]
 801137c:	4a57      	ldr	r2, [pc, #348]	; (80114dc <_strtod_l+0x5a4>)
 801137e:	1b9e      	subs	r6, r3, r6
 8011380:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011384:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011388:	4650      	mov	r0, sl
 801138a:	4659      	mov	r1, fp
 801138c:	f7ef fa6e 	bl	800086c <__aeabi_ddiv>
 8011390:	e7d6      	b.n	8011340 <_strtod_l+0x408>
 8011392:	9b08      	ldr	r3, [sp, #32]
 8011394:	eba5 0808 	sub.w	r8, r5, r8
 8011398:	4498      	add	r8, r3
 801139a:	f1b8 0f00 	cmp.w	r8, #0
 801139e:	dd71      	ble.n	8011484 <_strtod_l+0x54c>
 80113a0:	f018 030f 	ands.w	r3, r8, #15
 80113a4:	d00a      	beq.n	80113bc <_strtod_l+0x484>
 80113a6:	494d      	ldr	r1, [pc, #308]	; (80114dc <_strtod_l+0x5a4>)
 80113a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80113ac:	4652      	mov	r2, sl
 80113ae:	465b      	mov	r3, fp
 80113b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113b4:	f7ef f930 	bl	8000618 <__aeabi_dmul>
 80113b8:	4682      	mov	sl, r0
 80113ba:	468b      	mov	fp, r1
 80113bc:	f038 080f 	bics.w	r8, r8, #15
 80113c0:	d04d      	beq.n	801145e <_strtod_l+0x526>
 80113c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80113c6:	dd22      	ble.n	801140e <_strtod_l+0x4d6>
 80113c8:	2500      	movs	r5, #0
 80113ca:	462e      	mov	r6, r5
 80113cc:	9509      	str	r5, [sp, #36]	; 0x24
 80113ce:	9507      	str	r5, [sp, #28]
 80113d0:	2322      	movs	r3, #34	; 0x22
 80113d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80114e4 <_strtod_l+0x5ac>
 80113d6:	6023      	str	r3, [r4, #0]
 80113d8:	f04f 0a00 	mov.w	sl, #0
 80113dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113de:	2b00      	cmp	r3, #0
 80113e0:	f43f adec 	beq.w	8010fbc <_strtod_l+0x84>
 80113e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80113e6:	4620      	mov	r0, r4
 80113e8:	f002 f9c6 	bl	8013778 <_Bfree>
 80113ec:	9907      	ldr	r1, [sp, #28]
 80113ee:	4620      	mov	r0, r4
 80113f0:	f002 f9c2 	bl	8013778 <_Bfree>
 80113f4:	4631      	mov	r1, r6
 80113f6:	4620      	mov	r0, r4
 80113f8:	f002 f9be 	bl	8013778 <_Bfree>
 80113fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113fe:	4620      	mov	r0, r4
 8011400:	f002 f9ba 	bl	8013778 <_Bfree>
 8011404:	4629      	mov	r1, r5
 8011406:	4620      	mov	r0, r4
 8011408:	f002 f9b6 	bl	8013778 <_Bfree>
 801140c:	e5d6      	b.n	8010fbc <_strtod_l+0x84>
 801140e:	2300      	movs	r3, #0
 8011410:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011414:	4650      	mov	r0, sl
 8011416:	4659      	mov	r1, fp
 8011418:	4699      	mov	r9, r3
 801141a:	f1b8 0f01 	cmp.w	r8, #1
 801141e:	dc21      	bgt.n	8011464 <_strtod_l+0x52c>
 8011420:	b10b      	cbz	r3, 8011426 <_strtod_l+0x4ee>
 8011422:	4682      	mov	sl, r0
 8011424:	468b      	mov	fp, r1
 8011426:	4b2e      	ldr	r3, [pc, #184]	; (80114e0 <_strtod_l+0x5a8>)
 8011428:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801142c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011430:	4652      	mov	r2, sl
 8011432:	465b      	mov	r3, fp
 8011434:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011438:	f7ef f8ee 	bl	8000618 <__aeabi_dmul>
 801143c:	4b29      	ldr	r3, [pc, #164]	; (80114e4 <_strtod_l+0x5ac>)
 801143e:	460a      	mov	r2, r1
 8011440:	400b      	ands	r3, r1
 8011442:	4929      	ldr	r1, [pc, #164]	; (80114e8 <_strtod_l+0x5b0>)
 8011444:	428b      	cmp	r3, r1
 8011446:	4682      	mov	sl, r0
 8011448:	d8be      	bhi.n	80113c8 <_strtod_l+0x490>
 801144a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801144e:	428b      	cmp	r3, r1
 8011450:	bf86      	itte	hi
 8011452:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80114ec <_strtod_l+0x5b4>
 8011456:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801145a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801145e:	2300      	movs	r3, #0
 8011460:	9304      	str	r3, [sp, #16]
 8011462:	e081      	b.n	8011568 <_strtod_l+0x630>
 8011464:	f018 0f01 	tst.w	r8, #1
 8011468:	d007      	beq.n	801147a <_strtod_l+0x542>
 801146a:	4b1d      	ldr	r3, [pc, #116]	; (80114e0 <_strtod_l+0x5a8>)
 801146c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011474:	f7ef f8d0 	bl	8000618 <__aeabi_dmul>
 8011478:	2301      	movs	r3, #1
 801147a:	f109 0901 	add.w	r9, r9, #1
 801147e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011482:	e7ca      	b.n	801141a <_strtod_l+0x4e2>
 8011484:	d0eb      	beq.n	801145e <_strtod_l+0x526>
 8011486:	f1c8 0800 	rsb	r8, r8, #0
 801148a:	f018 020f 	ands.w	r2, r8, #15
 801148e:	d00a      	beq.n	80114a6 <_strtod_l+0x56e>
 8011490:	4b12      	ldr	r3, [pc, #72]	; (80114dc <_strtod_l+0x5a4>)
 8011492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011496:	4650      	mov	r0, sl
 8011498:	4659      	mov	r1, fp
 801149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149e:	f7ef f9e5 	bl	800086c <__aeabi_ddiv>
 80114a2:	4682      	mov	sl, r0
 80114a4:	468b      	mov	fp, r1
 80114a6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80114aa:	d0d8      	beq.n	801145e <_strtod_l+0x526>
 80114ac:	f1b8 0f1f 	cmp.w	r8, #31
 80114b0:	dd1e      	ble.n	80114f0 <_strtod_l+0x5b8>
 80114b2:	2500      	movs	r5, #0
 80114b4:	462e      	mov	r6, r5
 80114b6:	9509      	str	r5, [sp, #36]	; 0x24
 80114b8:	9507      	str	r5, [sp, #28]
 80114ba:	2322      	movs	r3, #34	; 0x22
 80114bc:	f04f 0a00 	mov.w	sl, #0
 80114c0:	f04f 0b00 	mov.w	fp, #0
 80114c4:	6023      	str	r3, [r4, #0]
 80114c6:	e789      	b.n	80113dc <_strtod_l+0x4a4>
 80114c8:	08014f91 	.word	0x08014f91
 80114cc:	08014fd4 	.word	0x08014fd4
 80114d0:	08014f89 	.word	0x08014f89
 80114d4:	08015114 	.word	0x08015114
 80114d8:	08015430 	.word	0x08015430
 80114dc:	08015310 	.word	0x08015310
 80114e0:	080152e8 	.word	0x080152e8
 80114e4:	7ff00000 	.word	0x7ff00000
 80114e8:	7ca00000 	.word	0x7ca00000
 80114ec:	7fefffff 	.word	0x7fefffff
 80114f0:	f018 0310 	ands.w	r3, r8, #16
 80114f4:	bf18      	it	ne
 80114f6:	236a      	movne	r3, #106	; 0x6a
 80114f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80118b0 <_strtod_l+0x978>
 80114fc:	9304      	str	r3, [sp, #16]
 80114fe:	4650      	mov	r0, sl
 8011500:	4659      	mov	r1, fp
 8011502:	2300      	movs	r3, #0
 8011504:	f018 0f01 	tst.w	r8, #1
 8011508:	d004      	beq.n	8011514 <_strtod_l+0x5dc>
 801150a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801150e:	f7ef f883 	bl	8000618 <__aeabi_dmul>
 8011512:	2301      	movs	r3, #1
 8011514:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011518:	f109 0908 	add.w	r9, r9, #8
 801151c:	d1f2      	bne.n	8011504 <_strtod_l+0x5cc>
 801151e:	b10b      	cbz	r3, 8011524 <_strtod_l+0x5ec>
 8011520:	4682      	mov	sl, r0
 8011522:	468b      	mov	fp, r1
 8011524:	9b04      	ldr	r3, [sp, #16]
 8011526:	b1bb      	cbz	r3, 8011558 <_strtod_l+0x620>
 8011528:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801152c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011530:	2b00      	cmp	r3, #0
 8011532:	4659      	mov	r1, fp
 8011534:	dd10      	ble.n	8011558 <_strtod_l+0x620>
 8011536:	2b1f      	cmp	r3, #31
 8011538:	f340 8128 	ble.w	801178c <_strtod_l+0x854>
 801153c:	2b34      	cmp	r3, #52	; 0x34
 801153e:	bfde      	ittt	le
 8011540:	3b20      	suble	r3, #32
 8011542:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8011546:	fa02 f303 	lslle.w	r3, r2, r3
 801154a:	f04f 0a00 	mov.w	sl, #0
 801154e:	bfcc      	ite	gt
 8011550:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011554:	ea03 0b01 	andle.w	fp, r3, r1
 8011558:	2200      	movs	r2, #0
 801155a:	2300      	movs	r3, #0
 801155c:	4650      	mov	r0, sl
 801155e:	4659      	mov	r1, fp
 8011560:	f7ef fac2 	bl	8000ae8 <__aeabi_dcmpeq>
 8011564:	2800      	cmp	r0, #0
 8011566:	d1a4      	bne.n	80114b2 <_strtod_l+0x57a>
 8011568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801156a:	9300      	str	r3, [sp, #0]
 801156c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801156e:	462b      	mov	r3, r5
 8011570:	463a      	mov	r2, r7
 8011572:	4620      	mov	r0, r4
 8011574:	f002 f96c 	bl	8013850 <__s2b>
 8011578:	9009      	str	r0, [sp, #36]	; 0x24
 801157a:	2800      	cmp	r0, #0
 801157c:	f43f af24 	beq.w	80113c8 <_strtod_l+0x490>
 8011580:	9b07      	ldr	r3, [sp, #28]
 8011582:	1b9e      	subs	r6, r3, r6
 8011584:	9b08      	ldr	r3, [sp, #32]
 8011586:	2b00      	cmp	r3, #0
 8011588:	bfb4      	ite	lt
 801158a:	4633      	movlt	r3, r6
 801158c:	2300      	movge	r3, #0
 801158e:	9310      	str	r3, [sp, #64]	; 0x40
 8011590:	9b08      	ldr	r3, [sp, #32]
 8011592:	2500      	movs	r5, #0
 8011594:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011598:	9318      	str	r3, [sp, #96]	; 0x60
 801159a:	462e      	mov	r6, r5
 801159c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801159e:	4620      	mov	r0, r4
 80115a0:	6859      	ldr	r1, [r3, #4]
 80115a2:	f002 f8a9 	bl	80136f8 <_Balloc>
 80115a6:	9007      	str	r0, [sp, #28]
 80115a8:	2800      	cmp	r0, #0
 80115aa:	f43f af11 	beq.w	80113d0 <_strtod_l+0x498>
 80115ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b0:	691a      	ldr	r2, [r3, #16]
 80115b2:	3202      	adds	r2, #2
 80115b4:	f103 010c 	add.w	r1, r3, #12
 80115b8:	0092      	lsls	r2, r2, #2
 80115ba:	300c      	adds	r0, #12
 80115bc:	f7fe fc5e 	bl	800fe7c <memcpy>
 80115c0:	ec4b ab10 	vmov	d0, sl, fp
 80115c4:	aa20      	add	r2, sp, #128	; 0x80
 80115c6:	a91f      	add	r1, sp, #124	; 0x7c
 80115c8:	4620      	mov	r0, r4
 80115ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80115ce:	f002 fc7b 	bl	8013ec8 <__d2b>
 80115d2:	901e      	str	r0, [sp, #120]	; 0x78
 80115d4:	2800      	cmp	r0, #0
 80115d6:	f43f aefb 	beq.w	80113d0 <_strtod_l+0x498>
 80115da:	2101      	movs	r1, #1
 80115dc:	4620      	mov	r0, r4
 80115de:	f002 f9d1 	bl	8013984 <__i2b>
 80115e2:	4606      	mov	r6, r0
 80115e4:	2800      	cmp	r0, #0
 80115e6:	f43f aef3 	beq.w	80113d0 <_strtod_l+0x498>
 80115ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80115ec:	9904      	ldr	r1, [sp, #16]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	bfab      	itete	ge
 80115f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80115f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80115f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80115f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80115fc:	bfac      	ite	ge
 80115fe:	eb03 0902 	addge.w	r9, r3, r2
 8011602:	1ad7      	sublt	r7, r2, r3
 8011604:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011606:	eba3 0801 	sub.w	r8, r3, r1
 801160a:	4490      	add	r8, r2
 801160c:	4ba3      	ldr	r3, [pc, #652]	; (801189c <_strtod_l+0x964>)
 801160e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011612:	4598      	cmp	r8, r3
 8011614:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011618:	f280 80cc 	bge.w	80117b4 <_strtod_l+0x87c>
 801161c:	eba3 0308 	sub.w	r3, r3, r8
 8011620:	2b1f      	cmp	r3, #31
 8011622:	eba2 0203 	sub.w	r2, r2, r3
 8011626:	f04f 0101 	mov.w	r1, #1
 801162a:	f300 80b6 	bgt.w	801179a <_strtod_l+0x862>
 801162e:	fa01 f303 	lsl.w	r3, r1, r3
 8011632:	9311      	str	r3, [sp, #68]	; 0x44
 8011634:	2300      	movs	r3, #0
 8011636:	930c      	str	r3, [sp, #48]	; 0x30
 8011638:	eb09 0802 	add.w	r8, r9, r2
 801163c:	9b04      	ldr	r3, [sp, #16]
 801163e:	45c1      	cmp	r9, r8
 8011640:	4417      	add	r7, r2
 8011642:	441f      	add	r7, r3
 8011644:	464b      	mov	r3, r9
 8011646:	bfa8      	it	ge
 8011648:	4643      	movge	r3, r8
 801164a:	42bb      	cmp	r3, r7
 801164c:	bfa8      	it	ge
 801164e:	463b      	movge	r3, r7
 8011650:	2b00      	cmp	r3, #0
 8011652:	bfc2      	ittt	gt
 8011654:	eba8 0803 	subgt.w	r8, r8, r3
 8011658:	1aff      	subgt	r7, r7, r3
 801165a:	eba9 0903 	subgt.w	r9, r9, r3
 801165e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011660:	2b00      	cmp	r3, #0
 8011662:	dd17      	ble.n	8011694 <_strtod_l+0x75c>
 8011664:	4631      	mov	r1, r6
 8011666:	461a      	mov	r2, r3
 8011668:	4620      	mov	r0, r4
 801166a:	f002 fa47 	bl	8013afc <__pow5mult>
 801166e:	4606      	mov	r6, r0
 8011670:	2800      	cmp	r0, #0
 8011672:	f43f aead 	beq.w	80113d0 <_strtod_l+0x498>
 8011676:	4601      	mov	r1, r0
 8011678:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801167a:	4620      	mov	r0, r4
 801167c:	f002 f998 	bl	80139b0 <__multiply>
 8011680:	900f      	str	r0, [sp, #60]	; 0x3c
 8011682:	2800      	cmp	r0, #0
 8011684:	f43f aea4 	beq.w	80113d0 <_strtod_l+0x498>
 8011688:	991e      	ldr	r1, [sp, #120]	; 0x78
 801168a:	4620      	mov	r0, r4
 801168c:	f002 f874 	bl	8013778 <_Bfree>
 8011690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011692:	931e      	str	r3, [sp, #120]	; 0x78
 8011694:	f1b8 0f00 	cmp.w	r8, #0
 8011698:	f300 8091 	bgt.w	80117be <_strtod_l+0x886>
 801169c:	9b08      	ldr	r3, [sp, #32]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	dd08      	ble.n	80116b4 <_strtod_l+0x77c>
 80116a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80116a4:	9907      	ldr	r1, [sp, #28]
 80116a6:	4620      	mov	r0, r4
 80116a8:	f002 fa28 	bl	8013afc <__pow5mult>
 80116ac:	9007      	str	r0, [sp, #28]
 80116ae:	2800      	cmp	r0, #0
 80116b0:	f43f ae8e 	beq.w	80113d0 <_strtod_l+0x498>
 80116b4:	2f00      	cmp	r7, #0
 80116b6:	dd08      	ble.n	80116ca <_strtod_l+0x792>
 80116b8:	9907      	ldr	r1, [sp, #28]
 80116ba:	463a      	mov	r2, r7
 80116bc:	4620      	mov	r0, r4
 80116be:	f002 fa77 	bl	8013bb0 <__lshift>
 80116c2:	9007      	str	r0, [sp, #28]
 80116c4:	2800      	cmp	r0, #0
 80116c6:	f43f ae83 	beq.w	80113d0 <_strtod_l+0x498>
 80116ca:	f1b9 0f00 	cmp.w	r9, #0
 80116ce:	dd08      	ble.n	80116e2 <_strtod_l+0x7aa>
 80116d0:	4631      	mov	r1, r6
 80116d2:	464a      	mov	r2, r9
 80116d4:	4620      	mov	r0, r4
 80116d6:	f002 fa6b 	bl	8013bb0 <__lshift>
 80116da:	4606      	mov	r6, r0
 80116dc:	2800      	cmp	r0, #0
 80116de:	f43f ae77 	beq.w	80113d0 <_strtod_l+0x498>
 80116e2:	9a07      	ldr	r2, [sp, #28]
 80116e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80116e6:	4620      	mov	r0, r4
 80116e8:	f002 faea 	bl	8013cc0 <__mdiff>
 80116ec:	4605      	mov	r5, r0
 80116ee:	2800      	cmp	r0, #0
 80116f0:	f43f ae6e 	beq.w	80113d0 <_strtod_l+0x498>
 80116f4:	68c3      	ldr	r3, [r0, #12]
 80116f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80116f8:	2300      	movs	r3, #0
 80116fa:	60c3      	str	r3, [r0, #12]
 80116fc:	4631      	mov	r1, r6
 80116fe:	f002 fac3 	bl	8013c88 <__mcmp>
 8011702:	2800      	cmp	r0, #0
 8011704:	da65      	bge.n	80117d2 <_strtod_l+0x89a>
 8011706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011708:	ea53 030a 	orrs.w	r3, r3, sl
 801170c:	f040 8087 	bne.w	801181e <_strtod_l+0x8e6>
 8011710:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011714:	2b00      	cmp	r3, #0
 8011716:	f040 8082 	bne.w	801181e <_strtod_l+0x8e6>
 801171a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801171e:	0d1b      	lsrs	r3, r3, #20
 8011720:	051b      	lsls	r3, r3, #20
 8011722:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011726:	d97a      	bls.n	801181e <_strtod_l+0x8e6>
 8011728:	696b      	ldr	r3, [r5, #20]
 801172a:	b913      	cbnz	r3, 8011732 <_strtod_l+0x7fa>
 801172c:	692b      	ldr	r3, [r5, #16]
 801172e:	2b01      	cmp	r3, #1
 8011730:	dd75      	ble.n	801181e <_strtod_l+0x8e6>
 8011732:	4629      	mov	r1, r5
 8011734:	2201      	movs	r2, #1
 8011736:	4620      	mov	r0, r4
 8011738:	f002 fa3a 	bl	8013bb0 <__lshift>
 801173c:	4631      	mov	r1, r6
 801173e:	4605      	mov	r5, r0
 8011740:	f002 faa2 	bl	8013c88 <__mcmp>
 8011744:	2800      	cmp	r0, #0
 8011746:	dd6a      	ble.n	801181e <_strtod_l+0x8e6>
 8011748:	9904      	ldr	r1, [sp, #16]
 801174a:	4a55      	ldr	r2, [pc, #340]	; (80118a0 <_strtod_l+0x968>)
 801174c:	465b      	mov	r3, fp
 801174e:	2900      	cmp	r1, #0
 8011750:	f000 8085 	beq.w	801185e <_strtod_l+0x926>
 8011754:	ea02 010b 	and.w	r1, r2, fp
 8011758:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801175c:	dc7f      	bgt.n	801185e <_strtod_l+0x926>
 801175e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011762:	f77f aeaa 	ble.w	80114ba <_strtod_l+0x582>
 8011766:	4a4f      	ldr	r2, [pc, #316]	; (80118a4 <_strtod_l+0x96c>)
 8011768:	2300      	movs	r3, #0
 801176a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801176e:	4650      	mov	r0, sl
 8011770:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011774:	4659      	mov	r1, fp
 8011776:	f7ee ff4f 	bl	8000618 <__aeabi_dmul>
 801177a:	460b      	mov	r3, r1
 801177c:	4303      	orrs	r3, r0
 801177e:	bf08      	it	eq
 8011780:	2322      	moveq	r3, #34	; 0x22
 8011782:	4682      	mov	sl, r0
 8011784:	468b      	mov	fp, r1
 8011786:	bf08      	it	eq
 8011788:	6023      	streq	r3, [r4, #0]
 801178a:	e62b      	b.n	80113e4 <_strtod_l+0x4ac>
 801178c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011790:	fa02 f303 	lsl.w	r3, r2, r3
 8011794:	ea03 0a0a 	and.w	sl, r3, sl
 8011798:	e6de      	b.n	8011558 <_strtod_l+0x620>
 801179a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801179e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80117a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80117a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80117aa:	fa01 f308 	lsl.w	r3, r1, r8
 80117ae:	930c      	str	r3, [sp, #48]	; 0x30
 80117b0:	9111      	str	r1, [sp, #68]	; 0x44
 80117b2:	e741      	b.n	8011638 <_strtod_l+0x700>
 80117b4:	2300      	movs	r3, #0
 80117b6:	930c      	str	r3, [sp, #48]	; 0x30
 80117b8:	2301      	movs	r3, #1
 80117ba:	9311      	str	r3, [sp, #68]	; 0x44
 80117bc:	e73c      	b.n	8011638 <_strtod_l+0x700>
 80117be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80117c0:	4642      	mov	r2, r8
 80117c2:	4620      	mov	r0, r4
 80117c4:	f002 f9f4 	bl	8013bb0 <__lshift>
 80117c8:	901e      	str	r0, [sp, #120]	; 0x78
 80117ca:	2800      	cmp	r0, #0
 80117cc:	f47f af66 	bne.w	801169c <_strtod_l+0x764>
 80117d0:	e5fe      	b.n	80113d0 <_strtod_l+0x498>
 80117d2:	465f      	mov	r7, fp
 80117d4:	d16e      	bne.n	80118b4 <_strtod_l+0x97c>
 80117d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80117d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117dc:	b342      	cbz	r2, 8011830 <_strtod_l+0x8f8>
 80117de:	4a32      	ldr	r2, [pc, #200]	; (80118a8 <_strtod_l+0x970>)
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d128      	bne.n	8011836 <_strtod_l+0x8fe>
 80117e4:	9b04      	ldr	r3, [sp, #16]
 80117e6:	4650      	mov	r0, sl
 80117e8:	b1eb      	cbz	r3, 8011826 <_strtod_l+0x8ee>
 80117ea:	4a2d      	ldr	r2, [pc, #180]	; (80118a0 <_strtod_l+0x968>)
 80117ec:	403a      	ands	r2, r7
 80117ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80117f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80117f6:	d819      	bhi.n	801182c <_strtod_l+0x8f4>
 80117f8:	0d12      	lsrs	r2, r2, #20
 80117fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80117fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011802:	4298      	cmp	r0, r3
 8011804:	d117      	bne.n	8011836 <_strtod_l+0x8fe>
 8011806:	4b29      	ldr	r3, [pc, #164]	; (80118ac <_strtod_l+0x974>)
 8011808:	429f      	cmp	r7, r3
 801180a:	d102      	bne.n	8011812 <_strtod_l+0x8da>
 801180c:	3001      	adds	r0, #1
 801180e:	f43f addf 	beq.w	80113d0 <_strtod_l+0x498>
 8011812:	4b23      	ldr	r3, [pc, #140]	; (80118a0 <_strtod_l+0x968>)
 8011814:	403b      	ands	r3, r7
 8011816:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801181a:	f04f 0a00 	mov.w	sl, #0
 801181e:	9b04      	ldr	r3, [sp, #16]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1a0      	bne.n	8011766 <_strtod_l+0x82e>
 8011824:	e5de      	b.n	80113e4 <_strtod_l+0x4ac>
 8011826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801182a:	e7ea      	b.n	8011802 <_strtod_l+0x8ca>
 801182c:	460b      	mov	r3, r1
 801182e:	e7e8      	b.n	8011802 <_strtod_l+0x8ca>
 8011830:	ea53 030a 	orrs.w	r3, r3, sl
 8011834:	d088      	beq.n	8011748 <_strtod_l+0x810>
 8011836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011838:	b1db      	cbz	r3, 8011872 <_strtod_l+0x93a>
 801183a:	423b      	tst	r3, r7
 801183c:	d0ef      	beq.n	801181e <_strtod_l+0x8e6>
 801183e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011840:	9a04      	ldr	r2, [sp, #16]
 8011842:	4650      	mov	r0, sl
 8011844:	4659      	mov	r1, fp
 8011846:	b1c3      	cbz	r3, 801187a <_strtod_l+0x942>
 8011848:	f7ff fb5a 	bl	8010f00 <sulp>
 801184c:	4602      	mov	r2, r0
 801184e:	460b      	mov	r3, r1
 8011850:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011854:	f7ee fd2a 	bl	80002ac <__adddf3>
 8011858:	4682      	mov	sl, r0
 801185a:	468b      	mov	fp, r1
 801185c:	e7df      	b.n	801181e <_strtod_l+0x8e6>
 801185e:	4013      	ands	r3, r2
 8011860:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011864:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011868:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801186c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011870:	e7d5      	b.n	801181e <_strtod_l+0x8e6>
 8011872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011874:	ea13 0f0a 	tst.w	r3, sl
 8011878:	e7e0      	b.n	801183c <_strtod_l+0x904>
 801187a:	f7ff fb41 	bl	8010f00 <sulp>
 801187e:	4602      	mov	r2, r0
 8011880:	460b      	mov	r3, r1
 8011882:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011886:	f7ee fd0f 	bl	80002a8 <__aeabi_dsub>
 801188a:	2200      	movs	r2, #0
 801188c:	2300      	movs	r3, #0
 801188e:	4682      	mov	sl, r0
 8011890:	468b      	mov	fp, r1
 8011892:	f7ef f929 	bl	8000ae8 <__aeabi_dcmpeq>
 8011896:	2800      	cmp	r0, #0
 8011898:	d0c1      	beq.n	801181e <_strtod_l+0x8e6>
 801189a:	e60e      	b.n	80114ba <_strtod_l+0x582>
 801189c:	fffffc02 	.word	0xfffffc02
 80118a0:	7ff00000 	.word	0x7ff00000
 80118a4:	39500000 	.word	0x39500000
 80118a8:	000fffff 	.word	0x000fffff
 80118ac:	7fefffff 	.word	0x7fefffff
 80118b0:	08014fe8 	.word	0x08014fe8
 80118b4:	4631      	mov	r1, r6
 80118b6:	4628      	mov	r0, r5
 80118b8:	f002 fb62 	bl	8013f80 <__ratio>
 80118bc:	ec59 8b10 	vmov	r8, r9, d0
 80118c0:	ee10 0a10 	vmov	r0, s0
 80118c4:	2200      	movs	r2, #0
 80118c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80118ca:	4649      	mov	r1, r9
 80118cc:	f7ef f920 	bl	8000b10 <__aeabi_dcmple>
 80118d0:	2800      	cmp	r0, #0
 80118d2:	d07c      	beq.n	80119ce <_strtod_l+0xa96>
 80118d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d04c      	beq.n	8011974 <_strtod_l+0xa3c>
 80118da:	4b95      	ldr	r3, [pc, #596]	; (8011b30 <_strtod_l+0xbf8>)
 80118dc:	2200      	movs	r2, #0
 80118de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80118e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011b30 <_strtod_l+0xbf8>
 80118e6:	f04f 0800 	mov.w	r8, #0
 80118ea:	4b92      	ldr	r3, [pc, #584]	; (8011b34 <_strtod_l+0xbfc>)
 80118ec:	403b      	ands	r3, r7
 80118ee:	9311      	str	r3, [sp, #68]	; 0x44
 80118f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80118f2:	4b91      	ldr	r3, [pc, #580]	; (8011b38 <_strtod_l+0xc00>)
 80118f4:	429a      	cmp	r2, r3
 80118f6:	f040 80b2 	bne.w	8011a5e <_strtod_l+0xb26>
 80118fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80118fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011902:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011906:	ec4b ab10 	vmov	d0, sl, fp
 801190a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801190e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011912:	f002 fa5d 	bl	8013dd0 <__ulp>
 8011916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801191a:	ec53 2b10 	vmov	r2, r3, d0
 801191e:	f7ee fe7b 	bl	8000618 <__aeabi_dmul>
 8011922:	4652      	mov	r2, sl
 8011924:	465b      	mov	r3, fp
 8011926:	f7ee fcc1 	bl	80002ac <__adddf3>
 801192a:	460b      	mov	r3, r1
 801192c:	4981      	ldr	r1, [pc, #516]	; (8011b34 <_strtod_l+0xbfc>)
 801192e:	4a83      	ldr	r2, [pc, #524]	; (8011b3c <_strtod_l+0xc04>)
 8011930:	4019      	ands	r1, r3
 8011932:	4291      	cmp	r1, r2
 8011934:	4682      	mov	sl, r0
 8011936:	d95e      	bls.n	80119f6 <_strtod_l+0xabe>
 8011938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801193a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801193e:	4293      	cmp	r3, r2
 8011940:	d103      	bne.n	801194a <_strtod_l+0xa12>
 8011942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011944:	3301      	adds	r3, #1
 8011946:	f43f ad43 	beq.w	80113d0 <_strtod_l+0x498>
 801194a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011b48 <_strtod_l+0xc10>
 801194e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011952:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011954:	4620      	mov	r0, r4
 8011956:	f001 ff0f 	bl	8013778 <_Bfree>
 801195a:	9907      	ldr	r1, [sp, #28]
 801195c:	4620      	mov	r0, r4
 801195e:	f001 ff0b 	bl	8013778 <_Bfree>
 8011962:	4631      	mov	r1, r6
 8011964:	4620      	mov	r0, r4
 8011966:	f001 ff07 	bl	8013778 <_Bfree>
 801196a:	4629      	mov	r1, r5
 801196c:	4620      	mov	r0, r4
 801196e:	f001 ff03 	bl	8013778 <_Bfree>
 8011972:	e613      	b.n	801159c <_strtod_l+0x664>
 8011974:	f1ba 0f00 	cmp.w	sl, #0
 8011978:	d11b      	bne.n	80119b2 <_strtod_l+0xa7a>
 801197a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801197e:	b9f3      	cbnz	r3, 80119be <_strtod_l+0xa86>
 8011980:	4b6b      	ldr	r3, [pc, #428]	; (8011b30 <_strtod_l+0xbf8>)
 8011982:	2200      	movs	r2, #0
 8011984:	4640      	mov	r0, r8
 8011986:	4649      	mov	r1, r9
 8011988:	f7ef f8b8 	bl	8000afc <__aeabi_dcmplt>
 801198c:	b9d0      	cbnz	r0, 80119c4 <_strtod_l+0xa8c>
 801198e:	4640      	mov	r0, r8
 8011990:	4649      	mov	r1, r9
 8011992:	4b6b      	ldr	r3, [pc, #428]	; (8011b40 <_strtod_l+0xc08>)
 8011994:	2200      	movs	r2, #0
 8011996:	f7ee fe3f 	bl	8000618 <__aeabi_dmul>
 801199a:	4680      	mov	r8, r0
 801199c:	4689      	mov	r9, r1
 801199e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80119a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80119a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80119a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80119ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80119b0:	e79b      	b.n	80118ea <_strtod_l+0x9b2>
 80119b2:	f1ba 0f01 	cmp.w	sl, #1
 80119b6:	d102      	bne.n	80119be <_strtod_l+0xa86>
 80119b8:	2f00      	cmp	r7, #0
 80119ba:	f43f ad7e 	beq.w	80114ba <_strtod_l+0x582>
 80119be:	4b61      	ldr	r3, [pc, #388]	; (8011b44 <_strtod_l+0xc0c>)
 80119c0:	2200      	movs	r2, #0
 80119c2:	e78c      	b.n	80118de <_strtod_l+0x9a6>
 80119c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011b40 <_strtod_l+0xc08>
 80119c8:	f04f 0800 	mov.w	r8, #0
 80119cc:	e7e7      	b.n	801199e <_strtod_l+0xa66>
 80119ce:	4b5c      	ldr	r3, [pc, #368]	; (8011b40 <_strtod_l+0xc08>)
 80119d0:	4640      	mov	r0, r8
 80119d2:	4649      	mov	r1, r9
 80119d4:	2200      	movs	r2, #0
 80119d6:	f7ee fe1f 	bl	8000618 <__aeabi_dmul>
 80119da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119dc:	4680      	mov	r8, r0
 80119de:	4689      	mov	r9, r1
 80119e0:	b933      	cbnz	r3, 80119f0 <_strtod_l+0xab8>
 80119e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80119e6:	9012      	str	r0, [sp, #72]	; 0x48
 80119e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80119ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80119ee:	e7dd      	b.n	80119ac <_strtod_l+0xa74>
 80119f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80119f4:	e7f9      	b.n	80119ea <_strtod_l+0xab2>
 80119f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80119fa:	9b04      	ldr	r3, [sp, #16]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d1a8      	bne.n	8011952 <_strtod_l+0xa1a>
 8011a00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011a04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a06:	0d1b      	lsrs	r3, r3, #20
 8011a08:	051b      	lsls	r3, r3, #20
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d1a1      	bne.n	8011952 <_strtod_l+0xa1a>
 8011a0e:	4640      	mov	r0, r8
 8011a10:	4649      	mov	r1, r9
 8011a12:	f7ef f961 	bl	8000cd8 <__aeabi_d2lz>
 8011a16:	f7ee fdd1 	bl	80005bc <__aeabi_l2d>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	4640      	mov	r0, r8
 8011a20:	4649      	mov	r1, r9
 8011a22:	f7ee fc41 	bl	80002a8 <__aeabi_dsub>
 8011a26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a2c:	ea43 030a 	orr.w	r3, r3, sl
 8011a30:	4313      	orrs	r3, r2
 8011a32:	4680      	mov	r8, r0
 8011a34:	4689      	mov	r9, r1
 8011a36:	d053      	beq.n	8011ae0 <_strtod_l+0xba8>
 8011a38:	a335      	add	r3, pc, #212	; (adr r3, 8011b10 <_strtod_l+0xbd8>)
 8011a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3e:	f7ef f85d 	bl	8000afc <__aeabi_dcmplt>
 8011a42:	2800      	cmp	r0, #0
 8011a44:	f47f acce 	bne.w	80113e4 <_strtod_l+0x4ac>
 8011a48:	a333      	add	r3, pc, #204	; (adr r3, 8011b18 <_strtod_l+0xbe0>)
 8011a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4e:	4640      	mov	r0, r8
 8011a50:	4649      	mov	r1, r9
 8011a52:	f7ef f871 	bl	8000b38 <__aeabi_dcmpgt>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	f43f af7b 	beq.w	8011952 <_strtod_l+0xa1a>
 8011a5c:	e4c2      	b.n	80113e4 <_strtod_l+0x4ac>
 8011a5e:	9b04      	ldr	r3, [sp, #16]
 8011a60:	b333      	cbz	r3, 8011ab0 <_strtod_l+0xb78>
 8011a62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011a68:	d822      	bhi.n	8011ab0 <_strtod_l+0xb78>
 8011a6a:	a32d      	add	r3, pc, #180	; (adr r3, 8011b20 <_strtod_l+0xbe8>)
 8011a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a70:	4640      	mov	r0, r8
 8011a72:	4649      	mov	r1, r9
 8011a74:	f7ef f84c 	bl	8000b10 <__aeabi_dcmple>
 8011a78:	b1a0      	cbz	r0, 8011aa4 <_strtod_l+0xb6c>
 8011a7a:	4649      	mov	r1, r9
 8011a7c:	4640      	mov	r0, r8
 8011a7e:	f7ef f8a3 	bl	8000bc8 <__aeabi_d2uiz>
 8011a82:	2801      	cmp	r0, #1
 8011a84:	bf38      	it	cc
 8011a86:	2001      	movcc	r0, #1
 8011a88:	f7ee fd4c 	bl	8000524 <__aeabi_ui2d>
 8011a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a8e:	4680      	mov	r8, r0
 8011a90:	4689      	mov	r9, r1
 8011a92:	bb13      	cbnz	r3, 8011ada <_strtod_l+0xba2>
 8011a94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a98:	9014      	str	r0, [sp, #80]	; 0x50
 8011a9a:	9315      	str	r3, [sp, #84]	; 0x54
 8011a9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011aa0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011aa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011aa8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011aac:	1a9b      	subs	r3, r3, r2
 8011aae:	930d      	str	r3, [sp, #52]	; 0x34
 8011ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ab4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011ab8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011abc:	f002 f988 	bl	8013dd0 <__ulp>
 8011ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ac4:	ec53 2b10 	vmov	r2, r3, d0
 8011ac8:	f7ee fda6 	bl	8000618 <__aeabi_dmul>
 8011acc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ad0:	f7ee fbec 	bl	80002ac <__adddf3>
 8011ad4:	4682      	mov	sl, r0
 8011ad6:	468b      	mov	fp, r1
 8011ad8:	e78f      	b.n	80119fa <_strtod_l+0xac2>
 8011ada:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011ade:	e7dd      	b.n	8011a9c <_strtod_l+0xb64>
 8011ae0:	a311      	add	r3, pc, #68	; (adr r3, 8011b28 <_strtod_l+0xbf0>)
 8011ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae6:	f7ef f809 	bl	8000afc <__aeabi_dcmplt>
 8011aea:	e7b4      	b.n	8011a56 <_strtod_l+0xb1e>
 8011aec:	2300      	movs	r3, #0
 8011aee:	930e      	str	r3, [sp, #56]	; 0x38
 8011af0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011af2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011af4:	6013      	str	r3, [r2, #0]
 8011af6:	f7ff ba65 	b.w	8010fc4 <_strtod_l+0x8c>
 8011afa:	2b65      	cmp	r3, #101	; 0x65
 8011afc:	f43f ab5d 	beq.w	80111ba <_strtod_l+0x282>
 8011b00:	2b45      	cmp	r3, #69	; 0x45
 8011b02:	f43f ab5a 	beq.w	80111ba <_strtod_l+0x282>
 8011b06:	2201      	movs	r2, #1
 8011b08:	f7ff bb92 	b.w	8011230 <_strtod_l+0x2f8>
 8011b0c:	f3af 8000 	nop.w
 8011b10:	94a03595 	.word	0x94a03595
 8011b14:	3fdfffff 	.word	0x3fdfffff
 8011b18:	35afe535 	.word	0x35afe535
 8011b1c:	3fe00000 	.word	0x3fe00000
 8011b20:	ffc00000 	.word	0xffc00000
 8011b24:	41dfffff 	.word	0x41dfffff
 8011b28:	94a03595 	.word	0x94a03595
 8011b2c:	3fcfffff 	.word	0x3fcfffff
 8011b30:	3ff00000 	.word	0x3ff00000
 8011b34:	7ff00000 	.word	0x7ff00000
 8011b38:	7fe00000 	.word	0x7fe00000
 8011b3c:	7c9fffff 	.word	0x7c9fffff
 8011b40:	3fe00000 	.word	0x3fe00000
 8011b44:	bff00000 	.word	0xbff00000
 8011b48:	7fefffff 	.word	0x7fefffff

08011b4c <_strtod_r>:
 8011b4c:	4b01      	ldr	r3, [pc, #4]	; (8011b54 <_strtod_r+0x8>)
 8011b4e:	f7ff b9f3 	b.w	8010f38 <_strtod_l>
 8011b52:	bf00      	nop
 8011b54:	200001f4 	.word	0x200001f4

08011b58 <_strtol_l.isra.0>:
 8011b58:	2b01      	cmp	r3, #1
 8011b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b5e:	d001      	beq.n	8011b64 <_strtol_l.isra.0+0xc>
 8011b60:	2b24      	cmp	r3, #36	; 0x24
 8011b62:	d906      	bls.n	8011b72 <_strtol_l.isra.0+0x1a>
 8011b64:	f7fe f950 	bl	800fe08 <__errno>
 8011b68:	2316      	movs	r3, #22
 8011b6a:	6003      	str	r3, [r0, #0]
 8011b6c:	2000      	movs	r0, #0
 8011b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b72:	4f3a      	ldr	r7, [pc, #232]	; (8011c5c <_strtol_l.isra.0+0x104>)
 8011b74:	468e      	mov	lr, r1
 8011b76:	4676      	mov	r6, lr
 8011b78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011b7c:	5de5      	ldrb	r5, [r4, r7]
 8011b7e:	f015 0508 	ands.w	r5, r5, #8
 8011b82:	d1f8      	bne.n	8011b76 <_strtol_l.isra.0+0x1e>
 8011b84:	2c2d      	cmp	r4, #45	; 0x2d
 8011b86:	d134      	bne.n	8011bf2 <_strtol_l.isra.0+0x9a>
 8011b88:	f89e 4000 	ldrb.w	r4, [lr]
 8011b8c:	f04f 0801 	mov.w	r8, #1
 8011b90:	f106 0e02 	add.w	lr, r6, #2
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d05c      	beq.n	8011c52 <_strtol_l.isra.0+0xfa>
 8011b98:	2b10      	cmp	r3, #16
 8011b9a:	d10c      	bne.n	8011bb6 <_strtol_l.isra.0+0x5e>
 8011b9c:	2c30      	cmp	r4, #48	; 0x30
 8011b9e:	d10a      	bne.n	8011bb6 <_strtol_l.isra.0+0x5e>
 8011ba0:	f89e 4000 	ldrb.w	r4, [lr]
 8011ba4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011ba8:	2c58      	cmp	r4, #88	; 0x58
 8011baa:	d14d      	bne.n	8011c48 <_strtol_l.isra.0+0xf0>
 8011bac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011bb0:	2310      	movs	r3, #16
 8011bb2:	f10e 0e02 	add.w	lr, lr, #2
 8011bb6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011bba:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8011bbe:	2600      	movs	r6, #0
 8011bc0:	fbbc f9f3 	udiv	r9, ip, r3
 8011bc4:	4635      	mov	r5, r6
 8011bc6:	fb03 ca19 	mls	sl, r3, r9, ip
 8011bca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011bce:	2f09      	cmp	r7, #9
 8011bd0:	d818      	bhi.n	8011c04 <_strtol_l.isra.0+0xac>
 8011bd2:	463c      	mov	r4, r7
 8011bd4:	42a3      	cmp	r3, r4
 8011bd6:	dd24      	ble.n	8011c22 <_strtol_l.isra.0+0xca>
 8011bd8:	2e00      	cmp	r6, #0
 8011bda:	db1f      	blt.n	8011c1c <_strtol_l.isra.0+0xc4>
 8011bdc:	45a9      	cmp	r9, r5
 8011bde:	d31d      	bcc.n	8011c1c <_strtol_l.isra.0+0xc4>
 8011be0:	d101      	bne.n	8011be6 <_strtol_l.isra.0+0x8e>
 8011be2:	45a2      	cmp	sl, r4
 8011be4:	db1a      	blt.n	8011c1c <_strtol_l.isra.0+0xc4>
 8011be6:	fb05 4503 	mla	r5, r5, r3, r4
 8011bea:	2601      	movs	r6, #1
 8011bec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011bf0:	e7eb      	b.n	8011bca <_strtol_l.isra.0+0x72>
 8011bf2:	2c2b      	cmp	r4, #43	; 0x2b
 8011bf4:	bf08      	it	eq
 8011bf6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011bfa:	46a8      	mov	r8, r5
 8011bfc:	bf08      	it	eq
 8011bfe:	f106 0e02 	addeq.w	lr, r6, #2
 8011c02:	e7c7      	b.n	8011b94 <_strtol_l.isra.0+0x3c>
 8011c04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011c08:	2f19      	cmp	r7, #25
 8011c0a:	d801      	bhi.n	8011c10 <_strtol_l.isra.0+0xb8>
 8011c0c:	3c37      	subs	r4, #55	; 0x37
 8011c0e:	e7e1      	b.n	8011bd4 <_strtol_l.isra.0+0x7c>
 8011c10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011c14:	2f19      	cmp	r7, #25
 8011c16:	d804      	bhi.n	8011c22 <_strtol_l.isra.0+0xca>
 8011c18:	3c57      	subs	r4, #87	; 0x57
 8011c1a:	e7db      	b.n	8011bd4 <_strtol_l.isra.0+0x7c>
 8011c1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011c20:	e7e4      	b.n	8011bec <_strtol_l.isra.0+0x94>
 8011c22:	2e00      	cmp	r6, #0
 8011c24:	da05      	bge.n	8011c32 <_strtol_l.isra.0+0xda>
 8011c26:	2322      	movs	r3, #34	; 0x22
 8011c28:	6003      	str	r3, [r0, #0]
 8011c2a:	4665      	mov	r5, ip
 8011c2c:	b942      	cbnz	r2, 8011c40 <_strtol_l.isra.0+0xe8>
 8011c2e:	4628      	mov	r0, r5
 8011c30:	e79d      	b.n	8011b6e <_strtol_l.isra.0+0x16>
 8011c32:	f1b8 0f00 	cmp.w	r8, #0
 8011c36:	d000      	beq.n	8011c3a <_strtol_l.isra.0+0xe2>
 8011c38:	426d      	negs	r5, r5
 8011c3a:	2a00      	cmp	r2, #0
 8011c3c:	d0f7      	beq.n	8011c2e <_strtol_l.isra.0+0xd6>
 8011c3e:	b10e      	cbz	r6, 8011c44 <_strtol_l.isra.0+0xec>
 8011c40:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8011c44:	6011      	str	r1, [r2, #0]
 8011c46:	e7f2      	b.n	8011c2e <_strtol_l.isra.0+0xd6>
 8011c48:	2430      	movs	r4, #48	; 0x30
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1b3      	bne.n	8011bb6 <_strtol_l.isra.0+0x5e>
 8011c4e:	2308      	movs	r3, #8
 8011c50:	e7b1      	b.n	8011bb6 <_strtol_l.isra.0+0x5e>
 8011c52:	2c30      	cmp	r4, #48	; 0x30
 8011c54:	d0a4      	beq.n	8011ba0 <_strtol_l.isra.0+0x48>
 8011c56:	230a      	movs	r3, #10
 8011c58:	e7ad      	b.n	8011bb6 <_strtol_l.isra.0+0x5e>
 8011c5a:	bf00      	nop
 8011c5c:	08015011 	.word	0x08015011

08011c60 <_strtol_r>:
 8011c60:	f7ff bf7a 	b.w	8011b58 <_strtol_l.isra.0>

08011c64 <__swbuf_r>:
 8011c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c66:	460e      	mov	r6, r1
 8011c68:	4614      	mov	r4, r2
 8011c6a:	4605      	mov	r5, r0
 8011c6c:	b118      	cbz	r0, 8011c76 <__swbuf_r+0x12>
 8011c6e:	6983      	ldr	r3, [r0, #24]
 8011c70:	b90b      	cbnz	r3, 8011c76 <__swbuf_r+0x12>
 8011c72:	f001 f8ab 	bl	8012dcc <__sinit>
 8011c76:	4b21      	ldr	r3, [pc, #132]	; (8011cfc <__swbuf_r+0x98>)
 8011c78:	429c      	cmp	r4, r3
 8011c7a:	d12b      	bne.n	8011cd4 <__swbuf_r+0x70>
 8011c7c:	686c      	ldr	r4, [r5, #4]
 8011c7e:	69a3      	ldr	r3, [r4, #24]
 8011c80:	60a3      	str	r3, [r4, #8]
 8011c82:	89a3      	ldrh	r3, [r4, #12]
 8011c84:	071a      	lsls	r2, r3, #28
 8011c86:	d52f      	bpl.n	8011ce8 <__swbuf_r+0x84>
 8011c88:	6923      	ldr	r3, [r4, #16]
 8011c8a:	b36b      	cbz	r3, 8011ce8 <__swbuf_r+0x84>
 8011c8c:	6923      	ldr	r3, [r4, #16]
 8011c8e:	6820      	ldr	r0, [r4, #0]
 8011c90:	1ac0      	subs	r0, r0, r3
 8011c92:	6963      	ldr	r3, [r4, #20]
 8011c94:	b2f6      	uxtb	r6, r6
 8011c96:	4283      	cmp	r3, r0
 8011c98:	4637      	mov	r7, r6
 8011c9a:	dc04      	bgt.n	8011ca6 <__swbuf_r+0x42>
 8011c9c:	4621      	mov	r1, r4
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	f001 f800 	bl	8012ca4 <_fflush_r>
 8011ca4:	bb30      	cbnz	r0, 8011cf4 <__swbuf_r+0x90>
 8011ca6:	68a3      	ldr	r3, [r4, #8]
 8011ca8:	3b01      	subs	r3, #1
 8011caa:	60a3      	str	r3, [r4, #8]
 8011cac:	6823      	ldr	r3, [r4, #0]
 8011cae:	1c5a      	adds	r2, r3, #1
 8011cb0:	6022      	str	r2, [r4, #0]
 8011cb2:	701e      	strb	r6, [r3, #0]
 8011cb4:	6963      	ldr	r3, [r4, #20]
 8011cb6:	3001      	adds	r0, #1
 8011cb8:	4283      	cmp	r3, r0
 8011cba:	d004      	beq.n	8011cc6 <__swbuf_r+0x62>
 8011cbc:	89a3      	ldrh	r3, [r4, #12]
 8011cbe:	07db      	lsls	r3, r3, #31
 8011cc0:	d506      	bpl.n	8011cd0 <__swbuf_r+0x6c>
 8011cc2:	2e0a      	cmp	r6, #10
 8011cc4:	d104      	bne.n	8011cd0 <__swbuf_r+0x6c>
 8011cc6:	4621      	mov	r1, r4
 8011cc8:	4628      	mov	r0, r5
 8011cca:	f000 ffeb 	bl	8012ca4 <_fflush_r>
 8011cce:	b988      	cbnz	r0, 8011cf4 <__swbuf_r+0x90>
 8011cd0:	4638      	mov	r0, r7
 8011cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cd4:	4b0a      	ldr	r3, [pc, #40]	; (8011d00 <__swbuf_r+0x9c>)
 8011cd6:	429c      	cmp	r4, r3
 8011cd8:	d101      	bne.n	8011cde <__swbuf_r+0x7a>
 8011cda:	68ac      	ldr	r4, [r5, #8]
 8011cdc:	e7cf      	b.n	8011c7e <__swbuf_r+0x1a>
 8011cde:	4b09      	ldr	r3, [pc, #36]	; (8011d04 <__swbuf_r+0xa0>)
 8011ce0:	429c      	cmp	r4, r3
 8011ce2:	bf08      	it	eq
 8011ce4:	68ec      	ldreq	r4, [r5, #12]
 8011ce6:	e7ca      	b.n	8011c7e <__swbuf_r+0x1a>
 8011ce8:	4621      	mov	r1, r4
 8011cea:	4628      	mov	r0, r5
 8011cec:	f000 f80c 	bl	8011d08 <__swsetup_r>
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	d0cb      	beq.n	8011c8c <__swbuf_r+0x28>
 8011cf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011cf8:	e7ea      	b.n	8011cd0 <__swbuf_r+0x6c>
 8011cfa:	bf00      	nop
 8011cfc:	080151c8 	.word	0x080151c8
 8011d00:	080151e8 	.word	0x080151e8
 8011d04:	080151a8 	.word	0x080151a8

08011d08 <__swsetup_r>:
 8011d08:	4b32      	ldr	r3, [pc, #200]	; (8011dd4 <__swsetup_r+0xcc>)
 8011d0a:	b570      	push	{r4, r5, r6, lr}
 8011d0c:	681d      	ldr	r5, [r3, #0]
 8011d0e:	4606      	mov	r6, r0
 8011d10:	460c      	mov	r4, r1
 8011d12:	b125      	cbz	r5, 8011d1e <__swsetup_r+0x16>
 8011d14:	69ab      	ldr	r3, [r5, #24]
 8011d16:	b913      	cbnz	r3, 8011d1e <__swsetup_r+0x16>
 8011d18:	4628      	mov	r0, r5
 8011d1a:	f001 f857 	bl	8012dcc <__sinit>
 8011d1e:	4b2e      	ldr	r3, [pc, #184]	; (8011dd8 <__swsetup_r+0xd0>)
 8011d20:	429c      	cmp	r4, r3
 8011d22:	d10f      	bne.n	8011d44 <__swsetup_r+0x3c>
 8011d24:	686c      	ldr	r4, [r5, #4]
 8011d26:	89a3      	ldrh	r3, [r4, #12]
 8011d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d2c:	0719      	lsls	r1, r3, #28
 8011d2e:	d42c      	bmi.n	8011d8a <__swsetup_r+0x82>
 8011d30:	06dd      	lsls	r5, r3, #27
 8011d32:	d411      	bmi.n	8011d58 <__swsetup_r+0x50>
 8011d34:	2309      	movs	r3, #9
 8011d36:	6033      	str	r3, [r6, #0]
 8011d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d3c:	81a3      	strh	r3, [r4, #12]
 8011d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d42:	e03e      	b.n	8011dc2 <__swsetup_r+0xba>
 8011d44:	4b25      	ldr	r3, [pc, #148]	; (8011ddc <__swsetup_r+0xd4>)
 8011d46:	429c      	cmp	r4, r3
 8011d48:	d101      	bne.n	8011d4e <__swsetup_r+0x46>
 8011d4a:	68ac      	ldr	r4, [r5, #8]
 8011d4c:	e7eb      	b.n	8011d26 <__swsetup_r+0x1e>
 8011d4e:	4b24      	ldr	r3, [pc, #144]	; (8011de0 <__swsetup_r+0xd8>)
 8011d50:	429c      	cmp	r4, r3
 8011d52:	bf08      	it	eq
 8011d54:	68ec      	ldreq	r4, [r5, #12]
 8011d56:	e7e6      	b.n	8011d26 <__swsetup_r+0x1e>
 8011d58:	0758      	lsls	r0, r3, #29
 8011d5a:	d512      	bpl.n	8011d82 <__swsetup_r+0x7a>
 8011d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d5e:	b141      	cbz	r1, 8011d72 <__swsetup_r+0x6a>
 8011d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d64:	4299      	cmp	r1, r3
 8011d66:	d002      	beq.n	8011d6e <__swsetup_r+0x66>
 8011d68:	4630      	mov	r0, r6
 8011d6a:	f7fe f89d 	bl	800fea8 <_free_r>
 8011d6e:	2300      	movs	r3, #0
 8011d70:	6363      	str	r3, [r4, #52]	; 0x34
 8011d72:	89a3      	ldrh	r3, [r4, #12]
 8011d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d78:	81a3      	strh	r3, [r4, #12]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	6063      	str	r3, [r4, #4]
 8011d7e:	6923      	ldr	r3, [r4, #16]
 8011d80:	6023      	str	r3, [r4, #0]
 8011d82:	89a3      	ldrh	r3, [r4, #12]
 8011d84:	f043 0308 	orr.w	r3, r3, #8
 8011d88:	81a3      	strh	r3, [r4, #12]
 8011d8a:	6923      	ldr	r3, [r4, #16]
 8011d8c:	b94b      	cbnz	r3, 8011da2 <__swsetup_r+0x9a>
 8011d8e:	89a3      	ldrh	r3, [r4, #12]
 8011d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d98:	d003      	beq.n	8011da2 <__swsetup_r+0x9a>
 8011d9a:	4621      	mov	r1, r4
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	f001 fc4d 	bl	801363c <__smakebuf_r>
 8011da2:	89a0      	ldrh	r0, [r4, #12]
 8011da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011da8:	f010 0301 	ands.w	r3, r0, #1
 8011dac:	d00a      	beq.n	8011dc4 <__swsetup_r+0xbc>
 8011dae:	2300      	movs	r3, #0
 8011db0:	60a3      	str	r3, [r4, #8]
 8011db2:	6963      	ldr	r3, [r4, #20]
 8011db4:	425b      	negs	r3, r3
 8011db6:	61a3      	str	r3, [r4, #24]
 8011db8:	6923      	ldr	r3, [r4, #16]
 8011dba:	b943      	cbnz	r3, 8011dce <__swsetup_r+0xc6>
 8011dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011dc0:	d1ba      	bne.n	8011d38 <__swsetup_r+0x30>
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	0781      	lsls	r1, r0, #30
 8011dc6:	bf58      	it	pl
 8011dc8:	6963      	ldrpl	r3, [r4, #20]
 8011dca:	60a3      	str	r3, [r4, #8]
 8011dcc:	e7f4      	b.n	8011db8 <__swsetup_r+0xb0>
 8011dce:	2000      	movs	r0, #0
 8011dd0:	e7f7      	b.n	8011dc2 <__swsetup_r+0xba>
 8011dd2:	bf00      	nop
 8011dd4:	20000188 	.word	0x20000188
 8011dd8:	080151c8 	.word	0x080151c8
 8011ddc:	080151e8 	.word	0x080151e8
 8011de0:	080151a8 	.word	0x080151a8

08011de4 <__register_exitproc>:
 8011de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011de8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011ea4 <__register_exitproc+0xc0>
 8011dec:	4606      	mov	r6, r0
 8011dee:	f8d8 0000 	ldr.w	r0, [r8]
 8011df2:	461f      	mov	r7, r3
 8011df4:	460d      	mov	r5, r1
 8011df6:	4691      	mov	r9, r2
 8011df8:	f001 fbf9 	bl	80135ee <__retarget_lock_acquire_recursive>
 8011dfc:	4b25      	ldr	r3, [pc, #148]	; (8011e94 <__register_exitproc+0xb0>)
 8011dfe:	681c      	ldr	r4, [r3, #0]
 8011e00:	b934      	cbnz	r4, 8011e10 <__register_exitproc+0x2c>
 8011e02:	4c25      	ldr	r4, [pc, #148]	; (8011e98 <__register_exitproc+0xb4>)
 8011e04:	601c      	str	r4, [r3, #0]
 8011e06:	4b25      	ldr	r3, [pc, #148]	; (8011e9c <__register_exitproc+0xb8>)
 8011e08:	b113      	cbz	r3, 8011e10 <__register_exitproc+0x2c>
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8011e10:	6863      	ldr	r3, [r4, #4]
 8011e12:	2b1f      	cmp	r3, #31
 8011e14:	dd07      	ble.n	8011e26 <__register_exitproc+0x42>
 8011e16:	f8d8 0000 	ldr.w	r0, [r8]
 8011e1a:	f001 fbea 	bl	80135f2 <__retarget_lock_release_recursive>
 8011e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e26:	b34e      	cbz	r6, 8011e7c <__register_exitproc+0x98>
 8011e28:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011e2c:	b988      	cbnz	r0, 8011e52 <__register_exitproc+0x6e>
 8011e2e:	4b1c      	ldr	r3, [pc, #112]	; (8011ea0 <__register_exitproc+0xbc>)
 8011e30:	b923      	cbnz	r3, 8011e3c <__register_exitproc+0x58>
 8011e32:	f8d8 0000 	ldr.w	r0, [r8]
 8011e36:	f001 fbdb 	bl	80135f0 <__retarget_lock_release>
 8011e3a:	e7f0      	b.n	8011e1e <__register_exitproc+0x3a>
 8011e3c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011e40:	f7fe f80c 	bl	800fe5c <malloc>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d0f4      	beq.n	8011e32 <__register_exitproc+0x4e>
 8011e48:	2300      	movs	r3, #0
 8011e4a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8011e4e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8011e52:	6863      	ldr	r3, [r4, #4]
 8011e54:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011e58:	2201      	movs	r2, #1
 8011e5a:	409a      	lsls	r2, r3
 8011e5c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8011e60:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011e64:	4313      	orrs	r3, r2
 8011e66:	2e02      	cmp	r6, #2
 8011e68:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011e6c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8011e70:	bf02      	ittt	eq
 8011e72:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8011e76:	431a      	orreq	r2, r3
 8011e78:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8011e7c:	6863      	ldr	r3, [r4, #4]
 8011e7e:	f8d8 0000 	ldr.w	r0, [r8]
 8011e82:	1c5a      	adds	r2, r3, #1
 8011e84:	3302      	adds	r3, #2
 8011e86:	6062      	str	r2, [r4, #4]
 8011e88:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011e8c:	f001 fbb1 	bl	80135f2 <__retarget_lock_release_recursive>
 8011e90:	2000      	movs	r0, #0
 8011e92:	e7c6      	b.n	8011e22 <__register_exitproc+0x3e>
 8011e94:	20002884 	.word	0x20002884
 8011e98:	200027f8 	.word	0x200027f8
 8011e9c:	00000000 	.word	0x00000000
 8011ea0:	0800fe5d 	.word	0x0800fe5d
 8011ea4:	200001ec 	.word	0x200001ec

08011ea8 <quorem>:
 8011ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eac:	6903      	ldr	r3, [r0, #16]
 8011eae:	690c      	ldr	r4, [r1, #16]
 8011eb0:	42a3      	cmp	r3, r4
 8011eb2:	4607      	mov	r7, r0
 8011eb4:	f2c0 8081 	blt.w	8011fba <quorem+0x112>
 8011eb8:	3c01      	subs	r4, #1
 8011eba:	f101 0814 	add.w	r8, r1, #20
 8011ebe:	f100 0514 	add.w	r5, r0, #20
 8011ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ec6:	9301      	str	r3, [sp, #4]
 8011ec8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011ecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011ed8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011edc:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ee0:	d331      	bcc.n	8011f46 <quorem+0x9e>
 8011ee2:	f04f 0e00 	mov.w	lr, #0
 8011ee6:	4640      	mov	r0, r8
 8011ee8:	46ac      	mov	ip, r5
 8011eea:	46f2      	mov	sl, lr
 8011eec:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ef0:	b293      	uxth	r3, r2
 8011ef2:	fb06 e303 	mla	r3, r6, r3, lr
 8011ef6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	ebaa 0303 	sub.w	r3, sl, r3
 8011f00:	0c12      	lsrs	r2, r2, #16
 8011f02:	f8dc a000 	ldr.w	sl, [ip]
 8011f06:	fb06 e202 	mla	r2, r6, r2, lr
 8011f0a:	fa13 f38a 	uxtah	r3, r3, sl
 8011f0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f12:	fa1f fa82 	uxth.w	sl, r2
 8011f16:	f8dc 2000 	ldr.w	r2, [ip]
 8011f1a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011f1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f28:	4581      	cmp	r9, r0
 8011f2a:	f84c 3b04 	str.w	r3, [ip], #4
 8011f2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011f32:	d2db      	bcs.n	8011eec <quorem+0x44>
 8011f34:	f855 300b 	ldr.w	r3, [r5, fp]
 8011f38:	b92b      	cbnz	r3, 8011f46 <quorem+0x9e>
 8011f3a:	9b01      	ldr	r3, [sp, #4]
 8011f3c:	3b04      	subs	r3, #4
 8011f3e:	429d      	cmp	r5, r3
 8011f40:	461a      	mov	r2, r3
 8011f42:	d32e      	bcc.n	8011fa2 <quorem+0xfa>
 8011f44:	613c      	str	r4, [r7, #16]
 8011f46:	4638      	mov	r0, r7
 8011f48:	f001 fe9e 	bl	8013c88 <__mcmp>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	db24      	blt.n	8011f9a <quorem+0xf2>
 8011f50:	3601      	adds	r6, #1
 8011f52:	4628      	mov	r0, r5
 8011f54:	f04f 0c00 	mov.w	ip, #0
 8011f58:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f5c:	f8d0 e000 	ldr.w	lr, [r0]
 8011f60:	b293      	uxth	r3, r2
 8011f62:	ebac 0303 	sub.w	r3, ip, r3
 8011f66:	0c12      	lsrs	r2, r2, #16
 8011f68:	fa13 f38e 	uxtah	r3, r3, lr
 8011f6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011f70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f7a:	45c1      	cmp	r9, r8
 8011f7c:	f840 3b04 	str.w	r3, [r0], #4
 8011f80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011f84:	d2e8      	bcs.n	8011f58 <quorem+0xb0>
 8011f86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f8e:	b922      	cbnz	r2, 8011f9a <quorem+0xf2>
 8011f90:	3b04      	subs	r3, #4
 8011f92:	429d      	cmp	r5, r3
 8011f94:	461a      	mov	r2, r3
 8011f96:	d30a      	bcc.n	8011fae <quorem+0x106>
 8011f98:	613c      	str	r4, [r7, #16]
 8011f9a:	4630      	mov	r0, r6
 8011f9c:	b003      	add	sp, #12
 8011f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa2:	6812      	ldr	r2, [r2, #0]
 8011fa4:	3b04      	subs	r3, #4
 8011fa6:	2a00      	cmp	r2, #0
 8011fa8:	d1cc      	bne.n	8011f44 <quorem+0x9c>
 8011faa:	3c01      	subs	r4, #1
 8011fac:	e7c7      	b.n	8011f3e <quorem+0x96>
 8011fae:	6812      	ldr	r2, [r2, #0]
 8011fb0:	3b04      	subs	r3, #4
 8011fb2:	2a00      	cmp	r2, #0
 8011fb4:	d1f0      	bne.n	8011f98 <quorem+0xf0>
 8011fb6:	3c01      	subs	r4, #1
 8011fb8:	e7eb      	b.n	8011f92 <quorem+0xea>
 8011fba:	2000      	movs	r0, #0
 8011fbc:	e7ee      	b.n	8011f9c <quorem+0xf4>
	...

08011fc0 <_dtoa_r>:
 8011fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc4:	ed2d 8b02 	vpush	{d8}
 8011fc8:	ec57 6b10 	vmov	r6, r7, d0
 8011fcc:	b095      	sub	sp, #84	; 0x54
 8011fce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011fd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011fd4:	9105      	str	r1, [sp, #20]
 8011fd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011fda:	4604      	mov	r4, r0
 8011fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8011fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8011fe0:	b975      	cbnz	r5, 8012000 <_dtoa_r+0x40>
 8011fe2:	2010      	movs	r0, #16
 8011fe4:	f7fd ff3a 	bl	800fe5c <malloc>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	6260      	str	r0, [r4, #36]	; 0x24
 8011fec:	b920      	cbnz	r0, 8011ff8 <_dtoa_r+0x38>
 8011fee:	4bb2      	ldr	r3, [pc, #712]	; (80122b8 <_dtoa_r+0x2f8>)
 8011ff0:	21ea      	movs	r1, #234	; 0xea
 8011ff2:	48b2      	ldr	r0, [pc, #712]	; (80122bc <_dtoa_r+0x2fc>)
 8011ff4:	f002 fb7c 	bl	80146f0 <__assert_func>
 8011ff8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011ffc:	6005      	str	r5, [r0, #0]
 8011ffe:	60c5      	str	r5, [r0, #12]
 8012000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012002:	6819      	ldr	r1, [r3, #0]
 8012004:	b151      	cbz	r1, 801201c <_dtoa_r+0x5c>
 8012006:	685a      	ldr	r2, [r3, #4]
 8012008:	604a      	str	r2, [r1, #4]
 801200a:	2301      	movs	r3, #1
 801200c:	4093      	lsls	r3, r2
 801200e:	608b      	str	r3, [r1, #8]
 8012010:	4620      	mov	r0, r4
 8012012:	f001 fbb1 	bl	8013778 <_Bfree>
 8012016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012018:	2200      	movs	r2, #0
 801201a:	601a      	str	r2, [r3, #0]
 801201c:	1e3b      	subs	r3, r7, #0
 801201e:	bfb9      	ittee	lt
 8012020:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012024:	9303      	strlt	r3, [sp, #12]
 8012026:	2300      	movge	r3, #0
 8012028:	f8c8 3000 	strge.w	r3, [r8]
 801202c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012030:	4ba3      	ldr	r3, [pc, #652]	; (80122c0 <_dtoa_r+0x300>)
 8012032:	bfbc      	itt	lt
 8012034:	2201      	movlt	r2, #1
 8012036:	f8c8 2000 	strlt.w	r2, [r8]
 801203a:	ea33 0309 	bics.w	r3, r3, r9
 801203e:	d11b      	bne.n	8012078 <_dtoa_r+0xb8>
 8012040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012042:	f242 730f 	movw	r3, #9999	; 0x270f
 8012046:	6013      	str	r3, [r2, #0]
 8012048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801204c:	4333      	orrs	r3, r6
 801204e:	f000 857a 	beq.w	8012b46 <_dtoa_r+0xb86>
 8012052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012054:	b963      	cbnz	r3, 8012070 <_dtoa_r+0xb0>
 8012056:	4b9b      	ldr	r3, [pc, #620]	; (80122c4 <_dtoa_r+0x304>)
 8012058:	e024      	b.n	80120a4 <_dtoa_r+0xe4>
 801205a:	4b9b      	ldr	r3, [pc, #620]	; (80122c8 <_dtoa_r+0x308>)
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	3308      	adds	r3, #8
 8012060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012062:	6013      	str	r3, [r2, #0]
 8012064:	9800      	ldr	r0, [sp, #0]
 8012066:	b015      	add	sp, #84	; 0x54
 8012068:	ecbd 8b02 	vpop	{d8}
 801206c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012070:	4b94      	ldr	r3, [pc, #592]	; (80122c4 <_dtoa_r+0x304>)
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	3303      	adds	r3, #3
 8012076:	e7f3      	b.n	8012060 <_dtoa_r+0xa0>
 8012078:	ed9d 7b02 	vldr	d7, [sp, #8]
 801207c:	2200      	movs	r2, #0
 801207e:	ec51 0b17 	vmov	r0, r1, d7
 8012082:	2300      	movs	r3, #0
 8012084:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012088:	f7ee fd2e 	bl	8000ae8 <__aeabi_dcmpeq>
 801208c:	4680      	mov	r8, r0
 801208e:	b158      	cbz	r0, 80120a8 <_dtoa_r+0xe8>
 8012090:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012092:	2301      	movs	r3, #1
 8012094:	6013      	str	r3, [r2, #0]
 8012096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012098:	2b00      	cmp	r3, #0
 801209a:	f000 8551 	beq.w	8012b40 <_dtoa_r+0xb80>
 801209e:	488b      	ldr	r0, [pc, #556]	; (80122cc <_dtoa_r+0x30c>)
 80120a0:	6018      	str	r0, [r3, #0]
 80120a2:	1e43      	subs	r3, r0, #1
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	e7dd      	b.n	8012064 <_dtoa_r+0xa4>
 80120a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80120ac:	aa12      	add	r2, sp, #72	; 0x48
 80120ae:	a913      	add	r1, sp, #76	; 0x4c
 80120b0:	4620      	mov	r0, r4
 80120b2:	f001 ff09 	bl	8013ec8 <__d2b>
 80120b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120ba:	4683      	mov	fp, r0
 80120bc:	2d00      	cmp	r5, #0
 80120be:	d07c      	beq.n	80121ba <_dtoa_r+0x1fa>
 80120c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80120c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80120ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80120d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80120d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80120da:	4b7d      	ldr	r3, [pc, #500]	; (80122d0 <_dtoa_r+0x310>)
 80120dc:	2200      	movs	r2, #0
 80120de:	4630      	mov	r0, r6
 80120e0:	4639      	mov	r1, r7
 80120e2:	f7ee f8e1 	bl	80002a8 <__aeabi_dsub>
 80120e6:	a36e      	add	r3, pc, #440	; (adr r3, 80122a0 <_dtoa_r+0x2e0>)
 80120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ec:	f7ee fa94 	bl	8000618 <__aeabi_dmul>
 80120f0:	a36d      	add	r3, pc, #436	; (adr r3, 80122a8 <_dtoa_r+0x2e8>)
 80120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f6:	f7ee f8d9 	bl	80002ac <__adddf3>
 80120fa:	4606      	mov	r6, r0
 80120fc:	4628      	mov	r0, r5
 80120fe:	460f      	mov	r7, r1
 8012100:	f7ee fa20 	bl	8000544 <__aeabi_i2d>
 8012104:	a36a      	add	r3, pc, #424	; (adr r3, 80122b0 <_dtoa_r+0x2f0>)
 8012106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210a:	f7ee fa85 	bl	8000618 <__aeabi_dmul>
 801210e:	4602      	mov	r2, r0
 8012110:	460b      	mov	r3, r1
 8012112:	4630      	mov	r0, r6
 8012114:	4639      	mov	r1, r7
 8012116:	f7ee f8c9 	bl	80002ac <__adddf3>
 801211a:	4606      	mov	r6, r0
 801211c:	460f      	mov	r7, r1
 801211e:	f7ee fd2b 	bl	8000b78 <__aeabi_d2iz>
 8012122:	2200      	movs	r2, #0
 8012124:	4682      	mov	sl, r0
 8012126:	2300      	movs	r3, #0
 8012128:	4630      	mov	r0, r6
 801212a:	4639      	mov	r1, r7
 801212c:	f7ee fce6 	bl	8000afc <__aeabi_dcmplt>
 8012130:	b148      	cbz	r0, 8012146 <_dtoa_r+0x186>
 8012132:	4650      	mov	r0, sl
 8012134:	f7ee fa06 	bl	8000544 <__aeabi_i2d>
 8012138:	4632      	mov	r2, r6
 801213a:	463b      	mov	r3, r7
 801213c:	f7ee fcd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8012140:	b908      	cbnz	r0, 8012146 <_dtoa_r+0x186>
 8012142:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012146:	f1ba 0f16 	cmp.w	sl, #22
 801214a:	d854      	bhi.n	80121f6 <_dtoa_r+0x236>
 801214c:	4b61      	ldr	r3, [pc, #388]	; (80122d4 <_dtoa_r+0x314>)
 801214e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012156:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801215a:	f7ee fccf 	bl	8000afc <__aeabi_dcmplt>
 801215e:	2800      	cmp	r0, #0
 8012160:	d04b      	beq.n	80121fa <_dtoa_r+0x23a>
 8012162:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012166:	2300      	movs	r3, #0
 8012168:	930e      	str	r3, [sp, #56]	; 0x38
 801216a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801216c:	1b5d      	subs	r5, r3, r5
 801216e:	1e6b      	subs	r3, r5, #1
 8012170:	9304      	str	r3, [sp, #16]
 8012172:	bf43      	ittte	mi
 8012174:	2300      	movmi	r3, #0
 8012176:	f1c5 0801 	rsbmi	r8, r5, #1
 801217a:	9304      	strmi	r3, [sp, #16]
 801217c:	f04f 0800 	movpl.w	r8, #0
 8012180:	f1ba 0f00 	cmp.w	sl, #0
 8012184:	db3b      	blt.n	80121fe <_dtoa_r+0x23e>
 8012186:	9b04      	ldr	r3, [sp, #16]
 8012188:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801218c:	4453      	add	r3, sl
 801218e:	9304      	str	r3, [sp, #16]
 8012190:	2300      	movs	r3, #0
 8012192:	9306      	str	r3, [sp, #24]
 8012194:	9b05      	ldr	r3, [sp, #20]
 8012196:	2b09      	cmp	r3, #9
 8012198:	d869      	bhi.n	801226e <_dtoa_r+0x2ae>
 801219a:	2b05      	cmp	r3, #5
 801219c:	bfc4      	itt	gt
 801219e:	3b04      	subgt	r3, #4
 80121a0:	9305      	strgt	r3, [sp, #20]
 80121a2:	9b05      	ldr	r3, [sp, #20]
 80121a4:	f1a3 0302 	sub.w	r3, r3, #2
 80121a8:	bfcc      	ite	gt
 80121aa:	2500      	movgt	r5, #0
 80121ac:	2501      	movle	r5, #1
 80121ae:	2b03      	cmp	r3, #3
 80121b0:	d869      	bhi.n	8012286 <_dtoa_r+0x2c6>
 80121b2:	e8df f003 	tbb	[pc, r3]
 80121b6:	4e2c      	.short	0x4e2c
 80121b8:	5a4c      	.short	0x5a4c
 80121ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80121be:	441d      	add	r5, r3
 80121c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80121c4:	2b20      	cmp	r3, #32
 80121c6:	bfc1      	itttt	gt
 80121c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80121cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80121d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80121d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80121d8:	bfda      	itte	le
 80121da:	f1c3 0320 	rsble	r3, r3, #32
 80121de:	fa06 f003 	lslle.w	r0, r6, r3
 80121e2:	4318      	orrgt	r0, r3
 80121e4:	f7ee f99e 	bl	8000524 <__aeabi_ui2d>
 80121e8:	2301      	movs	r3, #1
 80121ea:	4606      	mov	r6, r0
 80121ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80121f0:	3d01      	subs	r5, #1
 80121f2:	9310      	str	r3, [sp, #64]	; 0x40
 80121f4:	e771      	b.n	80120da <_dtoa_r+0x11a>
 80121f6:	2301      	movs	r3, #1
 80121f8:	e7b6      	b.n	8012168 <_dtoa_r+0x1a8>
 80121fa:	900e      	str	r0, [sp, #56]	; 0x38
 80121fc:	e7b5      	b.n	801216a <_dtoa_r+0x1aa>
 80121fe:	f1ca 0300 	rsb	r3, sl, #0
 8012202:	9306      	str	r3, [sp, #24]
 8012204:	2300      	movs	r3, #0
 8012206:	eba8 080a 	sub.w	r8, r8, sl
 801220a:	930d      	str	r3, [sp, #52]	; 0x34
 801220c:	e7c2      	b.n	8012194 <_dtoa_r+0x1d4>
 801220e:	2300      	movs	r3, #0
 8012210:	9308      	str	r3, [sp, #32]
 8012212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012214:	2b00      	cmp	r3, #0
 8012216:	dc39      	bgt.n	801228c <_dtoa_r+0x2cc>
 8012218:	f04f 0901 	mov.w	r9, #1
 801221c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012220:	464b      	mov	r3, r9
 8012222:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012226:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012228:	2200      	movs	r2, #0
 801222a:	6042      	str	r2, [r0, #4]
 801222c:	2204      	movs	r2, #4
 801222e:	f102 0614 	add.w	r6, r2, #20
 8012232:	429e      	cmp	r6, r3
 8012234:	6841      	ldr	r1, [r0, #4]
 8012236:	d92f      	bls.n	8012298 <_dtoa_r+0x2d8>
 8012238:	4620      	mov	r0, r4
 801223a:	f001 fa5d 	bl	80136f8 <_Balloc>
 801223e:	9000      	str	r0, [sp, #0]
 8012240:	2800      	cmp	r0, #0
 8012242:	d14b      	bne.n	80122dc <_dtoa_r+0x31c>
 8012244:	4b24      	ldr	r3, [pc, #144]	; (80122d8 <_dtoa_r+0x318>)
 8012246:	4602      	mov	r2, r0
 8012248:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801224c:	e6d1      	b.n	8011ff2 <_dtoa_r+0x32>
 801224e:	2301      	movs	r3, #1
 8012250:	e7de      	b.n	8012210 <_dtoa_r+0x250>
 8012252:	2300      	movs	r3, #0
 8012254:	9308      	str	r3, [sp, #32]
 8012256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012258:	eb0a 0903 	add.w	r9, sl, r3
 801225c:	f109 0301 	add.w	r3, r9, #1
 8012260:	2b01      	cmp	r3, #1
 8012262:	9301      	str	r3, [sp, #4]
 8012264:	bfb8      	it	lt
 8012266:	2301      	movlt	r3, #1
 8012268:	e7dd      	b.n	8012226 <_dtoa_r+0x266>
 801226a:	2301      	movs	r3, #1
 801226c:	e7f2      	b.n	8012254 <_dtoa_r+0x294>
 801226e:	2501      	movs	r5, #1
 8012270:	2300      	movs	r3, #0
 8012272:	9305      	str	r3, [sp, #20]
 8012274:	9508      	str	r5, [sp, #32]
 8012276:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801227a:	2200      	movs	r2, #0
 801227c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012280:	2312      	movs	r3, #18
 8012282:	9209      	str	r2, [sp, #36]	; 0x24
 8012284:	e7cf      	b.n	8012226 <_dtoa_r+0x266>
 8012286:	2301      	movs	r3, #1
 8012288:	9308      	str	r3, [sp, #32]
 801228a:	e7f4      	b.n	8012276 <_dtoa_r+0x2b6>
 801228c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012290:	f8cd 9004 	str.w	r9, [sp, #4]
 8012294:	464b      	mov	r3, r9
 8012296:	e7c6      	b.n	8012226 <_dtoa_r+0x266>
 8012298:	3101      	adds	r1, #1
 801229a:	6041      	str	r1, [r0, #4]
 801229c:	0052      	lsls	r2, r2, #1
 801229e:	e7c6      	b.n	801222e <_dtoa_r+0x26e>
 80122a0:	636f4361 	.word	0x636f4361
 80122a4:	3fd287a7 	.word	0x3fd287a7
 80122a8:	8b60c8b3 	.word	0x8b60c8b3
 80122ac:	3fc68a28 	.word	0x3fc68a28
 80122b0:	509f79fb 	.word	0x509f79fb
 80122b4:	3fd34413 	.word	0x3fd34413
 80122b8:	0801511e 	.word	0x0801511e
 80122bc:	08015135 	.word	0x08015135
 80122c0:	7ff00000 	.word	0x7ff00000
 80122c4:	0801511a 	.word	0x0801511a
 80122c8:	08015111 	.word	0x08015111
 80122cc:	08014f95 	.word	0x08014f95
 80122d0:	3ff80000 	.word	0x3ff80000
 80122d4:	08015310 	.word	0x08015310
 80122d8:	08015194 	.word	0x08015194
 80122dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122de:	9a00      	ldr	r2, [sp, #0]
 80122e0:	601a      	str	r2, [r3, #0]
 80122e2:	9b01      	ldr	r3, [sp, #4]
 80122e4:	2b0e      	cmp	r3, #14
 80122e6:	f200 80ad 	bhi.w	8012444 <_dtoa_r+0x484>
 80122ea:	2d00      	cmp	r5, #0
 80122ec:	f000 80aa 	beq.w	8012444 <_dtoa_r+0x484>
 80122f0:	f1ba 0f00 	cmp.w	sl, #0
 80122f4:	dd36      	ble.n	8012364 <_dtoa_r+0x3a4>
 80122f6:	4ac3      	ldr	r2, [pc, #780]	; (8012604 <_dtoa_r+0x644>)
 80122f8:	f00a 030f 	and.w	r3, sl, #15
 80122fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012300:	ed93 7b00 	vldr	d7, [r3]
 8012304:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012308:	ea4f 172a 	mov.w	r7, sl, asr #4
 801230c:	eeb0 8a47 	vmov.f32	s16, s14
 8012310:	eef0 8a67 	vmov.f32	s17, s15
 8012314:	d016      	beq.n	8012344 <_dtoa_r+0x384>
 8012316:	4bbc      	ldr	r3, [pc, #752]	; (8012608 <_dtoa_r+0x648>)
 8012318:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801231c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012320:	f7ee faa4 	bl	800086c <__aeabi_ddiv>
 8012324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012328:	f007 070f 	and.w	r7, r7, #15
 801232c:	2503      	movs	r5, #3
 801232e:	4eb6      	ldr	r6, [pc, #728]	; (8012608 <_dtoa_r+0x648>)
 8012330:	b957      	cbnz	r7, 8012348 <_dtoa_r+0x388>
 8012332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012336:	ec53 2b18 	vmov	r2, r3, d8
 801233a:	f7ee fa97 	bl	800086c <__aeabi_ddiv>
 801233e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012342:	e029      	b.n	8012398 <_dtoa_r+0x3d8>
 8012344:	2502      	movs	r5, #2
 8012346:	e7f2      	b.n	801232e <_dtoa_r+0x36e>
 8012348:	07f9      	lsls	r1, r7, #31
 801234a:	d508      	bpl.n	801235e <_dtoa_r+0x39e>
 801234c:	ec51 0b18 	vmov	r0, r1, d8
 8012350:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012354:	f7ee f960 	bl	8000618 <__aeabi_dmul>
 8012358:	ec41 0b18 	vmov	d8, r0, r1
 801235c:	3501      	adds	r5, #1
 801235e:	107f      	asrs	r7, r7, #1
 8012360:	3608      	adds	r6, #8
 8012362:	e7e5      	b.n	8012330 <_dtoa_r+0x370>
 8012364:	f000 80a6 	beq.w	80124b4 <_dtoa_r+0x4f4>
 8012368:	f1ca 0600 	rsb	r6, sl, #0
 801236c:	4ba5      	ldr	r3, [pc, #660]	; (8012604 <_dtoa_r+0x644>)
 801236e:	4fa6      	ldr	r7, [pc, #664]	; (8012608 <_dtoa_r+0x648>)
 8012370:	f006 020f 	and.w	r2, r6, #15
 8012374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012380:	f7ee f94a 	bl	8000618 <__aeabi_dmul>
 8012384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012388:	1136      	asrs	r6, r6, #4
 801238a:	2300      	movs	r3, #0
 801238c:	2502      	movs	r5, #2
 801238e:	2e00      	cmp	r6, #0
 8012390:	f040 8085 	bne.w	801249e <_dtoa_r+0x4de>
 8012394:	2b00      	cmp	r3, #0
 8012396:	d1d2      	bne.n	801233e <_dtoa_r+0x37e>
 8012398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801239a:	2b00      	cmp	r3, #0
 801239c:	f000 808c 	beq.w	80124b8 <_dtoa_r+0x4f8>
 80123a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123a4:	4b99      	ldr	r3, [pc, #612]	; (801260c <_dtoa_r+0x64c>)
 80123a6:	2200      	movs	r2, #0
 80123a8:	4630      	mov	r0, r6
 80123aa:	4639      	mov	r1, r7
 80123ac:	f7ee fba6 	bl	8000afc <__aeabi_dcmplt>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	f000 8081 	beq.w	80124b8 <_dtoa_r+0x4f8>
 80123b6:	9b01      	ldr	r3, [sp, #4]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d07d      	beq.n	80124b8 <_dtoa_r+0x4f8>
 80123bc:	f1b9 0f00 	cmp.w	r9, #0
 80123c0:	dd3c      	ble.n	801243c <_dtoa_r+0x47c>
 80123c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80123c6:	9307      	str	r3, [sp, #28]
 80123c8:	2200      	movs	r2, #0
 80123ca:	4b91      	ldr	r3, [pc, #580]	; (8012610 <_dtoa_r+0x650>)
 80123cc:	4630      	mov	r0, r6
 80123ce:	4639      	mov	r1, r7
 80123d0:	f7ee f922 	bl	8000618 <__aeabi_dmul>
 80123d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123d8:	3501      	adds	r5, #1
 80123da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80123de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123e2:	4628      	mov	r0, r5
 80123e4:	f7ee f8ae 	bl	8000544 <__aeabi_i2d>
 80123e8:	4632      	mov	r2, r6
 80123ea:	463b      	mov	r3, r7
 80123ec:	f7ee f914 	bl	8000618 <__aeabi_dmul>
 80123f0:	4b88      	ldr	r3, [pc, #544]	; (8012614 <_dtoa_r+0x654>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	f7ed ff5a 	bl	80002ac <__adddf3>
 80123f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80123fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012400:	9303      	str	r3, [sp, #12]
 8012402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012404:	2b00      	cmp	r3, #0
 8012406:	d15c      	bne.n	80124c2 <_dtoa_r+0x502>
 8012408:	4b83      	ldr	r3, [pc, #524]	; (8012618 <_dtoa_r+0x658>)
 801240a:	2200      	movs	r2, #0
 801240c:	4630      	mov	r0, r6
 801240e:	4639      	mov	r1, r7
 8012410:	f7ed ff4a 	bl	80002a8 <__aeabi_dsub>
 8012414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012418:	4606      	mov	r6, r0
 801241a:	460f      	mov	r7, r1
 801241c:	f7ee fb8c 	bl	8000b38 <__aeabi_dcmpgt>
 8012420:	2800      	cmp	r0, #0
 8012422:	f040 8296 	bne.w	8012952 <_dtoa_r+0x992>
 8012426:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801242a:	4630      	mov	r0, r6
 801242c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012430:	4639      	mov	r1, r7
 8012432:	f7ee fb63 	bl	8000afc <__aeabi_dcmplt>
 8012436:	2800      	cmp	r0, #0
 8012438:	f040 8288 	bne.w	801294c <_dtoa_r+0x98c>
 801243c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012440:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012444:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012446:	2b00      	cmp	r3, #0
 8012448:	f2c0 8158 	blt.w	80126fc <_dtoa_r+0x73c>
 801244c:	f1ba 0f0e 	cmp.w	sl, #14
 8012450:	f300 8154 	bgt.w	80126fc <_dtoa_r+0x73c>
 8012454:	4b6b      	ldr	r3, [pc, #428]	; (8012604 <_dtoa_r+0x644>)
 8012456:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801245a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801245e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012460:	2b00      	cmp	r3, #0
 8012462:	f280 80e3 	bge.w	801262c <_dtoa_r+0x66c>
 8012466:	9b01      	ldr	r3, [sp, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	f300 80df 	bgt.w	801262c <_dtoa_r+0x66c>
 801246e:	f040 826d 	bne.w	801294c <_dtoa_r+0x98c>
 8012472:	4b69      	ldr	r3, [pc, #420]	; (8012618 <_dtoa_r+0x658>)
 8012474:	2200      	movs	r2, #0
 8012476:	4640      	mov	r0, r8
 8012478:	4649      	mov	r1, r9
 801247a:	f7ee f8cd 	bl	8000618 <__aeabi_dmul>
 801247e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012482:	f7ee fb4f 	bl	8000b24 <__aeabi_dcmpge>
 8012486:	9e01      	ldr	r6, [sp, #4]
 8012488:	4637      	mov	r7, r6
 801248a:	2800      	cmp	r0, #0
 801248c:	f040 8243 	bne.w	8012916 <_dtoa_r+0x956>
 8012490:	9d00      	ldr	r5, [sp, #0]
 8012492:	2331      	movs	r3, #49	; 0x31
 8012494:	f805 3b01 	strb.w	r3, [r5], #1
 8012498:	f10a 0a01 	add.w	sl, sl, #1
 801249c:	e23f      	b.n	801291e <_dtoa_r+0x95e>
 801249e:	07f2      	lsls	r2, r6, #31
 80124a0:	d505      	bpl.n	80124ae <_dtoa_r+0x4ee>
 80124a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80124a6:	f7ee f8b7 	bl	8000618 <__aeabi_dmul>
 80124aa:	3501      	adds	r5, #1
 80124ac:	2301      	movs	r3, #1
 80124ae:	1076      	asrs	r6, r6, #1
 80124b0:	3708      	adds	r7, #8
 80124b2:	e76c      	b.n	801238e <_dtoa_r+0x3ce>
 80124b4:	2502      	movs	r5, #2
 80124b6:	e76f      	b.n	8012398 <_dtoa_r+0x3d8>
 80124b8:	9b01      	ldr	r3, [sp, #4]
 80124ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80124be:	930c      	str	r3, [sp, #48]	; 0x30
 80124c0:	e78d      	b.n	80123de <_dtoa_r+0x41e>
 80124c2:	9900      	ldr	r1, [sp, #0]
 80124c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80124c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124c8:	4b4e      	ldr	r3, [pc, #312]	; (8012604 <_dtoa_r+0x644>)
 80124ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124ce:	4401      	add	r1, r0
 80124d0:	9102      	str	r1, [sp, #8]
 80124d2:	9908      	ldr	r1, [sp, #32]
 80124d4:	eeb0 8a47 	vmov.f32	s16, s14
 80124d8:	eef0 8a67 	vmov.f32	s17, s15
 80124dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80124e4:	2900      	cmp	r1, #0
 80124e6:	d045      	beq.n	8012574 <_dtoa_r+0x5b4>
 80124e8:	494c      	ldr	r1, [pc, #304]	; (801261c <_dtoa_r+0x65c>)
 80124ea:	2000      	movs	r0, #0
 80124ec:	f7ee f9be 	bl	800086c <__aeabi_ddiv>
 80124f0:	ec53 2b18 	vmov	r2, r3, d8
 80124f4:	f7ed fed8 	bl	80002a8 <__aeabi_dsub>
 80124f8:	9d00      	ldr	r5, [sp, #0]
 80124fa:	ec41 0b18 	vmov	d8, r0, r1
 80124fe:	4639      	mov	r1, r7
 8012500:	4630      	mov	r0, r6
 8012502:	f7ee fb39 	bl	8000b78 <__aeabi_d2iz>
 8012506:	900c      	str	r0, [sp, #48]	; 0x30
 8012508:	f7ee f81c 	bl	8000544 <__aeabi_i2d>
 801250c:	4602      	mov	r2, r0
 801250e:	460b      	mov	r3, r1
 8012510:	4630      	mov	r0, r6
 8012512:	4639      	mov	r1, r7
 8012514:	f7ed fec8 	bl	80002a8 <__aeabi_dsub>
 8012518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801251a:	3330      	adds	r3, #48	; 0x30
 801251c:	f805 3b01 	strb.w	r3, [r5], #1
 8012520:	ec53 2b18 	vmov	r2, r3, d8
 8012524:	4606      	mov	r6, r0
 8012526:	460f      	mov	r7, r1
 8012528:	f7ee fae8 	bl	8000afc <__aeabi_dcmplt>
 801252c:	2800      	cmp	r0, #0
 801252e:	d165      	bne.n	80125fc <_dtoa_r+0x63c>
 8012530:	4632      	mov	r2, r6
 8012532:	463b      	mov	r3, r7
 8012534:	4935      	ldr	r1, [pc, #212]	; (801260c <_dtoa_r+0x64c>)
 8012536:	2000      	movs	r0, #0
 8012538:	f7ed feb6 	bl	80002a8 <__aeabi_dsub>
 801253c:	ec53 2b18 	vmov	r2, r3, d8
 8012540:	f7ee fadc 	bl	8000afc <__aeabi_dcmplt>
 8012544:	2800      	cmp	r0, #0
 8012546:	f040 80b9 	bne.w	80126bc <_dtoa_r+0x6fc>
 801254a:	9b02      	ldr	r3, [sp, #8]
 801254c:	429d      	cmp	r5, r3
 801254e:	f43f af75 	beq.w	801243c <_dtoa_r+0x47c>
 8012552:	4b2f      	ldr	r3, [pc, #188]	; (8012610 <_dtoa_r+0x650>)
 8012554:	ec51 0b18 	vmov	r0, r1, d8
 8012558:	2200      	movs	r2, #0
 801255a:	f7ee f85d 	bl	8000618 <__aeabi_dmul>
 801255e:	4b2c      	ldr	r3, [pc, #176]	; (8012610 <_dtoa_r+0x650>)
 8012560:	ec41 0b18 	vmov	d8, r0, r1
 8012564:	2200      	movs	r2, #0
 8012566:	4630      	mov	r0, r6
 8012568:	4639      	mov	r1, r7
 801256a:	f7ee f855 	bl	8000618 <__aeabi_dmul>
 801256e:	4606      	mov	r6, r0
 8012570:	460f      	mov	r7, r1
 8012572:	e7c4      	b.n	80124fe <_dtoa_r+0x53e>
 8012574:	ec51 0b17 	vmov	r0, r1, d7
 8012578:	f7ee f84e 	bl	8000618 <__aeabi_dmul>
 801257c:	9b02      	ldr	r3, [sp, #8]
 801257e:	9d00      	ldr	r5, [sp, #0]
 8012580:	930c      	str	r3, [sp, #48]	; 0x30
 8012582:	ec41 0b18 	vmov	d8, r0, r1
 8012586:	4639      	mov	r1, r7
 8012588:	4630      	mov	r0, r6
 801258a:	f7ee faf5 	bl	8000b78 <__aeabi_d2iz>
 801258e:	9011      	str	r0, [sp, #68]	; 0x44
 8012590:	f7ed ffd8 	bl	8000544 <__aeabi_i2d>
 8012594:	4602      	mov	r2, r0
 8012596:	460b      	mov	r3, r1
 8012598:	4630      	mov	r0, r6
 801259a:	4639      	mov	r1, r7
 801259c:	f7ed fe84 	bl	80002a8 <__aeabi_dsub>
 80125a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125a2:	3330      	adds	r3, #48	; 0x30
 80125a4:	f805 3b01 	strb.w	r3, [r5], #1
 80125a8:	9b02      	ldr	r3, [sp, #8]
 80125aa:	429d      	cmp	r5, r3
 80125ac:	4606      	mov	r6, r0
 80125ae:	460f      	mov	r7, r1
 80125b0:	f04f 0200 	mov.w	r2, #0
 80125b4:	d134      	bne.n	8012620 <_dtoa_r+0x660>
 80125b6:	4b19      	ldr	r3, [pc, #100]	; (801261c <_dtoa_r+0x65c>)
 80125b8:	ec51 0b18 	vmov	r0, r1, d8
 80125bc:	f7ed fe76 	bl	80002ac <__adddf3>
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	4630      	mov	r0, r6
 80125c6:	4639      	mov	r1, r7
 80125c8:	f7ee fab6 	bl	8000b38 <__aeabi_dcmpgt>
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d175      	bne.n	80126bc <_dtoa_r+0x6fc>
 80125d0:	ec53 2b18 	vmov	r2, r3, d8
 80125d4:	4911      	ldr	r1, [pc, #68]	; (801261c <_dtoa_r+0x65c>)
 80125d6:	2000      	movs	r0, #0
 80125d8:	f7ed fe66 	bl	80002a8 <__aeabi_dsub>
 80125dc:	4602      	mov	r2, r0
 80125de:	460b      	mov	r3, r1
 80125e0:	4630      	mov	r0, r6
 80125e2:	4639      	mov	r1, r7
 80125e4:	f7ee fa8a 	bl	8000afc <__aeabi_dcmplt>
 80125e8:	2800      	cmp	r0, #0
 80125ea:	f43f af27 	beq.w	801243c <_dtoa_r+0x47c>
 80125ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125f0:	1e6b      	subs	r3, r5, #1
 80125f2:	930c      	str	r3, [sp, #48]	; 0x30
 80125f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80125f8:	2b30      	cmp	r3, #48	; 0x30
 80125fa:	d0f8      	beq.n	80125ee <_dtoa_r+0x62e>
 80125fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012600:	e04a      	b.n	8012698 <_dtoa_r+0x6d8>
 8012602:	bf00      	nop
 8012604:	08015310 	.word	0x08015310
 8012608:	080152e8 	.word	0x080152e8
 801260c:	3ff00000 	.word	0x3ff00000
 8012610:	40240000 	.word	0x40240000
 8012614:	401c0000 	.word	0x401c0000
 8012618:	40140000 	.word	0x40140000
 801261c:	3fe00000 	.word	0x3fe00000
 8012620:	4baf      	ldr	r3, [pc, #700]	; (80128e0 <_dtoa_r+0x920>)
 8012622:	f7ed fff9 	bl	8000618 <__aeabi_dmul>
 8012626:	4606      	mov	r6, r0
 8012628:	460f      	mov	r7, r1
 801262a:	e7ac      	b.n	8012586 <_dtoa_r+0x5c6>
 801262c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012630:	9d00      	ldr	r5, [sp, #0]
 8012632:	4642      	mov	r2, r8
 8012634:	464b      	mov	r3, r9
 8012636:	4630      	mov	r0, r6
 8012638:	4639      	mov	r1, r7
 801263a:	f7ee f917 	bl	800086c <__aeabi_ddiv>
 801263e:	f7ee fa9b 	bl	8000b78 <__aeabi_d2iz>
 8012642:	9002      	str	r0, [sp, #8]
 8012644:	f7ed ff7e 	bl	8000544 <__aeabi_i2d>
 8012648:	4642      	mov	r2, r8
 801264a:	464b      	mov	r3, r9
 801264c:	f7ed ffe4 	bl	8000618 <__aeabi_dmul>
 8012650:	4602      	mov	r2, r0
 8012652:	460b      	mov	r3, r1
 8012654:	4630      	mov	r0, r6
 8012656:	4639      	mov	r1, r7
 8012658:	f7ed fe26 	bl	80002a8 <__aeabi_dsub>
 801265c:	9e02      	ldr	r6, [sp, #8]
 801265e:	9f01      	ldr	r7, [sp, #4]
 8012660:	3630      	adds	r6, #48	; 0x30
 8012662:	f805 6b01 	strb.w	r6, [r5], #1
 8012666:	9e00      	ldr	r6, [sp, #0]
 8012668:	1bae      	subs	r6, r5, r6
 801266a:	42b7      	cmp	r7, r6
 801266c:	4602      	mov	r2, r0
 801266e:	460b      	mov	r3, r1
 8012670:	d137      	bne.n	80126e2 <_dtoa_r+0x722>
 8012672:	f7ed fe1b 	bl	80002ac <__adddf3>
 8012676:	4642      	mov	r2, r8
 8012678:	464b      	mov	r3, r9
 801267a:	4606      	mov	r6, r0
 801267c:	460f      	mov	r7, r1
 801267e:	f7ee fa5b 	bl	8000b38 <__aeabi_dcmpgt>
 8012682:	b9c8      	cbnz	r0, 80126b8 <_dtoa_r+0x6f8>
 8012684:	4642      	mov	r2, r8
 8012686:	464b      	mov	r3, r9
 8012688:	4630      	mov	r0, r6
 801268a:	4639      	mov	r1, r7
 801268c:	f7ee fa2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8012690:	b110      	cbz	r0, 8012698 <_dtoa_r+0x6d8>
 8012692:	9b02      	ldr	r3, [sp, #8]
 8012694:	07d9      	lsls	r1, r3, #31
 8012696:	d40f      	bmi.n	80126b8 <_dtoa_r+0x6f8>
 8012698:	4620      	mov	r0, r4
 801269a:	4659      	mov	r1, fp
 801269c:	f001 f86c 	bl	8013778 <_Bfree>
 80126a0:	2300      	movs	r3, #0
 80126a2:	702b      	strb	r3, [r5, #0]
 80126a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80126a6:	f10a 0001 	add.w	r0, sl, #1
 80126aa:	6018      	str	r0, [r3, #0]
 80126ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	f43f acd8 	beq.w	8012064 <_dtoa_r+0xa4>
 80126b4:	601d      	str	r5, [r3, #0]
 80126b6:	e4d5      	b.n	8012064 <_dtoa_r+0xa4>
 80126b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80126bc:	462b      	mov	r3, r5
 80126be:	461d      	mov	r5, r3
 80126c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126c4:	2a39      	cmp	r2, #57	; 0x39
 80126c6:	d108      	bne.n	80126da <_dtoa_r+0x71a>
 80126c8:	9a00      	ldr	r2, [sp, #0]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d1f7      	bne.n	80126be <_dtoa_r+0x6fe>
 80126ce:	9a07      	ldr	r2, [sp, #28]
 80126d0:	9900      	ldr	r1, [sp, #0]
 80126d2:	3201      	adds	r2, #1
 80126d4:	9207      	str	r2, [sp, #28]
 80126d6:	2230      	movs	r2, #48	; 0x30
 80126d8:	700a      	strb	r2, [r1, #0]
 80126da:	781a      	ldrb	r2, [r3, #0]
 80126dc:	3201      	adds	r2, #1
 80126de:	701a      	strb	r2, [r3, #0]
 80126e0:	e78c      	b.n	80125fc <_dtoa_r+0x63c>
 80126e2:	4b7f      	ldr	r3, [pc, #508]	; (80128e0 <_dtoa_r+0x920>)
 80126e4:	2200      	movs	r2, #0
 80126e6:	f7ed ff97 	bl	8000618 <__aeabi_dmul>
 80126ea:	2200      	movs	r2, #0
 80126ec:	2300      	movs	r3, #0
 80126ee:	4606      	mov	r6, r0
 80126f0:	460f      	mov	r7, r1
 80126f2:	f7ee f9f9 	bl	8000ae8 <__aeabi_dcmpeq>
 80126f6:	2800      	cmp	r0, #0
 80126f8:	d09b      	beq.n	8012632 <_dtoa_r+0x672>
 80126fa:	e7cd      	b.n	8012698 <_dtoa_r+0x6d8>
 80126fc:	9a08      	ldr	r2, [sp, #32]
 80126fe:	2a00      	cmp	r2, #0
 8012700:	f000 80c4 	beq.w	801288c <_dtoa_r+0x8cc>
 8012704:	9a05      	ldr	r2, [sp, #20]
 8012706:	2a01      	cmp	r2, #1
 8012708:	f300 80a8 	bgt.w	801285c <_dtoa_r+0x89c>
 801270c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801270e:	2a00      	cmp	r2, #0
 8012710:	f000 80a0 	beq.w	8012854 <_dtoa_r+0x894>
 8012714:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012718:	9e06      	ldr	r6, [sp, #24]
 801271a:	4645      	mov	r5, r8
 801271c:	9a04      	ldr	r2, [sp, #16]
 801271e:	2101      	movs	r1, #1
 8012720:	441a      	add	r2, r3
 8012722:	4620      	mov	r0, r4
 8012724:	4498      	add	r8, r3
 8012726:	9204      	str	r2, [sp, #16]
 8012728:	f001 f92c 	bl	8013984 <__i2b>
 801272c:	4607      	mov	r7, r0
 801272e:	2d00      	cmp	r5, #0
 8012730:	dd0b      	ble.n	801274a <_dtoa_r+0x78a>
 8012732:	9b04      	ldr	r3, [sp, #16]
 8012734:	2b00      	cmp	r3, #0
 8012736:	dd08      	ble.n	801274a <_dtoa_r+0x78a>
 8012738:	42ab      	cmp	r3, r5
 801273a:	9a04      	ldr	r2, [sp, #16]
 801273c:	bfa8      	it	ge
 801273e:	462b      	movge	r3, r5
 8012740:	eba8 0803 	sub.w	r8, r8, r3
 8012744:	1aed      	subs	r5, r5, r3
 8012746:	1ad3      	subs	r3, r2, r3
 8012748:	9304      	str	r3, [sp, #16]
 801274a:	9b06      	ldr	r3, [sp, #24]
 801274c:	b1fb      	cbz	r3, 801278e <_dtoa_r+0x7ce>
 801274e:	9b08      	ldr	r3, [sp, #32]
 8012750:	2b00      	cmp	r3, #0
 8012752:	f000 809f 	beq.w	8012894 <_dtoa_r+0x8d4>
 8012756:	2e00      	cmp	r6, #0
 8012758:	dd11      	ble.n	801277e <_dtoa_r+0x7be>
 801275a:	4639      	mov	r1, r7
 801275c:	4632      	mov	r2, r6
 801275e:	4620      	mov	r0, r4
 8012760:	f001 f9cc 	bl	8013afc <__pow5mult>
 8012764:	465a      	mov	r2, fp
 8012766:	4601      	mov	r1, r0
 8012768:	4607      	mov	r7, r0
 801276a:	4620      	mov	r0, r4
 801276c:	f001 f920 	bl	80139b0 <__multiply>
 8012770:	4659      	mov	r1, fp
 8012772:	9007      	str	r0, [sp, #28]
 8012774:	4620      	mov	r0, r4
 8012776:	f000 ffff 	bl	8013778 <_Bfree>
 801277a:	9b07      	ldr	r3, [sp, #28]
 801277c:	469b      	mov	fp, r3
 801277e:	9b06      	ldr	r3, [sp, #24]
 8012780:	1b9a      	subs	r2, r3, r6
 8012782:	d004      	beq.n	801278e <_dtoa_r+0x7ce>
 8012784:	4659      	mov	r1, fp
 8012786:	4620      	mov	r0, r4
 8012788:	f001 f9b8 	bl	8013afc <__pow5mult>
 801278c:	4683      	mov	fp, r0
 801278e:	2101      	movs	r1, #1
 8012790:	4620      	mov	r0, r4
 8012792:	f001 f8f7 	bl	8013984 <__i2b>
 8012796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012798:	2b00      	cmp	r3, #0
 801279a:	4606      	mov	r6, r0
 801279c:	dd7c      	ble.n	8012898 <_dtoa_r+0x8d8>
 801279e:	461a      	mov	r2, r3
 80127a0:	4601      	mov	r1, r0
 80127a2:	4620      	mov	r0, r4
 80127a4:	f001 f9aa 	bl	8013afc <__pow5mult>
 80127a8:	9b05      	ldr	r3, [sp, #20]
 80127aa:	2b01      	cmp	r3, #1
 80127ac:	4606      	mov	r6, r0
 80127ae:	dd76      	ble.n	801289e <_dtoa_r+0x8de>
 80127b0:	2300      	movs	r3, #0
 80127b2:	9306      	str	r3, [sp, #24]
 80127b4:	6933      	ldr	r3, [r6, #16]
 80127b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80127ba:	6918      	ldr	r0, [r3, #16]
 80127bc:	f001 f892 	bl	80138e4 <__hi0bits>
 80127c0:	f1c0 0020 	rsb	r0, r0, #32
 80127c4:	9b04      	ldr	r3, [sp, #16]
 80127c6:	4418      	add	r0, r3
 80127c8:	f010 001f 	ands.w	r0, r0, #31
 80127cc:	f000 8086 	beq.w	80128dc <_dtoa_r+0x91c>
 80127d0:	f1c0 0320 	rsb	r3, r0, #32
 80127d4:	2b04      	cmp	r3, #4
 80127d6:	dd7f      	ble.n	80128d8 <_dtoa_r+0x918>
 80127d8:	f1c0 001c 	rsb	r0, r0, #28
 80127dc:	9b04      	ldr	r3, [sp, #16]
 80127de:	4403      	add	r3, r0
 80127e0:	4480      	add	r8, r0
 80127e2:	4405      	add	r5, r0
 80127e4:	9304      	str	r3, [sp, #16]
 80127e6:	f1b8 0f00 	cmp.w	r8, #0
 80127ea:	dd05      	ble.n	80127f8 <_dtoa_r+0x838>
 80127ec:	4659      	mov	r1, fp
 80127ee:	4642      	mov	r2, r8
 80127f0:	4620      	mov	r0, r4
 80127f2:	f001 f9dd 	bl	8013bb0 <__lshift>
 80127f6:	4683      	mov	fp, r0
 80127f8:	9b04      	ldr	r3, [sp, #16]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	dd05      	ble.n	801280a <_dtoa_r+0x84a>
 80127fe:	4631      	mov	r1, r6
 8012800:	461a      	mov	r2, r3
 8012802:	4620      	mov	r0, r4
 8012804:	f001 f9d4 	bl	8013bb0 <__lshift>
 8012808:	4606      	mov	r6, r0
 801280a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801280c:	2b00      	cmp	r3, #0
 801280e:	d069      	beq.n	80128e4 <_dtoa_r+0x924>
 8012810:	4631      	mov	r1, r6
 8012812:	4658      	mov	r0, fp
 8012814:	f001 fa38 	bl	8013c88 <__mcmp>
 8012818:	2800      	cmp	r0, #0
 801281a:	da63      	bge.n	80128e4 <_dtoa_r+0x924>
 801281c:	2300      	movs	r3, #0
 801281e:	4659      	mov	r1, fp
 8012820:	220a      	movs	r2, #10
 8012822:	4620      	mov	r0, r4
 8012824:	f000 ffca 	bl	80137bc <__multadd>
 8012828:	9b08      	ldr	r3, [sp, #32]
 801282a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801282e:	4683      	mov	fp, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	f000 818f 	beq.w	8012b54 <_dtoa_r+0xb94>
 8012836:	4639      	mov	r1, r7
 8012838:	2300      	movs	r3, #0
 801283a:	220a      	movs	r2, #10
 801283c:	4620      	mov	r0, r4
 801283e:	f000 ffbd 	bl	80137bc <__multadd>
 8012842:	f1b9 0f00 	cmp.w	r9, #0
 8012846:	4607      	mov	r7, r0
 8012848:	f300 808e 	bgt.w	8012968 <_dtoa_r+0x9a8>
 801284c:	9b05      	ldr	r3, [sp, #20]
 801284e:	2b02      	cmp	r3, #2
 8012850:	dc50      	bgt.n	80128f4 <_dtoa_r+0x934>
 8012852:	e089      	b.n	8012968 <_dtoa_r+0x9a8>
 8012854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801285a:	e75d      	b.n	8012718 <_dtoa_r+0x758>
 801285c:	9b01      	ldr	r3, [sp, #4]
 801285e:	1e5e      	subs	r6, r3, #1
 8012860:	9b06      	ldr	r3, [sp, #24]
 8012862:	42b3      	cmp	r3, r6
 8012864:	bfbf      	itttt	lt
 8012866:	9b06      	ldrlt	r3, [sp, #24]
 8012868:	9606      	strlt	r6, [sp, #24]
 801286a:	1af2      	sublt	r2, r6, r3
 801286c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801286e:	bfb6      	itet	lt
 8012870:	189b      	addlt	r3, r3, r2
 8012872:	1b9e      	subge	r6, r3, r6
 8012874:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012876:	9b01      	ldr	r3, [sp, #4]
 8012878:	bfb8      	it	lt
 801287a:	2600      	movlt	r6, #0
 801287c:	2b00      	cmp	r3, #0
 801287e:	bfb5      	itete	lt
 8012880:	eba8 0503 	sublt.w	r5, r8, r3
 8012884:	9b01      	ldrge	r3, [sp, #4]
 8012886:	2300      	movlt	r3, #0
 8012888:	4645      	movge	r5, r8
 801288a:	e747      	b.n	801271c <_dtoa_r+0x75c>
 801288c:	9e06      	ldr	r6, [sp, #24]
 801288e:	9f08      	ldr	r7, [sp, #32]
 8012890:	4645      	mov	r5, r8
 8012892:	e74c      	b.n	801272e <_dtoa_r+0x76e>
 8012894:	9a06      	ldr	r2, [sp, #24]
 8012896:	e775      	b.n	8012784 <_dtoa_r+0x7c4>
 8012898:	9b05      	ldr	r3, [sp, #20]
 801289a:	2b01      	cmp	r3, #1
 801289c:	dc18      	bgt.n	80128d0 <_dtoa_r+0x910>
 801289e:	9b02      	ldr	r3, [sp, #8]
 80128a0:	b9b3      	cbnz	r3, 80128d0 <_dtoa_r+0x910>
 80128a2:	9b03      	ldr	r3, [sp, #12]
 80128a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128a8:	b9a3      	cbnz	r3, 80128d4 <_dtoa_r+0x914>
 80128aa:	9b03      	ldr	r3, [sp, #12]
 80128ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128b0:	0d1b      	lsrs	r3, r3, #20
 80128b2:	051b      	lsls	r3, r3, #20
 80128b4:	b12b      	cbz	r3, 80128c2 <_dtoa_r+0x902>
 80128b6:	9b04      	ldr	r3, [sp, #16]
 80128b8:	3301      	adds	r3, #1
 80128ba:	9304      	str	r3, [sp, #16]
 80128bc:	f108 0801 	add.w	r8, r8, #1
 80128c0:	2301      	movs	r3, #1
 80128c2:	9306      	str	r3, [sp, #24]
 80128c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f47f af74 	bne.w	80127b4 <_dtoa_r+0x7f4>
 80128cc:	2001      	movs	r0, #1
 80128ce:	e779      	b.n	80127c4 <_dtoa_r+0x804>
 80128d0:	2300      	movs	r3, #0
 80128d2:	e7f6      	b.n	80128c2 <_dtoa_r+0x902>
 80128d4:	9b02      	ldr	r3, [sp, #8]
 80128d6:	e7f4      	b.n	80128c2 <_dtoa_r+0x902>
 80128d8:	d085      	beq.n	80127e6 <_dtoa_r+0x826>
 80128da:	4618      	mov	r0, r3
 80128dc:	301c      	adds	r0, #28
 80128de:	e77d      	b.n	80127dc <_dtoa_r+0x81c>
 80128e0:	40240000 	.word	0x40240000
 80128e4:	9b01      	ldr	r3, [sp, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	dc38      	bgt.n	801295c <_dtoa_r+0x99c>
 80128ea:	9b05      	ldr	r3, [sp, #20]
 80128ec:	2b02      	cmp	r3, #2
 80128ee:	dd35      	ble.n	801295c <_dtoa_r+0x99c>
 80128f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80128f4:	f1b9 0f00 	cmp.w	r9, #0
 80128f8:	d10d      	bne.n	8012916 <_dtoa_r+0x956>
 80128fa:	4631      	mov	r1, r6
 80128fc:	464b      	mov	r3, r9
 80128fe:	2205      	movs	r2, #5
 8012900:	4620      	mov	r0, r4
 8012902:	f000 ff5b 	bl	80137bc <__multadd>
 8012906:	4601      	mov	r1, r0
 8012908:	4606      	mov	r6, r0
 801290a:	4658      	mov	r0, fp
 801290c:	f001 f9bc 	bl	8013c88 <__mcmp>
 8012910:	2800      	cmp	r0, #0
 8012912:	f73f adbd 	bgt.w	8012490 <_dtoa_r+0x4d0>
 8012916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012918:	9d00      	ldr	r5, [sp, #0]
 801291a:	ea6f 0a03 	mvn.w	sl, r3
 801291e:	f04f 0800 	mov.w	r8, #0
 8012922:	4631      	mov	r1, r6
 8012924:	4620      	mov	r0, r4
 8012926:	f000 ff27 	bl	8013778 <_Bfree>
 801292a:	2f00      	cmp	r7, #0
 801292c:	f43f aeb4 	beq.w	8012698 <_dtoa_r+0x6d8>
 8012930:	f1b8 0f00 	cmp.w	r8, #0
 8012934:	d005      	beq.n	8012942 <_dtoa_r+0x982>
 8012936:	45b8      	cmp	r8, r7
 8012938:	d003      	beq.n	8012942 <_dtoa_r+0x982>
 801293a:	4641      	mov	r1, r8
 801293c:	4620      	mov	r0, r4
 801293e:	f000 ff1b 	bl	8013778 <_Bfree>
 8012942:	4639      	mov	r1, r7
 8012944:	4620      	mov	r0, r4
 8012946:	f000 ff17 	bl	8013778 <_Bfree>
 801294a:	e6a5      	b.n	8012698 <_dtoa_r+0x6d8>
 801294c:	2600      	movs	r6, #0
 801294e:	4637      	mov	r7, r6
 8012950:	e7e1      	b.n	8012916 <_dtoa_r+0x956>
 8012952:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012954:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012958:	4637      	mov	r7, r6
 801295a:	e599      	b.n	8012490 <_dtoa_r+0x4d0>
 801295c:	9b08      	ldr	r3, [sp, #32]
 801295e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	f000 80fd 	beq.w	8012b62 <_dtoa_r+0xba2>
 8012968:	2d00      	cmp	r5, #0
 801296a:	dd05      	ble.n	8012978 <_dtoa_r+0x9b8>
 801296c:	4639      	mov	r1, r7
 801296e:	462a      	mov	r2, r5
 8012970:	4620      	mov	r0, r4
 8012972:	f001 f91d 	bl	8013bb0 <__lshift>
 8012976:	4607      	mov	r7, r0
 8012978:	9b06      	ldr	r3, [sp, #24]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d05c      	beq.n	8012a38 <_dtoa_r+0xa78>
 801297e:	6879      	ldr	r1, [r7, #4]
 8012980:	4620      	mov	r0, r4
 8012982:	f000 feb9 	bl	80136f8 <_Balloc>
 8012986:	4605      	mov	r5, r0
 8012988:	b928      	cbnz	r0, 8012996 <_dtoa_r+0x9d6>
 801298a:	4b80      	ldr	r3, [pc, #512]	; (8012b8c <_dtoa_r+0xbcc>)
 801298c:	4602      	mov	r2, r0
 801298e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012992:	f7ff bb2e 	b.w	8011ff2 <_dtoa_r+0x32>
 8012996:	693a      	ldr	r2, [r7, #16]
 8012998:	3202      	adds	r2, #2
 801299a:	0092      	lsls	r2, r2, #2
 801299c:	f107 010c 	add.w	r1, r7, #12
 80129a0:	300c      	adds	r0, #12
 80129a2:	f7fd fa6b 	bl	800fe7c <memcpy>
 80129a6:	2201      	movs	r2, #1
 80129a8:	4629      	mov	r1, r5
 80129aa:	4620      	mov	r0, r4
 80129ac:	f001 f900 	bl	8013bb0 <__lshift>
 80129b0:	9b00      	ldr	r3, [sp, #0]
 80129b2:	3301      	adds	r3, #1
 80129b4:	9301      	str	r3, [sp, #4]
 80129b6:	9b00      	ldr	r3, [sp, #0]
 80129b8:	444b      	add	r3, r9
 80129ba:	9307      	str	r3, [sp, #28]
 80129bc:	9b02      	ldr	r3, [sp, #8]
 80129be:	f003 0301 	and.w	r3, r3, #1
 80129c2:	46b8      	mov	r8, r7
 80129c4:	9306      	str	r3, [sp, #24]
 80129c6:	4607      	mov	r7, r0
 80129c8:	9b01      	ldr	r3, [sp, #4]
 80129ca:	4631      	mov	r1, r6
 80129cc:	3b01      	subs	r3, #1
 80129ce:	4658      	mov	r0, fp
 80129d0:	9302      	str	r3, [sp, #8]
 80129d2:	f7ff fa69 	bl	8011ea8 <quorem>
 80129d6:	4603      	mov	r3, r0
 80129d8:	3330      	adds	r3, #48	; 0x30
 80129da:	9004      	str	r0, [sp, #16]
 80129dc:	4641      	mov	r1, r8
 80129de:	4658      	mov	r0, fp
 80129e0:	9308      	str	r3, [sp, #32]
 80129e2:	f001 f951 	bl	8013c88 <__mcmp>
 80129e6:	463a      	mov	r2, r7
 80129e8:	4681      	mov	r9, r0
 80129ea:	4631      	mov	r1, r6
 80129ec:	4620      	mov	r0, r4
 80129ee:	f001 f967 	bl	8013cc0 <__mdiff>
 80129f2:	68c2      	ldr	r2, [r0, #12]
 80129f4:	9b08      	ldr	r3, [sp, #32]
 80129f6:	4605      	mov	r5, r0
 80129f8:	bb02      	cbnz	r2, 8012a3c <_dtoa_r+0xa7c>
 80129fa:	4601      	mov	r1, r0
 80129fc:	4658      	mov	r0, fp
 80129fe:	f001 f943 	bl	8013c88 <__mcmp>
 8012a02:	9b08      	ldr	r3, [sp, #32]
 8012a04:	4602      	mov	r2, r0
 8012a06:	4629      	mov	r1, r5
 8012a08:	4620      	mov	r0, r4
 8012a0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012a0e:	f000 feb3 	bl	8013778 <_Bfree>
 8012a12:	9b05      	ldr	r3, [sp, #20]
 8012a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a16:	9d01      	ldr	r5, [sp, #4]
 8012a18:	ea43 0102 	orr.w	r1, r3, r2
 8012a1c:	9b06      	ldr	r3, [sp, #24]
 8012a1e:	430b      	orrs	r3, r1
 8012a20:	9b08      	ldr	r3, [sp, #32]
 8012a22:	d10d      	bne.n	8012a40 <_dtoa_r+0xa80>
 8012a24:	2b39      	cmp	r3, #57	; 0x39
 8012a26:	d029      	beq.n	8012a7c <_dtoa_r+0xabc>
 8012a28:	f1b9 0f00 	cmp.w	r9, #0
 8012a2c:	dd01      	ble.n	8012a32 <_dtoa_r+0xa72>
 8012a2e:	9b04      	ldr	r3, [sp, #16]
 8012a30:	3331      	adds	r3, #49	; 0x31
 8012a32:	9a02      	ldr	r2, [sp, #8]
 8012a34:	7013      	strb	r3, [r2, #0]
 8012a36:	e774      	b.n	8012922 <_dtoa_r+0x962>
 8012a38:	4638      	mov	r0, r7
 8012a3a:	e7b9      	b.n	80129b0 <_dtoa_r+0x9f0>
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	e7e2      	b.n	8012a06 <_dtoa_r+0xa46>
 8012a40:	f1b9 0f00 	cmp.w	r9, #0
 8012a44:	db06      	blt.n	8012a54 <_dtoa_r+0xa94>
 8012a46:	9905      	ldr	r1, [sp, #20]
 8012a48:	ea41 0909 	orr.w	r9, r1, r9
 8012a4c:	9906      	ldr	r1, [sp, #24]
 8012a4e:	ea59 0101 	orrs.w	r1, r9, r1
 8012a52:	d120      	bne.n	8012a96 <_dtoa_r+0xad6>
 8012a54:	2a00      	cmp	r2, #0
 8012a56:	ddec      	ble.n	8012a32 <_dtoa_r+0xa72>
 8012a58:	4659      	mov	r1, fp
 8012a5a:	2201      	movs	r2, #1
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	9301      	str	r3, [sp, #4]
 8012a60:	f001 f8a6 	bl	8013bb0 <__lshift>
 8012a64:	4631      	mov	r1, r6
 8012a66:	4683      	mov	fp, r0
 8012a68:	f001 f90e 	bl	8013c88 <__mcmp>
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	9b01      	ldr	r3, [sp, #4]
 8012a70:	dc02      	bgt.n	8012a78 <_dtoa_r+0xab8>
 8012a72:	d1de      	bne.n	8012a32 <_dtoa_r+0xa72>
 8012a74:	07da      	lsls	r2, r3, #31
 8012a76:	d5dc      	bpl.n	8012a32 <_dtoa_r+0xa72>
 8012a78:	2b39      	cmp	r3, #57	; 0x39
 8012a7a:	d1d8      	bne.n	8012a2e <_dtoa_r+0xa6e>
 8012a7c:	9a02      	ldr	r2, [sp, #8]
 8012a7e:	2339      	movs	r3, #57	; 0x39
 8012a80:	7013      	strb	r3, [r2, #0]
 8012a82:	462b      	mov	r3, r5
 8012a84:	461d      	mov	r5, r3
 8012a86:	3b01      	subs	r3, #1
 8012a88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a8c:	2a39      	cmp	r2, #57	; 0x39
 8012a8e:	d050      	beq.n	8012b32 <_dtoa_r+0xb72>
 8012a90:	3201      	adds	r2, #1
 8012a92:	701a      	strb	r2, [r3, #0]
 8012a94:	e745      	b.n	8012922 <_dtoa_r+0x962>
 8012a96:	2a00      	cmp	r2, #0
 8012a98:	dd03      	ble.n	8012aa2 <_dtoa_r+0xae2>
 8012a9a:	2b39      	cmp	r3, #57	; 0x39
 8012a9c:	d0ee      	beq.n	8012a7c <_dtoa_r+0xabc>
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	e7c7      	b.n	8012a32 <_dtoa_r+0xa72>
 8012aa2:	9a01      	ldr	r2, [sp, #4]
 8012aa4:	9907      	ldr	r1, [sp, #28]
 8012aa6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012aaa:	428a      	cmp	r2, r1
 8012aac:	d02a      	beq.n	8012b04 <_dtoa_r+0xb44>
 8012aae:	4659      	mov	r1, fp
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	220a      	movs	r2, #10
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f000 fe81 	bl	80137bc <__multadd>
 8012aba:	45b8      	cmp	r8, r7
 8012abc:	4683      	mov	fp, r0
 8012abe:	f04f 0300 	mov.w	r3, #0
 8012ac2:	f04f 020a 	mov.w	r2, #10
 8012ac6:	4641      	mov	r1, r8
 8012ac8:	4620      	mov	r0, r4
 8012aca:	d107      	bne.n	8012adc <_dtoa_r+0xb1c>
 8012acc:	f000 fe76 	bl	80137bc <__multadd>
 8012ad0:	4680      	mov	r8, r0
 8012ad2:	4607      	mov	r7, r0
 8012ad4:	9b01      	ldr	r3, [sp, #4]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	9301      	str	r3, [sp, #4]
 8012ada:	e775      	b.n	80129c8 <_dtoa_r+0xa08>
 8012adc:	f000 fe6e 	bl	80137bc <__multadd>
 8012ae0:	4639      	mov	r1, r7
 8012ae2:	4680      	mov	r8, r0
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	220a      	movs	r2, #10
 8012ae8:	4620      	mov	r0, r4
 8012aea:	f000 fe67 	bl	80137bc <__multadd>
 8012aee:	4607      	mov	r7, r0
 8012af0:	e7f0      	b.n	8012ad4 <_dtoa_r+0xb14>
 8012af2:	f1b9 0f00 	cmp.w	r9, #0
 8012af6:	9a00      	ldr	r2, [sp, #0]
 8012af8:	bfcc      	ite	gt
 8012afa:	464d      	movgt	r5, r9
 8012afc:	2501      	movle	r5, #1
 8012afe:	4415      	add	r5, r2
 8012b00:	f04f 0800 	mov.w	r8, #0
 8012b04:	4659      	mov	r1, fp
 8012b06:	2201      	movs	r2, #1
 8012b08:	4620      	mov	r0, r4
 8012b0a:	9301      	str	r3, [sp, #4]
 8012b0c:	f001 f850 	bl	8013bb0 <__lshift>
 8012b10:	4631      	mov	r1, r6
 8012b12:	4683      	mov	fp, r0
 8012b14:	f001 f8b8 	bl	8013c88 <__mcmp>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	dcb2      	bgt.n	8012a82 <_dtoa_r+0xac2>
 8012b1c:	d102      	bne.n	8012b24 <_dtoa_r+0xb64>
 8012b1e:	9b01      	ldr	r3, [sp, #4]
 8012b20:	07db      	lsls	r3, r3, #31
 8012b22:	d4ae      	bmi.n	8012a82 <_dtoa_r+0xac2>
 8012b24:	462b      	mov	r3, r5
 8012b26:	461d      	mov	r5, r3
 8012b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b2c:	2a30      	cmp	r2, #48	; 0x30
 8012b2e:	d0fa      	beq.n	8012b26 <_dtoa_r+0xb66>
 8012b30:	e6f7      	b.n	8012922 <_dtoa_r+0x962>
 8012b32:	9a00      	ldr	r2, [sp, #0]
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d1a5      	bne.n	8012a84 <_dtoa_r+0xac4>
 8012b38:	f10a 0a01 	add.w	sl, sl, #1
 8012b3c:	2331      	movs	r3, #49	; 0x31
 8012b3e:	e779      	b.n	8012a34 <_dtoa_r+0xa74>
 8012b40:	4b13      	ldr	r3, [pc, #76]	; (8012b90 <_dtoa_r+0xbd0>)
 8012b42:	f7ff baaf 	b.w	80120a4 <_dtoa_r+0xe4>
 8012b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	f47f aa86 	bne.w	801205a <_dtoa_r+0x9a>
 8012b4e:	4b11      	ldr	r3, [pc, #68]	; (8012b94 <_dtoa_r+0xbd4>)
 8012b50:	f7ff baa8 	b.w	80120a4 <_dtoa_r+0xe4>
 8012b54:	f1b9 0f00 	cmp.w	r9, #0
 8012b58:	dc03      	bgt.n	8012b62 <_dtoa_r+0xba2>
 8012b5a:	9b05      	ldr	r3, [sp, #20]
 8012b5c:	2b02      	cmp	r3, #2
 8012b5e:	f73f aec9 	bgt.w	80128f4 <_dtoa_r+0x934>
 8012b62:	9d00      	ldr	r5, [sp, #0]
 8012b64:	4631      	mov	r1, r6
 8012b66:	4658      	mov	r0, fp
 8012b68:	f7ff f99e 	bl	8011ea8 <quorem>
 8012b6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012b70:	f805 3b01 	strb.w	r3, [r5], #1
 8012b74:	9a00      	ldr	r2, [sp, #0]
 8012b76:	1aaa      	subs	r2, r5, r2
 8012b78:	4591      	cmp	r9, r2
 8012b7a:	ddba      	ble.n	8012af2 <_dtoa_r+0xb32>
 8012b7c:	4659      	mov	r1, fp
 8012b7e:	2300      	movs	r3, #0
 8012b80:	220a      	movs	r2, #10
 8012b82:	4620      	mov	r0, r4
 8012b84:	f000 fe1a 	bl	80137bc <__multadd>
 8012b88:	4683      	mov	fp, r0
 8012b8a:	e7eb      	b.n	8012b64 <_dtoa_r+0xba4>
 8012b8c:	08015194 	.word	0x08015194
 8012b90:	08014f94 	.word	0x08014f94
 8012b94:	08015111 	.word	0x08015111

08012b98 <__sflush_r>:
 8012b98:	898a      	ldrh	r2, [r1, #12]
 8012b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9e:	4605      	mov	r5, r0
 8012ba0:	0710      	lsls	r0, r2, #28
 8012ba2:	460c      	mov	r4, r1
 8012ba4:	d458      	bmi.n	8012c58 <__sflush_r+0xc0>
 8012ba6:	684b      	ldr	r3, [r1, #4]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	dc05      	bgt.n	8012bb8 <__sflush_r+0x20>
 8012bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	dc02      	bgt.n	8012bb8 <__sflush_r+0x20>
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bba:	2e00      	cmp	r6, #0
 8012bbc:	d0f9      	beq.n	8012bb2 <__sflush_r+0x1a>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012bc4:	682f      	ldr	r7, [r5, #0]
 8012bc6:	602b      	str	r3, [r5, #0]
 8012bc8:	d032      	beq.n	8012c30 <__sflush_r+0x98>
 8012bca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012bcc:	89a3      	ldrh	r3, [r4, #12]
 8012bce:	075a      	lsls	r2, r3, #29
 8012bd0:	d505      	bpl.n	8012bde <__sflush_r+0x46>
 8012bd2:	6863      	ldr	r3, [r4, #4]
 8012bd4:	1ac0      	subs	r0, r0, r3
 8012bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bd8:	b10b      	cbz	r3, 8012bde <__sflush_r+0x46>
 8012bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012bdc:	1ac0      	subs	r0, r0, r3
 8012bde:	2300      	movs	r3, #0
 8012be0:	4602      	mov	r2, r0
 8012be2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012be4:	6a21      	ldr	r1, [r4, #32]
 8012be6:	4628      	mov	r0, r5
 8012be8:	47b0      	blx	r6
 8012bea:	1c43      	adds	r3, r0, #1
 8012bec:	89a3      	ldrh	r3, [r4, #12]
 8012bee:	d106      	bne.n	8012bfe <__sflush_r+0x66>
 8012bf0:	6829      	ldr	r1, [r5, #0]
 8012bf2:	291d      	cmp	r1, #29
 8012bf4:	d82c      	bhi.n	8012c50 <__sflush_r+0xb8>
 8012bf6:	4a2a      	ldr	r2, [pc, #168]	; (8012ca0 <__sflush_r+0x108>)
 8012bf8:	40ca      	lsrs	r2, r1
 8012bfa:	07d6      	lsls	r6, r2, #31
 8012bfc:	d528      	bpl.n	8012c50 <__sflush_r+0xb8>
 8012bfe:	2200      	movs	r2, #0
 8012c00:	6062      	str	r2, [r4, #4]
 8012c02:	04d9      	lsls	r1, r3, #19
 8012c04:	6922      	ldr	r2, [r4, #16]
 8012c06:	6022      	str	r2, [r4, #0]
 8012c08:	d504      	bpl.n	8012c14 <__sflush_r+0x7c>
 8012c0a:	1c42      	adds	r2, r0, #1
 8012c0c:	d101      	bne.n	8012c12 <__sflush_r+0x7a>
 8012c0e:	682b      	ldr	r3, [r5, #0]
 8012c10:	b903      	cbnz	r3, 8012c14 <__sflush_r+0x7c>
 8012c12:	6560      	str	r0, [r4, #84]	; 0x54
 8012c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c16:	602f      	str	r7, [r5, #0]
 8012c18:	2900      	cmp	r1, #0
 8012c1a:	d0ca      	beq.n	8012bb2 <__sflush_r+0x1a>
 8012c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c20:	4299      	cmp	r1, r3
 8012c22:	d002      	beq.n	8012c2a <__sflush_r+0x92>
 8012c24:	4628      	mov	r0, r5
 8012c26:	f7fd f93f 	bl	800fea8 <_free_r>
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	6360      	str	r0, [r4, #52]	; 0x34
 8012c2e:	e7c1      	b.n	8012bb4 <__sflush_r+0x1c>
 8012c30:	6a21      	ldr	r1, [r4, #32]
 8012c32:	2301      	movs	r3, #1
 8012c34:	4628      	mov	r0, r5
 8012c36:	47b0      	blx	r6
 8012c38:	1c41      	adds	r1, r0, #1
 8012c3a:	d1c7      	bne.n	8012bcc <__sflush_r+0x34>
 8012c3c:	682b      	ldr	r3, [r5, #0]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d0c4      	beq.n	8012bcc <__sflush_r+0x34>
 8012c42:	2b1d      	cmp	r3, #29
 8012c44:	d001      	beq.n	8012c4a <__sflush_r+0xb2>
 8012c46:	2b16      	cmp	r3, #22
 8012c48:	d101      	bne.n	8012c4e <__sflush_r+0xb6>
 8012c4a:	602f      	str	r7, [r5, #0]
 8012c4c:	e7b1      	b.n	8012bb2 <__sflush_r+0x1a>
 8012c4e:	89a3      	ldrh	r3, [r4, #12]
 8012c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c54:	81a3      	strh	r3, [r4, #12]
 8012c56:	e7ad      	b.n	8012bb4 <__sflush_r+0x1c>
 8012c58:	690f      	ldr	r7, [r1, #16]
 8012c5a:	2f00      	cmp	r7, #0
 8012c5c:	d0a9      	beq.n	8012bb2 <__sflush_r+0x1a>
 8012c5e:	0793      	lsls	r3, r2, #30
 8012c60:	680e      	ldr	r6, [r1, #0]
 8012c62:	bf08      	it	eq
 8012c64:	694b      	ldreq	r3, [r1, #20]
 8012c66:	600f      	str	r7, [r1, #0]
 8012c68:	bf18      	it	ne
 8012c6a:	2300      	movne	r3, #0
 8012c6c:	eba6 0807 	sub.w	r8, r6, r7
 8012c70:	608b      	str	r3, [r1, #8]
 8012c72:	f1b8 0f00 	cmp.w	r8, #0
 8012c76:	dd9c      	ble.n	8012bb2 <__sflush_r+0x1a>
 8012c78:	6a21      	ldr	r1, [r4, #32]
 8012c7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012c7c:	4643      	mov	r3, r8
 8012c7e:	463a      	mov	r2, r7
 8012c80:	4628      	mov	r0, r5
 8012c82:	47b0      	blx	r6
 8012c84:	2800      	cmp	r0, #0
 8012c86:	dc06      	bgt.n	8012c96 <__sflush_r+0xfe>
 8012c88:	89a3      	ldrh	r3, [r4, #12]
 8012c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c8e:	81a3      	strh	r3, [r4, #12]
 8012c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c94:	e78e      	b.n	8012bb4 <__sflush_r+0x1c>
 8012c96:	4407      	add	r7, r0
 8012c98:	eba8 0800 	sub.w	r8, r8, r0
 8012c9c:	e7e9      	b.n	8012c72 <__sflush_r+0xda>
 8012c9e:	bf00      	nop
 8012ca0:	20400001 	.word	0x20400001

08012ca4 <_fflush_r>:
 8012ca4:	b538      	push	{r3, r4, r5, lr}
 8012ca6:	690b      	ldr	r3, [r1, #16]
 8012ca8:	4605      	mov	r5, r0
 8012caa:	460c      	mov	r4, r1
 8012cac:	b913      	cbnz	r3, 8012cb4 <_fflush_r+0x10>
 8012cae:	2500      	movs	r5, #0
 8012cb0:	4628      	mov	r0, r5
 8012cb2:	bd38      	pop	{r3, r4, r5, pc}
 8012cb4:	b118      	cbz	r0, 8012cbe <_fflush_r+0x1a>
 8012cb6:	6983      	ldr	r3, [r0, #24]
 8012cb8:	b90b      	cbnz	r3, 8012cbe <_fflush_r+0x1a>
 8012cba:	f000 f887 	bl	8012dcc <__sinit>
 8012cbe:	4b14      	ldr	r3, [pc, #80]	; (8012d10 <_fflush_r+0x6c>)
 8012cc0:	429c      	cmp	r4, r3
 8012cc2:	d11b      	bne.n	8012cfc <_fflush_r+0x58>
 8012cc4:	686c      	ldr	r4, [r5, #4]
 8012cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d0ef      	beq.n	8012cae <_fflush_r+0xa>
 8012cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012cd0:	07d0      	lsls	r0, r2, #31
 8012cd2:	d404      	bmi.n	8012cde <_fflush_r+0x3a>
 8012cd4:	0599      	lsls	r1, r3, #22
 8012cd6:	d402      	bmi.n	8012cde <_fflush_r+0x3a>
 8012cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cda:	f000 fc88 	bl	80135ee <__retarget_lock_acquire_recursive>
 8012cde:	4628      	mov	r0, r5
 8012ce0:	4621      	mov	r1, r4
 8012ce2:	f7ff ff59 	bl	8012b98 <__sflush_r>
 8012ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ce8:	07da      	lsls	r2, r3, #31
 8012cea:	4605      	mov	r5, r0
 8012cec:	d4e0      	bmi.n	8012cb0 <_fflush_r+0xc>
 8012cee:	89a3      	ldrh	r3, [r4, #12]
 8012cf0:	059b      	lsls	r3, r3, #22
 8012cf2:	d4dd      	bmi.n	8012cb0 <_fflush_r+0xc>
 8012cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cf6:	f000 fc7c 	bl	80135f2 <__retarget_lock_release_recursive>
 8012cfa:	e7d9      	b.n	8012cb0 <_fflush_r+0xc>
 8012cfc:	4b05      	ldr	r3, [pc, #20]	; (8012d14 <_fflush_r+0x70>)
 8012cfe:	429c      	cmp	r4, r3
 8012d00:	d101      	bne.n	8012d06 <_fflush_r+0x62>
 8012d02:	68ac      	ldr	r4, [r5, #8]
 8012d04:	e7df      	b.n	8012cc6 <_fflush_r+0x22>
 8012d06:	4b04      	ldr	r3, [pc, #16]	; (8012d18 <_fflush_r+0x74>)
 8012d08:	429c      	cmp	r4, r3
 8012d0a:	bf08      	it	eq
 8012d0c:	68ec      	ldreq	r4, [r5, #12]
 8012d0e:	e7da      	b.n	8012cc6 <_fflush_r+0x22>
 8012d10:	080151c8 	.word	0x080151c8
 8012d14:	080151e8 	.word	0x080151e8
 8012d18:	080151a8 	.word	0x080151a8

08012d1c <std>:
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	b510      	push	{r4, lr}
 8012d20:	4604      	mov	r4, r0
 8012d22:	e9c0 3300 	strd	r3, r3, [r0]
 8012d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d2a:	6083      	str	r3, [r0, #8]
 8012d2c:	8181      	strh	r1, [r0, #12]
 8012d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8012d30:	81c2      	strh	r2, [r0, #14]
 8012d32:	6183      	str	r3, [r0, #24]
 8012d34:	4619      	mov	r1, r3
 8012d36:	2208      	movs	r2, #8
 8012d38:	305c      	adds	r0, #92	; 0x5c
 8012d3a:	f7fd f8ad 	bl	800fe98 <memset>
 8012d3e:	4b05      	ldr	r3, [pc, #20]	; (8012d54 <std+0x38>)
 8012d40:	6263      	str	r3, [r4, #36]	; 0x24
 8012d42:	4b05      	ldr	r3, [pc, #20]	; (8012d58 <std+0x3c>)
 8012d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d46:	4b05      	ldr	r3, [pc, #20]	; (8012d5c <std+0x40>)
 8012d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d4a:	4b05      	ldr	r3, [pc, #20]	; (8012d60 <std+0x44>)
 8012d4c:	6224      	str	r4, [r4, #32]
 8012d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8012d50:	bd10      	pop	{r4, pc}
 8012d52:	bf00      	nop
 8012d54:	08014609 	.word	0x08014609
 8012d58:	0801462b 	.word	0x0801462b
 8012d5c:	08014663 	.word	0x08014663
 8012d60:	08014687 	.word	0x08014687

08012d64 <_cleanup_r>:
 8012d64:	4901      	ldr	r1, [pc, #4]	; (8012d6c <_cleanup_r+0x8>)
 8012d66:	f000 b8af 	b.w	8012ec8 <_fwalk_reent>
 8012d6a:	bf00      	nop
 8012d6c:	08012ca5 	.word	0x08012ca5

08012d70 <__sfmoreglue>:
 8012d70:	b570      	push	{r4, r5, r6, lr}
 8012d72:	1e4a      	subs	r2, r1, #1
 8012d74:	2568      	movs	r5, #104	; 0x68
 8012d76:	4355      	muls	r5, r2
 8012d78:	460e      	mov	r6, r1
 8012d7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012d7e:	f7fd f8e3 	bl	800ff48 <_malloc_r>
 8012d82:	4604      	mov	r4, r0
 8012d84:	b140      	cbz	r0, 8012d98 <__sfmoreglue+0x28>
 8012d86:	2100      	movs	r1, #0
 8012d88:	e9c0 1600 	strd	r1, r6, [r0]
 8012d8c:	300c      	adds	r0, #12
 8012d8e:	60a0      	str	r0, [r4, #8]
 8012d90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012d94:	f7fd f880 	bl	800fe98 <memset>
 8012d98:	4620      	mov	r0, r4
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}

08012d9c <__sfp_lock_acquire>:
 8012d9c:	4801      	ldr	r0, [pc, #4]	; (8012da4 <__sfp_lock_acquire+0x8>)
 8012d9e:	f000 bc26 	b.w	80135ee <__retarget_lock_acquire_recursive>
 8012da2:	bf00      	nop
 8012da4:	20006430 	.word	0x20006430

08012da8 <__sfp_lock_release>:
 8012da8:	4801      	ldr	r0, [pc, #4]	; (8012db0 <__sfp_lock_release+0x8>)
 8012daa:	f000 bc22 	b.w	80135f2 <__retarget_lock_release_recursive>
 8012dae:	bf00      	nop
 8012db0:	20006430 	.word	0x20006430

08012db4 <__sinit_lock_acquire>:
 8012db4:	4801      	ldr	r0, [pc, #4]	; (8012dbc <__sinit_lock_acquire+0x8>)
 8012db6:	f000 bc1a 	b.w	80135ee <__retarget_lock_acquire_recursive>
 8012dba:	bf00      	nop
 8012dbc:	2000642b 	.word	0x2000642b

08012dc0 <__sinit_lock_release>:
 8012dc0:	4801      	ldr	r0, [pc, #4]	; (8012dc8 <__sinit_lock_release+0x8>)
 8012dc2:	f000 bc16 	b.w	80135f2 <__retarget_lock_release_recursive>
 8012dc6:	bf00      	nop
 8012dc8:	2000642b 	.word	0x2000642b

08012dcc <__sinit>:
 8012dcc:	b510      	push	{r4, lr}
 8012dce:	4604      	mov	r4, r0
 8012dd0:	f7ff fff0 	bl	8012db4 <__sinit_lock_acquire>
 8012dd4:	69a3      	ldr	r3, [r4, #24]
 8012dd6:	b11b      	cbz	r3, 8012de0 <__sinit+0x14>
 8012dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ddc:	f7ff bff0 	b.w	8012dc0 <__sinit_lock_release>
 8012de0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012de4:	6523      	str	r3, [r4, #80]	; 0x50
 8012de6:	4b13      	ldr	r3, [pc, #76]	; (8012e34 <__sinit+0x68>)
 8012de8:	4a13      	ldr	r2, [pc, #76]	; (8012e38 <__sinit+0x6c>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	62a2      	str	r2, [r4, #40]	; 0x28
 8012dee:	42a3      	cmp	r3, r4
 8012df0:	bf04      	itt	eq
 8012df2:	2301      	moveq	r3, #1
 8012df4:	61a3      	streq	r3, [r4, #24]
 8012df6:	4620      	mov	r0, r4
 8012df8:	f000 f820 	bl	8012e3c <__sfp>
 8012dfc:	6060      	str	r0, [r4, #4]
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f000 f81c 	bl	8012e3c <__sfp>
 8012e04:	60a0      	str	r0, [r4, #8]
 8012e06:	4620      	mov	r0, r4
 8012e08:	f000 f818 	bl	8012e3c <__sfp>
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	60e0      	str	r0, [r4, #12]
 8012e10:	2104      	movs	r1, #4
 8012e12:	6860      	ldr	r0, [r4, #4]
 8012e14:	f7ff ff82 	bl	8012d1c <std>
 8012e18:	68a0      	ldr	r0, [r4, #8]
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	2109      	movs	r1, #9
 8012e1e:	f7ff ff7d 	bl	8012d1c <std>
 8012e22:	68e0      	ldr	r0, [r4, #12]
 8012e24:	2202      	movs	r2, #2
 8012e26:	2112      	movs	r1, #18
 8012e28:	f7ff ff78 	bl	8012d1c <std>
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	61a3      	str	r3, [r4, #24]
 8012e30:	e7d2      	b.n	8012dd8 <__sinit+0xc>
 8012e32:	bf00      	nop
 8012e34:	08014f80 	.word	0x08014f80
 8012e38:	08012d65 	.word	0x08012d65

08012e3c <__sfp>:
 8012e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e3e:	4607      	mov	r7, r0
 8012e40:	f7ff ffac 	bl	8012d9c <__sfp_lock_acquire>
 8012e44:	4b1e      	ldr	r3, [pc, #120]	; (8012ec0 <__sfp+0x84>)
 8012e46:	681e      	ldr	r6, [r3, #0]
 8012e48:	69b3      	ldr	r3, [r6, #24]
 8012e4a:	b913      	cbnz	r3, 8012e52 <__sfp+0x16>
 8012e4c:	4630      	mov	r0, r6
 8012e4e:	f7ff ffbd 	bl	8012dcc <__sinit>
 8012e52:	3648      	adds	r6, #72	; 0x48
 8012e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e58:	3b01      	subs	r3, #1
 8012e5a:	d503      	bpl.n	8012e64 <__sfp+0x28>
 8012e5c:	6833      	ldr	r3, [r6, #0]
 8012e5e:	b30b      	cbz	r3, 8012ea4 <__sfp+0x68>
 8012e60:	6836      	ldr	r6, [r6, #0]
 8012e62:	e7f7      	b.n	8012e54 <__sfp+0x18>
 8012e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e68:	b9d5      	cbnz	r5, 8012ea0 <__sfp+0x64>
 8012e6a:	4b16      	ldr	r3, [pc, #88]	; (8012ec4 <__sfp+0x88>)
 8012e6c:	60e3      	str	r3, [r4, #12]
 8012e6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e72:	6665      	str	r5, [r4, #100]	; 0x64
 8012e74:	f000 fbba 	bl	80135ec <__retarget_lock_init_recursive>
 8012e78:	f7ff ff96 	bl	8012da8 <__sfp_lock_release>
 8012e7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012e80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012e84:	6025      	str	r5, [r4, #0]
 8012e86:	61a5      	str	r5, [r4, #24]
 8012e88:	2208      	movs	r2, #8
 8012e8a:	4629      	mov	r1, r5
 8012e8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012e90:	f7fd f802 	bl	800fe98 <memset>
 8012e94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ea0:	3468      	adds	r4, #104	; 0x68
 8012ea2:	e7d9      	b.n	8012e58 <__sfp+0x1c>
 8012ea4:	2104      	movs	r1, #4
 8012ea6:	4638      	mov	r0, r7
 8012ea8:	f7ff ff62 	bl	8012d70 <__sfmoreglue>
 8012eac:	4604      	mov	r4, r0
 8012eae:	6030      	str	r0, [r6, #0]
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	d1d5      	bne.n	8012e60 <__sfp+0x24>
 8012eb4:	f7ff ff78 	bl	8012da8 <__sfp_lock_release>
 8012eb8:	230c      	movs	r3, #12
 8012eba:	603b      	str	r3, [r7, #0]
 8012ebc:	e7ee      	b.n	8012e9c <__sfp+0x60>
 8012ebe:	bf00      	nop
 8012ec0:	08014f80 	.word	0x08014f80
 8012ec4:	ffff0001 	.word	0xffff0001

08012ec8 <_fwalk_reent>:
 8012ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ecc:	4606      	mov	r6, r0
 8012ece:	4688      	mov	r8, r1
 8012ed0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012ed4:	2700      	movs	r7, #0
 8012ed6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012eda:	f1b9 0901 	subs.w	r9, r9, #1
 8012ede:	d505      	bpl.n	8012eec <_fwalk_reent+0x24>
 8012ee0:	6824      	ldr	r4, [r4, #0]
 8012ee2:	2c00      	cmp	r4, #0
 8012ee4:	d1f7      	bne.n	8012ed6 <_fwalk_reent+0xe>
 8012ee6:	4638      	mov	r0, r7
 8012ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eec:	89ab      	ldrh	r3, [r5, #12]
 8012eee:	2b01      	cmp	r3, #1
 8012ef0:	d907      	bls.n	8012f02 <_fwalk_reent+0x3a>
 8012ef2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	d003      	beq.n	8012f02 <_fwalk_reent+0x3a>
 8012efa:	4629      	mov	r1, r5
 8012efc:	4630      	mov	r0, r6
 8012efe:	47c0      	blx	r8
 8012f00:	4307      	orrs	r7, r0
 8012f02:	3568      	adds	r5, #104	; 0x68
 8012f04:	e7e9      	b.n	8012eda <_fwalk_reent+0x12>

08012f06 <rshift>:
 8012f06:	6903      	ldr	r3, [r0, #16]
 8012f08:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f10:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012f14:	f100 0414 	add.w	r4, r0, #20
 8012f18:	dd45      	ble.n	8012fa6 <rshift+0xa0>
 8012f1a:	f011 011f 	ands.w	r1, r1, #31
 8012f1e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012f22:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012f26:	d10c      	bne.n	8012f42 <rshift+0x3c>
 8012f28:	f100 0710 	add.w	r7, r0, #16
 8012f2c:	4629      	mov	r1, r5
 8012f2e:	42b1      	cmp	r1, r6
 8012f30:	d334      	bcc.n	8012f9c <rshift+0x96>
 8012f32:	1a9b      	subs	r3, r3, r2
 8012f34:	009b      	lsls	r3, r3, #2
 8012f36:	1eea      	subs	r2, r5, #3
 8012f38:	4296      	cmp	r6, r2
 8012f3a:	bf38      	it	cc
 8012f3c:	2300      	movcc	r3, #0
 8012f3e:	4423      	add	r3, r4
 8012f40:	e015      	b.n	8012f6e <rshift+0x68>
 8012f42:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012f46:	f1c1 0820 	rsb	r8, r1, #32
 8012f4a:	40cf      	lsrs	r7, r1
 8012f4c:	f105 0e04 	add.w	lr, r5, #4
 8012f50:	46a1      	mov	r9, r4
 8012f52:	4576      	cmp	r6, lr
 8012f54:	46f4      	mov	ip, lr
 8012f56:	d815      	bhi.n	8012f84 <rshift+0x7e>
 8012f58:	1a9b      	subs	r3, r3, r2
 8012f5a:	009a      	lsls	r2, r3, #2
 8012f5c:	3a04      	subs	r2, #4
 8012f5e:	3501      	adds	r5, #1
 8012f60:	42ae      	cmp	r6, r5
 8012f62:	bf38      	it	cc
 8012f64:	2200      	movcc	r2, #0
 8012f66:	18a3      	adds	r3, r4, r2
 8012f68:	50a7      	str	r7, [r4, r2]
 8012f6a:	b107      	cbz	r7, 8012f6e <rshift+0x68>
 8012f6c:	3304      	adds	r3, #4
 8012f6e:	1b1a      	subs	r2, r3, r4
 8012f70:	42a3      	cmp	r3, r4
 8012f72:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012f76:	bf08      	it	eq
 8012f78:	2300      	moveq	r3, #0
 8012f7a:	6102      	str	r2, [r0, #16]
 8012f7c:	bf08      	it	eq
 8012f7e:	6143      	streq	r3, [r0, #20]
 8012f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f84:	f8dc c000 	ldr.w	ip, [ip]
 8012f88:	fa0c fc08 	lsl.w	ip, ip, r8
 8012f8c:	ea4c 0707 	orr.w	r7, ip, r7
 8012f90:	f849 7b04 	str.w	r7, [r9], #4
 8012f94:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012f98:	40cf      	lsrs	r7, r1
 8012f9a:	e7da      	b.n	8012f52 <rshift+0x4c>
 8012f9c:	f851 cb04 	ldr.w	ip, [r1], #4
 8012fa0:	f847 cf04 	str.w	ip, [r7, #4]!
 8012fa4:	e7c3      	b.n	8012f2e <rshift+0x28>
 8012fa6:	4623      	mov	r3, r4
 8012fa8:	e7e1      	b.n	8012f6e <rshift+0x68>

08012faa <__hexdig_fun>:
 8012faa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012fae:	2b09      	cmp	r3, #9
 8012fb0:	d802      	bhi.n	8012fb8 <__hexdig_fun+0xe>
 8012fb2:	3820      	subs	r0, #32
 8012fb4:	b2c0      	uxtb	r0, r0
 8012fb6:	4770      	bx	lr
 8012fb8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012fbc:	2b05      	cmp	r3, #5
 8012fbe:	d801      	bhi.n	8012fc4 <__hexdig_fun+0x1a>
 8012fc0:	3847      	subs	r0, #71	; 0x47
 8012fc2:	e7f7      	b.n	8012fb4 <__hexdig_fun+0xa>
 8012fc4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012fc8:	2b05      	cmp	r3, #5
 8012fca:	d801      	bhi.n	8012fd0 <__hexdig_fun+0x26>
 8012fcc:	3827      	subs	r0, #39	; 0x27
 8012fce:	e7f1      	b.n	8012fb4 <__hexdig_fun+0xa>
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	4770      	bx	lr

08012fd4 <__gethex>:
 8012fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd8:	ed2d 8b02 	vpush	{d8}
 8012fdc:	b089      	sub	sp, #36	; 0x24
 8012fde:	ee08 0a10 	vmov	s16, r0
 8012fe2:	9304      	str	r3, [sp, #16]
 8012fe4:	4bbc      	ldr	r3, [pc, #752]	; (80132d8 <__gethex+0x304>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	9301      	str	r3, [sp, #4]
 8012fea:	4618      	mov	r0, r3
 8012fec:	468b      	mov	fp, r1
 8012fee:	4690      	mov	r8, r2
 8012ff0:	f7ed f8fc 	bl	80001ec <strlen>
 8012ff4:	9b01      	ldr	r3, [sp, #4]
 8012ff6:	f8db 2000 	ldr.w	r2, [fp]
 8012ffa:	4403      	add	r3, r0
 8012ffc:	4682      	mov	sl, r0
 8012ffe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013002:	9305      	str	r3, [sp, #20]
 8013004:	1c93      	adds	r3, r2, #2
 8013006:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801300a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801300e:	32fe      	adds	r2, #254	; 0xfe
 8013010:	18d1      	adds	r1, r2, r3
 8013012:	461f      	mov	r7, r3
 8013014:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013018:	9100      	str	r1, [sp, #0]
 801301a:	2830      	cmp	r0, #48	; 0x30
 801301c:	d0f8      	beq.n	8013010 <__gethex+0x3c>
 801301e:	f7ff ffc4 	bl	8012faa <__hexdig_fun>
 8013022:	4604      	mov	r4, r0
 8013024:	2800      	cmp	r0, #0
 8013026:	d13a      	bne.n	801309e <__gethex+0xca>
 8013028:	9901      	ldr	r1, [sp, #4]
 801302a:	4652      	mov	r2, sl
 801302c:	4638      	mov	r0, r7
 801302e:	f001 fb2e 	bl	801468e <strncmp>
 8013032:	4605      	mov	r5, r0
 8013034:	2800      	cmp	r0, #0
 8013036:	d168      	bne.n	801310a <__gethex+0x136>
 8013038:	f817 000a 	ldrb.w	r0, [r7, sl]
 801303c:	eb07 060a 	add.w	r6, r7, sl
 8013040:	f7ff ffb3 	bl	8012faa <__hexdig_fun>
 8013044:	2800      	cmp	r0, #0
 8013046:	d062      	beq.n	801310e <__gethex+0x13a>
 8013048:	4633      	mov	r3, r6
 801304a:	7818      	ldrb	r0, [r3, #0]
 801304c:	2830      	cmp	r0, #48	; 0x30
 801304e:	461f      	mov	r7, r3
 8013050:	f103 0301 	add.w	r3, r3, #1
 8013054:	d0f9      	beq.n	801304a <__gethex+0x76>
 8013056:	f7ff ffa8 	bl	8012faa <__hexdig_fun>
 801305a:	2301      	movs	r3, #1
 801305c:	fab0 f480 	clz	r4, r0
 8013060:	0964      	lsrs	r4, r4, #5
 8013062:	4635      	mov	r5, r6
 8013064:	9300      	str	r3, [sp, #0]
 8013066:	463a      	mov	r2, r7
 8013068:	4616      	mov	r6, r2
 801306a:	3201      	adds	r2, #1
 801306c:	7830      	ldrb	r0, [r6, #0]
 801306e:	f7ff ff9c 	bl	8012faa <__hexdig_fun>
 8013072:	2800      	cmp	r0, #0
 8013074:	d1f8      	bne.n	8013068 <__gethex+0x94>
 8013076:	9901      	ldr	r1, [sp, #4]
 8013078:	4652      	mov	r2, sl
 801307a:	4630      	mov	r0, r6
 801307c:	f001 fb07 	bl	801468e <strncmp>
 8013080:	b980      	cbnz	r0, 80130a4 <__gethex+0xd0>
 8013082:	b94d      	cbnz	r5, 8013098 <__gethex+0xc4>
 8013084:	eb06 050a 	add.w	r5, r6, sl
 8013088:	462a      	mov	r2, r5
 801308a:	4616      	mov	r6, r2
 801308c:	3201      	adds	r2, #1
 801308e:	7830      	ldrb	r0, [r6, #0]
 8013090:	f7ff ff8b 	bl	8012faa <__hexdig_fun>
 8013094:	2800      	cmp	r0, #0
 8013096:	d1f8      	bne.n	801308a <__gethex+0xb6>
 8013098:	1bad      	subs	r5, r5, r6
 801309a:	00ad      	lsls	r5, r5, #2
 801309c:	e004      	b.n	80130a8 <__gethex+0xd4>
 801309e:	2400      	movs	r4, #0
 80130a0:	4625      	mov	r5, r4
 80130a2:	e7e0      	b.n	8013066 <__gethex+0x92>
 80130a4:	2d00      	cmp	r5, #0
 80130a6:	d1f7      	bne.n	8013098 <__gethex+0xc4>
 80130a8:	7833      	ldrb	r3, [r6, #0]
 80130aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80130ae:	2b50      	cmp	r3, #80	; 0x50
 80130b0:	d13b      	bne.n	801312a <__gethex+0x156>
 80130b2:	7873      	ldrb	r3, [r6, #1]
 80130b4:	2b2b      	cmp	r3, #43	; 0x2b
 80130b6:	d02c      	beq.n	8013112 <__gethex+0x13e>
 80130b8:	2b2d      	cmp	r3, #45	; 0x2d
 80130ba:	d02e      	beq.n	801311a <__gethex+0x146>
 80130bc:	1c71      	adds	r1, r6, #1
 80130be:	f04f 0900 	mov.w	r9, #0
 80130c2:	7808      	ldrb	r0, [r1, #0]
 80130c4:	f7ff ff71 	bl	8012faa <__hexdig_fun>
 80130c8:	1e43      	subs	r3, r0, #1
 80130ca:	b2db      	uxtb	r3, r3
 80130cc:	2b18      	cmp	r3, #24
 80130ce:	d82c      	bhi.n	801312a <__gethex+0x156>
 80130d0:	f1a0 0210 	sub.w	r2, r0, #16
 80130d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80130d8:	f7ff ff67 	bl	8012faa <__hexdig_fun>
 80130dc:	1e43      	subs	r3, r0, #1
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	2b18      	cmp	r3, #24
 80130e2:	d91d      	bls.n	8013120 <__gethex+0x14c>
 80130e4:	f1b9 0f00 	cmp.w	r9, #0
 80130e8:	d000      	beq.n	80130ec <__gethex+0x118>
 80130ea:	4252      	negs	r2, r2
 80130ec:	4415      	add	r5, r2
 80130ee:	f8cb 1000 	str.w	r1, [fp]
 80130f2:	b1e4      	cbz	r4, 801312e <__gethex+0x15a>
 80130f4:	9b00      	ldr	r3, [sp, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	bf14      	ite	ne
 80130fa:	2700      	movne	r7, #0
 80130fc:	2706      	moveq	r7, #6
 80130fe:	4638      	mov	r0, r7
 8013100:	b009      	add	sp, #36	; 0x24
 8013102:	ecbd 8b02 	vpop	{d8}
 8013106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801310a:	463e      	mov	r6, r7
 801310c:	4625      	mov	r5, r4
 801310e:	2401      	movs	r4, #1
 8013110:	e7ca      	b.n	80130a8 <__gethex+0xd4>
 8013112:	f04f 0900 	mov.w	r9, #0
 8013116:	1cb1      	adds	r1, r6, #2
 8013118:	e7d3      	b.n	80130c2 <__gethex+0xee>
 801311a:	f04f 0901 	mov.w	r9, #1
 801311e:	e7fa      	b.n	8013116 <__gethex+0x142>
 8013120:	230a      	movs	r3, #10
 8013122:	fb03 0202 	mla	r2, r3, r2, r0
 8013126:	3a10      	subs	r2, #16
 8013128:	e7d4      	b.n	80130d4 <__gethex+0x100>
 801312a:	4631      	mov	r1, r6
 801312c:	e7df      	b.n	80130ee <__gethex+0x11a>
 801312e:	1bf3      	subs	r3, r6, r7
 8013130:	3b01      	subs	r3, #1
 8013132:	4621      	mov	r1, r4
 8013134:	2b07      	cmp	r3, #7
 8013136:	dc0b      	bgt.n	8013150 <__gethex+0x17c>
 8013138:	ee18 0a10 	vmov	r0, s16
 801313c:	f000 fadc 	bl	80136f8 <_Balloc>
 8013140:	4604      	mov	r4, r0
 8013142:	b940      	cbnz	r0, 8013156 <__gethex+0x182>
 8013144:	4b65      	ldr	r3, [pc, #404]	; (80132dc <__gethex+0x308>)
 8013146:	4602      	mov	r2, r0
 8013148:	21de      	movs	r1, #222	; 0xde
 801314a:	4865      	ldr	r0, [pc, #404]	; (80132e0 <__gethex+0x30c>)
 801314c:	f001 fad0 	bl	80146f0 <__assert_func>
 8013150:	3101      	adds	r1, #1
 8013152:	105b      	asrs	r3, r3, #1
 8013154:	e7ee      	b.n	8013134 <__gethex+0x160>
 8013156:	f100 0914 	add.w	r9, r0, #20
 801315a:	f04f 0b00 	mov.w	fp, #0
 801315e:	f1ca 0301 	rsb	r3, sl, #1
 8013162:	f8cd 9008 	str.w	r9, [sp, #8]
 8013166:	f8cd b000 	str.w	fp, [sp]
 801316a:	9306      	str	r3, [sp, #24]
 801316c:	42b7      	cmp	r7, r6
 801316e:	d340      	bcc.n	80131f2 <__gethex+0x21e>
 8013170:	9802      	ldr	r0, [sp, #8]
 8013172:	9b00      	ldr	r3, [sp, #0]
 8013174:	f840 3b04 	str.w	r3, [r0], #4
 8013178:	eba0 0009 	sub.w	r0, r0, r9
 801317c:	1080      	asrs	r0, r0, #2
 801317e:	0146      	lsls	r6, r0, #5
 8013180:	6120      	str	r0, [r4, #16]
 8013182:	4618      	mov	r0, r3
 8013184:	f000 fbae 	bl	80138e4 <__hi0bits>
 8013188:	1a30      	subs	r0, r6, r0
 801318a:	f8d8 6000 	ldr.w	r6, [r8]
 801318e:	42b0      	cmp	r0, r6
 8013190:	dd63      	ble.n	801325a <__gethex+0x286>
 8013192:	1b87      	subs	r7, r0, r6
 8013194:	4639      	mov	r1, r7
 8013196:	4620      	mov	r0, r4
 8013198:	f000 ff48 	bl	801402c <__any_on>
 801319c:	4682      	mov	sl, r0
 801319e:	b1a8      	cbz	r0, 80131cc <__gethex+0x1f8>
 80131a0:	1e7b      	subs	r3, r7, #1
 80131a2:	1159      	asrs	r1, r3, #5
 80131a4:	f003 021f 	and.w	r2, r3, #31
 80131a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80131ac:	f04f 0a01 	mov.w	sl, #1
 80131b0:	fa0a f202 	lsl.w	r2, sl, r2
 80131b4:	420a      	tst	r2, r1
 80131b6:	d009      	beq.n	80131cc <__gethex+0x1f8>
 80131b8:	4553      	cmp	r3, sl
 80131ba:	dd05      	ble.n	80131c8 <__gethex+0x1f4>
 80131bc:	1eb9      	subs	r1, r7, #2
 80131be:	4620      	mov	r0, r4
 80131c0:	f000 ff34 	bl	801402c <__any_on>
 80131c4:	2800      	cmp	r0, #0
 80131c6:	d145      	bne.n	8013254 <__gethex+0x280>
 80131c8:	f04f 0a02 	mov.w	sl, #2
 80131cc:	4639      	mov	r1, r7
 80131ce:	4620      	mov	r0, r4
 80131d0:	f7ff fe99 	bl	8012f06 <rshift>
 80131d4:	443d      	add	r5, r7
 80131d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131da:	42ab      	cmp	r3, r5
 80131dc:	da4c      	bge.n	8013278 <__gethex+0x2a4>
 80131de:	ee18 0a10 	vmov	r0, s16
 80131e2:	4621      	mov	r1, r4
 80131e4:	f000 fac8 	bl	8013778 <_Bfree>
 80131e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80131ea:	2300      	movs	r3, #0
 80131ec:	6013      	str	r3, [r2, #0]
 80131ee:	27a3      	movs	r7, #163	; 0xa3
 80131f0:	e785      	b.n	80130fe <__gethex+0x12a>
 80131f2:	1e73      	subs	r3, r6, #1
 80131f4:	9a05      	ldr	r2, [sp, #20]
 80131f6:	9303      	str	r3, [sp, #12]
 80131f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d019      	beq.n	8013234 <__gethex+0x260>
 8013200:	f1bb 0f20 	cmp.w	fp, #32
 8013204:	d107      	bne.n	8013216 <__gethex+0x242>
 8013206:	9b02      	ldr	r3, [sp, #8]
 8013208:	9a00      	ldr	r2, [sp, #0]
 801320a:	f843 2b04 	str.w	r2, [r3], #4
 801320e:	9302      	str	r3, [sp, #8]
 8013210:	2300      	movs	r3, #0
 8013212:	9300      	str	r3, [sp, #0]
 8013214:	469b      	mov	fp, r3
 8013216:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801321a:	f7ff fec6 	bl	8012faa <__hexdig_fun>
 801321e:	9b00      	ldr	r3, [sp, #0]
 8013220:	f000 000f 	and.w	r0, r0, #15
 8013224:	fa00 f00b 	lsl.w	r0, r0, fp
 8013228:	4303      	orrs	r3, r0
 801322a:	9300      	str	r3, [sp, #0]
 801322c:	f10b 0b04 	add.w	fp, fp, #4
 8013230:	9b03      	ldr	r3, [sp, #12]
 8013232:	e00d      	b.n	8013250 <__gethex+0x27c>
 8013234:	9b03      	ldr	r3, [sp, #12]
 8013236:	9a06      	ldr	r2, [sp, #24]
 8013238:	4413      	add	r3, r2
 801323a:	42bb      	cmp	r3, r7
 801323c:	d3e0      	bcc.n	8013200 <__gethex+0x22c>
 801323e:	4618      	mov	r0, r3
 8013240:	9901      	ldr	r1, [sp, #4]
 8013242:	9307      	str	r3, [sp, #28]
 8013244:	4652      	mov	r2, sl
 8013246:	f001 fa22 	bl	801468e <strncmp>
 801324a:	9b07      	ldr	r3, [sp, #28]
 801324c:	2800      	cmp	r0, #0
 801324e:	d1d7      	bne.n	8013200 <__gethex+0x22c>
 8013250:	461e      	mov	r6, r3
 8013252:	e78b      	b.n	801316c <__gethex+0x198>
 8013254:	f04f 0a03 	mov.w	sl, #3
 8013258:	e7b8      	b.n	80131cc <__gethex+0x1f8>
 801325a:	da0a      	bge.n	8013272 <__gethex+0x29e>
 801325c:	1a37      	subs	r7, r6, r0
 801325e:	4621      	mov	r1, r4
 8013260:	ee18 0a10 	vmov	r0, s16
 8013264:	463a      	mov	r2, r7
 8013266:	f000 fca3 	bl	8013bb0 <__lshift>
 801326a:	1bed      	subs	r5, r5, r7
 801326c:	4604      	mov	r4, r0
 801326e:	f100 0914 	add.w	r9, r0, #20
 8013272:	f04f 0a00 	mov.w	sl, #0
 8013276:	e7ae      	b.n	80131d6 <__gethex+0x202>
 8013278:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801327c:	42a8      	cmp	r0, r5
 801327e:	dd72      	ble.n	8013366 <__gethex+0x392>
 8013280:	1b45      	subs	r5, r0, r5
 8013282:	42ae      	cmp	r6, r5
 8013284:	dc36      	bgt.n	80132f4 <__gethex+0x320>
 8013286:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801328a:	2b02      	cmp	r3, #2
 801328c:	d02a      	beq.n	80132e4 <__gethex+0x310>
 801328e:	2b03      	cmp	r3, #3
 8013290:	d02c      	beq.n	80132ec <__gethex+0x318>
 8013292:	2b01      	cmp	r3, #1
 8013294:	d115      	bne.n	80132c2 <__gethex+0x2ee>
 8013296:	42ae      	cmp	r6, r5
 8013298:	d113      	bne.n	80132c2 <__gethex+0x2ee>
 801329a:	2e01      	cmp	r6, #1
 801329c:	d10b      	bne.n	80132b6 <__gethex+0x2e2>
 801329e:	9a04      	ldr	r2, [sp, #16]
 80132a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80132a4:	6013      	str	r3, [r2, #0]
 80132a6:	2301      	movs	r3, #1
 80132a8:	6123      	str	r3, [r4, #16]
 80132aa:	f8c9 3000 	str.w	r3, [r9]
 80132ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80132b0:	2762      	movs	r7, #98	; 0x62
 80132b2:	601c      	str	r4, [r3, #0]
 80132b4:	e723      	b.n	80130fe <__gethex+0x12a>
 80132b6:	1e71      	subs	r1, r6, #1
 80132b8:	4620      	mov	r0, r4
 80132ba:	f000 feb7 	bl	801402c <__any_on>
 80132be:	2800      	cmp	r0, #0
 80132c0:	d1ed      	bne.n	801329e <__gethex+0x2ca>
 80132c2:	ee18 0a10 	vmov	r0, s16
 80132c6:	4621      	mov	r1, r4
 80132c8:	f000 fa56 	bl	8013778 <_Bfree>
 80132cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80132ce:	2300      	movs	r3, #0
 80132d0:	6013      	str	r3, [r2, #0]
 80132d2:	2750      	movs	r7, #80	; 0x50
 80132d4:	e713      	b.n	80130fe <__gethex+0x12a>
 80132d6:	bf00      	nop
 80132d8:	08015274 	.word	0x08015274
 80132dc:	08015194 	.word	0x08015194
 80132e0:	08015208 	.word	0x08015208
 80132e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d1eb      	bne.n	80132c2 <__gethex+0x2ee>
 80132ea:	e7d8      	b.n	801329e <__gethex+0x2ca>
 80132ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d1d5      	bne.n	801329e <__gethex+0x2ca>
 80132f2:	e7e6      	b.n	80132c2 <__gethex+0x2ee>
 80132f4:	1e6f      	subs	r7, r5, #1
 80132f6:	f1ba 0f00 	cmp.w	sl, #0
 80132fa:	d131      	bne.n	8013360 <__gethex+0x38c>
 80132fc:	b127      	cbz	r7, 8013308 <__gethex+0x334>
 80132fe:	4639      	mov	r1, r7
 8013300:	4620      	mov	r0, r4
 8013302:	f000 fe93 	bl	801402c <__any_on>
 8013306:	4682      	mov	sl, r0
 8013308:	117b      	asrs	r3, r7, #5
 801330a:	2101      	movs	r1, #1
 801330c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013310:	f007 071f 	and.w	r7, r7, #31
 8013314:	fa01 f707 	lsl.w	r7, r1, r7
 8013318:	421f      	tst	r7, r3
 801331a:	4629      	mov	r1, r5
 801331c:	4620      	mov	r0, r4
 801331e:	bf18      	it	ne
 8013320:	f04a 0a02 	orrne.w	sl, sl, #2
 8013324:	1b76      	subs	r6, r6, r5
 8013326:	f7ff fdee 	bl	8012f06 <rshift>
 801332a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801332e:	2702      	movs	r7, #2
 8013330:	f1ba 0f00 	cmp.w	sl, #0
 8013334:	d048      	beq.n	80133c8 <__gethex+0x3f4>
 8013336:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801333a:	2b02      	cmp	r3, #2
 801333c:	d015      	beq.n	801336a <__gethex+0x396>
 801333e:	2b03      	cmp	r3, #3
 8013340:	d017      	beq.n	8013372 <__gethex+0x39e>
 8013342:	2b01      	cmp	r3, #1
 8013344:	d109      	bne.n	801335a <__gethex+0x386>
 8013346:	f01a 0f02 	tst.w	sl, #2
 801334a:	d006      	beq.n	801335a <__gethex+0x386>
 801334c:	f8d9 0000 	ldr.w	r0, [r9]
 8013350:	ea4a 0a00 	orr.w	sl, sl, r0
 8013354:	f01a 0f01 	tst.w	sl, #1
 8013358:	d10e      	bne.n	8013378 <__gethex+0x3a4>
 801335a:	f047 0710 	orr.w	r7, r7, #16
 801335e:	e033      	b.n	80133c8 <__gethex+0x3f4>
 8013360:	f04f 0a01 	mov.w	sl, #1
 8013364:	e7d0      	b.n	8013308 <__gethex+0x334>
 8013366:	2701      	movs	r7, #1
 8013368:	e7e2      	b.n	8013330 <__gethex+0x35c>
 801336a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801336c:	f1c3 0301 	rsb	r3, r3, #1
 8013370:	9315      	str	r3, [sp, #84]	; 0x54
 8013372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013374:	2b00      	cmp	r3, #0
 8013376:	d0f0      	beq.n	801335a <__gethex+0x386>
 8013378:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801337c:	f104 0314 	add.w	r3, r4, #20
 8013380:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013384:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013388:	f04f 0c00 	mov.w	ip, #0
 801338c:	4618      	mov	r0, r3
 801338e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013392:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8013396:	d01c      	beq.n	80133d2 <__gethex+0x3fe>
 8013398:	3201      	adds	r2, #1
 801339a:	6002      	str	r2, [r0, #0]
 801339c:	2f02      	cmp	r7, #2
 801339e:	f104 0314 	add.w	r3, r4, #20
 80133a2:	d13f      	bne.n	8013424 <__gethex+0x450>
 80133a4:	f8d8 2000 	ldr.w	r2, [r8]
 80133a8:	3a01      	subs	r2, #1
 80133aa:	42b2      	cmp	r2, r6
 80133ac:	d10a      	bne.n	80133c4 <__gethex+0x3f0>
 80133ae:	1171      	asrs	r1, r6, #5
 80133b0:	2201      	movs	r2, #1
 80133b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80133b6:	f006 061f 	and.w	r6, r6, #31
 80133ba:	fa02 f606 	lsl.w	r6, r2, r6
 80133be:	421e      	tst	r6, r3
 80133c0:	bf18      	it	ne
 80133c2:	4617      	movne	r7, r2
 80133c4:	f047 0720 	orr.w	r7, r7, #32
 80133c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80133ca:	601c      	str	r4, [r3, #0]
 80133cc:	9b04      	ldr	r3, [sp, #16]
 80133ce:	601d      	str	r5, [r3, #0]
 80133d0:	e695      	b.n	80130fe <__gethex+0x12a>
 80133d2:	4299      	cmp	r1, r3
 80133d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80133d8:	d8d8      	bhi.n	801338c <__gethex+0x3b8>
 80133da:	68a3      	ldr	r3, [r4, #8]
 80133dc:	459b      	cmp	fp, r3
 80133de:	db19      	blt.n	8013414 <__gethex+0x440>
 80133e0:	6861      	ldr	r1, [r4, #4]
 80133e2:	ee18 0a10 	vmov	r0, s16
 80133e6:	3101      	adds	r1, #1
 80133e8:	f000 f986 	bl	80136f8 <_Balloc>
 80133ec:	4681      	mov	r9, r0
 80133ee:	b918      	cbnz	r0, 80133f8 <__gethex+0x424>
 80133f0:	4b1a      	ldr	r3, [pc, #104]	; (801345c <__gethex+0x488>)
 80133f2:	4602      	mov	r2, r0
 80133f4:	2184      	movs	r1, #132	; 0x84
 80133f6:	e6a8      	b.n	801314a <__gethex+0x176>
 80133f8:	6922      	ldr	r2, [r4, #16]
 80133fa:	3202      	adds	r2, #2
 80133fc:	f104 010c 	add.w	r1, r4, #12
 8013400:	0092      	lsls	r2, r2, #2
 8013402:	300c      	adds	r0, #12
 8013404:	f7fc fd3a 	bl	800fe7c <memcpy>
 8013408:	4621      	mov	r1, r4
 801340a:	ee18 0a10 	vmov	r0, s16
 801340e:	f000 f9b3 	bl	8013778 <_Bfree>
 8013412:	464c      	mov	r4, r9
 8013414:	6923      	ldr	r3, [r4, #16]
 8013416:	1c5a      	adds	r2, r3, #1
 8013418:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801341c:	6122      	str	r2, [r4, #16]
 801341e:	2201      	movs	r2, #1
 8013420:	615a      	str	r2, [r3, #20]
 8013422:	e7bb      	b.n	801339c <__gethex+0x3c8>
 8013424:	6922      	ldr	r2, [r4, #16]
 8013426:	455a      	cmp	r2, fp
 8013428:	dd0b      	ble.n	8013442 <__gethex+0x46e>
 801342a:	2101      	movs	r1, #1
 801342c:	4620      	mov	r0, r4
 801342e:	f7ff fd6a 	bl	8012f06 <rshift>
 8013432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013436:	3501      	adds	r5, #1
 8013438:	42ab      	cmp	r3, r5
 801343a:	f6ff aed0 	blt.w	80131de <__gethex+0x20a>
 801343e:	2701      	movs	r7, #1
 8013440:	e7c0      	b.n	80133c4 <__gethex+0x3f0>
 8013442:	f016 061f 	ands.w	r6, r6, #31
 8013446:	d0fa      	beq.n	801343e <__gethex+0x46a>
 8013448:	449a      	add	sl, r3
 801344a:	f1c6 0620 	rsb	r6, r6, #32
 801344e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013452:	f000 fa47 	bl	80138e4 <__hi0bits>
 8013456:	42b0      	cmp	r0, r6
 8013458:	dbe7      	blt.n	801342a <__gethex+0x456>
 801345a:	e7f0      	b.n	801343e <__gethex+0x46a>
 801345c:	08015194 	.word	0x08015194

08013460 <L_shift>:
 8013460:	f1c2 0208 	rsb	r2, r2, #8
 8013464:	0092      	lsls	r2, r2, #2
 8013466:	b570      	push	{r4, r5, r6, lr}
 8013468:	f1c2 0620 	rsb	r6, r2, #32
 801346c:	6843      	ldr	r3, [r0, #4]
 801346e:	6804      	ldr	r4, [r0, #0]
 8013470:	fa03 f506 	lsl.w	r5, r3, r6
 8013474:	432c      	orrs	r4, r5
 8013476:	40d3      	lsrs	r3, r2
 8013478:	6004      	str	r4, [r0, #0]
 801347a:	f840 3f04 	str.w	r3, [r0, #4]!
 801347e:	4288      	cmp	r0, r1
 8013480:	d3f4      	bcc.n	801346c <L_shift+0xc>
 8013482:	bd70      	pop	{r4, r5, r6, pc}

08013484 <__match>:
 8013484:	b530      	push	{r4, r5, lr}
 8013486:	6803      	ldr	r3, [r0, #0]
 8013488:	3301      	adds	r3, #1
 801348a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801348e:	b914      	cbnz	r4, 8013496 <__match+0x12>
 8013490:	6003      	str	r3, [r0, #0]
 8013492:	2001      	movs	r0, #1
 8013494:	bd30      	pop	{r4, r5, pc}
 8013496:	f813 2b01 	ldrb.w	r2, [r3], #1
 801349a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801349e:	2d19      	cmp	r5, #25
 80134a0:	bf98      	it	ls
 80134a2:	3220      	addls	r2, #32
 80134a4:	42a2      	cmp	r2, r4
 80134a6:	d0f0      	beq.n	801348a <__match+0x6>
 80134a8:	2000      	movs	r0, #0
 80134aa:	e7f3      	b.n	8013494 <__match+0x10>

080134ac <__hexnan>:
 80134ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b0:	680b      	ldr	r3, [r1, #0]
 80134b2:	6801      	ldr	r1, [r0, #0]
 80134b4:	115e      	asrs	r6, r3, #5
 80134b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80134ba:	f013 031f 	ands.w	r3, r3, #31
 80134be:	b087      	sub	sp, #28
 80134c0:	bf18      	it	ne
 80134c2:	3604      	addne	r6, #4
 80134c4:	2500      	movs	r5, #0
 80134c6:	1f37      	subs	r7, r6, #4
 80134c8:	4682      	mov	sl, r0
 80134ca:	4690      	mov	r8, r2
 80134cc:	9301      	str	r3, [sp, #4]
 80134ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80134d2:	46b9      	mov	r9, r7
 80134d4:	463c      	mov	r4, r7
 80134d6:	9502      	str	r5, [sp, #8]
 80134d8:	46ab      	mov	fp, r5
 80134da:	784a      	ldrb	r2, [r1, #1]
 80134dc:	1c4b      	adds	r3, r1, #1
 80134de:	9303      	str	r3, [sp, #12]
 80134e0:	b342      	cbz	r2, 8013534 <__hexnan+0x88>
 80134e2:	4610      	mov	r0, r2
 80134e4:	9105      	str	r1, [sp, #20]
 80134e6:	9204      	str	r2, [sp, #16]
 80134e8:	f7ff fd5f 	bl	8012faa <__hexdig_fun>
 80134ec:	2800      	cmp	r0, #0
 80134ee:	d14f      	bne.n	8013590 <__hexnan+0xe4>
 80134f0:	9a04      	ldr	r2, [sp, #16]
 80134f2:	9905      	ldr	r1, [sp, #20]
 80134f4:	2a20      	cmp	r2, #32
 80134f6:	d818      	bhi.n	801352a <__hexnan+0x7e>
 80134f8:	9b02      	ldr	r3, [sp, #8]
 80134fa:	459b      	cmp	fp, r3
 80134fc:	dd13      	ble.n	8013526 <__hexnan+0x7a>
 80134fe:	454c      	cmp	r4, r9
 8013500:	d206      	bcs.n	8013510 <__hexnan+0x64>
 8013502:	2d07      	cmp	r5, #7
 8013504:	dc04      	bgt.n	8013510 <__hexnan+0x64>
 8013506:	462a      	mov	r2, r5
 8013508:	4649      	mov	r1, r9
 801350a:	4620      	mov	r0, r4
 801350c:	f7ff ffa8 	bl	8013460 <L_shift>
 8013510:	4544      	cmp	r4, r8
 8013512:	d950      	bls.n	80135b6 <__hexnan+0x10a>
 8013514:	2300      	movs	r3, #0
 8013516:	f1a4 0904 	sub.w	r9, r4, #4
 801351a:	f844 3c04 	str.w	r3, [r4, #-4]
 801351e:	f8cd b008 	str.w	fp, [sp, #8]
 8013522:	464c      	mov	r4, r9
 8013524:	461d      	mov	r5, r3
 8013526:	9903      	ldr	r1, [sp, #12]
 8013528:	e7d7      	b.n	80134da <__hexnan+0x2e>
 801352a:	2a29      	cmp	r2, #41	; 0x29
 801352c:	d156      	bne.n	80135dc <__hexnan+0x130>
 801352e:	3102      	adds	r1, #2
 8013530:	f8ca 1000 	str.w	r1, [sl]
 8013534:	f1bb 0f00 	cmp.w	fp, #0
 8013538:	d050      	beq.n	80135dc <__hexnan+0x130>
 801353a:	454c      	cmp	r4, r9
 801353c:	d206      	bcs.n	801354c <__hexnan+0xa0>
 801353e:	2d07      	cmp	r5, #7
 8013540:	dc04      	bgt.n	801354c <__hexnan+0xa0>
 8013542:	462a      	mov	r2, r5
 8013544:	4649      	mov	r1, r9
 8013546:	4620      	mov	r0, r4
 8013548:	f7ff ff8a 	bl	8013460 <L_shift>
 801354c:	4544      	cmp	r4, r8
 801354e:	d934      	bls.n	80135ba <__hexnan+0x10e>
 8013550:	f1a8 0204 	sub.w	r2, r8, #4
 8013554:	4623      	mov	r3, r4
 8013556:	f853 1b04 	ldr.w	r1, [r3], #4
 801355a:	f842 1f04 	str.w	r1, [r2, #4]!
 801355e:	429f      	cmp	r7, r3
 8013560:	d2f9      	bcs.n	8013556 <__hexnan+0xaa>
 8013562:	1b3b      	subs	r3, r7, r4
 8013564:	f023 0303 	bic.w	r3, r3, #3
 8013568:	3304      	adds	r3, #4
 801356a:	3401      	adds	r4, #1
 801356c:	3e03      	subs	r6, #3
 801356e:	42b4      	cmp	r4, r6
 8013570:	bf88      	it	hi
 8013572:	2304      	movhi	r3, #4
 8013574:	4443      	add	r3, r8
 8013576:	2200      	movs	r2, #0
 8013578:	f843 2b04 	str.w	r2, [r3], #4
 801357c:	429f      	cmp	r7, r3
 801357e:	d2fb      	bcs.n	8013578 <__hexnan+0xcc>
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	b91b      	cbnz	r3, 801358c <__hexnan+0xe0>
 8013584:	4547      	cmp	r7, r8
 8013586:	d127      	bne.n	80135d8 <__hexnan+0x12c>
 8013588:	2301      	movs	r3, #1
 801358a:	603b      	str	r3, [r7, #0]
 801358c:	2005      	movs	r0, #5
 801358e:	e026      	b.n	80135de <__hexnan+0x132>
 8013590:	3501      	adds	r5, #1
 8013592:	2d08      	cmp	r5, #8
 8013594:	f10b 0b01 	add.w	fp, fp, #1
 8013598:	dd06      	ble.n	80135a8 <__hexnan+0xfc>
 801359a:	4544      	cmp	r4, r8
 801359c:	d9c3      	bls.n	8013526 <__hexnan+0x7a>
 801359e:	2300      	movs	r3, #0
 80135a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80135a4:	2501      	movs	r5, #1
 80135a6:	3c04      	subs	r4, #4
 80135a8:	6822      	ldr	r2, [r4, #0]
 80135aa:	f000 000f 	and.w	r0, r0, #15
 80135ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80135b2:	6022      	str	r2, [r4, #0]
 80135b4:	e7b7      	b.n	8013526 <__hexnan+0x7a>
 80135b6:	2508      	movs	r5, #8
 80135b8:	e7b5      	b.n	8013526 <__hexnan+0x7a>
 80135ba:	9b01      	ldr	r3, [sp, #4]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d0df      	beq.n	8013580 <__hexnan+0xd4>
 80135c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135c4:	f1c3 0320 	rsb	r3, r3, #32
 80135c8:	fa22 f303 	lsr.w	r3, r2, r3
 80135cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80135d0:	401a      	ands	r2, r3
 80135d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80135d6:	e7d3      	b.n	8013580 <__hexnan+0xd4>
 80135d8:	3f04      	subs	r7, #4
 80135da:	e7d1      	b.n	8013580 <__hexnan+0xd4>
 80135dc:	2004      	movs	r0, #4
 80135de:	b007      	add	sp, #28
 80135e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135e4 <_localeconv_r>:
 80135e4:	4800      	ldr	r0, [pc, #0]	; (80135e8 <_localeconv_r+0x4>)
 80135e6:	4770      	bx	lr
 80135e8:	200002e4 	.word	0x200002e4

080135ec <__retarget_lock_init_recursive>:
 80135ec:	4770      	bx	lr

080135ee <__retarget_lock_acquire_recursive>:
 80135ee:	4770      	bx	lr

080135f0 <__retarget_lock_release>:
 80135f0:	4770      	bx	lr

080135f2 <__retarget_lock_release_recursive>:
 80135f2:	4770      	bx	lr

080135f4 <__swhatbuf_r>:
 80135f4:	b570      	push	{r4, r5, r6, lr}
 80135f6:	460e      	mov	r6, r1
 80135f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135fc:	2900      	cmp	r1, #0
 80135fe:	b096      	sub	sp, #88	; 0x58
 8013600:	4614      	mov	r4, r2
 8013602:	461d      	mov	r5, r3
 8013604:	da07      	bge.n	8013616 <__swhatbuf_r+0x22>
 8013606:	2300      	movs	r3, #0
 8013608:	602b      	str	r3, [r5, #0]
 801360a:	89b3      	ldrh	r3, [r6, #12]
 801360c:	061a      	lsls	r2, r3, #24
 801360e:	d410      	bmi.n	8013632 <__swhatbuf_r+0x3e>
 8013610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013614:	e00e      	b.n	8013634 <__swhatbuf_r+0x40>
 8013616:	466a      	mov	r2, sp
 8013618:	f001 f8aa 	bl	8014770 <_fstat_r>
 801361c:	2800      	cmp	r0, #0
 801361e:	dbf2      	blt.n	8013606 <__swhatbuf_r+0x12>
 8013620:	9a01      	ldr	r2, [sp, #4]
 8013622:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013626:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801362a:	425a      	negs	r2, r3
 801362c:	415a      	adcs	r2, r3
 801362e:	602a      	str	r2, [r5, #0]
 8013630:	e7ee      	b.n	8013610 <__swhatbuf_r+0x1c>
 8013632:	2340      	movs	r3, #64	; 0x40
 8013634:	2000      	movs	r0, #0
 8013636:	6023      	str	r3, [r4, #0]
 8013638:	b016      	add	sp, #88	; 0x58
 801363a:	bd70      	pop	{r4, r5, r6, pc}

0801363c <__smakebuf_r>:
 801363c:	898b      	ldrh	r3, [r1, #12]
 801363e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013640:	079d      	lsls	r5, r3, #30
 8013642:	4606      	mov	r6, r0
 8013644:	460c      	mov	r4, r1
 8013646:	d507      	bpl.n	8013658 <__smakebuf_r+0x1c>
 8013648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801364c:	6023      	str	r3, [r4, #0]
 801364e:	6123      	str	r3, [r4, #16]
 8013650:	2301      	movs	r3, #1
 8013652:	6163      	str	r3, [r4, #20]
 8013654:	b002      	add	sp, #8
 8013656:	bd70      	pop	{r4, r5, r6, pc}
 8013658:	ab01      	add	r3, sp, #4
 801365a:	466a      	mov	r2, sp
 801365c:	f7ff ffca 	bl	80135f4 <__swhatbuf_r>
 8013660:	9900      	ldr	r1, [sp, #0]
 8013662:	4605      	mov	r5, r0
 8013664:	4630      	mov	r0, r6
 8013666:	f7fc fc6f 	bl	800ff48 <_malloc_r>
 801366a:	b948      	cbnz	r0, 8013680 <__smakebuf_r+0x44>
 801366c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013670:	059a      	lsls	r2, r3, #22
 8013672:	d4ef      	bmi.n	8013654 <__smakebuf_r+0x18>
 8013674:	f023 0303 	bic.w	r3, r3, #3
 8013678:	f043 0302 	orr.w	r3, r3, #2
 801367c:	81a3      	strh	r3, [r4, #12]
 801367e:	e7e3      	b.n	8013648 <__smakebuf_r+0xc>
 8013680:	4b0d      	ldr	r3, [pc, #52]	; (80136b8 <__smakebuf_r+0x7c>)
 8013682:	62b3      	str	r3, [r6, #40]	; 0x28
 8013684:	89a3      	ldrh	r3, [r4, #12]
 8013686:	6020      	str	r0, [r4, #0]
 8013688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801368c:	81a3      	strh	r3, [r4, #12]
 801368e:	9b00      	ldr	r3, [sp, #0]
 8013690:	6163      	str	r3, [r4, #20]
 8013692:	9b01      	ldr	r3, [sp, #4]
 8013694:	6120      	str	r0, [r4, #16]
 8013696:	b15b      	cbz	r3, 80136b0 <__smakebuf_r+0x74>
 8013698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801369c:	4630      	mov	r0, r6
 801369e:	f001 f879 	bl	8014794 <_isatty_r>
 80136a2:	b128      	cbz	r0, 80136b0 <__smakebuf_r+0x74>
 80136a4:	89a3      	ldrh	r3, [r4, #12]
 80136a6:	f023 0303 	bic.w	r3, r3, #3
 80136aa:	f043 0301 	orr.w	r3, r3, #1
 80136ae:	81a3      	strh	r3, [r4, #12]
 80136b0:	89a0      	ldrh	r0, [r4, #12]
 80136b2:	4305      	orrs	r5, r0
 80136b4:	81a5      	strh	r5, [r4, #12]
 80136b6:	e7cd      	b.n	8013654 <__smakebuf_r+0x18>
 80136b8:	08012d65 	.word	0x08012d65

080136bc <__ascii_mbtowc>:
 80136bc:	b082      	sub	sp, #8
 80136be:	b901      	cbnz	r1, 80136c2 <__ascii_mbtowc+0x6>
 80136c0:	a901      	add	r1, sp, #4
 80136c2:	b142      	cbz	r2, 80136d6 <__ascii_mbtowc+0x1a>
 80136c4:	b14b      	cbz	r3, 80136da <__ascii_mbtowc+0x1e>
 80136c6:	7813      	ldrb	r3, [r2, #0]
 80136c8:	600b      	str	r3, [r1, #0]
 80136ca:	7812      	ldrb	r2, [r2, #0]
 80136cc:	1e10      	subs	r0, r2, #0
 80136ce:	bf18      	it	ne
 80136d0:	2001      	movne	r0, #1
 80136d2:	b002      	add	sp, #8
 80136d4:	4770      	bx	lr
 80136d6:	4610      	mov	r0, r2
 80136d8:	e7fb      	b.n	80136d2 <__ascii_mbtowc+0x16>
 80136da:	f06f 0001 	mvn.w	r0, #1
 80136de:	e7f8      	b.n	80136d2 <__ascii_mbtowc+0x16>

080136e0 <__malloc_lock>:
 80136e0:	4801      	ldr	r0, [pc, #4]	; (80136e8 <__malloc_lock+0x8>)
 80136e2:	f7ff bf84 	b.w	80135ee <__retarget_lock_acquire_recursive>
 80136e6:	bf00      	nop
 80136e8:	2000642c 	.word	0x2000642c

080136ec <__malloc_unlock>:
 80136ec:	4801      	ldr	r0, [pc, #4]	; (80136f4 <__malloc_unlock+0x8>)
 80136ee:	f7ff bf80 	b.w	80135f2 <__retarget_lock_release_recursive>
 80136f2:	bf00      	nop
 80136f4:	2000642c 	.word	0x2000642c

080136f8 <_Balloc>:
 80136f8:	b570      	push	{r4, r5, r6, lr}
 80136fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80136fc:	4604      	mov	r4, r0
 80136fe:	460d      	mov	r5, r1
 8013700:	b976      	cbnz	r6, 8013720 <_Balloc+0x28>
 8013702:	2010      	movs	r0, #16
 8013704:	f7fc fbaa 	bl	800fe5c <malloc>
 8013708:	4602      	mov	r2, r0
 801370a:	6260      	str	r0, [r4, #36]	; 0x24
 801370c:	b920      	cbnz	r0, 8013718 <_Balloc+0x20>
 801370e:	4b18      	ldr	r3, [pc, #96]	; (8013770 <_Balloc+0x78>)
 8013710:	4818      	ldr	r0, [pc, #96]	; (8013774 <_Balloc+0x7c>)
 8013712:	2166      	movs	r1, #102	; 0x66
 8013714:	f000 ffec 	bl	80146f0 <__assert_func>
 8013718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801371c:	6006      	str	r6, [r0, #0]
 801371e:	60c6      	str	r6, [r0, #12]
 8013720:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013722:	68f3      	ldr	r3, [r6, #12]
 8013724:	b183      	cbz	r3, 8013748 <_Balloc+0x50>
 8013726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013728:	68db      	ldr	r3, [r3, #12]
 801372a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801372e:	b9b8      	cbnz	r0, 8013760 <_Balloc+0x68>
 8013730:	2101      	movs	r1, #1
 8013732:	fa01 f605 	lsl.w	r6, r1, r5
 8013736:	1d72      	adds	r2, r6, #5
 8013738:	0092      	lsls	r2, r2, #2
 801373a:	4620      	mov	r0, r4
 801373c:	f000 fc97 	bl	801406e <_calloc_r>
 8013740:	b160      	cbz	r0, 801375c <_Balloc+0x64>
 8013742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013746:	e00e      	b.n	8013766 <_Balloc+0x6e>
 8013748:	2221      	movs	r2, #33	; 0x21
 801374a:	2104      	movs	r1, #4
 801374c:	4620      	mov	r0, r4
 801374e:	f000 fc8e 	bl	801406e <_calloc_r>
 8013752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013754:	60f0      	str	r0, [r6, #12]
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d1e4      	bne.n	8013726 <_Balloc+0x2e>
 801375c:	2000      	movs	r0, #0
 801375e:	bd70      	pop	{r4, r5, r6, pc}
 8013760:	6802      	ldr	r2, [r0, #0]
 8013762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013766:	2300      	movs	r3, #0
 8013768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801376c:	e7f7      	b.n	801375e <_Balloc+0x66>
 801376e:	bf00      	nop
 8013770:	0801511e 	.word	0x0801511e
 8013774:	08015288 	.word	0x08015288

08013778 <_Bfree>:
 8013778:	b570      	push	{r4, r5, r6, lr}
 801377a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801377c:	4605      	mov	r5, r0
 801377e:	460c      	mov	r4, r1
 8013780:	b976      	cbnz	r6, 80137a0 <_Bfree+0x28>
 8013782:	2010      	movs	r0, #16
 8013784:	f7fc fb6a 	bl	800fe5c <malloc>
 8013788:	4602      	mov	r2, r0
 801378a:	6268      	str	r0, [r5, #36]	; 0x24
 801378c:	b920      	cbnz	r0, 8013798 <_Bfree+0x20>
 801378e:	4b09      	ldr	r3, [pc, #36]	; (80137b4 <_Bfree+0x3c>)
 8013790:	4809      	ldr	r0, [pc, #36]	; (80137b8 <_Bfree+0x40>)
 8013792:	218a      	movs	r1, #138	; 0x8a
 8013794:	f000 ffac 	bl	80146f0 <__assert_func>
 8013798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801379c:	6006      	str	r6, [r0, #0]
 801379e:	60c6      	str	r6, [r0, #12]
 80137a0:	b13c      	cbz	r4, 80137b2 <_Bfree+0x3a>
 80137a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80137a4:	6862      	ldr	r2, [r4, #4]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80137ac:	6021      	str	r1, [r4, #0]
 80137ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80137b2:	bd70      	pop	{r4, r5, r6, pc}
 80137b4:	0801511e 	.word	0x0801511e
 80137b8:	08015288 	.word	0x08015288

080137bc <__multadd>:
 80137bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c0:	690e      	ldr	r6, [r1, #16]
 80137c2:	4607      	mov	r7, r0
 80137c4:	4698      	mov	r8, r3
 80137c6:	460c      	mov	r4, r1
 80137c8:	f101 0014 	add.w	r0, r1, #20
 80137cc:	2300      	movs	r3, #0
 80137ce:	6805      	ldr	r5, [r0, #0]
 80137d0:	b2a9      	uxth	r1, r5
 80137d2:	fb02 8101 	mla	r1, r2, r1, r8
 80137d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80137da:	0c2d      	lsrs	r5, r5, #16
 80137dc:	fb02 c505 	mla	r5, r2, r5, ip
 80137e0:	b289      	uxth	r1, r1
 80137e2:	3301      	adds	r3, #1
 80137e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80137e8:	429e      	cmp	r6, r3
 80137ea:	f840 1b04 	str.w	r1, [r0], #4
 80137ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80137f2:	dcec      	bgt.n	80137ce <__multadd+0x12>
 80137f4:	f1b8 0f00 	cmp.w	r8, #0
 80137f8:	d022      	beq.n	8013840 <__multadd+0x84>
 80137fa:	68a3      	ldr	r3, [r4, #8]
 80137fc:	42b3      	cmp	r3, r6
 80137fe:	dc19      	bgt.n	8013834 <__multadd+0x78>
 8013800:	6861      	ldr	r1, [r4, #4]
 8013802:	4638      	mov	r0, r7
 8013804:	3101      	adds	r1, #1
 8013806:	f7ff ff77 	bl	80136f8 <_Balloc>
 801380a:	4605      	mov	r5, r0
 801380c:	b928      	cbnz	r0, 801381a <__multadd+0x5e>
 801380e:	4602      	mov	r2, r0
 8013810:	4b0d      	ldr	r3, [pc, #52]	; (8013848 <__multadd+0x8c>)
 8013812:	480e      	ldr	r0, [pc, #56]	; (801384c <__multadd+0x90>)
 8013814:	21b5      	movs	r1, #181	; 0xb5
 8013816:	f000 ff6b 	bl	80146f0 <__assert_func>
 801381a:	6922      	ldr	r2, [r4, #16]
 801381c:	3202      	adds	r2, #2
 801381e:	f104 010c 	add.w	r1, r4, #12
 8013822:	0092      	lsls	r2, r2, #2
 8013824:	300c      	adds	r0, #12
 8013826:	f7fc fb29 	bl	800fe7c <memcpy>
 801382a:	4621      	mov	r1, r4
 801382c:	4638      	mov	r0, r7
 801382e:	f7ff ffa3 	bl	8013778 <_Bfree>
 8013832:	462c      	mov	r4, r5
 8013834:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013838:	3601      	adds	r6, #1
 801383a:	f8c3 8014 	str.w	r8, [r3, #20]
 801383e:	6126      	str	r6, [r4, #16]
 8013840:	4620      	mov	r0, r4
 8013842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013846:	bf00      	nop
 8013848:	08015194 	.word	0x08015194
 801384c:	08015288 	.word	0x08015288

08013850 <__s2b>:
 8013850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013854:	460c      	mov	r4, r1
 8013856:	4615      	mov	r5, r2
 8013858:	461f      	mov	r7, r3
 801385a:	2209      	movs	r2, #9
 801385c:	3308      	adds	r3, #8
 801385e:	4606      	mov	r6, r0
 8013860:	fb93 f3f2 	sdiv	r3, r3, r2
 8013864:	2100      	movs	r1, #0
 8013866:	2201      	movs	r2, #1
 8013868:	429a      	cmp	r2, r3
 801386a:	db09      	blt.n	8013880 <__s2b+0x30>
 801386c:	4630      	mov	r0, r6
 801386e:	f7ff ff43 	bl	80136f8 <_Balloc>
 8013872:	b940      	cbnz	r0, 8013886 <__s2b+0x36>
 8013874:	4602      	mov	r2, r0
 8013876:	4b19      	ldr	r3, [pc, #100]	; (80138dc <__s2b+0x8c>)
 8013878:	4819      	ldr	r0, [pc, #100]	; (80138e0 <__s2b+0x90>)
 801387a:	21ce      	movs	r1, #206	; 0xce
 801387c:	f000 ff38 	bl	80146f0 <__assert_func>
 8013880:	0052      	lsls	r2, r2, #1
 8013882:	3101      	adds	r1, #1
 8013884:	e7f0      	b.n	8013868 <__s2b+0x18>
 8013886:	9b08      	ldr	r3, [sp, #32]
 8013888:	6143      	str	r3, [r0, #20]
 801388a:	2d09      	cmp	r5, #9
 801388c:	f04f 0301 	mov.w	r3, #1
 8013890:	6103      	str	r3, [r0, #16]
 8013892:	dd16      	ble.n	80138c2 <__s2b+0x72>
 8013894:	f104 0909 	add.w	r9, r4, #9
 8013898:	46c8      	mov	r8, r9
 801389a:	442c      	add	r4, r5
 801389c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80138a0:	4601      	mov	r1, r0
 80138a2:	3b30      	subs	r3, #48	; 0x30
 80138a4:	220a      	movs	r2, #10
 80138a6:	4630      	mov	r0, r6
 80138a8:	f7ff ff88 	bl	80137bc <__multadd>
 80138ac:	45a0      	cmp	r8, r4
 80138ae:	d1f5      	bne.n	801389c <__s2b+0x4c>
 80138b0:	f1a5 0408 	sub.w	r4, r5, #8
 80138b4:	444c      	add	r4, r9
 80138b6:	1b2d      	subs	r5, r5, r4
 80138b8:	1963      	adds	r3, r4, r5
 80138ba:	42bb      	cmp	r3, r7
 80138bc:	db04      	blt.n	80138c8 <__s2b+0x78>
 80138be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138c2:	340a      	adds	r4, #10
 80138c4:	2509      	movs	r5, #9
 80138c6:	e7f6      	b.n	80138b6 <__s2b+0x66>
 80138c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80138cc:	4601      	mov	r1, r0
 80138ce:	3b30      	subs	r3, #48	; 0x30
 80138d0:	220a      	movs	r2, #10
 80138d2:	4630      	mov	r0, r6
 80138d4:	f7ff ff72 	bl	80137bc <__multadd>
 80138d8:	e7ee      	b.n	80138b8 <__s2b+0x68>
 80138da:	bf00      	nop
 80138dc:	08015194 	.word	0x08015194
 80138e0:	08015288 	.word	0x08015288

080138e4 <__hi0bits>:
 80138e4:	0c03      	lsrs	r3, r0, #16
 80138e6:	041b      	lsls	r3, r3, #16
 80138e8:	b9d3      	cbnz	r3, 8013920 <__hi0bits+0x3c>
 80138ea:	0400      	lsls	r0, r0, #16
 80138ec:	2310      	movs	r3, #16
 80138ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80138f2:	bf04      	itt	eq
 80138f4:	0200      	lsleq	r0, r0, #8
 80138f6:	3308      	addeq	r3, #8
 80138f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80138fc:	bf04      	itt	eq
 80138fe:	0100      	lsleq	r0, r0, #4
 8013900:	3304      	addeq	r3, #4
 8013902:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013906:	bf04      	itt	eq
 8013908:	0080      	lsleq	r0, r0, #2
 801390a:	3302      	addeq	r3, #2
 801390c:	2800      	cmp	r0, #0
 801390e:	db05      	blt.n	801391c <__hi0bits+0x38>
 8013910:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013914:	f103 0301 	add.w	r3, r3, #1
 8013918:	bf08      	it	eq
 801391a:	2320      	moveq	r3, #32
 801391c:	4618      	mov	r0, r3
 801391e:	4770      	bx	lr
 8013920:	2300      	movs	r3, #0
 8013922:	e7e4      	b.n	80138ee <__hi0bits+0xa>

08013924 <__lo0bits>:
 8013924:	6803      	ldr	r3, [r0, #0]
 8013926:	f013 0207 	ands.w	r2, r3, #7
 801392a:	4601      	mov	r1, r0
 801392c:	d00b      	beq.n	8013946 <__lo0bits+0x22>
 801392e:	07da      	lsls	r2, r3, #31
 8013930:	d424      	bmi.n	801397c <__lo0bits+0x58>
 8013932:	0798      	lsls	r0, r3, #30
 8013934:	bf49      	itett	mi
 8013936:	085b      	lsrmi	r3, r3, #1
 8013938:	089b      	lsrpl	r3, r3, #2
 801393a:	2001      	movmi	r0, #1
 801393c:	600b      	strmi	r3, [r1, #0]
 801393e:	bf5c      	itt	pl
 8013940:	600b      	strpl	r3, [r1, #0]
 8013942:	2002      	movpl	r0, #2
 8013944:	4770      	bx	lr
 8013946:	b298      	uxth	r0, r3
 8013948:	b9b0      	cbnz	r0, 8013978 <__lo0bits+0x54>
 801394a:	0c1b      	lsrs	r3, r3, #16
 801394c:	2010      	movs	r0, #16
 801394e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013952:	bf04      	itt	eq
 8013954:	0a1b      	lsreq	r3, r3, #8
 8013956:	3008      	addeq	r0, #8
 8013958:	071a      	lsls	r2, r3, #28
 801395a:	bf04      	itt	eq
 801395c:	091b      	lsreq	r3, r3, #4
 801395e:	3004      	addeq	r0, #4
 8013960:	079a      	lsls	r2, r3, #30
 8013962:	bf04      	itt	eq
 8013964:	089b      	lsreq	r3, r3, #2
 8013966:	3002      	addeq	r0, #2
 8013968:	07da      	lsls	r2, r3, #31
 801396a:	d403      	bmi.n	8013974 <__lo0bits+0x50>
 801396c:	085b      	lsrs	r3, r3, #1
 801396e:	f100 0001 	add.w	r0, r0, #1
 8013972:	d005      	beq.n	8013980 <__lo0bits+0x5c>
 8013974:	600b      	str	r3, [r1, #0]
 8013976:	4770      	bx	lr
 8013978:	4610      	mov	r0, r2
 801397a:	e7e8      	b.n	801394e <__lo0bits+0x2a>
 801397c:	2000      	movs	r0, #0
 801397e:	4770      	bx	lr
 8013980:	2020      	movs	r0, #32
 8013982:	4770      	bx	lr

08013984 <__i2b>:
 8013984:	b510      	push	{r4, lr}
 8013986:	460c      	mov	r4, r1
 8013988:	2101      	movs	r1, #1
 801398a:	f7ff feb5 	bl	80136f8 <_Balloc>
 801398e:	4602      	mov	r2, r0
 8013990:	b928      	cbnz	r0, 801399e <__i2b+0x1a>
 8013992:	4b05      	ldr	r3, [pc, #20]	; (80139a8 <__i2b+0x24>)
 8013994:	4805      	ldr	r0, [pc, #20]	; (80139ac <__i2b+0x28>)
 8013996:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801399a:	f000 fea9 	bl	80146f0 <__assert_func>
 801399e:	2301      	movs	r3, #1
 80139a0:	6144      	str	r4, [r0, #20]
 80139a2:	6103      	str	r3, [r0, #16]
 80139a4:	bd10      	pop	{r4, pc}
 80139a6:	bf00      	nop
 80139a8:	08015194 	.word	0x08015194
 80139ac:	08015288 	.word	0x08015288

080139b0 <__multiply>:
 80139b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139b4:	4614      	mov	r4, r2
 80139b6:	690a      	ldr	r2, [r1, #16]
 80139b8:	6923      	ldr	r3, [r4, #16]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	bfb8      	it	lt
 80139be:	460b      	movlt	r3, r1
 80139c0:	460d      	mov	r5, r1
 80139c2:	bfbc      	itt	lt
 80139c4:	4625      	movlt	r5, r4
 80139c6:	461c      	movlt	r4, r3
 80139c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80139cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80139d0:	68ab      	ldr	r3, [r5, #8]
 80139d2:	6869      	ldr	r1, [r5, #4]
 80139d4:	eb0a 0709 	add.w	r7, sl, r9
 80139d8:	42bb      	cmp	r3, r7
 80139da:	b085      	sub	sp, #20
 80139dc:	bfb8      	it	lt
 80139de:	3101      	addlt	r1, #1
 80139e0:	f7ff fe8a 	bl	80136f8 <_Balloc>
 80139e4:	b930      	cbnz	r0, 80139f4 <__multiply+0x44>
 80139e6:	4602      	mov	r2, r0
 80139e8:	4b42      	ldr	r3, [pc, #264]	; (8013af4 <__multiply+0x144>)
 80139ea:	4843      	ldr	r0, [pc, #268]	; (8013af8 <__multiply+0x148>)
 80139ec:	f240 115d 	movw	r1, #349	; 0x15d
 80139f0:	f000 fe7e 	bl	80146f0 <__assert_func>
 80139f4:	f100 0614 	add.w	r6, r0, #20
 80139f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80139fc:	4633      	mov	r3, r6
 80139fe:	2200      	movs	r2, #0
 8013a00:	4543      	cmp	r3, r8
 8013a02:	d31e      	bcc.n	8013a42 <__multiply+0x92>
 8013a04:	f105 0c14 	add.w	ip, r5, #20
 8013a08:	f104 0314 	add.w	r3, r4, #20
 8013a0c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013a10:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013a14:	9202      	str	r2, [sp, #8]
 8013a16:	ebac 0205 	sub.w	r2, ip, r5
 8013a1a:	3a15      	subs	r2, #21
 8013a1c:	f022 0203 	bic.w	r2, r2, #3
 8013a20:	3204      	adds	r2, #4
 8013a22:	f105 0115 	add.w	r1, r5, #21
 8013a26:	458c      	cmp	ip, r1
 8013a28:	bf38      	it	cc
 8013a2a:	2204      	movcc	r2, #4
 8013a2c:	9201      	str	r2, [sp, #4]
 8013a2e:	9a02      	ldr	r2, [sp, #8]
 8013a30:	9303      	str	r3, [sp, #12]
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d808      	bhi.n	8013a48 <__multiply+0x98>
 8013a36:	2f00      	cmp	r7, #0
 8013a38:	dc55      	bgt.n	8013ae6 <__multiply+0x136>
 8013a3a:	6107      	str	r7, [r0, #16]
 8013a3c:	b005      	add	sp, #20
 8013a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a42:	f843 2b04 	str.w	r2, [r3], #4
 8013a46:	e7db      	b.n	8013a00 <__multiply+0x50>
 8013a48:	f8b3 a000 	ldrh.w	sl, [r3]
 8013a4c:	f1ba 0f00 	cmp.w	sl, #0
 8013a50:	d020      	beq.n	8013a94 <__multiply+0xe4>
 8013a52:	f105 0e14 	add.w	lr, r5, #20
 8013a56:	46b1      	mov	r9, r6
 8013a58:	2200      	movs	r2, #0
 8013a5a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013a5e:	f8d9 b000 	ldr.w	fp, [r9]
 8013a62:	b2a1      	uxth	r1, r4
 8013a64:	fa1f fb8b 	uxth.w	fp, fp
 8013a68:	fb0a b101 	mla	r1, sl, r1, fp
 8013a6c:	4411      	add	r1, r2
 8013a6e:	f8d9 2000 	ldr.w	r2, [r9]
 8013a72:	0c24      	lsrs	r4, r4, #16
 8013a74:	0c12      	lsrs	r2, r2, #16
 8013a76:	fb0a 2404 	mla	r4, sl, r4, r2
 8013a7a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013a7e:	b289      	uxth	r1, r1
 8013a80:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013a84:	45f4      	cmp	ip, lr
 8013a86:	f849 1b04 	str.w	r1, [r9], #4
 8013a8a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013a8e:	d8e4      	bhi.n	8013a5a <__multiply+0xaa>
 8013a90:	9901      	ldr	r1, [sp, #4]
 8013a92:	5072      	str	r2, [r6, r1]
 8013a94:	9a03      	ldr	r2, [sp, #12]
 8013a96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013a9a:	3304      	adds	r3, #4
 8013a9c:	f1b9 0f00 	cmp.w	r9, #0
 8013aa0:	d01f      	beq.n	8013ae2 <__multiply+0x132>
 8013aa2:	6834      	ldr	r4, [r6, #0]
 8013aa4:	f105 0114 	add.w	r1, r5, #20
 8013aa8:	46b6      	mov	lr, r6
 8013aaa:	f04f 0a00 	mov.w	sl, #0
 8013aae:	880a      	ldrh	r2, [r1, #0]
 8013ab0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013ab4:	fb09 b202 	mla	r2, r9, r2, fp
 8013ab8:	4492      	add	sl, r2
 8013aba:	b2a4      	uxth	r4, r4
 8013abc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013ac0:	f84e 4b04 	str.w	r4, [lr], #4
 8013ac4:	f851 4b04 	ldr.w	r4, [r1], #4
 8013ac8:	f8be 2000 	ldrh.w	r2, [lr]
 8013acc:	0c24      	lsrs	r4, r4, #16
 8013ace:	fb09 2404 	mla	r4, r9, r4, r2
 8013ad2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013ad6:	458c      	cmp	ip, r1
 8013ad8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013adc:	d8e7      	bhi.n	8013aae <__multiply+0xfe>
 8013ade:	9a01      	ldr	r2, [sp, #4]
 8013ae0:	50b4      	str	r4, [r6, r2]
 8013ae2:	3604      	adds	r6, #4
 8013ae4:	e7a3      	b.n	8013a2e <__multiply+0x7e>
 8013ae6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d1a5      	bne.n	8013a3a <__multiply+0x8a>
 8013aee:	3f01      	subs	r7, #1
 8013af0:	e7a1      	b.n	8013a36 <__multiply+0x86>
 8013af2:	bf00      	nop
 8013af4:	08015194 	.word	0x08015194
 8013af8:	08015288 	.word	0x08015288

08013afc <__pow5mult>:
 8013afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b00:	4615      	mov	r5, r2
 8013b02:	f012 0203 	ands.w	r2, r2, #3
 8013b06:	4606      	mov	r6, r0
 8013b08:	460f      	mov	r7, r1
 8013b0a:	d007      	beq.n	8013b1c <__pow5mult+0x20>
 8013b0c:	4c25      	ldr	r4, [pc, #148]	; (8013ba4 <__pow5mult+0xa8>)
 8013b0e:	3a01      	subs	r2, #1
 8013b10:	2300      	movs	r3, #0
 8013b12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b16:	f7ff fe51 	bl	80137bc <__multadd>
 8013b1a:	4607      	mov	r7, r0
 8013b1c:	10ad      	asrs	r5, r5, #2
 8013b1e:	d03d      	beq.n	8013b9c <__pow5mult+0xa0>
 8013b20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013b22:	b97c      	cbnz	r4, 8013b44 <__pow5mult+0x48>
 8013b24:	2010      	movs	r0, #16
 8013b26:	f7fc f999 	bl	800fe5c <malloc>
 8013b2a:	4602      	mov	r2, r0
 8013b2c:	6270      	str	r0, [r6, #36]	; 0x24
 8013b2e:	b928      	cbnz	r0, 8013b3c <__pow5mult+0x40>
 8013b30:	4b1d      	ldr	r3, [pc, #116]	; (8013ba8 <__pow5mult+0xac>)
 8013b32:	481e      	ldr	r0, [pc, #120]	; (8013bac <__pow5mult+0xb0>)
 8013b34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013b38:	f000 fdda 	bl	80146f0 <__assert_func>
 8013b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b40:	6004      	str	r4, [r0, #0]
 8013b42:	60c4      	str	r4, [r0, #12]
 8013b44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013b48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013b4c:	b94c      	cbnz	r4, 8013b62 <__pow5mult+0x66>
 8013b4e:	f240 2171 	movw	r1, #625	; 0x271
 8013b52:	4630      	mov	r0, r6
 8013b54:	f7ff ff16 	bl	8013984 <__i2b>
 8013b58:	2300      	movs	r3, #0
 8013b5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b5e:	4604      	mov	r4, r0
 8013b60:	6003      	str	r3, [r0, #0]
 8013b62:	f04f 0900 	mov.w	r9, #0
 8013b66:	07eb      	lsls	r3, r5, #31
 8013b68:	d50a      	bpl.n	8013b80 <__pow5mult+0x84>
 8013b6a:	4639      	mov	r1, r7
 8013b6c:	4622      	mov	r2, r4
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f7ff ff1e 	bl	80139b0 <__multiply>
 8013b74:	4639      	mov	r1, r7
 8013b76:	4680      	mov	r8, r0
 8013b78:	4630      	mov	r0, r6
 8013b7a:	f7ff fdfd 	bl	8013778 <_Bfree>
 8013b7e:	4647      	mov	r7, r8
 8013b80:	106d      	asrs	r5, r5, #1
 8013b82:	d00b      	beq.n	8013b9c <__pow5mult+0xa0>
 8013b84:	6820      	ldr	r0, [r4, #0]
 8013b86:	b938      	cbnz	r0, 8013b98 <__pow5mult+0x9c>
 8013b88:	4622      	mov	r2, r4
 8013b8a:	4621      	mov	r1, r4
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	f7ff ff0f 	bl	80139b0 <__multiply>
 8013b92:	6020      	str	r0, [r4, #0]
 8013b94:	f8c0 9000 	str.w	r9, [r0]
 8013b98:	4604      	mov	r4, r0
 8013b9a:	e7e4      	b.n	8013b66 <__pow5mult+0x6a>
 8013b9c:	4638      	mov	r0, r7
 8013b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ba2:	bf00      	nop
 8013ba4:	080153d8 	.word	0x080153d8
 8013ba8:	0801511e 	.word	0x0801511e
 8013bac:	08015288 	.word	0x08015288

08013bb0 <__lshift>:
 8013bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bb4:	460c      	mov	r4, r1
 8013bb6:	6849      	ldr	r1, [r1, #4]
 8013bb8:	6923      	ldr	r3, [r4, #16]
 8013bba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013bbe:	68a3      	ldr	r3, [r4, #8]
 8013bc0:	4607      	mov	r7, r0
 8013bc2:	4691      	mov	r9, r2
 8013bc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013bc8:	f108 0601 	add.w	r6, r8, #1
 8013bcc:	42b3      	cmp	r3, r6
 8013bce:	db0b      	blt.n	8013be8 <__lshift+0x38>
 8013bd0:	4638      	mov	r0, r7
 8013bd2:	f7ff fd91 	bl	80136f8 <_Balloc>
 8013bd6:	4605      	mov	r5, r0
 8013bd8:	b948      	cbnz	r0, 8013bee <__lshift+0x3e>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	4b28      	ldr	r3, [pc, #160]	; (8013c80 <__lshift+0xd0>)
 8013bde:	4829      	ldr	r0, [pc, #164]	; (8013c84 <__lshift+0xd4>)
 8013be0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013be4:	f000 fd84 	bl	80146f0 <__assert_func>
 8013be8:	3101      	adds	r1, #1
 8013bea:	005b      	lsls	r3, r3, #1
 8013bec:	e7ee      	b.n	8013bcc <__lshift+0x1c>
 8013bee:	2300      	movs	r3, #0
 8013bf0:	f100 0114 	add.w	r1, r0, #20
 8013bf4:	f100 0210 	add.w	r2, r0, #16
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	4553      	cmp	r3, sl
 8013bfc:	db33      	blt.n	8013c66 <__lshift+0xb6>
 8013bfe:	6920      	ldr	r0, [r4, #16]
 8013c00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c04:	f104 0314 	add.w	r3, r4, #20
 8013c08:	f019 091f 	ands.w	r9, r9, #31
 8013c0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013c14:	d02b      	beq.n	8013c6e <__lshift+0xbe>
 8013c16:	f1c9 0e20 	rsb	lr, r9, #32
 8013c1a:	468a      	mov	sl, r1
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	6818      	ldr	r0, [r3, #0]
 8013c20:	fa00 f009 	lsl.w	r0, r0, r9
 8013c24:	4302      	orrs	r2, r0
 8013c26:	f84a 2b04 	str.w	r2, [sl], #4
 8013c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c2e:	459c      	cmp	ip, r3
 8013c30:	fa22 f20e 	lsr.w	r2, r2, lr
 8013c34:	d8f3      	bhi.n	8013c1e <__lshift+0x6e>
 8013c36:	ebac 0304 	sub.w	r3, ip, r4
 8013c3a:	3b15      	subs	r3, #21
 8013c3c:	f023 0303 	bic.w	r3, r3, #3
 8013c40:	3304      	adds	r3, #4
 8013c42:	f104 0015 	add.w	r0, r4, #21
 8013c46:	4584      	cmp	ip, r0
 8013c48:	bf38      	it	cc
 8013c4a:	2304      	movcc	r3, #4
 8013c4c:	50ca      	str	r2, [r1, r3]
 8013c4e:	b10a      	cbz	r2, 8013c54 <__lshift+0xa4>
 8013c50:	f108 0602 	add.w	r6, r8, #2
 8013c54:	3e01      	subs	r6, #1
 8013c56:	4638      	mov	r0, r7
 8013c58:	612e      	str	r6, [r5, #16]
 8013c5a:	4621      	mov	r1, r4
 8013c5c:	f7ff fd8c 	bl	8013778 <_Bfree>
 8013c60:	4628      	mov	r0, r5
 8013c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c66:	f842 0f04 	str.w	r0, [r2, #4]!
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	e7c5      	b.n	8013bfa <__lshift+0x4a>
 8013c6e:	3904      	subs	r1, #4
 8013c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c74:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c78:	459c      	cmp	ip, r3
 8013c7a:	d8f9      	bhi.n	8013c70 <__lshift+0xc0>
 8013c7c:	e7ea      	b.n	8013c54 <__lshift+0xa4>
 8013c7e:	bf00      	nop
 8013c80:	08015194 	.word	0x08015194
 8013c84:	08015288 	.word	0x08015288

08013c88 <__mcmp>:
 8013c88:	b530      	push	{r4, r5, lr}
 8013c8a:	6902      	ldr	r2, [r0, #16]
 8013c8c:	690c      	ldr	r4, [r1, #16]
 8013c8e:	1b12      	subs	r2, r2, r4
 8013c90:	d10e      	bne.n	8013cb0 <__mcmp+0x28>
 8013c92:	f100 0314 	add.w	r3, r0, #20
 8013c96:	3114      	adds	r1, #20
 8013c98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013c9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013ca0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013ca4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013ca8:	42a5      	cmp	r5, r4
 8013caa:	d003      	beq.n	8013cb4 <__mcmp+0x2c>
 8013cac:	d305      	bcc.n	8013cba <__mcmp+0x32>
 8013cae:	2201      	movs	r2, #1
 8013cb0:	4610      	mov	r0, r2
 8013cb2:	bd30      	pop	{r4, r5, pc}
 8013cb4:	4283      	cmp	r3, r0
 8013cb6:	d3f3      	bcc.n	8013ca0 <__mcmp+0x18>
 8013cb8:	e7fa      	b.n	8013cb0 <__mcmp+0x28>
 8013cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013cbe:	e7f7      	b.n	8013cb0 <__mcmp+0x28>

08013cc0 <__mdiff>:
 8013cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cc4:	460c      	mov	r4, r1
 8013cc6:	4606      	mov	r6, r0
 8013cc8:	4611      	mov	r1, r2
 8013cca:	4620      	mov	r0, r4
 8013ccc:	4617      	mov	r7, r2
 8013cce:	f7ff ffdb 	bl	8013c88 <__mcmp>
 8013cd2:	1e05      	subs	r5, r0, #0
 8013cd4:	d110      	bne.n	8013cf8 <__mdiff+0x38>
 8013cd6:	4629      	mov	r1, r5
 8013cd8:	4630      	mov	r0, r6
 8013cda:	f7ff fd0d 	bl	80136f8 <_Balloc>
 8013cde:	b930      	cbnz	r0, 8013cee <__mdiff+0x2e>
 8013ce0:	4b39      	ldr	r3, [pc, #228]	; (8013dc8 <__mdiff+0x108>)
 8013ce2:	4602      	mov	r2, r0
 8013ce4:	f240 2132 	movw	r1, #562	; 0x232
 8013ce8:	4838      	ldr	r0, [pc, #224]	; (8013dcc <__mdiff+0x10c>)
 8013cea:	f000 fd01 	bl	80146f0 <__assert_func>
 8013cee:	2301      	movs	r3, #1
 8013cf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf8:	bfa4      	itt	ge
 8013cfa:	463b      	movge	r3, r7
 8013cfc:	4627      	movge	r7, r4
 8013cfe:	4630      	mov	r0, r6
 8013d00:	6879      	ldr	r1, [r7, #4]
 8013d02:	bfa6      	itte	ge
 8013d04:	461c      	movge	r4, r3
 8013d06:	2500      	movge	r5, #0
 8013d08:	2501      	movlt	r5, #1
 8013d0a:	f7ff fcf5 	bl	80136f8 <_Balloc>
 8013d0e:	b920      	cbnz	r0, 8013d1a <__mdiff+0x5a>
 8013d10:	4b2d      	ldr	r3, [pc, #180]	; (8013dc8 <__mdiff+0x108>)
 8013d12:	4602      	mov	r2, r0
 8013d14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013d18:	e7e6      	b.n	8013ce8 <__mdiff+0x28>
 8013d1a:	693e      	ldr	r6, [r7, #16]
 8013d1c:	60c5      	str	r5, [r0, #12]
 8013d1e:	6925      	ldr	r5, [r4, #16]
 8013d20:	f107 0114 	add.w	r1, r7, #20
 8013d24:	f104 0914 	add.w	r9, r4, #20
 8013d28:	f100 0e14 	add.w	lr, r0, #20
 8013d2c:	f107 0210 	add.w	r2, r7, #16
 8013d30:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013d34:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013d38:	46f2      	mov	sl, lr
 8013d3a:	2700      	movs	r7, #0
 8013d3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013d40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013d44:	fa1f f883 	uxth.w	r8, r3
 8013d48:	fa17 f78b 	uxtah	r7, r7, fp
 8013d4c:	0c1b      	lsrs	r3, r3, #16
 8013d4e:	eba7 0808 	sub.w	r8, r7, r8
 8013d52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013d56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013d5a:	fa1f f888 	uxth.w	r8, r8
 8013d5e:	141f      	asrs	r7, r3, #16
 8013d60:	454d      	cmp	r5, r9
 8013d62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013d66:	f84a 3b04 	str.w	r3, [sl], #4
 8013d6a:	d8e7      	bhi.n	8013d3c <__mdiff+0x7c>
 8013d6c:	1b2b      	subs	r3, r5, r4
 8013d6e:	3b15      	subs	r3, #21
 8013d70:	f023 0303 	bic.w	r3, r3, #3
 8013d74:	3304      	adds	r3, #4
 8013d76:	3415      	adds	r4, #21
 8013d78:	42a5      	cmp	r5, r4
 8013d7a:	bf38      	it	cc
 8013d7c:	2304      	movcc	r3, #4
 8013d7e:	4419      	add	r1, r3
 8013d80:	4473      	add	r3, lr
 8013d82:	469e      	mov	lr, r3
 8013d84:	460d      	mov	r5, r1
 8013d86:	4565      	cmp	r5, ip
 8013d88:	d30e      	bcc.n	8013da8 <__mdiff+0xe8>
 8013d8a:	f10c 0203 	add.w	r2, ip, #3
 8013d8e:	1a52      	subs	r2, r2, r1
 8013d90:	f022 0203 	bic.w	r2, r2, #3
 8013d94:	3903      	subs	r1, #3
 8013d96:	458c      	cmp	ip, r1
 8013d98:	bf38      	it	cc
 8013d9a:	2200      	movcc	r2, #0
 8013d9c:	441a      	add	r2, r3
 8013d9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013da2:	b17b      	cbz	r3, 8013dc4 <__mdiff+0x104>
 8013da4:	6106      	str	r6, [r0, #16]
 8013da6:	e7a5      	b.n	8013cf4 <__mdiff+0x34>
 8013da8:	f855 8b04 	ldr.w	r8, [r5], #4
 8013dac:	fa17 f488 	uxtah	r4, r7, r8
 8013db0:	1422      	asrs	r2, r4, #16
 8013db2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013db6:	b2a4      	uxth	r4, r4
 8013db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013dbc:	f84e 4b04 	str.w	r4, [lr], #4
 8013dc0:	1417      	asrs	r7, r2, #16
 8013dc2:	e7e0      	b.n	8013d86 <__mdiff+0xc6>
 8013dc4:	3e01      	subs	r6, #1
 8013dc6:	e7ea      	b.n	8013d9e <__mdiff+0xde>
 8013dc8:	08015194 	.word	0x08015194
 8013dcc:	08015288 	.word	0x08015288

08013dd0 <__ulp>:
 8013dd0:	b082      	sub	sp, #8
 8013dd2:	ed8d 0b00 	vstr	d0, [sp]
 8013dd6:	9b01      	ldr	r3, [sp, #4]
 8013dd8:	4912      	ldr	r1, [pc, #72]	; (8013e24 <__ulp+0x54>)
 8013dda:	4019      	ands	r1, r3
 8013ddc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013de0:	2900      	cmp	r1, #0
 8013de2:	dd05      	ble.n	8013df0 <__ulp+0x20>
 8013de4:	2200      	movs	r2, #0
 8013de6:	460b      	mov	r3, r1
 8013de8:	ec43 2b10 	vmov	d0, r2, r3
 8013dec:	b002      	add	sp, #8
 8013dee:	4770      	bx	lr
 8013df0:	4249      	negs	r1, r1
 8013df2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013df6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013dfa:	f04f 0200 	mov.w	r2, #0
 8013dfe:	f04f 0300 	mov.w	r3, #0
 8013e02:	da04      	bge.n	8013e0e <__ulp+0x3e>
 8013e04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013e08:	fa41 f300 	asr.w	r3, r1, r0
 8013e0c:	e7ec      	b.n	8013de8 <__ulp+0x18>
 8013e0e:	f1a0 0114 	sub.w	r1, r0, #20
 8013e12:	291e      	cmp	r1, #30
 8013e14:	bfda      	itte	le
 8013e16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013e1a:	fa20 f101 	lsrle.w	r1, r0, r1
 8013e1e:	2101      	movgt	r1, #1
 8013e20:	460a      	mov	r2, r1
 8013e22:	e7e1      	b.n	8013de8 <__ulp+0x18>
 8013e24:	7ff00000 	.word	0x7ff00000

08013e28 <__b2d>:
 8013e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e2a:	6905      	ldr	r5, [r0, #16]
 8013e2c:	f100 0714 	add.w	r7, r0, #20
 8013e30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013e34:	1f2e      	subs	r6, r5, #4
 8013e36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	f7ff fd52 	bl	80138e4 <__hi0bits>
 8013e40:	f1c0 0320 	rsb	r3, r0, #32
 8013e44:	280a      	cmp	r0, #10
 8013e46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013ec4 <__b2d+0x9c>
 8013e4a:	600b      	str	r3, [r1, #0]
 8013e4c:	dc14      	bgt.n	8013e78 <__b2d+0x50>
 8013e4e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013e52:	fa24 f10e 	lsr.w	r1, r4, lr
 8013e56:	42b7      	cmp	r7, r6
 8013e58:	ea41 030c 	orr.w	r3, r1, ip
 8013e5c:	bf34      	ite	cc
 8013e5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013e62:	2100      	movcs	r1, #0
 8013e64:	3015      	adds	r0, #21
 8013e66:	fa04 f000 	lsl.w	r0, r4, r0
 8013e6a:	fa21 f10e 	lsr.w	r1, r1, lr
 8013e6e:	ea40 0201 	orr.w	r2, r0, r1
 8013e72:	ec43 2b10 	vmov	d0, r2, r3
 8013e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e78:	42b7      	cmp	r7, r6
 8013e7a:	bf3a      	itte	cc
 8013e7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013e80:	f1a5 0608 	subcc.w	r6, r5, #8
 8013e84:	2100      	movcs	r1, #0
 8013e86:	380b      	subs	r0, #11
 8013e88:	d017      	beq.n	8013eba <__b2d+0x92>
 8013e8a:	f1c0 0c20 	rsb	ip, r0, #32
 8013e8e:	fa04 f500 	lsl.w	r5, r4, r0
 8013e92:	42be      	cmp	r6, r7
 8013e94:	fa21 f40c 	lsr.w	r4, r1, ip
 8013e98:	ea45 0504 	orr.w	r5, r5, r4
 8013e9c:	bf8c      	ite	hi
 8013e9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013ea2:	2400      	movls	r4, #0
 8013ea4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013ea8:	fa01 f000 	lsl.w	r0, r1, r0
 8013eac:	fa24 f40c 	lsr.w	r4, r4, ip
 8013eb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013eb4:	ea40 0204 	orr.w	r2, r0, r4
 8013eb8:	e7db      	b.n	8013e72 <__b2d+0x4a>
 8013eba:	ea44 030c 	orr.w	r3, r4, ip
 8013ebe:	460a      	mov	r2, r1
 8013ec0:	e7d7      	b.n	8013e72 <__b2d+0x4a>
 8013ec2:	bf00      	nop
 8013ec4:	3ff00000 	.word	0x3ff00000

08013ec8 <__d2b>:
 8013ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ecc:	4689      	mov	r9, r1
 8013ece:	2101      	movs	r1, #1
 8013ed0:	ec57 6b10 	vmov	r6, r7, d0
 8013ed4:	4690      	mov	r8, r2
 8013ed6:	f7ff fc0f 	bl	80136f8 <_Balloc>
 8013eda:	4604      	mov	r4, r0
 8013edc:	b930      	cbnz	r0, 8013eec <__d2b+0x24>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	4b25      	ldr	r3, [pc, #148]	; (8013f78 <__d2b+0xb0>)
 8013ee2:	4826      	ldr	r0, [pc, #152]	; (8013f7c <__d2b+0xb4>)
 8013ee4:	f240 310a 	movw	r1, #778	; 0x30a
 8013ee8:	f000 fc02 	bl	80146f0 <__assert_func>
 8013eec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013ef4:	bb35      	cbnz	r5, 8013f44 <__d2b+0x7c>
 8013ef6:	2e00      	cmp	r6, #0
 8013ef8:	9301      	str	r3, [sp, #4]
 8013efa:	d028      	beq.n	8013f4e <__d2b+0x86>
 8013efc:	4668      	mov	r0, sp
 8013efe:	9600      	str	r6, [sp, #0]
 8013f00:	f7ff fd10 	bl	8013924 <__lo0bits>
 8013f04:	9900      	ldr	r1, [sp, #0]
 8013f06:	b300      	cbz	r0, 8013f4a <__d2b+0x82>
 8013f08:	9a01      	ldr	r2, [sp, #4]
 8013f0a:	f1c0 0320 	rsb	r3, r0, #32
 8013f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8013f12:	430b      	orrs	r3, r1
 8013f14:	40c2      	lsrs	r2, r0
 8013f16:	6163      	str	r3, [r4, #20]
 8013f18:	9201      	str	r2, [sp, #4]
 8013f1a:	9b01      	ldr	r3, [sp, #4]
 8013f1c:	61a3      	str	r3, [r4, #24]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	bf14      	ite	ne
 8013f22:	2202      	movne	r2, #2
 8013f24:	2201      	moveq	r2, #1
 8013f26:	6122      	str	r2, [r4, #16]
 8013f28:	b1d5      	cbz	r5, 8013f60 <__d2b+0x98>
 8013f2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013f2e:	4405      	add	r5, r0
 8013f30:	f8c9 5000 	str.w	r5, [r9]
 8013f34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013f38:	f8c8 0000 	str.w	r0, [r8]
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	b003      	add	sp, #12
 8013f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f48:	e7d5      	b.n	8013ef6 <__d2b+0x2e>
 8013f4a:	6161      	str	r1, [r4, #20]
 8013f4c:	e7e5      	b.n	8013f1a <__d2b+0x52>
 8013f4e:	a801      	add	r0, sp, #4
 8013f50:	f7ff fce8 	bl	8013924 <__lo0bits>
 8013f54:	9b01      	ldr	r3, [sp, #4]
 8013f56:	6163      	str	r3, [r4, #20]
 8013f58:	2201      	movs	r2, #1
 8013f5a:	6122      	str	r2, [r4, #16]
 8013f5c:	3020      	adds	r0, #32
 8013f5e:	e7e3      	b.n	8013f28 <__d2b+0x60>
 8013f60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013f64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013f68:	f8c9 0000 	str.w	r0, [r9]
 8013f6c:	6918      	ldr	r0, [r3, #16]
 8013f6e:	f7ff fcb9 	bl	80138e4 <__hi0bits>
 8013f72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013f76:	e7df      	b.n	8013f38 <__d2b+0x70>
 8013f78:	08015194 	.word	0x08015194
 8013f7c:	08015288 	.word	0x08015288

08013f80 <__ratio>:
 8013f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f84:	4688      	mov	r8, r1
 8013f86:	4669      	mov	r1, sp
 8013f88:	4681      	mov	r9, r0
 8013f8a:	f7ff ff4d 	bl	8013e28 <__b2d>
 8013f8e:	a901      	add	r1, sp, #4
 8013f90:	4640      	mov	r0, r8
 8013f92:	ec55 4b10 	vmov	r4, r5, d0
 8013f96:	f7ff ff47 	bl	8013e28 <__b2d>
 8013f9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013fa2:	eba3 0c02 	sub.w	ip, r3, r2
 8013fa6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013faa:	1a9b      	subs	r3, r3, r2
 8013fac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013fb0:	ec51 0b10 	vmov	r0, r1, d0
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	bfd6      	itet	le
 8013fb8:	460a      	movle	r2, r1
 8013fba:	462a      	movgt	r2, r5
 8013fbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013fc0:	468b      	mov	fp, r1
 8013fc2:	462f      	mov	r7, r5
 8013fc4:	bfd4      	ite	le
 8013fc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013fca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013fce:	4620      	mov	r0, r4
 8013fd0:	ee10 2a10 	vmov	r2, s0
 8013fd4:	465b      	mov	r3, fp
 8013fd6:	4639      	mov	r1, r7
 8013fd8:	f7ec fc48 	bl	800086c <__aeabi_ddiv>
 8013fdc:	ec41 0b10 	vmov	d0, r0, r1
 8013fe0:	b003      	add	sp, #12
 8013fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013fe6 <__copybits>:
 8013fe6:	3901      	subs	r1, #1
 8013fe8:	b570      	push	{r4, r5, r6, lr}
 8013fea:	1149      	asrs	r1, r1, #5
 8013fec:	6914      	ldr	r4, [r2, #16]
 8013fee:	3101      	adds	r1, #1
 8013ff0:	f102 0314 	add.w	r3, r2, #20
 8013ff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013ff8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013ffc:	1f05      	subs	r5, r0, #4
 8013ffe:	42a3      	cmp	r3, r4
 8014000:	d30c      	bcc.n	801401c <__copybits+0x36>
 8014002:	1aa3      	subs	r3, r4, r2
 8014004:	3b11      	subs	r3, #17
 8014006:	f023 0303 	bic.w	r3, r3, #3
 801400a:	3211      	adds	r2, #17
 801400c:	42a2      	cmp	r2, r4
 801400e:	bf88      	it	hi
 8014010:	2300      	movhi	r3, #0
 8014012:	4418      	add	r0, r3
 8014014:	2300      	movs	r3, #0
 8014016:	4288      	cmp	r0, r1
 8014018:	d305      	bcc.n	8014026 <__copybits+0x40>
 801401a:	bd70      	pop	{r4, r5, r6, pc}
 801401c:	f853 6b04 	ldr.w	r6, [r3], #4
 8014020:	f845 6f04 	str.w	r6, [r5, #4]!
 8014024:	e7eb      	b.n	8013ffe <__copybits+0x18>
 8014026:	f840 3b04 	str.w	r3, [r0], #4
 801402a:	e7f4      	b.n	8014016 <__copybits+0x30>

0801402c <__any_on>:
 801402c:	f100 0214 	add.w	r2, r0, #20
 8014030:	6900      	ldr	r0, [r0, #16]
 8014032:	114b      	asrs	r3, r1, #5
 8014034:	4298      	cmp	r0, r3
 8014036:	b510      	push	{r4, lr}
 8014038:	db11      	blt.n	801405e <__any_on+0x32>
 801403a:	dd0a      	ble.n	8014052 <__any_on+0x26>
 801403c:	f011 011f 	ands.w	r1, r1, #31
 8014040:	d007      	beq.n	8014052 <__any_on+0x26>
 8014042:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014046:	fa24 f001 	lsr.w	r0, r4, r1
 801404a:	fa00 f101 	lsl.w	r1, r0, r1
 801404e:	428c      	cmp	r4, r1
 8014050:	d10b      	bne.n	801406a <__any_on+0x3e>
 8014052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014056:	4293      	cmp	r3, r2
 8014058:	d803      	bhi.n	8014062 <__any_on+0x36>
 801405a:	2000      	movs	r0, #0
 801405c:	bd10      	pop	{r4, pc}
 801405e:	4603      	mov	r3, r0
 8014060:	e7f7      	b.n	8014052 <__any_on+0x26>
 8014062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014066:	2900      	cmp	r1, #0
 8014068:	d0f5      	beq.n	8014056 <__any_on+0x2a>
 801406a:	2001      	movs	r0, #1
 801406c:	e7f6      	b.n	801405c <__any_on+0x30>

0801406e <_calloc_r>:
 801406e:	b513      	push	{r0, r1, r4, lr}
 8014070:	434a      	muls	r2, r1
 8014072:	4611      	mov	r1, r2
 8014074:	9201      	str	r2, [sp, #4]
 8014076:	f7fb ff67 	bl	800ff48 <_malloc_r>
 801407a:	4604      	mov	r4, r0
 801407c:	b118      	cbz	r0, 8014086 <_calloc_r+0x18>
 801407e:	9a01      	ldr	r2, [sp, #4]
 8014080:	2100      	movs	r1, #0
 8014082:	f7fb ff09 	bl	800fe98 <memset>
 8014086:	4620      	mov	r0, r4
 8014088:	b002      	add	sp, #8
 801408a:	bd10      	pop	{r4, pc}

0801408c <__ssputs_r>:
 801408c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014090:	688e      	ldr	r6, [r1, #8]
 8014092:	429e      	cmp	r6, r3
 8014094:	4682      	mov	sl, r0
 8014096:	460c      	mov	r4, r1
 8014098:	4690      	mov	r8, r2
 801409a:	461f      	mov	r7, r3
 801409c:	d838      	bhi.n	8014110 <__ssputs_r+0x84>
 801409e:	898a      	ldrh	r2, [r1, #12]
 80140a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80140a4:	d032      	beq.n	801410c <__ssputs_r+0x80>
 80140a6:	6825      	ldr	r5, [r4, #0]
 80140a8:	6909      	ldr	r1, [r1, #16]
 80140aa:	eba5 0901 	sub.w	r9, r5, r1
 80140ae:	6965      	ldr	r5, [r4, #20]
 80140b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80140b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80140b8:	3301      	adds	r3, #1
 80140ba:	444b      	add	r3, r9
 80140bc:	106d      	asrs	r5, r5, #1
 80140be:	429d      	cmp	r5, r3
 80140c0:	bf38      	it	cc
 80140c2:	461d      	movcc	r5, r3
 80140c4:	0553      	lsls	r3, r2, #21
 80140c6:	d531      	bpl.n	801412c <__ssputs_r+0xa0>
 80140c8:	4629      	mov	r1, r5
 80140ca:	f7fb ff3d 	bl	800ff48 <_malloc_r>
 80140ce:	4606      	mov	r6, r0
 80140d0:	b950      	cbnz	r0, 80140e8 <__ssputs_r+0x5c>
 80140d2:	230c      	movs	r3, #12
 80140d4:	f8ca 3000 	str.w	r3, [sl]
 80140d8:	89a3      	ldrh	r3, [r4, #12]
 80140da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140de:	81a3      	strh	r3, [r4, #12]
 80140e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140e8:	6921      	ldr	r1, [r4, #16]
 80140ea:	464a      	mov	r2, r9
 80140ec:	f7fb fec6 	bl	800fe7c <memcpy>
 80140f0:	89a3      	ldrh	r3, [r4, #12]
 80140f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80140f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140fa:	81a3      	strh	r3, [r4, #12]
 80140fc:	6126      	str	r6, [r4, #16]
 80140fe:	6165      	str	r5, [r4, #20]
 8014100:	444e      	add	r6, r9
 8014102:	eba5 0509 	sub.w	r5, r5, r9
 8014106:	6026      	str	r6, [r4, #0]
 8014108:	60a5      	str	r5, [r4, #8]
 801410a:	463e      	mov	r6, r7
 801410c:	42be      	cmp	r6, r7
 801410e:	d900      	bls.n	8014112 <__ssputs_r+0x86>
 8014110:	463e      	mov	r6, r7
 8014112:	4632      	mov	r2, r6
 8014114:	6820      	ldr	r0, [r4, #0]
 8014116:	4641      	mov	r1, r8
 8014118:	f000 fb5e 	bl	80147d8 <memmove>
 801411c:	68a3      	ldr	r3, [r4, #8]
 801411e:	6822      	ldr	r2, [r4, #0]
 8014120:	1b9b      	subs	r3, r3, r6
 8014122:	4432      	add	r2, r6
 8014124:	60a3      	str	r3, [r4, #8]
 8014126:	6022      	str	r2, [r4, #0]
 8014128:	2000      	movs	r0, #0
 801412a:	e7db      	b.n	80140e4 <__ssputs_r+0x58>
 801412c:	462a      	mov	r2, r5
 801412e:	f000 fb6d 	bl	801480c <_realloc_r>
 8014132:	4606      	mov	r6, r0
 8014134:	2800      	cmp	r0, #0
 8014136:	d1e1      	bne.n	80140fc <__ssputs_r+0x70>
 8014138:	6921      	ldr	r1, [r4, #16]
 801413a:	4650      	mov	r0, sl
 801413c:	f7fb feb4 	bl	800fea8 <_free_r>
 8014140:	e7c7      	b.n	80140d2 <__ssputs_r+0x46>
	...

08014144 <_svfiprintf_r>:
 8014144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014148:	4698      	mov	r8, r3
 801414a:	898b      	ldrh	r3, [r1, #12]
 801414c:	061b      	lsls	r3, r3, #24
 801414e:	b09d      	sub	sp, #116	; 0x74
 8014150:	4607      	mov	r7, r0
 8014152:	460d      	mov	r5, r1
 8014154:	4614      	mov	r4, r2
 8014156:	d50e      	bpl.n	8014176 <_svfiprintf_r+0x32>
 8014158:	690b      	ldr	r3, [r1, #16]
 801415a:	b963      	cbnz	r3, 8014176 <_svfiprintf_r+0x32>
 801415c:	2140      	movs	r1, #64	; 0x40
 801415e:	f7fb fef3 	bl	800ff48 <_malloc_r>
 8014162:	6028      	str	r0, [r5, #0]
 8014164:	6128      	str	r0, [r5, #16]
 8014166:	b920      	cbnz	r0, 8014172 <_svfiprintf_r+0x2e>
 8014168:	230c      	movs	r3, #12
 801416a:	603b      	str	r3, [r7, #0]
 801416c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014170:	e0d1      	b.n	8014316 <_svfiprintf_r+0x1d2>
 8014172:	2340      	movs	r3, #64	; 0x40
 8014174:	616b      	str	r3, [r5, #20]
 8014176:	2300      	movs	r3, #0
 8014178:	9309      	str	r3, [sp, #36]	; 0x24
 801417a:	2320      	movs	r3, #32
 801417c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014180:	f8cd 800c 	str.w	r8, [sp, #12]
 8014184:	2330      	movs	r3, #48	; 0x30
 8014186:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014330 <_svfiprintf_r+0x1ec>
 801418a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801418e:	f04f 0901 	mov.w	r9, #1
 8014192:	4623      	mov	r3, r4
 8014194:	469a      	mov	sl, r3
 8014196:	f813 2b01 	ldrb.w	r2, [r3], #1
 801419a:	b10a      	cbz	r2, 80141a0 <_svfiprintf_r+0x5c>
 801419c:	2a25      	cmp	r2, #37	; 0x25
 801419e:	d1f9      	bne.n	8014194 <_svfiprintf_r+0x50>
 80141a0:	ebba 0b04 	subs.w	fp, sl, r4
 80141a4:	d00b      	beq.n	80141be <_svfiprintf_r+0x7a>
 80141a6:	465b      	mov	r3, fp
 80141a8:	4622      	mov	r2, r4
 80141aa:	4629      	mov	r1, r5
 80141ac:	4638      	mov	r0, r7
 80141ae:	f7ff ff6d 	bl	801408c <__ssputs_r>
 80141b2:	3001      	adds	r0, #1
 80141b4:	f000 80aa 	beq.w	801430c <_svfiprintf_r+0x1c8>
 80141b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141ba:	445a      	add	r2, fp
 80141bc:	9209      	str	r2, [sp, #36]	; 0x24
 80141be:	f89a 3000 	ldrb.w	r3, [sl]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	f000 80a2 	beq.w	801430c <_svfiprintf_r+0x1c8>
 80141c8:	2300      	movs	r3, #0
 80141ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141d2:	f10a 0a01 	add.w	sl, sl, #1
 80141d6:	9304      	str	r3, [sp, #16]
 80141d8:	9307      	str	r3, [sp, #28]
 80141da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141de:	931a      	str	r3, [sp, #104]	; 0x68
 80141e0:	4654      	mov	r4, sl
 80141e2:	2205      	movs	r2, #5
 80141e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141e8:	4851      	ldr	r0, [pc, #324]	; (8014330 <_svfiprintf_r+0x1ec>)
 80141ea:	f7ec f809 	bl	8000200 <memchr>
 80141ee:	9a04      	ldr	r2, [sp, #16]
 80141f0:	b9d8      	cbnz	r0, 801422a <_svfiprintf_r+0xe6>
 80141f2:	06d0      	lsls	r0, r2, #27
 80141f4:	bf44      	itt	mi
 80141f6:	2320      	movmi	r3, #32
 80141f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141fc:	0711      	lsls	r1, r2, #28
 80141fe:	bf44      	itt	mi
 8014200:	232b      	movmi	r3, #43	; 0x2b
 8014202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014206:	f89a 3000 	ldrb.w	r3, [sl]
 801420a:	2b2a      	cmp	r3, #42	; 0x2a
 801420c:	d015      	beq.n	801423a <_svfiprintf_r+0xf6>
 801420e:	9a07      	ldr	r2, [sp, #28]
 8014210:	4654      	mov	r4, sl
 8014212:	2000      	movs	r0, #0
 8014214:	f04f 0c0a 	mov.w	ip, #10
 8014218:	4621      	mov	r1, r4
 801421a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801421e:	3b30      	subs	r3, #48	; 0x30
 8014220:	2b09      	cmp	r3, #9
 8014222:	d94e      	bls.n	80142c2 <_svfiprintf_r+0x17e>
 8014224:	b1b0      	cbz	r0, 8014254 <_svfiprintf_r+0x110>
 8014226:	9207      	str	r2, [sp, #28]
 8014228:	e014      	b.n	8014254 <_svfiprintf_r+0x110>
 801422a:	eba0 0308 	sub.w	r3, r0, r8
 801422e:	fa09 f303 	lsl.w	r3, r9, r3
 8014232:	4313      	orrs	r3, r2
 8014234:	9304      	str	r3, [sp, #16]
 8014236:	46a2      	mov	sl, r4
 8014238:	e7d2      	b.n	80141e0 <_svfiprintf_r+0x9c>
 801423a:	9b03      	ldr	r3, [sp, #12]
 801423c:	1d19      	adds	r1, r3, #4
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	9103      	str	r1, [sp, #12]
 8014242:	2b00      	cmp	r3, #0
 8014244:	bfbb      	ittet	lt
 8014246:	425b      	neglt	r3, r3
 8014248:	f042 0202 	orrlt.w	r2, r2, #2
 801424c:	9307      	strge	r3, [sp, #28]
 801424e:	9307      	strlt	r3, [sp, #28]
 8014250:	bfb8      	it	lt
 8014252:	9204      	strlt	r2, [sp, #16]
 8014254:	7823      	ldrb	r3, [r4, #0]
 8014256:	2b2e      	cmp	r3, #46	; 0x2e
 8014258:	d10c      	bne.n	8014274 <_svfiprintf_r+0x130>
 801425a:	7863      	ldrb	r3, [r4, #1]
 801425c:	2b2a      	cmp	r3, #42	; 0x2a
 801425e:	d135      	bne.n	80142cc <_svfiprintf_r+0x188>
 8014260:	9b03      	ldr	r3, [sp, #12]
 8014262:	1d1a      	adds	r2, r3, #4
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	9203      	str	r2, [sp, #12]
 8014268:	2b00      	cmp	r3, #0
 801426a:	bfb8      	it	lt
 801426c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014270:	3402      	adds	r4, #2
 8014272:	9305      	str	r3, [sp, #20]
 8014274:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014340 <_svfiprintf_r+0x1fc>
 8014278:	7821      	ldrb	r1, [r4, #0]
 801427a:	2203      	movs	r2, #3
 801427c:	4650      	mov	r0, sl
 801427e:	f7eb ffbf 	bl	8000200 <memchr>
 8014282:	b140      	cbz	r0, 8014296 <_svfiprintf_r+0x152>
 8014284:	2340      	movs	r3, #64	; 0x40
 8014286:	eba0 000a 	sub.w	r0, r0, sl
 801428a:	fa03 f000 	lsl.w	r0, r3, r0
 801428e:	9b04      	ldr	r3, [sp, #16]
 8014290:	4303      	orrs	r3, r0
 8014292:	3401      	adds	r4, #1
 8014294:	9304      	str	r3, [sp, #16]
 8014296:	f814 1b01 	ldrb.w	r1, [r4], #1
 801429a:	4826      	ldr	r0, [pc, #152]	; (8014334 <_svfiprintf_r+0x1f0>)
 801429c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80142a0:	2206      	movs	r2, #6
 80142a2:	f7eb ffad 	bl	8000200 <memchr>
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d038      	beq.n	801431c <_svfiprintf_r+0x1d8>
 80142aa:	4b23      	ldr	r3, [pc, #140]	; (8014338 <_svfiprintf_r+0x1f4>)
 80142ac:	bb1b      	cbnz	r3, 80142f6 <_svfiprintf_r+0x1b2>
 80142ae:	9b03      	ldr	r3, [sp, #12]
 80142b0:	3307      	adds	r3, #7
 80142b2:	f023 0307 	bic.w	r3, r3, #7
 80142b6:	3308      	adds	r3, #8
 80142b8:	9303      	str	r3, [sp, #12]
 80142ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142bc:	4433      	add	r3, r6
 80142be:	9309      	str	r3, [sp, #36]	; 0x24
 80142c0:	e767      	b.n	8014192 <_svfiprintf_r+0x4e>
 80142c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80142c6:	460c      	mov	r4, r1
 80142c8:	2001      	movs	r0, #1
 80142ca:	e7a5      	b.n	8014218 <_svfiprintf_r+0xd4>
 80142cc:	2300      	movs	r3, #0
 80142ce:	3401      	adds	r4, #1
 80142d0:	9305      	str	r3, [sp, #20]
 80142d2:	4619      	mov	r1, r3
 80142d4:	f04f 0c0a 	mov.w	ip, #10
 80142d8:	4620      	mov	r0, r4
 80142da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142de:	3a30      	subs	r2, #48	; 0x30
 80142e0:	2a09      	cmp	r2, #9
 80142e2:	d903      	bls.n	80142ec <_svfiprintf_r+0x1a8>
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d0c5      	beq.n	8014274 <_svfiprintf_r+0x130>
 80142e8:	9105      	str	r1, [sp, #20]
 80142ea:	e7c3      	b.n	8014274 <_svfiprintf_r+0x130>
 80142ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80142f0:	4604      	mov	r4, r0
 80142f2:	2301      	movs	r3, #1
 80142f4:	e7f0      	b.n	80142d8 <_svfiprintf_r+0x194>
 80142f6:	ab03      	add	r3, sp, #12
 80142f8:	9300      	str	r3, [sp, #0]
 80142fa:	462a      	mov	r2, r5
 80142fc:	4b0f      	ldr	r3, [pc, #60]	; (801433c <_svfiprintf_r+0x1f8>)
 80142fe:	a904      	add	r1, sp, #16
 8014300:	4638      	mov	r0, r7
 8014302:	f7fb ff1b 	bl	801013c <_printf_float>
 8014306:	1c42      	adds	r2, r0, #1
 8014308:	4606      	mov	r6, r0
 801430a:	d1d6      	bne.n	80142ba <_svfiprintf_r+0x176>
 801430c:	89ab      	ldrh	r3, [r5, #12]
 801430e:	065b      	lsls	r3, r3, #25
 8014310:	f53f af2c 	bmi.w	801416c <_svfiprintf_r+0x28>
 8014314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014316:	b01d      	add	sp, #116	; 0x74
 8014318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431c:	ab03      	add	r3, sp, #12
 801431e:	9300      	str	r3, [sp, #0]
 8014320:	462a      	mov	r2, r5
 8014322:	4b06      	ldr	r3, [pc, #24]	; (801433c <_svfiprintf_r+0x1f8>)
 8014324:	a904      	add	r1, sp, #16
 8014326:	4638      	mov	r0, r7
 8014328:	f7fc f9ac 	bl	8010684 <_printf_i>
 801432c:	e7eb      	b.n	8014306 <_svfiprintf_r+0x1c2>
 801432e:	bf00      	nop
 8014330:	080153e4 	.word	0x080153e4
 8014334:	080153ee 	.word	0x080153ee
 8014338:	0801013d 	.word	0x0801013d
 801433c:	0801408d 	.word	0x0801408d
 8014340:	080153ea 	.word	0x080153ea

08014344 <__sfputc_r>:
 8014344:	6893      	ldr	r3, [r2, #8]
 8014346:	3b01      	subs	r3, #1
 8014348:	2b00      	cmp	r3, #0
 801434a:	b410      	push	{r4}
 801434c:	6093      	str	r3, [r2, #8]
 801434e:	da08      	bge.n	8014362 <__sfputc_r+0x1e>
 8014350:	6994      	ldr	r4, [r2, #24]
 8014352:	42a3      	cmp	r3, r4
 8014354:	db01      	blt.n	801435a <__sfputc_r+0x16>
 8014356:	290a      	cmp	r1, #10
 8014358:	d103      	bne.n	8014362 <__sfputc_r+0x1e>
 801435a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801435e:	f7fd bc81 	b.w	8011c64 <__swbuf_r>
 8014362:	6813      	ldr	r3, [r2, #0]
 8014364:	1c58      	adds	r0, r3, #1
 8014366:	6010      	str	r0, [r2, #0]
 8014368:	7019      	strb	r1, [r3, #0]
 801436a:	4608      	mov	r0, r1
 801436c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014370:	4770      	bx	lr

08014372 <__sfputs_r>:
 8014372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014374:	4606      	mov	r6, r0
 8014376:	460f      	mov	r7, r1
 8014378:	4614      	mov	r4, r2
 801437a:	18d5      	adds	r5, r2, r3
 801437c:	42ac      	cmp	r4, r5
 801437e:	d101      	bne.n	8014384 <__sfputs_r+0x12>
 8014380:	2000      	movs	r0, #0
 8014382:	e007      	b.n	8014394 <__sfputs_r+0x22>
 8014384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014388:	463a      	mov	r2, r7
 801438a:	4630      	mov	r0, r6
 801438c:	f7ff ffda 	bl	8014344 <__sfputc_r>
 8014390:	1c43      	adds	r3, r0, #1
 8014392:	d1f3      	bne.n	801437c <__sfputs_r+0xa>
 8014394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014398 <_vfiprintf_r>:
 8014398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801439c:	460d      	mov	r5, r1
 801439e:	b09d      	sub	sp, #116	; 0x74
 80143a0:	4614      	mov	r4, r2
 80143a2:	4698      	mov	r8, r3
 80143a4:	4606      	mov	r6, r0
 80143a6:	b118      	cbz	r0, 80143b0 <_vfiprintf_r+0x18>
 80143a8:	6983      	ldr	r3, [r0, #24]
 80143aa:	b90b      	cbnz	r3, 80143b0 <_vfiprintf_r+0x18>
 80143ac:	f7fe fd0e 	bl	8012dcc <__sinit>
 80143b0:	4b89      	ldr	r3, [pc, #548]	; (80145d8 <_vfiprintf_r+0x240>)
 80143b2:	429d      	cmp	r5, r3
 80143b4:	d11b      	bne.n	80143ee <_vfiprintf_r+0x56>
 80143b6:	6875      	ldr	r5, [r6, #4]
 80143b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143ba:	07d9      	lsls	r1, r3, #31
 80143bc:	d405      	bmi.n	80143ca <_vfiprintf_r+0x32>
 80143be:	89ab      	ldrh	r3, [r5, #12]
 80143c0:	059a      	lsls	r2, r3, #22
 80143c2:	d402      	bmi.n	80143ca <_vfiprintf_r+0x32>
 80143c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143c6:	f7ff f912 	bl	80135ee <__retarget_lock_acquire_recursive>
 80143ca:	89ab      	ldrh	r3, [r5, #12]
 80143cc:	071b      	lsls	r3, r3, #28
 80143ce:	d501      	bpl.n	80143d4 <_vfiprintf_r+0x3c>
 80143d0:	692b      	ldr	r3, [r5, #16]
 80143d2:	b9eb      	cbnz	r3, 8014410 <_vfiprintf_r+0x78>
 80143d4:	4629      	mov	r1, r5
 80143d6:	4630      	mov	r0, r6
 80143d8:	f7fd fc96 	bl	8011d08 <__swsetup_r>
 80143dc:	b1c0      	cbz	r0, 8014410 <_vfiprintf_r+0x78>
 80143de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143e0:	07dc      	lsls	r4, r3, #31
 80143e2:	d50e      	bpl.n	8014402 <_vfiprintf_r+0x6a>
 80143e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80143e8:	b01d      	add	sp, #116	; 0x74
 80143ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ee:	4b7b      	ldr	r3, [pc, #492]	; (80145dc <_vfiprintf_r+0x244>)
 80143f0:	429d      	cmp	r5, r3
 80143f2:	d101      	bne.n	80143f8 <_vfiprintf_r+0x60>
 80143f4:	68b5      	ldr	r5, [r6, #8]
 80143f6:	e7df      	b.n	80143b8 <_vfiprintf_r+0x20>
 80143f8:	4b79      	ldr	r3, [pc, #484]	; (80145e0 <_vfiprintf_r+0x248>)
 80143fa:	429d      	cmp	r5, r3
 80143fc:	bf08      	it	eq
 80143fe:	68f5      	ldreq	r5, [r6, #12]
 8014400:	e7da      	b.n	80143b8 <_vfiprintf_r+0x20>
 8014402:	89ab      	ldrh	r3, [r5, #12]
 8014404:	0598      	lsls	r0, r3, #22
 8014406:	d4ed      	bmi.n	80143e4 <_vfiprintf_r+0x4c>
 8014408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801440a:	f7ff f8f2 	bl	80135f2 <__retarget_lock_release_recursive>
 801440e:	e7e9      	b.n	80143e4 <_vfiprintf_r+0x4c>
 8014410:	2300      	movs	r3, #0
 8014412:	9309      	str	r3, [sp, #36]	; 0x24
 8014414:	2320      	movs	r3, #32
 8014416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801441a:	f8cd 800c 	str.w	r8, [sp, #12]
 801441e:	2330      	movs	r3, #48	; 0x30
 8014420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80145e4 <_vfiprintf_r+0x24c>
 8014424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014428:	f04f 0901 	mov.w	r9, #1
 801442c:	4623      	mov	r3, r4
 801442e:	469a      	mov	sl, r3
 8014430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014434:	b10a      	cbz	r2, 801443a <_vfiprintf_r+0xa2>
 8014436:	2a25      	cmp	r2, #37	; 0x25
 8014438:	d1f9      	bne.n	801442e <_vfiprintf_r+0x96>
 801443a:	ebba 0b04 	subs.w	fp, sl, r4
 801443e:	d00b      	beq.n	8014458 <_vfiprintf_r+0xc0>
 8014440:	465b      	mov	r3, fp
 8014442:	4622      	mov	r2, r4
 8014444:	4629      	mov	r1, r5
 8014446:	4630      	mov	r0, r6
 8014448:	f7ff ff93 	bl	8014372 <__sfputs_r>
 801444c:	3001      	adds	r0, #1
 801444e:	f000 80aa 	beq.w	80145a6 <_vfiprintf_r+0x20e>
 8014452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014454:	445a      	add	r2, fp
 8014456:	9209      	str	r2, [sp, #36]	; 0x24
 8014458:	f89a 3000 	ldrb.w	r3, [sl]
 801445c:	2b00      	cmp	r3, #0
 801445e:	f000 80a2 	beq.w	80145a6 <_vfiprintf_r+0x20e>
 8014462:	2300      	movs	r3, #0
 8014464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801446c:	f10a 0a01 	add.w	sl, sl, #1
 8014470:	9304      	str	r3, [sp, #16]
 8014472:	9307      	str	r3, [sp, #28]
 8014474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014478:	931a      	str	r3, [sp, #104]	; 0x68
 801447a:	4654      	mov	r4, sl
 801447c:	2205      	movs	r2, #5
 801447e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014482:	4858      	ldr	r0, [pc, #352]	; (80145e4 <_vfiprintf_r+0x24c>)
 8014484:	f7eb febc 	bl	8000200 <memchr>
 8014488:	9a04      	ldr	r2, [sp, #16]
 801448a:	b9d8      	cbnz	r0, 80144c4 <_vfiprintf_r+0x12c>
 801448c:	06d1      	lsls	r1, r2, #27
 801448e:	bf44      	itt	mi
 8014490:	2320      	movmi	r3, #32
 8014492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014496:	0713      	lsls	r3, r2, #28
 8014498:	bf44      	itt	mi
 801449a:	232b      	movmi	r3, #43	; 0x2b
 801449c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144a0:	f89a 3000 	ldrb.w	r3, [sl]
 80144a4:	2b2a      	cmp	r3, #42	; 0x2a
 80144a6:	d015      	beq.n	80144d4 <_vfiprintf_r+0x13c>
 80144a8:	9a07      	ldr	r2, [sp, #28]
 80144aa:	4654      	mov	r4, sl
 80144ac:	2000      	movs	r0, #0
 80144ae:	f04f 0c0a 	mov.w	ip, #10
 80144b2:	4621      	mov	r1, r4
 80144b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144b8:	3b30      	subs	r3, #48	; 0x30
 80144ba:	2b09      	cmp	r3, #9
 80144bc:	d94e      	bls.n	801455c <_vfiprintf_r+0x1c4>
 80144be:	b1b0      	cbz	r0, 80144ee <_vfiprintf_r+0x156>
 80144c0:	9207      	str	r2, [sp, #28]
 80144c2:	e014      	b.n	80144ee <_vfiprintf_r+0x156>
 80144c4:	eba0 0308 	sub.w	r3, r0, r8
 80144c8:	fa09 f303 	lsl.w	r3, r9, r3
 80144cc:	4313      	orrs	r3, r2
 80144ce:	9304      	str	r3, [sp, #16]
 80144d0:	46a2      	mov	sl, r4
 80144d2:	e7d2      	b.n	801447a <_vfiprintf_r+0xe2>
 80144d4:	9b03      	ldr	r3, [sp, #12]
 80144d6:	1d19      	adds	r1, r3, #4
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	9103      	str	r1, [sp, #12]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	bfbb      	ittet	lt
 80144e0:	425b      	neglt	r3, r3
 80144e2:	f042 0202 	orrlt.w	r2, r2, #2
 80144e6:	9307      	strge	r3, [sp, #28]
 80144e8:	9307      	strlt	r3, [sp, #28]
 80144ea:	bfb8      	it	lt
 80144ec:	9204      	strlt	r2, [sp, #16]
 80144ee:	7823      	ldrb	r3, [r4, #0]
 80144f0:	2b2e      	cmp	r3, #46	; 0x2e
 80144f2:	d10c      	bne.n	801450e <_vfiprintf_r+0x176>
 80144f4:	7863      	ldrb	r3, [r4, #1]
 80144f6:	2b2a      	cmp	r3, #42	; 0x2a
 80144f8:	d135      	bne.n	8014566 <_vfiprintf_r+0x1ce>
 80144fa:	9b03      	ldr	r3, [sp, #12]
 80144fc:	1d1a      	adds	r2, r3, #4
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	9203      	str	r2, [sp, #12]
 8014502:	2b00      	cmp	r3, #0
 8014504:	bfb8      	it	lt
 8014506:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801450a:	3402      	adds	r4, #2
 801450c:	9305      	str	r3, [sp, #20]
 801450e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80145f4 <_vfiprintf_r+0x25c>
 8014512:	7821      	ldrb	r1, [r4, #0]
 8014514:	2203      	movs	r2, #3
 8014516:	4650      	mov	r0, sl
 8014518:	f7eb fe72 	bl	8000200 <memchr>
 801451c:	b140      	cbz	r0, 8014530 <_vfiprintf_r+0x198>
 801451e:	2340      	movs	r3, #64	; 0x40
 8014520:	eba0 000a 	sub.w	r0, r0, sl
 8014524:	fa03 f000 	lsl.w	r0, r3, r0
 8014528:	9b04      	ldr	r3, [sp, #16]
 801452a:	4303      	orrs	r3, r0
 801452c:	3401      	adds	r4, #1
 801452e:	9304      	str	r3, [sp, #16]
 8014530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014534:	482c      	ldr	r0, [pc, #176]	; (80145e8 <_vfiprintf_r+0x250>)
 8014536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801453a:	2206      	movs	r2, #6
 801453c:	f7eb fe60 	bl	8000200 <memchr>
 8014540:	2800      	cmp	r0, #0
 8014542:	d03f      	beq.n	80145c4 <_vfiprintf_r+0x22c>
 8014544:	4b29      	ldr	r3, [pc, #164]	; (80145ec <_vfiprintf_r+0x254>)
 8014546:	bb1b      	cbnz	r3, 8014590 <_vfiprintf_r+0x1f8>
 8014548:	9b03      	ldr	r3, [sp, #12]
 801454a:	3307      	adds	r3, #7
 801454c:	f023 0307 	bic.w	r3, r3, #7
 8014550:	3308      	adds	r3, #8
 8014552:	9303      	str	r3, [sp, #12]
 8014554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014556:	443b      	add	r3, r7
 8014558:	9309      	str	r3, [sp, #36]	; 0x24
 801455a:	e767      	b.n	801442c <_vfiprintf_r+0x94>
 801455c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014560:	460c      	mov	r4, r1
 8014562:	2001      	movs	r0, #1
 8014564:	e7a5      	b.n	80144b2 <_vfiprintf_r+0x11a>
 8014566:	2300      	movs	r3, #0
 8014568:	3401      	adds	r4, #1
 801456a:	9305      	str	r3, [sp, #20]
 801456c:	4619      	mov	r1, r3
 801456e:	f04f 0c0a 	mov.w	ip, #10
 8014572:	4620      	mov	r0, r4
 8014574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014578:	3a30      	subs	r2, #48	; 0x30
 801457a:	2a09      	cmp	r2, #9
 801457c:	d903      	bls.n	8014586 <_vfiprintf_r+0x1ee>
 801457e:	2b00      	cmp	r3, #0
 8014580:	d0c5      	beq.n	801450e <_vfiprintf_r+0x176>
 8014582:	9105      	str	r1, [sp, #20]
 8014584:	e7c3      	b.n	801450e <_vfiprintf_r+0x176>
 8014586:	fb0c 2101 	mla	r1, ip, r1, r2
 801458a:	4604      	mov	r4, r0
 801458c:	2301      	movs	r3, #1
 801458e:	e7f0      	b.n	8014572 <_vfiprintf_r+0x1da>
 8014590:	ab03      	add	r3, sp, #12
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	462a      	mov	r2, r5
 8014596:	4b16      	ldr	r3, [pc, #88]	; (80145f0 <_vfiprintf_r+0x258>)
 8014598:	a904      	add	r1, sp, #16
 801459a:	4630      	mov	r0, r6
 801459c:	f7fb fdce 	bl	801013c <_printf_float>
 80145a0:	4607      	mov	r7, r0
 80145a2:	1c78      	adds	r0, r7, #1
 80145a4:	d1d6      	bne.n	8014554 <_vfiprintf_r+0x1bc>
 80145a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145a8:	07d9      	lsls	r1, r3, #31
 80145aa:	d405      	bmi.n	80145b8 <_vfiprintf_r+0x220>
 80145ac:	89ab      	ldrh	r3, [r5, #12]
 80145ae:	059a      	lsls	r2, r3, #22
 80145b0:	d402      	bmi.n	80145b8 <_vfiprintf_r+0x220>
 80145b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145b4:	f7ff f81d 	bl	80135f2 <__retarget_lock_release_recursive>
 80145b8:	89ab      	ldrh	r3, [r5, #12]
 80145ba:	065b      	lsls	r3, r3, #25
 80145bc:	f53f af12 	bmi.w	80143e4 <_vfiprintf_r+0x4c>
 80145c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145c2:	e711      	b.n	80143e8 <_vfiprintf_r+0x50>
 80145c4:	ab03      	add	r3, sp, #12
 80145c6:	9300      	str	r3, [sp, #0]
 80145c8:	462a      	mov	r2, r5
 80145ca:	4b09      	ldr	r3, [pc, #36]	; (80145f0 <_vfiprintf_r+0x258>)
 80145cc:	a904      	add	r1, sp, #16
 80145ce:	4630      	mov	r0, r6
 80145d0:	f7fc f858 	bl	8010684 <_printf_i>
 80145d4:	e7e4      	b.n	80145a0 <_vfiprintf_r+0x208>
 80145d6:	bf00      	nop
 80145d8:	080151c8 	.word	0x080151c8
 80145dc:	080151e8 	.word	0x080151e8
 80145e0:	080151a8 	.word	0x080151a8
 80145e4:	080153e4 	.word	0x080153e4
 80145e8:	080153ee 	.word	0x080153ee
 80145ec:	0801013d 	.word	0x0801013d
 80145f0:	08014373 	.word	0x08014373
 80145f4:	080153ea 	.word	0x080153ea

080145f8 <nan>:
 80145f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014600 <nan+0x8>
 80145fc:	4770      	bx	lr
 80145fe:	bf00      	nop
 8014600:	00000000 	.word	0x00000000
 8014604:	7ff80000 	.word	0x7ff80000

08014608 <__sread>:
 8014608:	b510      	push	{r4, lr}
 801460a:	460c      	mov	r4, r1
 801460c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014610:	f000 f922 	bl	8014858 <_read_r>
 8014614:	2800      	cmp	r0, #0
 8014616:	bfab      	itete	ge
 8014618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801461a:	89a3      	ldrhlt	r3, [r4, #12]
 801461c:	181b      	addge	r3, r3, r0
 801461e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014622:	bfac      	ite	ge
 8014624:	6563      	strge	r3, [r4, #84]	; 0x54
 8014626:	81a3      	strhlt	r3, [r4, #12]
 8014628:	bd10      	pop	{r4, pc}

0801462a <__swrite>:
 801462a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801462e:	461f      	mov	r7, r3
 8014630:	898b      	ldrh	r3, [r1, #12]
 8014632:	05db      	lsls	r3, r3, #23
 8014634:	4605      	mov	r5, r0
 8014636:	460c      	mov	r4, r1
 8014638:	4616      	mov	r6, r2
 801463a:	d505      	bpl.n	8014648 <__swrite+0x1e>
 801463c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014640:	2302      	movs	r3, #2
 8014642:	2200      	movs	r2, #0
 8014644:	f000 f8b6 	bl	80147b4 <_lseek_r>
 8014648:	89a3      	ldrh	r3, [r4, #12]
 801464a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801464e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014652:	81a3      	strh	r3, [r4, #12]
 8014654:	4632      	mov	r2, r6
 8014656:	463b      	mov	r3, r7
 8014658:	4628      	mov	r0, r5
 801465a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801465e:	f000 b835 	b.w	80146cc <_write_r>

08014662 <__sseek>:
 8014662:	b510      	push	{r4, lr}
 8014664:	460c      	mov	r4, r1
 8014666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801466a:	f000 f8a3 	bl	80147b4 <_lseek_r>
 801466e:	1c43      	adds	r3, r0, #1
 8014670:	89a3      	ldrh	r3, [r4, #12]
 8014672:	bf15      	itete	ne
 8014674:	6560      	strne	r0, [r4, #84]	; 0x54
 8014676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801467a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801467e:	81a3      	strheq	r3, [r4, #12]
 8014680:	bf18      	it	ne
 8014682:	81a3      	strhne	r3, [r4, #12]
 8014684:	bd10      	pop	{r4, pc}

08014686 <__sclose>:
 8014686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801468a:	f000 b84f 	b.w	801472c <_close_r>

0801468e <strncmp>:
 801468e:	b510      	push	{r4, lr}
 8014690:	b16a      	cbz	r2, 80146ae <strncmp+0x20>
 8014692:	3901      	subs	r1, #1
 8014694:	1884      	adds	r4, r0, r2
 8014696:	f810 3b01 	ldrb.w	r3, [r0], #1
 801469a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801469e:	4293      	cmp	r3, r2
 80146a0:	d103      	bne.n	80146aa <strncmp+0x1c>
 80146a2:	42a0      	cmp	r0, r4
 80146a4:	d001      	beq.n	80146aa <strncmp+0x1c>
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d1f5      	bne.n	8014696 <strncmp+0x8>
 80146aa:	1a98      	subs	r0, r3, r2
 80146ac:	bd10      	pop	{r4, pc}
 80146ae:	4610      	mov	r0, r2
 80146b0:	e7fc      	b.n	80146ac <strncmp+0x1e>

080146b2 <__ascii_wctomb>:
 80146b2:	b149      	cbz	r1, 80146c8 <__ascii_wctomb+0x16>
 80146b4:	2aff      	cmp	r2, #255	; 0xff
 80146b6:	bf85      	ittet	hi
 80146b8:	238a      	movhi	r3, #138	; 0x8a
 80146ba:	6003      	strhi	r3, [r0, #0]
 80146bc:	700a      	strbls	r2, [r1, #0]
 80146be:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80146c2:	bf98      	it	ls
 80146c4:	2001      	movls	r0, #1
 80146c6:	4770      	bx	lr
 80146c8:	4608      	mov	r0, r1
 80146ca:	4770      	bx	lr

080146cc <_write_r>:
 80146cc:	b538      	push	{r3, r4, r5, lr}
 80146ce:	4d07      	ldr	r5, [pc, #28]	; (80146ec <_write_r+0x20>)
 80146d0:	4604      	mov	r4, r0
 80146d2:	4608      	mov	r0, r1
 80146d4:	4611      	mov	r1, r2
 80146d6:	2200      	movs	r2, #0
 80146d8:	602a      	str	r2, [r5, #0]
 80146da:	461a      	mov	r2, r3
 80146dc:	f7ed fcbe 	bl	800205c <_write>
 80146e0:	1c43      	adds	r3, r0, #1
 80146e2:	d102      	bne.n	80146ea <_write_r+0x1e>
 80146e4:	682b      	ldr	r3, [r5, #0]
 80146e6:	b103      	cbz	r3, 80146ea <_write_r+0x1e>
 80146e8:	6023      	str	r3, [r4, #0]
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	20006434 	.word	0x20006434

080146f0 <__assert_func>:
 80146f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146f2:	4614      	mov	r4, r2
 80146f4:	461a      	mov	r2, r3
 80146f6:	4b09      	ldr	r3, [pc, #36]	; (801471c <__assert_func+0x2c>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4605      	mov	r5, r0
 80146fc:	68d8      	ldr	r0, [r3, #12]
 80146fe:	b14c      	cbz	r4, 8014714 <__assert_func+0x24>
 8014700:	4b07      	ldr	r3, [pc, #28]	; (8014720 <__assert_func+0x30>)
 8014702:	9100      	str	r1, [sp, #0]
 8014704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014708:	4906      	ldr	r1, [pc, #24]	; (8014724 <__assert_func+0x34>)
 801470a:	462b      	mov	r3, r5
 801470c:	f000 f81e 	bl	801474c <fiprintf>
 8014710:	f7fb fb6c 	bl	800fdec <abort>
 8014714:	4b04      	ldr	r3, [pc, #16]	; (8014728 <__assert_func+0x38>)
 8014716:	461c      	mov	r4, r3
 8014718:	e7f3      	b.n	8014702 <__assert_func+0x12>
 801471a:	bf00      	nop
 801471c:	20000188 	.word	0x20000188
 8014720:	080153f5 	.word	0x080153f5
 8014724:	08015402 	.word	0x08015402
 8014728:	08015430 	.word	0x08015430

0801472c <_close_r>:
 801472c:	b538      	push	{r3, r4, r5, lr}
 801472e:	4d06      	ldr	r5, [pc, #24]	; (8014748 <_close_r+0x1c>)
 8014730:	2300      	movs	r3, #0
 8014732:	4604      	mov	r4, r0
 8014734:	4608      	mov	r0, r1
 8014736:	602b      	str	r3, [r5, #0]
 8014738:	f7ee faaf 	bl	8002c9a <_close>
 801473c:	1c43      	adds	r3, r0, #1
 801473e:	d102      	bne.n	8014746 <_close_r+0x1a>
 8014740:	682b      	ldr	r3, [r5, #0]
 8014742:	b103      	cbz	r3, 8014746 <_close_r+0x1a>
 8014744:	6023      	str	r3, [r4, #0]
 8014746:	bd38      	pop	{r3, r4, r5, pc}
 8014748:	20006434 	.word	0x20006434

0801474c <fiprintf>:
 801474c:	b40e      	push	{r1, r2, r3}
 801474e:	b503      	push	{r0, r1, lr}
 8014750:	4601      	mov	r1, r0
 8014752:	ab03      	add	r3, sp, #12
 8014754:	4805      	ldr	r0, [pc, #20]	; (801476c <fiprintf+0x20>)
 8014756:	f853 2b04 	ldr.w	r2, [r3], #4
 801475a:	6800      	ldr	r0, [r0, #0]
 801475c:	9301      	str	r3, [sp, #4]
 801475e:	f7ff fe1b 	bl	8014398 <_vfiprintf_r>
 8014762:	b002      	add	sp, #8
 8014764:	f85d eb04 	ldr.w	lr, [sp], #4
 8014768:	b003      	add	sp, #12
 801476a:	4770      	bx	lr
 801476c:	20000188 	.word	0x20000188

08014770 <_fstat_r>:
 8014770:	b538      	push	{r3, r4, r5, lr}
 8014772:	4d07      	ldr	r5, [pc, #28]	; (8014790 <_fstat_r+0x20>)
 8014774:	2300      	movs	r3, #0
 8014776:	4604      	mov	r4, r0
 8014778:	4608      	mov	r0, r1
 801477a:	4611      	mov	r1, r2
 801477c:	602b      	str	r3, [r5, #0]
 801477e:	f7ee fa98 	bl	8002cb2 <_fstat>
 8014782:	1c43      	adds	r3, r0, #1
 8014784:	d102      	bne.n	801478c <_fstat_r+0x1c>
 8014786:	682b      	ldr	r3, [r5, #0]
 8014788:	b103      	cbz	r3, 801478c <_fstat_r+0x1c>
 801478a:	6023      	str	r3, [r4, #0]
 801478c:	bd38      	pop	{r3, r4, r5, pc}
 801478e:	bf00      	nop
 8014790:	20006434 	.word	0x20006434

08014794 <_isatty_r>:
 8014794:	b538      	push	{r3, r4, r5, lr}
 8014796:	4d06      	ldr	r5, [pc, #24]	; (80147b0 <_isatty_r+0x1c>)
 8014798:	2300      	movs	r3, #0
 801479a:	4604      	mov	r4, r0
 801479c:	4608      	mov	r0, r1
 801479e:	602b      	str	r3, [r5, #0]
 80147a0:	f7ee fa97 	bl	8002cd2 <_isatty>
 80147a4:	1c43      	adds	r3, r0, #1
 80147a6:	d102      	bne.n	80147ae <_isatty_r+0x1a>
 80147a8:	682b      	ldr	r3, [r5, #0]
 80147aa:	b103      	cbz	r3, 80147ae <_isatty_r+0x1a>
 80147ac:	6023      	str	r3, [r4, #0]
 80147ae:	bd38      	pop	{r3, r4, r5, pc}
 80147b0:	20006434 	.word	0x20006434

080147b4 <_lseek_r>:
 80147b4:	b538      	push	{r3, r4, r5, lr}
 80147b6:	4d07      	ldr	r5, [pc, #28]	; (80147d4 <_lseek_r+0x20>)
 80147b8:	4604      	mov	r4, r0
 80147ba:	4608      	mov	r0, r1
 80147bc:	4611      	mov	r1, r2
 80147be:	2200      	movs	r2, #0
 80147c0:	602a      	str	r2, [r5, #0]
 80147c2:	461a      	mov	r2, r3
 80147c4:	f7ee fa90 	bl	8002ce8 <_lseek>
 80147c8:	1c43      	adds	r3, r0, #1
 80147ca:	d102      	bne.n	80147d2 <_lseek_r+0x1e>
 80147cc:	682b      	ldr	r3, [r5, #0]
 80147ce:	b103      	cbz	r3, 80147d2 <_lseek_r+0x1e>
 80147d0:	6023      	str	r3, [r4, #0]
 80147d2:	bd38      	pop	{r3, r4, r5, pc}
 80147d4:	20006434 	.word	0x20006434

080147d8 <memmove>:
 80147d8:	4288      	cmp	r0, r1
 80147da:	b510      	push	{r4, lr}
 80147dc:	eb01 0402 	add.w	r4, r1, r2
 80147e0:	d902      	bls.n	80147e8 <memmove+0x10>
 80147e2:	4284      	cmp	r4, r0
 80147e4:	4623      	mov	r3, r4
 80147e6:	d807      	bhi.n	80147f8 <memmove+0x20>
 80147e8:	1e43      	subs	r3, r0, #1
 80147ea:	42a1      	cmp	r1, r4
 80147ec:	d008      	beq.n	8014800 <memmove+0x28>
 80147ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80147f6:	e7f8      	b.n	80147ea <memmove+0x12>
 80147f8:	4402      	add	r2, r0
 80147fa:	4601      	mov	r1, r0
 80147fc:	428a      	cmp	r2, r1
 80147fe:	d100      	bne.n	8014802 <memmove+0x2a>
 8014800:	bd10      	pop	{r4, pc}
 8014802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801480a:	e7f7      	b.n	80147fc <memmove+0x24>

0801480c <_realloc_r>:
 801480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801480e:	4607      	mov	r7, r0
 8014810:	4614      	mov	r4, r2
 8014812:	460e      	mov	r6, r1
 8014814:	b921      	cbnz	r1, 8014820 <_realloc_r+0x14>
 8014816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801481a:	4611      	mov	r1, r2
 801481c:	f7fb bb94 	b.w	800ff48 <_malloc_r>
 8014820:	b922      	cbnz	r2, 801482c <_realloc_r+0x20>
 8014822:	f7fb fb41 	bl	800fea8 <_free_r>
 8014826:	4625      	mov	r5, r4
 8014828:	4628      	mov	r0, r5
 801482a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801482c:	f000 f826 	bl	801487c <_malloc_usable_size_r>
 8014830:	42a0      	cmp	r0, r4
 8014832:	d20f      	bcs.n	8014854 <_realloc_r+0x48>
 8014834:	4621      	mov	r1, r4
 8014836:	4638      	mov	r0, r7
 8014838:	f7fb fb86 	bl	800ff48 <_malloc_r>
 801483c:	4605      	mov	r5, r0
 801483e:	2800      	cmp	r0, #0
 8014840:	d0f2      	beq.n	8014828 <_realloc_r+0x1c>
 8014842:	4631      	mov	r1, r6
 8014844:	4622      	mov	r2, r4
 8014846:	f7fb fb19 	bl	800fe7c <memcpy>
 801484a:	4631      	mov	r1, r6
 801484c:	4638      	mov	r0, r7
 801484e:	f7fb fb2b 	bl	800fea8 <_free_r>
 8014852:	e7e9      	b.n	8014828 <_realloc_r+0x1c>
 8014854:	4635      	mov	r5, r6
 8014856:	e7e7      	b.n	8014828 <_realloc_r+0x1c>

08014858 <_read_r>:
 8014858:	b538      	push	{r3, r4, r5, lr}
 801485a:	4d07      	ldr	r5, [pc, #28]	; (8014878 <_read_r+0x20>)
 801485c:	4604      	mov	r4, r0
 801485e:	4608      	mov	r0, r1
 8014860:	4611      	mov	r1, r2
 8014862:	2200      	movs	r2, #0
 8014864:	602a      	str	r2, [r5, #0]
 8014866:	461a      	mov	r2, r3
 8014868:	f7ee f9fa 	bl	8002c60 <_read>
 801486c:	1c43      	adds	r3, r0, #1
 801486e:	d102      	bne.n	8014876 <_read_r+0x1e>
 8014870:	682b      	ldr	r3, [r5, #0]
 8014872:	b103      	cbz	r3, 8014876 <_read_r+0x1e>
 8014874:	6023      	str	r3, [r4, #0]
 8014876:	bd38      	pop	{r3, r4, r5, pc}
 8014878:	20006434 	.word	0x20006434

0801487c <_malloc_usable_size_r>:
 801487c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014880:	1f18      	subs	r0, r3, #4
 8014882:	2b00      	cmp	r3, #0
 8014884:	bfbc      	itt	lt
 8014886:	580b      	ldrlt	r3, [r1, r0]
 8014888:	18c0      	addlt	r0, r0, r3
 801488a:	4770      	bx	lr

0801488c <_init>:
 801488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801488e:	bf00      	nop
 8014890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014892:	bc08      	pop	{r3}
 8014894:	469e      	mov	lr, r3
 8014896:	4770      	bx	lr

08014898 <_fini>:
 8014898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801489a:	bf00      	nop
 801489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801489e:	bc08      	pop	{r3}
 80148a0:	469e      	mov	lr, r3
 80148a2:	4770      	bx	lr
